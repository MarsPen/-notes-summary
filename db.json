{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/Acss.jpg","path":"images/Acss.jpg","modified":1,"renderable":0},{"_id":"source/images/Function.png","path":"images/Function.png","modified":1,"renderable":0},{"_id":"source/images/Object.png","path":"images/Object.png","modified":1,"renderable":0},{"_id":"source/images/Person.png","path":"images/Person.png","modified":1,"renderable":0},{"_id":"source/images/ack.png","path":"images/ack.png","modified":1,"renderable":0},{"_id":"source/images/commonjs.png","path":"images/commonjs.png","modified":1,"renderable":0},{"_id":"source/images/css-IFC.jpg","path":"images/css-IFC.jpg","modified":1,"renderable":0},{"_id":"source/images/css盒子模型.png","path":"images/css盒子模型.png","modified":1,"renderable":0},{"_id":"source/images/http.png","path":"images/http.png","modified":1,"renderable":0},{"_id":"source/images/http代理.png","path":"images/http代理.png","modified":1,"renderable":0},{"_id":"source/images/ipc-create.png","path":"images/ipc-create.png","modified":1,"renderable":0},{"_id":"source/images/ipc.png","path":"images/ipc.png","modified":1,"renderable":0},{"_id":"source/images/javaScript.png","path":"images/javaScript.png","modified":1,"renderable":0},{"_id":"source/images/javascript-stack.png","path":"images/javascript-stack.png","modified":1,"renderable":0},{"_id":"source/images/javascript-stack1.png","path":"images/javascript-stack1.png","modified":1,"renderable":0},{"_id":"source/images/linux.png","path":"images/linux.png","modified":1,"renderable":0},{"_id":"source/images/master-worker.png","path":"images/master-worker.png","modified":1,"renderable":0},{"_id":"source/images/module-p.png","path":"images/module-p.png","modified":1,"renderable":0},{"_id":"source/images/module-os.png","path":"images/module-os.png","modified":1,"renderable":0},{"_id":"source/images/module.png","path":"images/module.png","modified":1,"renderable":0},{"_id":"source/images/node.png","path":"images/node.png","modified":1,"renderable":0},{"_id":"source/images/php.png","path":"images/php.png","modified":1,"renderable":0},{"_id":"source/images/process-on.png","path":"images/process-on.png","modified":1,"renderable":0},{"_id":"source/images/process-send.png","path":"images/process-send.png","modified":1,"renderable":0},{"_id":"source/images/prototype.png","path":"images/prototype.png","modified":1,"renderable":0},{"_id":"source/images/render-module.jpg","path":"images/render-module.jpg","modified":1,"renderable":0},{"_id":"source/images/request.png","path":"images/request.png","modified":1,"renderable":0},{"_id":"source/images/tcp.png","path":"images/tcp.png","modified":1,"renderable":0},{"_id":"source/images/ts-lang.png","path":"images/ts-lang.png","modified":1,"renderable":0},{"_id":"source/images/typeScript.png","path":"images/typeScript.png","modified":1,"renderable":0},{"_id":"source/images/vue-core-index.png","path":"images/vue-core-index.png","modified":1,"renderable":0},{"_id":"source/images/vue-folder.png","path":"images/vue-folder.png","modified":1,"renderable":0},{"_id":"source/images/vue-init.png","path":"images/vue-init.png","modified":1,"renderable":0},{"_id":"source/images/vue-process.png","path":"images/vue-process.png","modified":1,"renderable":0},{"_id":"source/images/websocket.png","path":"images/websocket.png","modified":1,"renderable":0},{"_id":"source/images/event.png","path":"images/event.png","modified":1,"renderable":0},{"_id":"source/images/html.png","path":"images/html.png","modified":1,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"source/images/TypeScript 编译原理.png","path":"images/TypeScript 编译原理.png","modified":1,"renderable":0},{"_id":"source/images/css-dom-render.jpg","path":"images/css-dom-render.jpg","modified":1,"renderable":0},{"_id":"source/images/event-loop.png","path":"images/event-loop.png","modified":1,"renderable":0},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"source/images/dom-render.jpg","path":"images/dom-render.jpg","modified":1,"renderable":0},{"_id":"source/images/render-process.jpg","path":"images/render-process.jpg","modified":1,"renderable":0},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"source/images/render-tree.jpg","path":"images/render-tree.jpg","modified":1,"renderable":0},{"_id":"source/images/自适应两栏布局.gif","path":"images/自适应两栏布局.gif","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"source/images/timestamp-diagram.svg","path":"images/timestamp-diagram.svg","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/30.jpg","path":"medias/featureimages/30.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/31.jpg","path":"medias/featureimages/31.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"source/images/圣杯布局.gif","path":"images/圣杯布局.gif","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/zhaolei.jpg","path":"medias/music/avatars/zhaolei.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/maliang.jpg","path":"medias/music/avatars/maliang.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/29.jpg","path":"medias/featureimages/29.jpg","modified":1,"renderable":1},{"_id":"source/images/CSS.png","path":"images/CSS.png","modified":1,"renderable":0},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/chenhouyu.jpg","path":"medias/music/avatars/chenhouyu.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/laofan.jpg","path":"medias/music/avatars/laofan.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/33.jpg","path":"medias/featureimages/33.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/35.jpg","path":"medias/featureimages/35.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/34.jpg","path":"medias/featureimages/34.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/32.jpg","path":"medias/featureimages/32.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/wanghouyusheng.mp3","path":"medias/music/wanghouyusheng.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/lixiangsanxun.mp3","path":"medias/music/lixiangsanxun.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/hua.mp3","path":"medias/music/hua.mp3","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/music/yongbaoni.mp3","path":"medias/music/yongbaoni.mp3","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6688f9bd227830cdf302925f4b88336d22039185","modified":1567569400474},{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1566837987862},{"_id":"source/CNAME","hash":"181c262cf92b1ff30ea9cdaaaefe2648b4b3f1c0","modified":1567006616355},{"_id":"themes/matery/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1566838036433},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1566837987911},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1566837987911},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1566837987912},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1566837987912},{"_id":"themes/matery/_config.yml","hash":"9965c72fcd09cb7d8eafceff3b149cd8f9ecc507","modified":1566995993407},{"_id":"source/_data/musics.json","hash":"8cd9ef3dc7c984f82de962b2366e1ed9853b44c8","modified":1566837987862},{"_id":"source/about/index.md","hash":"4cce428e0a8e97e1075d2f03ea689300c049f81e","modified":1566837987880},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1566837987880},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1566837987880},{"_id":"source/friends/index.md","hash":"08915bb7b924ffb123c64b76d43b93c4bdea9d58","modified":1566837987880},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1566837987911},{"_id":"source/images/Acss.jpg","hash":"24c93cda375ca4bf9d02d7bd56bf47ed22d48594","modified":1566837987881},{"_id":"source/images/Function.png","hash":"7b96f8e301445b0b84fe87dda3171165005499c1","modified":1566837987885},{"_id":"source/images/Object.png","hash":"f9bdf44c968effbe90a1f911581403129569f263","modified":1566837987885},{"_id":"source/images/Person.png","hash":"bd1b0c5ef77f699d05d624eeacb370b92b87e663","modified":1566837987886},{"_id":"source/images/ack.png","hash":"1e9740c51931e3049de55034b09350673588335a","modified":1566837987887},{"_id":"source/images/commonjs.png","hash":"7ff09d53c1ca8d8ad446baa75a6312e6a8c20e4b","modified":1566837987887},{"_id":"source/images/css-IFC.jpg","hash":"c7fb8f083d6e4e0caf37f609add2bcaed350ec94","modified":1566837987888},{"_id":"source/images/css盒子模型.png","hash":"bf2bb7b9d57756a3c17d1e3489d16f13587a68b4","modified":1566837987890},{"_id":"source/images/http.png","hash":"b480d1f688799f35883518ef3f1351bc771095fd","modified":1566837987894},{"_id":"source/images/http代理.png","hash":"1449a4e05af7a7903d47ff550f5bd3b842d0bb03","modified":1566837987895},{"_id":"source/images/ipc-create.png","hash":"ff6ab7e391bfde80348ddb78cf44cba3414c53b0","modified":1566837987895},{"_id":"source/images/ipc.png","hash":"05e57f1b2769c3b824582179c1263c6aecac55da","modified":1566837987895},{"_id":"source/images/javaScript.png","hash":"0064f030325083e62c7ee86e6b26b5c629d73d8c","modified":1566837987896},{"_id":"source/images/javascript-stack.png","hash":"8b16e3377ca35b8a78cb0c9a39b89540e51467f9","modified":1566837987896},{"_id":"source/images/javascript-stack1.png","hash":"ffcf25a0a099b5c10f265c08c52752aaf76a35c0","modified":1566837987896},{"_id":"source/images/linux.png","hash":"a2b16695f6f5b517dbbdca8b3fe3f26f1db95250","modified":1566837987897},{"_id":"source/images/master-worker.png","hash":"58bf93ce185d2e91967ae1a90e81f5e89a896d7a","modified":1566837987897},{"_id":"source/images/module-p.png","hash":"e28e8705eb1357beec46a0557bf51c3d4094a6d9","modified":1566837987897},{"_id":"source/images/module-os.png","hash":"d9aa9a85e39cee0bffcd98274fbbcedda20ed146","modified":1566837987897},{"_id":"source/images/module.png","hash":"68164b02e188e29d29344aa687ea6e2e73cd9bc0","modified":1566837987898},{"_id":"source/images/node.png","hash":"a5e96c9b079b38069529417b88ae28a745284c11","modified":1566837987898},{"_id":"source/images/php.png","hash":"b9c9e7c9042be1daa66fec971ff89774c7962579","modified":1566837987898},{"_id":"source/images/process-on.png","hash":"d630c0f4b09b6a677b956376dc23bfc4f69e0149","modified":1566837987899},{"_id":"source/images/process-send.png","hash":"d79dbf894fe5c388a69fac3666c9f63920400e87","modified":1566837987899},{"_id":"source/images/prototype.png","hash":"5586538f0d2d9cfd12d173be694ba1a3803a304b","modified":1566837987900},{"_id":"source/images/render-module.jpg","hash":"64975e4502e09146eb8fa6decdf1cb9a18e2c442","modified":1566837987900},{"_id":"source/images/request.png","hash":"fd9be1b20518eadc3297f2de098a318a21e13a0f","modified":1566837987904},{"_id":"source/images/tcp.png","hash":"6a280c4905ee8656c6c76193b9595d822caacb08","modified":1566837987904},{"_id":"source/images/ts-lang.png","hash":"d74e4262805a053fb4a087295609153c26099d28","modified":1566837987906},{"_id":"source/images/typeScript.png","hash":"9500854a5014949a859627aeab4031ce04c17a54","modified":1566837987907},{"_id":"source/images/vue-core-index.png","hash":"23fcb56dd70c950fa00aeee266b500d0a7c725c4","modified":1567389447241},{"_id":"source/images/vue-folder.png","hash":"b25f5c35bfc74494791c5165e2b6a04a94455b3f","modified":1567215068081},{"_id":"source/images/vue-init.png","hash":"20917d3b1221f8189d8afe9c33ea5a2718e236c7","modified":1567412879359},{"_id":"source/images/vue-process.png","hash":"b8b645b04e854b2fa1435a32d3fab55e8d42fdc8","modified":1567569355299},{"_id":"source/images/websocket.png","hash":"dcb8ac2f57b208bdba0f23824f7a3ee275761d0d","modified":1566837987907},{"_id":"themes/matery/languages/default.yml","hash":"4be4158d800a5b1260b40c4d536d9fcf93faf82c","modified":1566837987913},{"_id":"themes/matery/languages/zh-CN.yml","hash":"8faa81effe45aea572a23dbaa39ba6cf6853845f","modified":1566837987913},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1566837987913},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1566837987922},{"_id":"themes/matery/layout/archive.ejs","hash":"3cb5125e8243e82e96f8ca2fc30d3ec30390447f","modified":1566837987922},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1566837987922},{"_id":"themes/matery/layout/category.ejs","hash":"41af886df5f0c3251e6ba810f43b9abbc900894b","modified":1566837987922},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1566837987923},{"_id":"themes/matery/layout/friends.ejs","hash":"b9b75ff45324da5b4ddbb6e16ea1ecd239dbc310","modified":1566837987923},{"_id":"themes/matery/layout/index.ejs","hash":"e920e19d370b6c218f89c86dc5baad4ff5b6f413","modified":1566837987923},{"_id":"themes/matery/layout/layout.ejs","hash":"f99d28f7c3382caf4321641f2d79582aac0b0c90","modified":1566837987923},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1566837987924},{"_id":"themes/matery/layout/tag.ejs","hash":"780e6b678ab9b81b5e1eee4193dd81101b52c545","modified":1566837987924},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1566837987924},{"_id":"themes/matery/source/.DS_Store","hash":"66e23877f685dfc4874c6d74d39896ad8f53a095","modified":1566838036431},{"_id":"source/images/event.png","hash":"f7bf62133be3c66694837bf62616b0474880f7eb","modified":1566837987893},{"_id":"source/images/html.png","hash":"95e9503f721a28aa6a1ab8496fea624ae180ac30","modified":1566837987894},{"_id":"themes/matery/source/favicon.png","hash":"b20bab8ce1f2f7426a6960a7f0fd7cc06a923381","modified":1566837987926},{"_id":"source/_posts/html/html.md","hash":"f7e43a827786f82cd91e9b6bcdea26380886098a","modified":1566837987864},{"_id":"source/_posts/css/base-concepts.md","hash":"81dea5c4a9f0ee60f42094b1ad23777905c961be","modified":1566837987863},{"_id":"source/_posts/css/base-layout.md","hash":"0df6f8a3d30c9fcbcc3893489fe5ef7250c9d841","modified":1566837987863},{"_id":"source/_posts/css/css-animation.md","hash":"4bef0c715a8816dfd4b31c95aaba1bfb9b3fd284","modified":1566837987863},{"_id":"source/_posts/css/css-layered.md","hash":"513c10d6ee245dc8c5425d118561a3ec611ea4d8","modified":1566837987863},{"_id":"source/_posts/css/css-preprocessor.md","hash":"890fb7cf34a2486b856758fe38f16b35de456d5b","modified":1566837987864},{"_id":"source/_posts/javascript/Generator-Async.md","hash":"226af144c35ec234dbe026eb96bd637f37fe3661","modified":1566837987865},{"_id":"source/_posts/javascript/api.md","hash":"6a9c8a2c61f7f7fd2f3716b9356801211e5bf9ed","modified":1566837987865},{"_id":"source/_posts/javascript/bind.md","hash":"ffe14efe0994a6d9e5794b985cc110c686e33527","modified":1566837987865},{"_id":"source/_posts/javascript/call.md","hash":"02fc69c6f2803034c4a3b9c9b1bb4b72aedbec7f","modified":1566837987866},{"_id":"source/_posts/javascript/closure.md","hash":"6d2b400c598ff4b95d9108408ebb61ca01814b7d","modified":1566837987866},{"_id":"source/_posts/javascript/debounce.md","hash":"861331b8def5a4a91d4c1f49e0f8f90de3c38d7c","modified":1566837987866},{"_id":"source/_posts/javascript/functionCurrying.md","hash":"0497affd65777e18479e96e874431a646cb926dc","modified":1566837987867},{"_id":"source/_posts/javascript/functionalBase.md","hash":"278638ae6d3cbe960181f81e62c8b80bd3838462","modified":1566837987867},{"_id":"source/_posts/javascript/functionalCombination.md","hash":"22bcf019fc3642db623acd3648ad9a14d5e5d034","modified":1566837987867},{"_id":"source/_posts/javascript/functionalPoint.md","hash":"4d2a5f0b5ee952b1ac99d7d29e1f347ff7d0990d","modified":1566837987868},{"_id":"source/_posts/javascript/functionalPurity.md","hash":"4cc57f37db7cd3208dc56187e0d5c0dcf4e39065","modified":1566837987868},{"_id":"source/_posts/javascript/inheritance.md","hash":"c862119eeb699c0a538fafaa64d2e2e57044c665","modified":1566837987868},{"_id":"source/_posts/javascript/new.md","hash":"fe06e3393b62079ca84bd0bab42fa376876a1e83","modified":1566837987868},{"_id":"source/_posts/javascript/promise.md","hash":"9d3f85a3dac08e39dafc67ca6b19608b3c775324","modified":1566837987869},{"_id":"source/_posts/javascript/prototype.md","hash":"0517d6048460dbcf3434274f4e8cf5f860b50505","modified":1566837987869},{"_id":"source/_posts/javascript/this.md","hash":"e77f61b6d239999a2c42ff2a7ce24b35c4c6c3df","modified":1566837987869},{"_id":"source/_posts/javascript/type.md","hash":"841280bac24add8d22745a396119ecbbf893bb3b","modified":1566837987870},{"_id":"source/_posts/javascript/voao.md","hash":"57ab0c3827e3397bfc07855ae11526e453c953fe","modified":1566837987870},{"_id":"source/_posts/linux/backup.md","hash":"06f0ac257e7502fc6bcedec6b59fb9fca54fddf0","modified":1566837987870},{"_id":"source/_posts/linux/compression.md","hash":"f3cc54c27b5493556836e76967e095f899cc30a3","modified":1566837987870},{"_id":"source/_posts/linux/fileauth.md","hash":"799b96fd32e6109657cda66d27df939cb59a5af2","modified":1566837987871},{"_id":"source/_posts/linux/git.md","hash":"bfb52785c7a6caf607659bcaeaec062173874622","modified":1566837987871},{"_id":"source/_posts/linux/instructions.md","hash":"fc306daab0e626ac5cbcadec501df1d37db11281","modified":1566837987871},{"_id":"source/_posts/linux/package.md","hash":"1fcebe4cba2c9636831f7e3ba0e9dfb7e29fbee0","modified":1566837987871},{"_id":"source/_posts/linux/shutdown.md","hash":"b6ae585b56d36b6a0bfc39c301871d5ba5f66876","modified":1566837987872},{"_id":"source/_posts/linux/system.md","hash":"211b6255a5a888413f1ed3799b4f60e0235d36b4","modified":1566837987872},{"_id":"source/_posts/linux/user.md","hash":"2e46eeb0031b159537effa645b4f8ff07c0f175a","modified":1566837987872},{"_id":"source/_posts/linux/vim.md","hash":"c25e8e4b39956995b8d8275c25c08b48cb58f1aa","modified":1566837987872},{"_id":"source/_posts/node/crypto.md","hash":"3599783d88c1c7d12a3b5129f2e4c4a1d44f411d","modified":1566837987873},{"_id":"source/_posts/node/error.md","hash":"72ee57b64f6802e90bba606d0170b8f5d31f18f9","modified":1566837987873},{"_id":"source/_posts/node/event.md","hash":"8fb9901a4d7e7624f8afbbb903b9044c7b340161","modified":1566995518672},{"_id":"source/_posts/node/fs.md","hash":"b6d74199da872723f1042d448178f876786ce91a","modified":1566837987874},{"_id":"source/_posts/node/http.md","hash":"29b70c3439999d593441ae1629b524c53287c204","modified":1566837987874},{"_id":"source/_posts/node/module.md","hash":"38f6eaca70b74802d0398249fc6e056e9f61927d","modified":1566995529853},{"_id":"source/_posts/node/path.md","hash":"899a6df406186331bb87631ffbb90e4b78659e3a","modified":1566837987875},{"_id":"source/_posts/node/process.md","hash":"89d56631bb4da4df40dcf483c6a299c579d922c5","modified":1566837987875},{"_id":"source/_posts/node/querystring.md","hash":"51311203a4b15b673b5af7b3d1df1057b72663be","modified":1566837987875},{"_id":"source/_posts/node/url.md","hash":"7cdd471f9c77de1654c79e758888dafba37a38bb","modified":1566837987875},{"_id":"source/_posts/php/base.md","hash":"e5bf1d5c7101a3ddc9be350865493e0f6861815c","modified":1566837987876},{"_id":"source/_posts/php/method.md","hash":"e60bfa2187729ec65d4eb725aaeb67361e834b40","modified":1566837987876},{"_id":"source/_posts/php/oop.md","hash":"9a5974d5c6e4980a8f071cc024a9c5bb81e9b799","modified":1566837987876},{"_id":"source/_posts/typescript/baseDataType.md","hash":"5cec52173c513ff939f93c6a477cede62cb66980","modified":1566837987876},{"_id":"source/_posts/typescript/class.md","hash":"dd4ce81c75021fbde265aeee64b7d633b3e98e4f","modified":1566837987876},{"_id":"source/_posts/typescript/compilationPrinciple.md","hash":"179fc36e0feb53e77b1284e36745d74a8c4125d7","modified":1566837987877},{"_id":"source/_posts/typescript/declareFile.md","hash":"c1b26749a927e24d77af3d1ad91afb92ab5346d6","modified":1566837987877},{"_id":"source/_posts/typescript/decorators.md","hash":"71e7a488875ee0cbc4a5c2a16ac4eb581880088b","modified":1566837987877},{"_id":"source/_posts/typescript/envConfig.md","hash":"2fe14965da03b3398ce5e4a2e7c5b71d5935ae18","modified":1566837987877},{"_id":"source/_posts/typescript/function.md","hash":"cdd4ff062ef213d50b664cb81dd9b5811d43e3e8","modified":1566837987877},{"_id":"source/_posts/typescript/generics.md","hash":"e4bba58970170d579d44d656a8775617a5011ea8","modified":1566837987878},{"_id":"source/_posts/typescript/global.d.ts.md","hash":"705b1c0e9b2aef345ef99496d7834c027dd70e2f","modified":1566837987878},{"_id":"source/_posts/typescript/interfaces.md","hash":"dc9ddcd37f1fc715a980d9e8e9c5f05aaf82a1d8","modified":1566837987878},{"_id":"source/_posts/typescript/mixinx.md","hash":"2e7e458e77a00f81fd2f21722bfac4da54dad318","modified":1566837987878},{"_id":"source/_posts/typescript/module-class.d.ts.md","hash":"bd2be8f45dd6f0766788725005cc7bad995e2181","modified":1566837987878},{"_id":"source/_posts/typescript/module-function.d.ts.md","hash":"ba61e1fd51512185351a46116d050ebe35e7ca88","modified":1566837987879},{"_id":"source/_posts/typescript/module.d.ts.md","hash":"8725c9b53e147663474e375aee6d18483118d8b0","modified":1566837987879},{"_id":"source/_posts/typescript/module.md","hash":"8e7f11754fcc1e5fce4cebf566ea3ca534e10bfe","modified":1566837987879},{"_id":"source/_posts/typescript/test.ts","hash":"871bca543429e15201ad8d0de580cf51619a4125","modified":1566837987879},{"_id":"source/_posts/typescript/tsConfig.md","hash":"4e69b050fbf5ef5d3a86257810b6a86ae19afd44","modified":1566837987879},{"_id":"source/_posts/vue/vuePrinciple.md","hash":"30d33ad44d04b77f0a278e48c1b3b635c603c3ea","modified":1567592594250},{"_id":"source/images/TypeScript 编译原理.png","hash":"adf3c184f3d9fae5b155e642fa636eca451200a0","modified":1566837987887},{"_id":"source/images/css-dom-render.jpg","hash":"154deb251505d145c93b2a0dd6cf44e8ba3c3678","modified":1566837987889},{"_id":"source/images/event-loop.png","hash":"69b4d7bdbdbb112b8cf0deac2d16e8de25e2e3e0","modified":1566837987893},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1566837987913},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1566837987913},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1566837987914},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1566837987914},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"c2ce11c6579ef2c4f6ca966bc66947a5d4e1c846","modified":1566837987914},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2391e40c2a12abb976f7c0974c81261657635325","modified":1566837987914},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1566837987914},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1566837987915},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"985c79816c0d599c7135900b76783c7fe4ebc5b2","modified":1566837987915},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1566837987915},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"dded138c6cf821147b576658fd836d2f8900acfb","modified":1566837987915},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1566837987915},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"8e4f8158a65843f7b4e5cde81c634ed181ee0667","modified":1566837987916},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"33c882dc2575739df042297f0ffa80d89ac10cd0","modified":1566837987916},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1566837987916},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"ae8a8db3f0d630e92cf70cfcb3a9afb026b1395a","modified":1566837987916},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1566837987916},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1566837987917},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1566837987917},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1566837987917},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e6476c86ce108794b6fce57e69e3cd29f7d4f26","modified":1566837987917},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1566837987918},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1566837987918},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1566837987918},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"531e7f7972f820793415ee12f8a726cd7f86912e","modified":1566837987918},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"8671cff27aef7298b2518dd57fe0671959f21701","modified":1566837987919},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1566837987919},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1566837987919},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1566837987919},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1566837987920},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1566837987920},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1566837987920},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1566837987920},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1566837987920},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1566837987921},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"62df3af8007302a4173031a6656f6147fa2ee5da","modified":1566837987921},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1566837987921},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1566837987922},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1566837987921},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1566837987924},{"_id":"themes/matery/source/css/matery.css","hash":"0fdce01fce54c84b27c01ca3742b54c2112a228f","modified":1566837987925},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1566837987925},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1566837987926},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1566837987927},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1566837987927},{"_id":"themes/matery/source/medias/.DS_Store","hash":"e01bbadd79e1c3694ba94b445eed962a77a194cf","modified":1566869453758},{"_id":"source/images/dom-render.jpg","hash":"7eeed9bff9d46f498fe95cfd698e8e60710647ea","modified":1566837987891},{"_id":"source/images/render-process.jpg","hash":"d9bde85e73c48b1c7289a601e24f52f3a25f1d43","modified":1566837987901},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1566837987914},{"_id":"themes/matery/source/medias/logo.png","hash":"5a113661f2f70216dab59177ff7d7458f9604049","modified":1566837988092},{"_id":"source/images/render-tree.jpg","hash":"3326b141b427915d4fef9476d1ae3139df589113","modified":1566837987904},{"_id":"source/images/自适应两栏布局.gif","hash":"8f2f6aa4cf40724b9d27e6f49ff1d66d7b076b42","modified":1566837987910},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1566837987927},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1566837987928},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1566837987928},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1566837987928},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1566837987937},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1566837987938},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1566837987944},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1566837987945},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1566837987946},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1566837987947},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1566837987951},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1566837987953},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1566837987954},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1566837987954},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1566837987957},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1566837987957},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"6338650e5f7ab0c97a587838e2f74ee282d41f06","modified":1566837987964},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"c5c5338510a385522cb0df8f68173d88ad5984e9","modified":1566837987978},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1566837987982},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"e3a51aca1f3e6cbcab4fd8459eac5d4f6a9d9940","modified":1566837987984},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1566837987985},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1566837987985},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"ed5f3ac58dc22055f92c8970bddbc91e5b55444f","modified":1566837987986},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1566837987986},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"019bca8acd24a2c695ea0faf90c7486c0a31b943","modified":1566837988084},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"8609f99e843694253baca6034d57ecda2df73eb6","modified":1566837988090},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"35f8f7e7d3510923cdfe1193a0bb5d9948b78d3e","modified":1566837988087},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"ee68a9e3bc8d1619612d300cd632cde30b0709f4","modified":1566837988090},{"_id":"source/images/timestamp-diagram.svg","hash":"59228be9d502f05e0a5601b1f1ee71a5570d4902","modified":1566837987906},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1566837987929},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1566837987938},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1566837987946},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1566837987947},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"6979c760beb550b681a06a8f11688f2d1591a70e","modified":1566837987958},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"a641f1a0ea2567c13cb9536b2ba16a66b20f26ab","modified":1566837987979},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"7ea642ef3b915256cf92c4a447dd052ea8aeb7d3","modified":1566837987979},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"04f46bc1c391ffeaaa5d723593192110cfe05b21","modified":1566837987980},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1566837987981},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1566837987982},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1566837987983},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1566837987983},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1566837987983},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1566837987984},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"2638b6ccf1022562a31370cdfca429b678fa3296","modified":1566837987999},{"_id":"themes/matery/source/medias/featureimages/30.jpg","hash":"f3b6d34e9c61f55f68569a2248c8ab81cb3597ab","modified":1566837987999},{"_id":"themes/matery/source/medias/featureimages/31.jpg","hash":"b2f5c078b838df010127d68b0bd76f3fb1ebd2c4","modified":1566837988000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"cc095f816edbed12a77c2907641e0abc1e09d0b0","modified":1566837988091},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"7273c89d119ed9e73e3212972670d7ea40cef071","modified":1566837988345},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"e4b6c7007108bc3631372cf2b028803c4cc8e671","modified":1566837988347},{"_id":"source/images/圣杯布局.gif","hash":"137d4f2207b255d31a2517bf52473f06f281a885","modified":1566837987908},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1566837987929},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"9d5dd7e092c8eaf6266e2498cff72e6c98790a05","modified":1566837987945},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1566837987948},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1566837987950},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1566837987950},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1566837987951},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1566837987948},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1566837987949},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1566837987949},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1566837987949},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1566837987951},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1566837987952},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1566837987955},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1566837987955},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1566837987955},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1566837987955},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1566837987954},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1566837987956},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1566837987956},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1566837987959},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"90235ef440baa0373ee8332c0e58f67f1ce32e42","modified":1566837987960},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"6ec4518a5181be0645a93bcb1aadf0838f96d455","modified":1566837987980},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1566837987981},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1566837987981},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1566837987936},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1566837987937},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1566837987950},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1566837987953},{"_id":"themes/matery/source/medias/music/avatars/zhaolei.jpg","hash":"81b004a15dabd6c373926c67b226c3f8cbe79d41","modified":1566837988099},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"962f6bbba5dddc11d9f54350fd228e0831b8b261","modified":1566837987988},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1566837987989},{"_id":"themes/matery/source/medias/music/avatars/maliang.jpg","hash":"99bbcdb66a9c5313d4fe4b92eeaead42c2515fa1","modified":1566837988098},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1566837987931},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1566837987936},{"_id":"themes/matery/source/medias/featureimages/29.jpg","hash":"18a3db0137bf25d79b4401375145d854be13c407","modified":1566837987998},{"_id":"source/images/CSS.png","hash":"b84ac2e337ebbbeaf01b62d9876cc83fbd09aee0","modified":1566837987884},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1566837987932},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1566837987970},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"5cfe63312c5c89d8dd1ea20dcc04b539d68d5d12","modified":1566837987992},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1566837988086},{"_id":"themes/matery/source/medias/music/avatars/chenhouyu.jpg","hash":"ce5a90ff7c84b8a5e3e56236783fa6806e1f1498","modified":1566837988094},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1566837987966},{"_id":"themes/matery/source/medias/music/avatars/laofan.jpg","hash":"5117ed92c8175825b9116716bb4005cf7d5c09c6","modified":1566837988096},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1566837987961},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1566837987934},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"81348acc6bc42d0161e8ef29b981f7b180b67493","modified":1566837987964},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1566837987943},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"c8deee9974959eed6af64a3e8bf93b71f57fe8e4","modified":1566837987977},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"18f3a192233a473ef981510f897fbaf1c4f77e78","modified":1566837987995},{"_id":"themes/matery/source/medias/featureimages/33.jpg","hash":"c38b341f86d0768b0f117e7b5986f05d67478209","modified":1566837988031},{"_id":"themes/matery/source/medias/featureimages/35.jpg","hash":"4d4ce5773a8288515af9027f02af51eb918a7372","modified":1566837988082},{"_id":"themes/matery/source/medias/featureimages/34.jpg","hash":"1677f6f0a5c7bbbebc44fb24508aeff8aa79b3db","modified":1566837988052},{"_id":"themes/matery/source/medias/featureimages/32.jpg","hash":"06a0c475b9a57aaa767ec824616ba95d5d4feeb8","modified":1566837988021},{"_id":"themes/matery/source/medias/music/wanghouyusheng.mp3","hash":"c6a9203f13c4021c34d012fa8f2e3d3a713603b4","modified":1566837988265},{"_id":"themes/matery/source/medias/music/lixiangsanxun.mp3","hash":"3830afc5553bf36e04cadcd5c0d060e1a838fbbc","modified":1566837988213},{"_id":"themes/matery/source/medias/music/hua.mp3","hash":"6ed72d5b959a236deeaf9cbee66bd29f74cffb14","modified":1566837988156},{"_id":"themes/matery/source/medias/music/yongbaoni.mp3","hash":"4422fc80bafc7ae3e5f03af1ec38cb0f6f15bf7e","modified":1566837988333},{"_id":"public/baidu_urls.txt","hash":"376356065383485f1b87ecaa650f596d6506d1cb","modified":1567592643134},{"_id":"public/baidusitemap.xml","hash":"52fc7c27c7fccfdedf6d925dde74fc70f0e63062","modified":1567592643139},{"_id":"public/atom.xml","hash":"fbc6222250c9a274fb301e84714d58a7011d9853","modified":1567592645680},{"_id":"public/search.xml","hash":"d8374d3339fb8b97be2b99c27c5257935b954007","modified":1567592645867},{"_id":"public/sitemap.xml","hash":"d225aef7c55c81f7f5f07abc79cc9654e8424054","modified":1567592645868},{"_id":"public/404.html","hash":"9dfbe6a66863ca218ade82b1089162ccc5f88be4","modified":1567592645921},{"_id":"public/about/index.html","hash":"8f097cabf5ef3a49ec35e170d926cf82b203b5f2","modified":1567592645921},{"_id":"public/archives/index.html","hash":"f3f029851d5c9db41f9bf96ab7686489bad67fb5","modified":1567592645921},{"_id":"public/categories/index.html","hash":"9bc09eb54e264798730da47edfac5cd25ac93810","modified":1567592645921},{"_id":"public/friends/index.html","hash":"1bde0e527e7f57b7262212aa64cfcc60d30712fd","modified":1567592645921},{"_id":"public/tags/index.html","hash":"3221d9689a1bb13caccffeceebc22302b731408d","modified":1567592645921},{"_id":"public/2019/08/27/vue/vueprinciple/index.html","hash":"246e060c50e0fc9ca8534d909543933a30f472ba","modified":1567592645921},{"_id":"public/2019/08/26/javascript/generator-async/index.html","hash":"2800e1bf8e5851ecd7c8813ca71d60b27fbc4a91","modified":1567592645921},{"_id":"public/2019/08/15/typescript/global.d.ts/index.html","hash":"274f2d19efb2e076972d005839a0786787a9df73","modified":1567592645922},{"_id":"public/2019/08/15/typescript/module-class.d.ts/index.html","hash":"a724b4215320b7b6a64050a9e0946fcfdf88d6b6","modified":1567592645922},{"_id":"public/2019/08/15/typescript/module.d.ts/index.html","hash":"f08a3032c7402f44081d7fa47a93b458e4ec36b6","modified":1567592645922},{"_id":"public/2019/08/15/typescript/module-function.d.ts/index.html","hash":"36fcf83d0d4c9256067a9cf105cb3028b33ca230","modified":1567592645922},{"_id":"public/2019/08/05/typescript/compilationprinciple/index.html","hash":"5a285d182b46caa31ac14ecdc2eab5e9dbc8b90f","modified":1567592645922},{"_id":"public/2019/07/25/javascript/functionalpoint/index.html","hash":"d13ce3fb9134dac42e0f6933eba9773e0c51cc57","modified":1567592645922},{"_id":"public/2019/07/22/javascript/functionalcombination/index.html","hash":"ae2fb150b2cfe6c61b23c4632449bca1fcbac54b","modified":1567592645922},{"_id":"public/2019/07/18/typescript/decorators/index.html","hash":"0be0355cc9df181f2c23e29d5e76728489f34b4c","modified":1567592645922},{"_id":"public/2019/07/17/javascript/functioncurrying/index.html","hash":"e6ef3b01c0739cb4e68313ebbdb13d2fd19b6243","modified":1567592645922},{"_id":"public/2019/07/15/typescript/tsconfig/index.html","hash":"e28f902ff0779c713a354d3006c24301ffcaf439","modified":1567592645922},{"_id":"public/2019/07/15/javascript/functionalpurity/index.html","hash":"d4148636450a64bdadabfb7b781c4cb31de5e624","modified":1567592645922},{"_id":"public/2019/07/12/javascript/functionalbase/index.html","hash":"0cd86f078762132c9112baf18b4f146e96c68033","modified":1567592645922},{"_id":"public/2019/07/02/typescript/mixinx/index.html","hash":"254c887b78d5c74ba79c3af57ef5f0a1f20c5a2f","modified":1567592645922},{"_id":"public/2019/06/20/typescript/declarefile/index.html","hash":"e68214ebcedbd89e4fc14b9ee81d534e9b17c822","modified":1567592645922},{"_id":"public/2019/06/15/typescript/module/index.html","hash":"b4d302408174b08b214d034698e9db7bb66944c3","modified":1567592645922},{"_id":"public/2019/06/11/javascript/promise/index.html","hash":"000483821c385f8b039362aea0947bee4beea5b8","modified":1567592645922},{"_id":"public/2019/05/23/typescript/basedatatype/index.html","hash":"929e3be4ee0f03061e797c05ac56674ab2d75287","modified":1567592645922},{"_id":"public/2019/05/22/typescript/generics/index.html","hash":"8eae41c55046eac4ddd3b32099999caf08f66595","modified":1567592645923},{"_id":"public/2019/05/18/typescript/interfaces/index.html","hash":"797244dc83141c1dddf812c25a2e44efb3de8681","modified":1567592645923},{"_id":"public/2019/05/17/typescript/class/index.html","hash":"9fa95fd2934e84cd504a92408ade521a20ba69a5","modified":1567592645923},{"_id":"public/2019/05/16/typescript/function/index.html","hash":"80dfceefdce14726addd251e182e7306d68a6794","modified":1567592645923},{"_id":"public/2019/05/15/typescript/envconfig/index.html","hash":"b0453e37ad2cb2a967e0711971dc2e01dc643f65","modified":1567592645923},{"_id":"public/2019/05/15/javascript/debounce/index.html","hash":"c1c3ccffb86540c2aace09b05835cf90bc967fe8","modified":1567592645923},{"_id":"public/2019/04/27/javascript/new/index.html","hash":"7e774213d5eddbb1494c4490ac76bdf2abf48b6d","modified":1567592645923},{"_id":"public/2019/04/22/javascript/call/index.html","hash":"e71b535cdd7309aa76d42e5b894d36ec84f94bca","modified":1567592645923},{"_id":"public/2019/04/21/javascript/bind/index.html","hash":"526903f65fea265d19151189d520143f56924a3c","modified":1567592645923},{"_id":"public/2019/04/14/node/error/index.html","hash":"542a454e0ceda5635d7eea837c7887832422774c","modified":1567592645923},{"_id":"public/2019/04/12/node/process/index.html","hash":"c605468763ca54bc74059d28b359430b85bd5787","modified":1567592645923},{"_id":"public/2019/04/10/node/event/index.html","hash":"8c14a5f78ea8f27feed0d0831f7bd027ff9e4870","modified":1567592645923},{"_id":"public/2019/04/08/node/crypto/index.html","hash":"46583780b222592de8fe1df2565e87c9f9ef27c9","modified":1567592645923},{"_id":"public/2019/04/05/node/module/index.html","hash":"e2bbff41c05df918cf7023bcf235814ce204de5c","modified":1567592645923},{"_id":"public/2019/04/04/node/querystring/index.html","hash":"bf0c100f23b2462ddf56c491cac56aac235d8c1a","modified":1567592645923},{"_id":"public/2019/04/02/node/path/index.html","hash":"6eff2953c5f890f2858b46ed28121702d981b008","modified":1567592645923},{"_id":"public/2019/04/01/node/fs/index.html","hash":"09c37c7ed014f25a9450009c74a4c2519daa920c","modified":1567592645924},{"_id":"public/2019/03/28/node/url/index.html","hash":"a6d3883fa940cad7755785f87562947b951c8eaf","modified":1567592645924},{"_id":"public/2019/03/23/node/http/index.html","hash":"29bf62e8f103711d70fb359e211a61f23b457503","modified":1567592645924},{"_id":"public/2019/03/20/javascript/api/index.html","hash":"b9517681f5a25ccbf528bba63df980f509ec379b","modified":1567592645924},{"_id":"public/2019/03/15/javascript/inheritance/index.html","hash":"df57c07f666ff96d003eca799ed18e1a6001754b","modified":1567592645924},{"_id":"public/2019/03/10/javascript/prototype/index.html","hash":"e67aa5591a70e178511d159e167e20ae69ed7bb1","modified":1567592645924},{"_id":"public/2019/03/05/javascript/this/index.html","hash":"9b0ecf4b71c6b844ffa7e4bb6a8afcacae27f4fb","modified":1567592645924},{"_id":"public/2019/02/25/javascript/closure/index.html","hash":"69c659f8fdd653950e8357f71666b76f85ad6cea","modified":1567592645924},{"_id":"public/2019/02/20/javascript/voao/index.html","hash":"04002b36881f7dca2c0dc71cb6693bdac4e1b697","modified":1567592645924},{"_id":"public/2019/02/12/javascript/type/index.html","hash":"040a1be03a9fbc4291fedcccc27aa6e034dd019e","modified":1567592645924},{"_id":"public/2018/08/10/linux/git/index.html","hash":"ef63d43fd1c7ce0be7e2197534d76d760e9c163b","modified":1567592645924},{"_id":"public/2018/07/28/linux/vim/index.html","hash":"5470be1277698bdd290ed33746ce759b914bd5df","modified":1567592645924},{"_id":"public/2018/07/25/linux/fileauth/index.html","hash":"436e96bf6e449171648a9e468108999a241035db","modified":1567592645924},{"_id":"public/2018/07/22/linux/user/index.html","hash":"f3a380ff24be71a19f212fca203ac435e5bce363","modified":1567592645924},{"_id":"public/2018/07/16/linux/shutdown/index.html","hash":"af2cc7b3badc540e4fcd424d287fd8293768335f","modified":1567592645924},{"_id":"public/2018/07/12/linux/package/index.html","hash":"da7a692e355b195ddacd87d37fc7212d036fd83d","modified":1567592645925},{"_id":"public/2018/07/10/linux/compression/index.html","hash":"7dc6511d305a9c8301c72b50318b1e0fa184f347","modified":1567592645925},{"_id":"public/2018/07/15/linux/backup/index.html","hash":"a6ff6f58e0e6d91481cd44480292d619aa18f30a","modified":1567592645925},{"_id":"public/2018/07/02/linux/system/index.html","hash":"1bd552020f0eedbce3c096e37c405c6242c0970c","modified":1567592645925},{"_id":"public/2018/06/23/linux/instructions/index.html","hash":"11e12db7362fb89e5ea9a67009ff2640941f50b8","modified":1567592645925},{"_id":"public/2017/07/01/css/css-preprocessor/index.html","hash":"7dd027188fd054d9b20febe8feae8cc7e92bdc7e","modified":1567592645925},{"_id":"public/2017/06/22/css/css-layered/index.html","hash":"58ae378b84931c940fef55ef181f5119bc2126b5","modified":1567592645925},{"_id":"public/2017/06/20/css/css-animation/index.html","hash":"95d3eeb19e790d9d725955ea27b6eb33e0daa9b7","modified":1567592645925},{"_id":"public/2017/06/15/css/base-layout/index.html","hash":"ea0e6d06c93dca9a1ef969b9d0258fd5f22daaac","modified":1567592645925},{"_id":"public/2017/06/11/css/base-concepts/index.html","hash":"118b6b5408dd39272a47cb1367829e92b5303fb0","modified":1567592645925},{"_id":"public/2017/05/10/html/html/index.html","hash":"401ff00daa59cb888805cdfcbb8f9aeb7c75c460","modified":1567592645925},{"_id":"public/2017/01/23/php/base/index.html","hash":"246002261059125e7afd0702f0ceb31cca34e8f3","modified":1567592645926},{"_id":"public/2017/01/23/php/method/index.html","hash":"75e178c235739ee865de8e3ab85101c24b59ed40","modified":1567592645926},{"_id":"public/2017/01/23/php/oop/index.html","hash":"cc70bca5e22112a353a389624ca40643016fe0f8","modified":1567592645926},{"_id":"public/archives/page/2/index.html","hash":"87f28e3403826cc7fee8774b7227b19a07cc3c38","modified":1567592645926},{"_id":"public/archives/page/3/index.html","hash":"49bcc0db8a39bcc09a36aebe42fa1d82728b0cfa","modified":1567592645926},{"_id":"public/archives/page/4/index.html","hash":"56972e80784dca73e818841316f88d2a1e6081ba","modified":1567592645926},{"_id":"public/archives/page/5/index.html","hash":"c9591a76d6cff463d03a38e92620d0b38f1e5752","modified":1567592645926},{"_id":"public/archives/page/6/index.html","hash":"b704d5696433f0e7541995cc9a79926195966e74","modified":1567592645926},{"_id":"public/archives/2017/index.html","hash":"d19b006a016aa90647f4f7e3336213bf9c939b5b","modified":1567592645926},{"_id":"public/archives/2017/01/index.html","hash":"59871e827de79b68d17dfda336655714526f5006","modified":1567592645926},{"_id":"public/archives/2017/06/index.html","hash":"cfc8c91d698b859d3ecd5a9be3d56f683069e6a6","modified":1567592645926},{"_id":"public/archives/2017/05/index.html","hash":"d40b2f527085e1e75dbfb1c55fbd52bcdeec76e8","modified":1567592645927},{"_id":"public/archives/2017/07/index.html","hash":"584bea3c9d06df9578032ea47efcf2d4d9411312","modified":1567592645927},{"_id":"public/archives/2018/index.html","hash":"819854399ce853efeafd987a73636d297570c75c","modified":1567592645927},{"_id":"public/archives/2018/06/index.html","hash":"da96ad42be4828322ccc6c62845ca598303a98df","modified":1567592645927},{"_id":"public/archives/2018/07/index.html","hash":"8a693b894eac3d97e638fd5f668c342ceacd4dc1","modified":1567592645927},{"_id":"public/archives/2018/08/index.html","hash":"bf7c9b9160082142d510c6268fc2aed372392515","modified":1567592645928},{"_id":"public/archives/2019/index.html","hash":"cf3be942a5196ae22fdbe29d9dd11e8388c57b70","modified":1567592645928},{"_id":"public/archives/2019/page/2/index.html","hash":"a68c79621069e030b7fd971b581bee78300b9c4f","modified":1567592645928},{"_id":"public/archives/2019/page/3/index.html","hash":"7a5ac8d86b9e04104e6986e95e167fe7f5611a19","modified":1567592645928},{"_id":"public/archives/2019/page/4/index.html","hash":"52b10b03d669d38019e6b9bd8e706e2a929f8534","modified":1567592645928},{"_id":"public/archives/2019/02/index.html","hash":"e6dcaae09407e1d69bf3c9d9fe01d230a0ab0917","modified":1567592645928},{"_id":"public/archives/2019/03/index.html","hash":"08e33beb710e30bda6e299400a5f04357a9ebde1","modified":1567592645928},{"_id":"public/archives/2019/04/index.html","hash":"867a4bd79c0f27a188147426453fbb41d421f85d","modified":1567592645928},{"_id":"public/archives/2019/05/index.html","hash":"58cd7d124666b9f0afa96bf5fa1c663780e05c97","modified":1567592645928},{"_id":"public/archives/2019/06/index.html","hash":"3b323a7167b53dc99600c0603b365d1ef5ab583d","modified":1567592645928},{"_id":"public/archives/2019/07/index.html","hash":"e7ced31ebaeb4c764cc8bc4ab5a8ee953ef7ccde","modified":1567592645928},{"_id":"public/archives/2019/08/index.html","hash":"967637e8ef14ba4b822449b39bb7a95e2d4b777a","modified":1567592645928},{"_id":"public/categories/HTML/index.html","hash":"0157bc822daf98f8a3d9f7faac2de65c0f6b0da2","modified":1567592645928},{"_id":"public/categories/CSS/index.html","hash":"3823adde75df8703cb8e3508e8fdf177c9929eaa","modified":1567592645928},{"_id":"public/categories/JavaScript/index.html","hash":"5040e7618f39f51de9a10cd97117198f79b042f3","modified":1567592645929},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"1edb97a12f839dd9994a0be2151ece87a04cdee9","modified":1567592645929},{"_id":"public/categories/函数式编程/index.html","hash":"8d3e05b0a42f70f144d5c9248d98dc249618bf97","modified":1567592645929},{"_id":"public/categories/Linux/index.html","hash":"1fd33ab4ae667c47ec82625132a6a467301335ac","modified":1567592645929},{"_id":"public/categories/Node/index.html","hash":"c477026a57515625aba4a55d8efb9680b34ee73a","modified":1567592645929},{"_id":"public/categories/PHP/index.html","hash":"0d37187fac97c0f69873a5e0d64ea30355d4a43b","modified":1567592645929},{"_id":"public/categories/TypeScript/index.html","hash":"94362acb649aa4b9d36f3b82bf584acbec2ea7e3","modified":1567592645929},{"_id":"public/categories/vue/index.html","hash":"a7256a63f5ab3ef673415a6f49a38e9e9bfcc9ae","modified":1567592645929},{"_id":"public/categories/TypeScript/page/2/index.html","hash":"6c48abe2c26250ede46c1b9100b4e8757a7c4b43","modified":1567592645929},{"_id":"public/index.html","hash":"dbd7ea23820f5c429351945e19046ad205197862","modified":1567592645929},{"_id":"public/page/3/index.html","hash":"d03c77fba8943b19b3f9586657f5399e287ce4ac","modified":1567592645929},{"_id":"public/page/2/index.html","hash":"60fd71a8309392ffe5a96eff13a0aec2cb8036d3","modified":1567592645929},{"_id":"public/page/4/index.html","hash":"c0df07f36da25da8f64680d4e3eb7f84bb50c5ed","modified":1567592645929},{"_id":"public/page/5/index.html","hash":"0b182b126aa1b6229afcc4c2bbd1932154711a80","modified":1567592645929},{"_id":"public/page/6/index.html","hash":"ffff22a32177424fa7113c11df446f8434da03dc","modified":1567592645929},{"_id":"public/tags/HTML/index.html","hash":"665fa859d98ad4da5442a8a4a737dfa98e051926","modified":1567592645929},{"_id":"public/tags/CSS/index.html","hash":"12336e35bef87cb74ede8b372d0c6cebc38c651c","modified":1567592645929},{"_id":"public/tags/JavaScript/index.html","hash":"2ae3e306fe8131a126757cf23b1f193d6021df68","modified":1567592645929},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"e0d1f71d3effa78c758e808671a5e6273f348c99","modified":1567592645929},{"_id":"public/tags/函数式编程/index.html","hash":"fb11a58d13a781ee9245cabfa6061fd19e0eab8f","modified":1567592645930},{"_id":"public/tags/Linux/index.html","hash":"eef6198268a143600c4f81e35250d33b21877e6c","modified":1567592645930},{"_id":"public/tags/Node/index.html","hash":"a065b7edb63f5ea7bb215bf28d485a74c056434d","modified":1567592645930},{"_id":"public/tags/PHP/index.html","hash":"c09bea6cf779c34c2d9fdf1cb48dfc0ea81cd477","modified":1567592645930},{"_id":"public/tags/TypeScript/index.html","hash":"26eb6b0f9adc0a38628a9477cae903e78e2b535b","modified":1567592645930},{"_id":"public/tags/TypeScript/page/2/index.html","hash":"844ed7b887fbf1cc4c95dec0a5ed452c534e64e9","modified":1567592645930},{"_id":"public/tags/vue/index.html","hash":"1ad99a1daac8b85e00610dc6b9ddf12bf1a92b25","modified":1567592645930},{"_id":"public/CNAME","hash":"181c262cf92b1ff30ea9cdaaaefe2648b4b3f1c0","modified":1567592645943},{"_id":"public/images/Acss.jpg","hash":"24c93cda375ca4bf9d02d7bd56bf47ed22d48594","modified":1567592645943},{"_id":"public/images/Function.png","hash":"7b96f8e301445b0b84fe87dda3171165005499c1","modified":1567592645944},{"_id":"public/images/Object.png","hash":"f9bdf44c968effbe90a1f911581403129569f263","modified":1567592645944},{"_id":"public/images/Person.png","hash":"bd1b0c5ef77f699d05d624eeacb370b92b87e663","modified":1567592645944},{"_id":"public/images/ack.png","hash":"1e9740c51931e3049de55034b09350673588335a","modified":1567592645944},{"_id":"public/images/commonjs.png","hash":"7ff09d53c1ca8d8ad446baa75a6312e6a8c20e4b","modified":1567592645944},{"_id":"public/images/css-IFC.jpg","hash":"c7fb8f083d6e4e0caf37f609add2bcaed350ec94","modified":1567592645944},{"_id":"public/images/css盒子模型.png","hash":"bf2bb7b9d57756a3c17d1e3489d16f13587a68b4","modified":1567592645944},{"_id":"public/images/http.png","hash":"b480d1f688799f35883518ef3f1351bc771095fd","modified":1567592645944},{"_id":"public/images/http代理.png","hash":"1449a4e05af7a7903d47ff550f5bd3b842d0bb03","modified":1567592645944},{"_id":"public/images/ipc-create.png","hash":"ff6ab7e391bfde80348ddb78cf44cba3414c53b0","modified":1567592645944},{"_id":"public/images/ipc.png","hash":"05e57f1b2769c3b824582179c1263c6aecac55da","modified":1567592645944},{"_id":"public/images/javascript-stack.png","hash":"8b16e3377ca35b8a78cb0c9a39b89540e51467f9","modified":1567592645944},{"_id":"public/images/javaScript.png","hash":"0064f030325083e62c7ee86e6b26b5c629d73d8c","modified":1567592645944},{"_id":"public/images/linux.png","hash":"a2b16695f6f5b517dbbdca8b3fe3f26f1db95250","modified":1567592645944},{"_id":"public/images/javascript-stack1.png","hash":"ffcf25a0a099b5c10f265c08c52752aaf76a35c0","modified":1567592645944},{"_id":"public/images/master-worker.png","hash":"58bf93ce185d2e91967ae1a90e81f5e89a896d7a","modified":1567592645944},{"_id":"public/images/module-p.png","hash":"e28e8705eb1357beec46a0557bf51c3d4094a6d9","modified":1567592645944},{"_id":"public/images/module-os.png","hash":"d9aa9a85e39cee0bffcd98274fbbcedda20ed146","modified":1567592645944},{"_id":"public/images/module.png","hash":"68164b02e188e29d29344aa687ea6e2e73cd9bc0","modified":1567592645945},{"_id":"public/images/php.png","hash":"b9c9e7c9042be1daa66fec971ff89774c7962579","modified":1567592645945},{"_id":"public/images/node.png","hash":"a5e96c9b079b38069529417b88ae28a745284c11","modified":1567592645945},{"_id":"public/images/process-on.png","hash":"d630c0f4b09b6a677b956376dc23bfc4f69e0149","modified":1567592645945},{"_id":"public/images/process-send.png","hash":"d79dbf894fe5c388a69fac3666c9f63920400e87","modified":1567592645945},{"_id":"public/images/request.png","hash":"fd9be1b20518eadc3297f2de098a318a21e13a0f","modified":1567592645945},{"_id":"public/images/prototype.png","hash":"5586538f0d2d9cfd12d173be694ba1a3803a304b","modified":1567592645945},{"_id":"public/images/tcp.png","hash":"6a280c4905ee8656c6c76193b9595d822caacb08","modified":1567592645945},{"_id":"public/images/render-module.jpg","hash":"64975e4502e09146eb8fa6decdf1cb9a18e2c442","modified":1567592645945},{"_id":"public/images/ts-lang.png","hash":"d74e4262805a053fb4a087295609153c26099d28","modified":1567592645945},{"_id":"public/images/vue-core-index.png","hash":"23fcb56dd70c950fa00aeee266b500d0a7c725c4","modified":1567592645945},{"_id":"public/images/typeScript.png","hash":"9500854a5014949a859627aeab4031ce04c17a54","modified":1567592645945},{"_id":"public/images/vue-folder.png","hash":"b25f5c35bfc74494791c5165e2b6a04a94455b3f","modified":1567592645945},{"_id":"public/images/vue-init.png","hash":"20917d3b1221f8189d8afe9c33ea5a2718e236c7","modified":1567592645945},{"_id":"public/images/websocket.png","hash":"dcb8ac2f57b208bdba0f23824f7a3ee275761d0d","modified":1567592645945},{"_id":"public/images/vue-process.png","hash":"b8b645b04e854b2fa1435a32d3fab55e8d42fdc8","modified":1567592645945},{"_id":"public/medias/banner/2.jpg","hash":"6338650e5f7ab0c97a587838e2f74ee282d41f06","modified":1567592645945},{"_id":"public/medias/banner/6.jpg","hash":"c5c5338510a385522cb0df8f68173d88ad5984e9","modified":1567592645945},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1567592645945},{"_id":"public/medias/featureimages/2.jpg","hash":"e3a51aca1f3e6cbcab4fd8459eac5d4f6a9d9940","modified":1567592645945},{"_id":"public/medias/featureimages/24.jpg","hash":"ed5f3ac58dc22055f92c8970bddbc91e5b55444f","modified":1567592645945},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1567592645945},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1567592645946},{"_id":"public/medias/featureimages/4.jpg","hash":"019bca8acd24a2c695ea0faf90c7486c0a31b943","modified":1567592645946},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1567592645946},{"_id":"public/medias/featureimages/7.jpg","hash":"8609f99e843694253baca6034d57ecda2df73eb6","modified":1567592645946},{"_id":"public/medias/featureimages/6.jpg","hash":"35f8f7e7d3510923cdfe1193a0bb5d9948b78d3e","modified":1567592645946},{"_id":"public/medias/featureimages/8.jpg","hash":"ee68a9e3bc8d1619612d300cd632cde30b0709f4","modified":1567592645946},{"_id":"public/medias/featureimages/0.jpg","hash":"a641f1a0ea2567c13cb9536b2ba16a66b20f26ab","modified":1567592645946},{"_id":"public/medias/featureimages/1.jpg","hash":"7ea642ef3b915256cf92c4a447dd052ea8aeb7d3","modified":1567592645946},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1567592645946},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1567592645946},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1567592645946},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1567592645946},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1567592645946},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1567592645946},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1567592645946},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1567592645946},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1567592645946},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1567592645946},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1567592645947},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1567592645947},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1567592645947},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1567592645947},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1567592645947},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1567592645947},{"_id":"public/images/event.png","hash":"f7bf62133be3c66694837bf62616b0474880f7eb","modified":1567592645965},{"_id":"public/favicon.png","hash":"b20bab8ce1f2f7426a6960a7f0fd7cc06a923381","modified":1567592645965},{"_id":"public/images/html.png","hash":"95e9503f721a28aa6a1ab8496fea624ae180ac30","modified":1567592645971},{"_id":"public/medias/logo.png","hash":"5a113661f2f70216dab59177ff7d7458f9604049","modified":1567592645972},{"_id":"public/medias/featureimages/11.jpg","hash":"04f46bc1c391ffeaaa5d723593192110cfe05b21","modified":1567592645972},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1567592645972},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1567592645972},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1567592645972},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1567592645972},{"_id":"public/medias/featureimages/3.jpg","hash":"2638b6ccf1022562a31370cdfca429b678fa3296","modified":1567592645972},{"_id":"public/medias/featureimages/30.jpg","hash":"f3b6d34e9c61f55f68569a2248c8ab81cb3597ab","modified":1567592645972},{"_id":"public/medias/featureimages/31.jpg","hash":"b2f5c078b838df010127d68b0bd76f3fb1ebd2c4","modified":1567592645972},{"_id":"public/medias/reward/alipay.jpg","hash":"7273c89d119ed9e73e3212972670d7ea40cef071","modified":1567592645972},{"_id":"public/medias/featureimages/9.jpg","hash":"cc095f816edbed12a77c2907641e0abc1e09d0b0","modified":1567592645972},{"_id":"public/medias/reward/wechat.png","hash":"e4b6c7007108bc3631372cf2b028803c4cc8e671","modified":1567592645973},{"_id":"public/medias/avatars/avatar.jpg","hash":"90235ef440baa0373ee8332c0e58f67f1ce32e42","modified":1567592645973},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1567592645973},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1567592645973},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1567592645973},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1567592645973},{"_id":"public/medias/music/avatars/zhaolei.jpg","hash":"81b004a15dabd6c373926c67b226c3f8cbe79d41","modified":1567592645973},{"_id":"public/medias/music/avatars/maliang.jpg","hash":"99bbcdb66a9c5313d4fe4b92eeaead42c2515fa1","modified":1567592645973},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1567592645985},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1567592645985},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1567592645989},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1567592645989},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1567592645989},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1567592645989},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1567592645989},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1567592645989},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1567592645990},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1567592645990},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1567592645990},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1567592645990},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1567592645990},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1567592645990},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1567592645990},{"_id":"public/css/matery.css","hash":"f19317e98b36fcbc32a4063ccb1b64cd7f50fc0b","modified":1567592645990},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1567592645990},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1567592645990},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1567592645990},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1567592645990},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1567592645991},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1567592645991},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1567592645991},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1567592645991},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1567592645991},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1567592645991},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1567592645991},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1567592645991},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1567592645991},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1567592645991},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1567592645991},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1567592645991},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1567592645991},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1567592645992},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1567592645992},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1567592645992},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1567592645992},{"_id":"public/images/event-loop.png","hash":"69b4d7bdbdbb112b8cf0deac2d16e8de25e2e3e0","modified":1567592645992},{"_id":"public/images/TypeScript 编译原理.png","hash":"adf3c184f3d9fae5b155e642fa636eca451200a0","modified":1567592645992},{"_id":"public/images/render-process.jpg","hash":"d9bde85e73c48b1c7289a601e24f52f3a25f1d43","modified":1567592645992},{"_id":"public/medias/featureimages/10.jpg","hash":"6ec4518a5181be0645a93bcb1aadf0838f96d455","modified":1567592645993},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1567592645993},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1567592645993},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1567592645993},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1567592646005},{"_id":"public/images/css-dom-render.jpg","hash":"154deb251505d145c93b2a0dd6cf44e8ba3c3678","modified":1567592646006},{"_id":"public/images/dom-render.jpg","hash":"7eeed9bff9d46f498fe95cfd698e8e60710647ea","modified":1567592646006},{"_id":"public/medias/featureimages/25.jpg","hash":"962f6bbba5dddc11d9f54350fd228e0831b8b261","modified":1567592646006},{"_id":"public/medias/featureimages/26.jpg","hash":"e3a436c5fa3011c62150da4ada52197450105a10","modified":1567592646006},{"_id":"public/medias/music/avatars/chenhouyu.jpg","hash":"ce5a90ff7c84b8a5e3e56236783fa6806e1f1498","modified":1567592646020},{"_id":"public/images/自适应两栏布局.gif","hash":"8f2f6aa4cf40724b9d27e6f49ff1d66d7b076b42","modified":1567592646030},{"_id":"public/images/圣杯布局.gif","hash":"137d4f2207b255d31a2517bf52473f06f281a885","modified":1567592646030},{"_id":"public/medias/featureimages/29.jpg","hash":"18a3db0137bf25d79b4401375145d854be13c407","modified":1567592646030},{"_id":"public/medias/featureimages/27.jpg","hash":"5cfe63312c5c89d8dd1ea20dcc04b539d68d5d12","modified":1567592646030},{"_id":"public/medias/music/avatars/laofan.jpg","hash":"5117ed92c8175825b9116716bb4005cf7d5c09c6","modified":1567592646030},{"_id":"public/images/render-tree.jpg","hash":"3326b141b427915d4fef9476d1ae3139df589113","modified":1567592646039},{"_id":"public/images/timestamp-diagram.svg","hash":"59228be9d502f05e0a5601b1f1ee71a5570d4902","modified":1567592646039},{"_id":"public/medias/banner/3.jpg","hash":"a9e8e4566baf93f24547a87fcc2b6e27a3f751a7","modified":1567592646039},{"_id":"public/medias/banner/4.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1567592646060},{"_id":"public/medias/featureimages/5.jpg","hash":"8e3e0f116faba9997d0dfb760cb17e7be72a4bd0","modified":1567592646060},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1567592646069},{"_id":"public/medias/banner/1.jpg","hash":"81348acc6bc42d0161e8ef29b981f7b180b67493","modified":1567592646069},{"_id":"public/images/CSS.png","hash":"b84ac2e337ebbbeaf01b62d9876cc83fbd09aee0","modified":1567592646079},{"_id":"public/medias/banner/0.jpg","hash":"fcb19134a4186b2a298e7aba2a14bf2e797c2a63","modified":1567592646087},{"_id":"public/medias/banner/5.jpg","hash":"c8deee9974959eed6af64a3e8bf93b71f57fe8e4","modified":1567592646112},{"_id":"public/medias/featureimages/28.jpg","hash":"18f3a192233a473ef981510f897fbaf1c4f77e78","modified":1567592646116},{"_id":"public/medias/featureimages/33.jpg","hash":"c38b341f86d0768b0f117e7b5986f05d67478209","modified":1567592646139},{"_id":"public/medias/featureimages/35.jpg","hash":"4d4ce5773a8288515af9027f02af51eb918a7372","modified":1567592646187},{"_id":"public/medias/featureimages/34.jpg","hash":"1677f6f0a5c7bbbebc44fb24508aeff8aa79b3db","modified":1567592646232},{"_id":"public/medias/featureimages/32.jpg","hash":"06a0c475b9a57aaa767ec824616ba95d5d4feeb8","modified":1567592646240},{"_id":"public/medias/music/wanghouyusheng.mp3","hash":"c6a9203f13c4021c34d012fa8f2e3d3a713603b4","modified":1567592646287},{"_id":"public/medias/music/lixiangsanxun.mp3","hash":"3830afc5553bf36e04cadcd5c0d060e1a838fbbc","modified":1567592646302},{"_id":"public/medias/music/hua.mp3","hash":"6ed72d5b959a236deeaf9cbee66bd29f74cffb14","modified":1567592646315},{"_id":"public/medias/music/yongbaoni.mp3","hash":"4422fc80bafc7ae3e5f03af1ec38cb0f6f15bf7e","modified":1567592646336}],"Category":[{"name":"HTML","_id":"ck0546n6v0008kuu6raxcalha"},{"name":"CSS","_id":"ck0546n71000dkuu6gfkua8y8"},{"name":"JavaScript","_id":"ck0546n7g0012kuu6i9wbj9o5"},{"name":"函数式编程","_id":"ck0546n850029kuu6zs9rt8ji"},{"name":"Linux","_id":"ck0546n8k003akuu6lftjz68q"},{"name":"Node","_id":"ck0546n9f004tkuu6239p7k8h"},{"name":"PHP","_id":"ck0546na0006bkuu6qcpkgj5e"},{"name":"TypeScript","_id":"ck0546na5006nkuu6vosx55mm"},{"name":"vue","_id":"ck0546nal008fkuu6rv206ofr"}],"Data":[{"_id":"musics","data":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2019-08-26T16:46:27.862Z","path":"404.html","comments":1,"_id":"ck0546n3l0000kuu6358pt7o4","content":"","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n**北京阳光帕拉网络科技有限公司 2018.2-至今**\n*前端负责人*\n\n1.负责公司线上产品前端架构及框架搭建\n\n2.负责公司线上产品性能优化 \n\n3.负责小程序、app、管理后台业务开发 \n\n4.负责对团队人员的培养及技术指导 \n\n5.负责对前端工作工期把控、及分配等 \n\n6.负责把前端项目和产品，后端沟通后落地实施\n\n\n\n**北京璧合科技股份有限公司 2016.7-2018.2**\n*前端组长*\n\n1.负责公司级组件库的编写\n\n2.负责公司sass系统的开发、迭代和维护 \n\n3.负责公司运营页面的开发 \n\n4.负责培养初级前端开发\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n**北京阳光帕拉网络科技有限公司 2018.2-至今**\n*前端负责人*\n\n1.负责公司线上产品前端架构及框架搭建\n\n2.负责公司线上产品性能优化 \n\n3.负责小程序、app、管理后台业务开发 \n\n4.负责对团队人员的培养及技术指导 \n\n5.负责对前端工作工期把控、及分配等 \n\n6.负责把前端项目和产品，后端沟通后落地实施\n\n\n\n**北京璧合科技股份有限公司 2016.7-2018.2**\n*前端组长*\n\n1.负责公司级组件库的编写\n\n2.负责公司sass系统的开发、迭代和维护 \n\n3.负责公司运营页面的开发 \n\n4.负责培养初级前端开发\n\n\n","updated":"2019-08-26T16:46:27.880Z","path":"about/index.html","comments":1,"_id":"ck0546n570001kuu62t431uu6","content":"<p><strong>北京阳光帕拉网络科技有限公司 2018.2-至今</strong><br><em>前端负责人</em></p>\n<p>1.负责公司线上产品前端架构及框架搭建</p>\n<p>2.负责公司线上产品性能优化 </p>\n<p>3.负责小程序、app、管理后台业务开发 </p>\n<p>4.负责对团队人员的培养及技术指导 </p>\n<p>5.负责对前端工作工期把控、及分配等 </p>\n<p>6.负责把前端项目和产品，后端沟通后落地实施</p>\n<p><strong>北京璧合科技股份有限公司 2016.7-2018.2</strong><br><em>前端组长</em></p>\n<p>1.负责公司级组件库的编写</p>\n<p>2.负责公司sass系统的开发、迭代和维护 </p>\n<p>3.负责公司运营页面的开发 </p>\n<p>4.负责培养初级前端开发</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p><strong>北京阳光帕拉网络科技有限公司 2018.2-至今</strong><br><em>前端负责人</em></p>\n<p>1.负责公司线上产品前端架构及框架搭建</p>\n<p>2.负责公司线上产品性能优化 </p>\n<p>3.负责小程序、app、管理后台业务开发 </p>\n<p>4.负责对团队人员的培养及技术指导 </p>\n<p>5.负责对前端工作工期把控、及分配等 </p>\n<p>6.负责把前端项目和产品，后端沟通后落地实施</p>\n<p><strong>北京璧合科技股份有限公司 2016.7-2018.2</strong><br><em>前端组长</em></p>\n<p>1.负责公司级组件库的编写</p>\n<p>2.负责公司sass系统的开发、迭代和维护 </p>\n<p>3.负责公司运营页面的开发 </p>\n<p>4.负责培养初级前端开发</p>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2019-08-26T16:46:27.880Z","path":"archives/index.html","comments":1,"_id":"ck0546n580002kuu6ghk17zai","content":"","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2019-08-26T16:46:27.880Z","path":"categories/index.html","comments":1,"_id":"ck0546n590003kuu6ciw6x4zs","content":"","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n**感谢所有支持和帮助过我的人，希望今后也能和大家一起学习进步。**\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n**感谢所有支持和帮助过我的人，希望今后也能和大家一起学习进步。**\n","updated":"2019-08-26T16:46:27.880Z","path":"friends/index.html","comments":1,"_id":"ck0546n5a0004kuu6sh052827","content":"<p><strong>感谢所有支持和帮助过我的人，希望今后也能和大家一起学习进步。</strong></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p><strong>感谢所有支持和帮助过我的人，希望今后也能和大家一起学习进步。</strong></p>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2019-08-26T16:46:27.911Z","path":"tags/index.html","comments":1,"_id":"ck0546n5w0005kuu6v0k1dsg6","content":"","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"HTML 系列总结","date":"2017-05-10T14:00:00.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"包含 html 的基本概念，标准模式和混杂模式，html语义化，同源策略，跨域等基础知识。","_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n### 什么是html\n超文本标记语言（HyperText Markup Language），是“网页浏览器中看到展示信息的”设计的一种标记语言。\n\n### Doctype含义\n\n- <!DOCTYPE>声明位于位于HTML文档中的第一行，告诉浏览器的解释器用什么文档标准来解析这个文档。\n- DOCTYPE书写错误或者不存在会导致文档已兼容模式呈现\n\n### 标准模式和混杂模式\n- 标准模式： html 排版和 js 渲染工作模式都是以该浏览器支持的最高标准运行。\n- 兼容模式：页面已宽松的向后兼容的方式显示，模拟老浏览器的行为。\n\n### HTML5 为什么只需要写 `<!DOCTYPE HTML>`\n\nhtml5不是基于SGML，所以不需要对DTD进行引用，但是它需要对文档类型声明，需要doctype来规范浏览器行为。\n\n### 行内元素-块级元素-空元素\n-  css中规定每个元素都有默认的display属性和值\n-  该元素的属性的值为‘inline’的则为行内元素（如:`span,a img,input`等）\n-  该元素的属性的值为‘block’的则为块级元素（`div，ul,li h1...p`等）\n-  空（void）元素 `<br> <hr> <img> <input> <link> <meta>` 等\n\n### html语义化\n1. 定义：正确的标签做正确的事情\n2. 为什么要做语义化\n  -  有利于SEO，有利于搜索引擎爬虫更好的理解我们的网页，从而获取更多的有效信息，提升网页的权重。\n  -  在没有CSS的时候能够清晰的看出网页的结构，增强可读性，便于团队开发和维护。\n  -  支持多终端设备的浏览器渲染。\n3. SEO\n  - 汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。\n  - 目的：\n    为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。\n  - 优化方式： \n    - 内部优化：\n      1. META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化。\n      2. 内部链接的优化，包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接。\n      3. 网站内容更新：每天保持站内的更新(主要是文章的更新等)。\n    - 外部优化：\n      1. 外部链接类别：友情链接、博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、站群、相关信息网等尽量保持链接的多样性。\n      2. 外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升。\n      3. 外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名。\n\n### 同源策略\n1. 概念：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。\n2. 目的：保证用户信息安全，防止恶意网站窃取数据，防止cookie共享\n3. 限制范围\n  - cookie、localStorage、indexedDB无法读取\n  - dom 无法获取\n  - ajax不能发送\n  - form表单没有限制\n4. 如何设置同源策略(host)：document.domain\n5. 不受同源策略限制：\n  - 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。\n  - 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的`<script src=\"...\"></script>，<img>，<link>，<iframe>`等。\n\n### 跨域\n  受到浏览器同源策略的影响，要操作其他源下面的脚本，就需要跨域。\n\n### Ajax跨域的解决方案\n**1.JSONP：**\n\n  网页添加一个`<script>`元素，向服务器请求jsON数据。服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。\n\n    - 缺点只支持get请求\n    - 优点简单方便，易理解，兼容性良好\n    - 如下示例代码\n    ```\n      //动态创建script，用于跨越操作\n      function creatScriptTag(src) {\n        var script = document.createElement('script');\n        script.setAttribute(\"type\",\"text/javascript\");\n        script.src = src;\n        document.body.appendChild(script);\n      }\n      // 调用creatScriptTag函数\n      window.onload = function () {\n        var url = '/index.php?jsoncallback=result';\n        creatScriptTag(url);\n      }\n      // 定义回调函数\n      function result (data) {\n        console.log(data);\n      } \n    ```\n\n    ```\n      // index.php \n      <?php\n      header('Content-type: application/json');\n      //获取回调函数名\n      $jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']);\n      //取数据\n      $data = [\n        'data'=>'123',\n      ];\n      $json_data = json_encode(array('code'=>'200','msg'=>'请求成功','data' => $data),jsON_UNESCAPED_UNICODE);\n      //输出jsonp格式的数据\n      echo $jsoncallback .\"(\" . $json_data . \")\";\n      ?>\n    ```\n    \n**2.WebSocket:**\n\n  是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器设置利用origin字段设置白名单，就可以通过它进行跨源通信。\n\n**3.CORS（Cross-Origin Resource Sharing）**\n   - 在请求头信息中增加Origin字段，用来说明此次请求来自那个源（协议+域名+端口），此字段可以设置相应白名单\n   - 必须设置`Access-Control-Allow-Origin`字段，值要求是`Origin`字段的值或者是*，*的意思是接受任意域名的请求\n   - CORS请求默认不发送cookie和http认证信息，如果要发送，要在服务器端指`Access-Control-Allow-Credentials: true`,并且ajax请求必须打开withCredentials属性\n   ```\n   var xhr = new XMLHttpRequest();\n   xhr.withCredentials = true;\n   ```\n   - 如果选择发送cookie,`Access-Control-Allow-Origin`字段不能设为*，必须指定明确的，与当前网页一致的域名\n\n\n\n\n","source":"_posts/html/html.md","raw":"---\ntitle: HTML 系列总结\ndate: 2017-05-10 22:00:00\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 包含 html 的基本概念，标准模式和混杂模式，html语义化，同源策略，跨域等基础知识。\ntags:\n- HTML\ncategories:\n- HTML\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n### 什么是html\n超文本标记语言（HyperText Markup Language），是“网页浏览器中看到展示信息的”设计的一种标记语言。\n\n### Doctype含义\n\n- <!DOCTYPE>声明位于位于HTML文档中的第一行，告诉浏览器的解释器用什么文档标准来解析这个文档。\n- DOCTYPE书写错误或者不存在会导致文档已兼容模式呈现\n\n### 标准模式和混杂模式\n- 标准模式： html 排版和 js 渲染工作模式都是以该浏览器支持的最高标准运行。\n- 兼容模式：页面已宽松的向后兼容的方式显示，模拟老浏览器的行为。\n\n### HTML5 为什么只需要写 `<!DOCTYPE HTML>`\n\nhtml5不是基于SGML，所以不需要对DTD进行引用，但是它需要对文档类型声明，需要doctype来规范浏览器行为。\n\n### 行内元素-块级元素-空元素\n-  css中规定每个元素都有默认的display属性和值\n-  该元素的属性的值为‘inline’的则为行内元素（如:`span,a img,input`等）\n-  该元素的属性的值为‘block’的则为块级元素（`div，ul,li h1...p`等）\n-  空（void）元素 `<br> <hr> <img> <input> <link> <meta>` 等\n\n### html语义化\n1. 定义：正确的标签做正确的事情\n2. 为什么要做语义化\n  -  有利于SEO，有利于搜索引擎爬虫更好的理解我们的网页，从而获取更多的有效信息，提升网页的权重。\n  -  在没有CSS的时候能够清晰的看出网页的结构，增强可读性，便于团队开发和维护。\n  -  支持多终端设备的浏览器渲染。\n3. SEO\n  - 汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。\n  - 目的：\n    为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。\n  - 优化方式： \n    - 内部优化：\n      1. META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化。\n      2. 内部链接的优化，包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接。\n      3. 网站内容更新：每天保持站内的更新(主要是文章的更新等)。\n    - 外部优化：\n      1. 外部链接类别：友情链接、博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、站群、相关信息网等尽量保持链接的多样性。\n      2. 外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升。\n      3. 外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名。\n\n### 同源策略\n1. 概念：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。\n2. 目的：保证用户信息安全，防止恶意网站窃取数据，防止cookie共享\n3. 限制范围\n  - cookie、localStorage、indexedDB无法读取\n  - dom 无法获取\n  - ajax不能发送\n  - form表单没有限制\n4. 如何设置同源策略(host)：document.domain\n5. 不受同源策略限制：\n  - 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。\n  - 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的`<script src=\"...\"></script>，<img>，<link>，<iframe>`等。\n\n### 跨域\n  受到浏览器同源策略的影响，要操作其他源下面的脚本，就需要跨域。\n\n### Ajax跨域的解决方案\n**1.JSONP：**\n\n  网页添加一个`<script>`元素，向服务器请求jsON数据。服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。\n\n    - 缺点只支持get请求\n    - 优点简单方便，易理解，兼容性良好\n    - 如下示例代码\n    ```\n      //动态创建script，用于跨越操作\n      function creatScriptTag(src) {\n        var script = document.createElement('script');\n        script.setAttribute(\"type\",\"text/javascript\");\n        script.src = src;\n        document.body.appendChild(script);\n      }\n      // 调用creatScriptTag函数\n      window.onload = function () {\n        var url = '/index.php?jsoncallback=result';\n        creatScriptTag(url);\n      }\n      // 定义回调函数\n      function result (data) {\n        console.log(data);\n      } \n    ```\n\n    ```\n      // index.php \n      <?php\n      header('Content-type: application/json');\n      //获取回调函数名\n      $jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']);\n      //取数据\n      $data = [\n        'data'=>'123',\n      ];\n      $json_data = json_encode(array('code'=>'200','msg'=>'请求成功','data' => $data),jsON_UNESCAPED_UNICODE);\n      //输出jsonp格式的数据\n      echo $jsoncallback .\"(\" . $json_data . \")\";\n      ?>\n    ```\n    \n**2.WebSocket:**\n\n  是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器设置利用origin字段设置白名单，就可以通过它进行跨源通信。\n\n**3.CORS（Cross-Origin Resource Sharing）**\n   - 在请求头信息中增加Origin字段，用来说明此次请求来自那个源（协议+域名+端口），此字段可以设置相应白名单\n   - 必须设置`Access-Control-Allow-Origin`字段，值要求是`Origin`字段的值或者是*，*的意思是接受任意域名的请求\n   - CORS请求默认不发送cookie和http认证信息，如果要发送，要在服务器端指`Access-Control-Allow-Credentials: true`,并且ajax请求必须打开withCredentials属性\n   ```\n   var xhr = new XMLHttpRequest();\n   xhr.withCredentials = true;\n   ```\n   - 如果选择发送cookie,`Access-Control-Allow-Origin`字段不能设为*，必须指定明确的，与当前网页一致的域名\n\n\n\n\n","slug":"html/html","published":1,"updated":"2019-08-26T16:46:27.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n6p0006kuu6769lju18","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n<h3 id=\"什么是html\"><a href=\"#什么是html\" class=\"headerlink\" title=\"什么是html\"></a>什么是html</h3><p>超文本标记语言（HyperText Markup Language），是“网页浏览器中看到展示信息的”设计的一种标记语言。</p>\n<h3 id=\"Doctype含义\"><a href=\"#Doctype含义\" class=\"headerlink\" title=\"Doctype含义\"></a>Doctype含义</h3><ul>\n<li><!DOCTYPE>声明位于位于HTML文档中的第一行，告诉浏览器的解释器用什么文档标准来解析这个文档。</li>\n<li>DOCTYPE书写错误或者不存在会导致文档已兼容模式呈现</li>\n</ul>\n<h3 id=\"标准模式和混杂模式\"><a href=\"#标准模式和混杂模式\" class=\"headerlink\" title=\"标准模式和混杂模式\"></a>标准模式和混杂模式</h3><ul>\n<li>标准模式： html 排版和 js 渲染工作模式都是以该浏览器支持的最高标准运行。</li>\n<li>兼容模式：页面已宽松的向后兼容的方式显示，模拟老浏览器的行为。</li>\n</ul>\n<h3 id=\"HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt\"><a href=\"#HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt\" class=\"headerlink\" title=\"HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;\"></a>HTML5 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code></h3><p>html5不是基于SGML，所以不需要对DTD进行引用，但是它需要对文档类型声明，需要doctype来规范浏览器行为。</p>\n<h3 id=\"行内元素-块级元素-空元素\"><a href=\"#行内元素-块级元素-空元素\" class=\"headerlink\" title=\"行内元素-块级元素-空元素\"></a>行内元素-块级元素-空元素</h3><ul>\n<li>css中规定每个元素都有默认的display属性和值</li>\n<li>该元素的属性的值为‘inline’的则为行内元素（如:<code>span,a img,input</code>等）</li>\n<li>该元素的属性的值为‘block’的则为块级元素（<code>div，ul,li h1...p</code>等）</li>\n<li>空（void）元素 <code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code> 等</li>\n</ul>\n<h3 id=\"html语义化\"><a href=\"#html语义化\" class=\"headerlink\" title=\"html语义化\"></a>html语义化</h3><ol>\n<li>定义：正确的标签做正确的事情</li>\n<li>为什么要做语义化<ul>\n<li>有利于SEO，有利于搜索引擎爬虫更好的理解我们的网页，从而获取更多的有效信息，提升网页的权重。</li>\n<li>在没有CSS的时候能够清晰的看出网页的结构，增强可读性，便于团队开发和维护。</li>\n<li>支持多终端设备的浏览器渲染。</li>\n</ul>\n</li>\n<li>SEO<ul>\n<li>汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。</li>\n<li>目的：<br>为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。</li>\n<li>优化方式： <ul>\n<li>内部优化：<ol>\n<li>META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化。</li>\n<li>内部链接的优化，包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接。</li>\n<li>网站内容更新：每天保持站内的更新(主要是文章的更新等)。</li>\n</ol>\n</li>\n<li>外部优化：<ol>\n<li>外部链接类别：友情链接、博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、站群、相关信息网等尽量保持链接的多样性。</li>\n<li>外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升。</li>\n<li>外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><ol>\n<li>概念：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。</li>\n<li>目的：保证用户信息安全，防止恶意网站窃取数据，防止cookie共享</li>\n<li>限制范围<ul>\n<li>cookie、localStorage、indexedDB无法读取</li>\n<li>dom 无法获取</li>\n<li>ajax不能发送</li>\n<li>form表单没有限制</li>\n</ul>\n</li>\n<li>如何设置同源策略(host)：document.domain</li>\n<li>不受同源策略限制：<ul>\n<li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li>\n<li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><p>  受到浏览器同源策略的影响，要操作其他源下面的脚本，就需要跨域。</p>\n<h3 id=\"Ajax跨域的解决方案\"><a href=\"#Ajax跨域的解决方案\" class=\"headerlink\" title=\"Ajax跨域的解决方案\"></a>Ajax跨域的解决方案</h3><p><strong>1.JSONP：</strong></p>\n<p>  网页添加一个<code>&lt;script&gt;</code>元素，向服务器请求jsON数据。服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>\n<pre><code>- 缺点只支持get请求\n- 优点简单方便，易理解，兼容性良好\n- 如下示例代码\n```\n  //动态创建script，用于跨越操作\n  function creatScriptTag(src) {\n    var script = document.createElement(&#39;script&#39;);\n    script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);\n    script.src = src;\n    document.body.appendChild(script);\n  }\n  // 调用creatScriptTag函数\n  window.onload = function () {\n    var url = &#39;/index.php?jsoncallback=result&#39;;\n    creatScriptTag(url);\n  }\n  // 定义回调函数\n  function result (data) {\n    console.log(data);\n  } \n```\n\n```\n  // index.php \n  &lt;?php\n  header(&#39;Content-type: application/json&#39;);\n  //获取回调函数名\n  $jsoncallback = htmlspecialchars($_REQUEST [&#39;jsoncallback&#39;]);\n  //取数据\n  $data = [\n    &#39;data&#39;=&gt;&#39;123&#39;,\n  ];\n  $json_data = json_encode(array(&#39;code&#39;=&gt;&#39;200&#39;,&#39;msg&#39;=&gt;&#39;请求成功&#39;,&#39;data&#39; =&gt; $data),jsON_UNESCAPED_UNICODE);\n  //输出jsonp格式的数据\n  echo $jsoncallback .&quot;(&quot; . $json_data . &quot;)&quot;;\n  ?&gt;\n```</code></pre><p><strong>2.WebSocket:</strong></p>\n<p>  是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器设置利用origin字段设置白名单，就可以通过它进行跨源通信。</p>\n<p><strong>3.CORS（Cross-Origin Resource Sharing）</strong></p>\n<ul>\n<li>在请求头信息中增加Origin字段，用来说明此次请求来自那个源（协议+域名+端口），此字段可以设置相应白名单</li>\n<li>必须设置<code>Access-Control-Allow-Origin</code>字段，值要求是<code>Origin</code>字段的值或者是<em>，</em>的意思是接受任意域名的请求</li>\n<li>CORS请求默认不发送cookie和http认证信息，如果要发送，要在服务器端指<code>Access-Control-Allow-Credentials: true</code>,并且ajax请求必须打开withCredentials属性<pre><code>var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;</code></pre></li>\n<li>如果选择发送cookie,<code>Access-Control-Allow-Origin</code>字段不能设为*，必须指定明确的，与当前网页一致的域名</li>\n</ul>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe></div>\n\n\n<h3 id=\"什么是html\"><a href=\"#什么是html\" class=\"headerlink\" title=\"什么是html\"></a>什么是html</h3><p>超文本标记语言（HyperText Markup Language），是“网页浏览器中看到展示信息的”设计的一种标记语言。</p>\n<h3 id=\"Doctype含义\"><a href=\"#Doctype含义\" class=\"headerlink\" title=\"Doctype含义\"></a>Doctype含义</h3><ul>\n<li><!DOCTYPE>声明位于位于HTML文档中的第一行，告诉浏览器的解释器用什么文档标准来解析这个文档。</li>\n<li>DOCTYPE书写错误或者不存在会导致文档已兼容模式呈现</li>\n</ul>\n<h3 id=\"标准模式和混杂模式\"><a href=\"#标准模式和混杂模式\" class=\"headerlink\" title=\"标准模式和混杂模式\"></a>标准模式和混杂模式</h3><ul>\n<li>标准模式： html 排版和 js 渲染工作模式都是以该浏览器支持的最高标准运行。</li>\n<li>兼容模式：页面已宽松的向后兼容的方式显示，模拟老浏览器的行为。</li>\n</ul>\n<h3 id=\"HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt\"><a href=\"#HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt\" class=\"headerlink\" title=\"HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;\"></a>HTML5 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code></h3><p>html5不是基于SGML，所以不需要对DTD进行引用，但是它需要对文档类型声明，需要doctype来规范浏览器行为。</p>\n<h3 id=\"行内元素-块级元素-空元素\"><a href=\"#行内元素-块级元素-空元素\" class=\"headerlink\" title=\"行内元素-块级元素-空元素\"></a>行内元素-块级元素-空元素</h3><ul>\n<li>css中规定每个元素都有默认的display属性和值</li>\n<li>该元素的属性的值为‘inline’的则为行内元素（如:<code>span,a img,input</code>等）</li>\n<li>该元素的属性的值为‘block’的则为块级元素（<code>div，ul,li h1...p</code>等）</li>\n<li>空（void）元素 <code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code> 等</li>\n</ul>\n<h3 id=\"html语义化\"><a href=\"#html语义化\" class=\"headerlink\" title=\"html语义化\"></a>html语义化</h3><ol>\n<li>定义：正确的标签做正确的事情</li>\n<li>为什么要做语义化<ul>\n<li>有利于SEO，有利于搜索引擎爬虫更好的理解我们的网页，从而获取更多的有效信息，提升网页的权重。</li>\n<li>在没有CSS的时候能够清晰的看出网页的结构，增强可读性，便于团队开发和维护。</li>\n<li>支持多终端设备的浏览器渲染。</li>\n</ul>\n</li>\n<li>SEO<ul>\n<li>汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。</li>\n<li>目的：<br>为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。</li>\n<li>优化方式： <ul>\n<li>内部优化：<ol>\n<li>META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化。</li>\n<li>内部链接的优化，包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接。</li>\n<li>网站内容更新：每天保持站内的更新(主要是文章的更新等)。</li>\n</ol>\n</li>\n<li>外部优化：<ol>\n<li>外部链接类别：友情链接、博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、站群、相关信息网等尽量保持链接的多样性。</li>\n<li>外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升。</li>\n<li>外链选择：与一些和你网站相关性比较高，整体质量比较好的网站交换友情链接，巩固稳定关键词排名。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><ol>\n<li>概念：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。</li>\n<li>目的：保证用户信息安全，防止恶意网站窃取数据，防止cookie共享</li>\n<li>限制范围<ul>\n<li>cookie、localStorage、indexedDB无法读取</li>\n<li>dom 无法获取</li>\n<li>ajax不能发送</li>\n<li>form表单没有限制</li>\n</ul>\n</li>\n<li>如何设置同源策略(host)：document.domain</li>\n<li>不受同源策略限制：<ul>\n<li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li>\n<li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><p>  受到浏览器同源策略的影响，要操作其他源下面的脚本，就需要跨域。</p>\n<h3 id=\"Ajax跨域的解决方案\"><a href=\"#Ajax跨域的解决方案\" class=\"headerlink\" title=\"Ajax跨域的解决方案\"></a>Ajax跨域的解决方案</h3><p><strong>1.JSONP：</strong></p>\n<p>  网页添加一个<code>&lt;script&gt;</code>元素，向服务器请求jsON数据。服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p>\n<pre><code>- 缺点只支持get请求\n- 优点简单方便，易理解，兼容性良好\n- 如下示例代码\n```\n  //动态创建script，用于跨越操作\n  function creatScriptTag(src) {\n    var script = document.createElement(&#39;script&#39;);\n    script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);\n    script.src = src;\n    document.body.appendChild(script);\n  }\n  // 调用creatScriptTag函数\n  window.onload = function () {\n    var url = &#39;/index.php?jsoncallback=result&#39;;\n    creatScriptTag(url);\n  }\n  // 定义回调函数\n  function result (data) {\n    console.log(data);\n  } \n```\n\n```\n  // index.php \n  &lt;?php\n  header(&#39;Content-type: application/json&#39;);\n  //获取回调函数名\n  $jsoncallback = htmlspecialchars($_REQUEST [&#39;jsoncallback&#39;]);\n  //取数据\n  $data = [\n    &#39;data&#39;=&gt;&#39;123&#39;,\n  ];\n  $json_data = json_encode(array(&#39;code&#39;=&gt;&#39;200&#39;,&#39;msg&#39;=&gt;&#39;请求成功&#39;,&#39;data&#39; =&gt; $data),jsON_UNESCAPED_UNICODE);\n  //输出jsonp格式的数据\n  echo $jsoncallback .&quot;(&quot; . $json_data . &quot;)&quot;;\n  ?&gt;\n```</code></pre><p><strong>2.WebSocket:</strong></p>\n<p>  是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器设置利用origin字段设置白名单，就可以通过它进行跨源通信。</p>\n<p><strong>3.CORS（Cross-Origin Resource Sharing）</strong></p>\n<ul>\n<li>在请求头信息中增加Origin字段，用来说明此次请求来自那个源（协议+域名+端口），此字段可以设置相应白名单</li>\n<li>必须设置<code>Access-Control-Allow-Origin</code>字段，值要求是<code>Origin</code>字段的值或者是<em>，</em>的意思是接受任意域名的请求</li>\n<li>CORS请求默认不发送cookie和http认证信息，如果要发送，要在服务器端指<code>Access-Control-Allow-Credentials: true</code>,并且ajax请求必须打开withCredentials属性<pre><code>var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;</code></pre></li>\n<li>如果选择发送cookie,<code>Access-Control-Allow-Origin</code>字段不能设为*，必须指定明确的，与当前网页一致的域名</li>\n</ul>\n"},{"title":"CSS 基本布局","date":"2017-06-15T12:02:06.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识","_content":"\n### 自适应两栏布局\n\n利用BFC实现自适应两栏布局\n```\n/****css****/\n.aside{\n  float: left;\n  width: 180px;\n  height: 500px;\n  background-color: red;\n  opacity: 0.5;\n}\n.main{\n  overflow: hidden;\n  height: 500px;\n  background-color: green;\n}\n\n<!--html-->\n<div class=\"box\">\n  <div class=\"aside\">左侧</div>\n  <div class=\"main\">右侧</div>\n</div>\n```\n![](/images/自适应两栏布局.gif)\n\n\n### 圣杯布局和双飞翼布局\n\n1. 解决什么问题：两边定宽，中间自适应的三栏布局，中间栏放在文档流前面以优先渲染\n2. 相同点：三栏全float浮动，左右两栏加上负margin让中间栏div并排，形成三栏\n3. 不同点： \n  - 圣杯布局为了中间内容不被遮挡，将中间div设置左右padding-left和padding-right,将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。\n  - 双飞翼布局，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。\n4. 圣杯布局代码\n\n```\n/****css****/\n.main{\n  width: 100%;\n  background: green;\n}\n.left{\n  left: -200px;\n  width: 200px;\n  margin-left: -100%;\n  background: yellowgreen;\n}\n.right{\n  right: -200px;\n  width: 200px;\n  margin-left: -200px;\n  background-color: red;\n}\n.main,.left,.right{\n  position: relative;\n  float: left;\n  min-height: 500px;\n}\n.container{\n  padding: 0 200px;\n  overflow: hidden;\n  border: 5px solid #ccc;\n}\n\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间栏目</div>\n  <div class=\"left\">左侧栏目</div>\n  <div class=\"right\">右侧栏目</div>\n</div>\n```\n\n5. 双飞翼布局代码\n\n```\n/****css****/\n.main,.left,.right{\n  float: left;\n  min-height: 500px;\n}\n.main{\n  width:100%;\n  background-color: red;\n}\n.left{\n  width: 200px;\n  margin-left: -100%;\n  background-color: yellow;\n}\n.right{\n  width: 200px;\n  background-color: green;\n  margin-left: -200px;\n}\n.content{\n  margin: 0 200px;\n}\n\n<!--html-->\n<div class=\"container\"> \n　　<div class=\"main\">\n    　　<div class=\"content\">中间栏目</div> \n    </div>\n　　<div class=\"left\">左侧栏目</div> \n　　<div class=\"right\">右侧栏目</div> \n</div>\n```\n\n6. 效果图\n![](/images/圣杯布局.gif)\n\n### flex弹性盒子布局\n1. 定义：Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n2. 优点：相对于传统布局更具有灵活性。\n3. 缺点：虽然现代浏览器都支持，但是还有少部分浏览器需要单独处理其兼容性\n4. 问题：\n  - 绝对定位与固定定位的盒子不参与flex布局\n  - 使用Flex布局以后，子元素的float、clear和vertical-align等属性将失效\n  - 具体语法参考阮大大flex布局语法篇和实例篇\n  - http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n  - http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\n\n5. 三栏布局示例 \n\n```\n/****css****/\n.container{\n  display: flex;\n  min-height: 500px;\n}\n.main{\n  flex-grow:1;\n  background-color: red;\n}\n.left{\n  order: -1;\n  flex-basis: 200px;\n  background-color: yellow;\n}\n.right{\n  flex-basis: 200px;\n  background-color: green;\n}\n\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间内容区域</div>\n  <div class=\"left\">左边栏区域</div>\n  <div class=\"right\">右边栏区域</div>\n</div>\n```\n\n### 绝对定位布局\n\n1. position:absolute绝对定位使元素脱离文档流，因此不占据当前层级的空间\n2. 三栏布局代码示例\n```\n/****css****/\n.container{\n  position: relative;\n}\n.main,.left,.right{\n  min-height: 500px;\n  top: 0;\n}\n.main{\n  background-color: red;\n  margin: 0 200px;\n}\n.left{\n  position: absolute;\n  left: 0px;\n  width: 200px;\n  background-color: green;\n}\n.right{\n  position:absolute;\n  right: 0px;\n  width: 200px;\n  background: yellow;\n}\n\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间内容区域</div>\n  <div class=\"left\">左边区域</div>\n  <div class=\"right\">右边区域</div>\n</div>\n```\n### media响应式布局\n\n1. 定义（Responsive Web Design）：一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本\n2. 优点\n  - 跨平台，面对不同分辨率设备灵活性强\n  - 能够快捷解决多设备显示适应问题\n  - 节约成本\n3. 缺点\n  - 兼容性 不兼容低版本浏览器，\b各种设备工作量大，效率低下\n  - 代码冗余量大，加载时间长\n  - 折中方案，达不到理想的布局效果 \n\n### 移动端rem布局\n\n1. 定义（font size of the root element）：相对于根元素的字体大小的单位\n2. 作用：通过js动态计算html font-size 能够使html页面比响应式布局，流式布局，设置最大宽度布局等效果更完善\n3. 需要考虑当前手机的dpr","source":"_posts/css/base-layout.md","raw":"---\ntitle: CSS 基本布局\ndate: 2017-6-15 20:02:06\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识\ntags:\n- CSS\ncategories:\n- CSS\n---\n\n### 自适应两栏布局\n\n利用BFC实现自适应两栏布局\n```\n/****css****/\n.aside{\n  float: left;\n  width: 180px;\n  height: 500px;\n  background-color: red;\n  opacity: 0.5;\n}\n.main{\n  overflow: hidden;\n  height: 500px;\n  background-color: green;\n}\n\n<!--html-->\n<div class=\"box\">\n  <div class=\"aside\">左侧</div>\n  <div class=\"main\">右侧</div>\n</div>\n```\n![](/images/自适应两栏布局.gif)\n\n\n### 圣杯布局和双飞翼布局\n\n1. 解决什么问题：两边定宽，中间自适应的三栏布局，中间栏放在文档流前面以优先渲染\n2. 相同点：三栏全float浮动，左右两栏加上负margin让中间栏div并排，形成三栏\n3. 不同点： \n  - 圣杯布局为了中间内容不被遮挡，将中间div设置左右padding-left和padding-right,将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。\n  - 双飞翼布局，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。\n4. 圣杯布局代码\n\n```\n/****css****/\n.main{\n  width: 100%;\n  background: green;\n}\n.left{\n  left: -200px;\n  width: 200px;\n  margin-left: -100%;\n  background: yellowgreen;\n}\n.right{\n  right: -200px;\n  width: 200px;\n  margin-left: -200px;\n  background-color: red;\n}\n.main,.left,.right{\n  position: relative;\n  float: left;\n  min-height: 500px;\n}\n.container{\n  padding: 0 200px;\n  overflow: hidden;\n  border: 5px solid #ccc;\n}\n\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间栏目</div>\n  <div class=\"left\">左侧栏目</div>\n  <div class=\"right\">右侧栏目</div>\n</div>\n```\n\n5. 双飞翼布局代码\n\n```\n/****css****/\n.main,.left,.right{\n  float: left;\n  min-height: 500px;\n}\n.main{\n  width:100%;\n  background-color: red;\n}\n.left{\n  width: 200px;\n  margin-left: -100%;\n  background-color: yellow;\n}\n.right{\n  width: 200px;\n  background-color: green;\n  margin-left: -200px;\n}\n.content{\n  margin: 0 200px;\n}\n\n<!--html-->\n<div class=\"container\"> \n　　<div class=\"main\">\n    　　<div class=\"content\">中间栏目</div> \n    </div>\n　　<div class=\"left\">左侧栏目</div> \n　　<div class=\"right\">右侧栏目</div> \n</div>\n```\n\n6. 效果图\n![](/images/圣杯布局.gif)\n\n### flex弹性盒子布局\n1. 定义：Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n2. 优点：相对于传统布局更具有灵活性。\n3. 缺点：虽然现代浏览器都支持，但是还有少部分浏览器需要单独处理其兼容性\n4. 问题：\n  - 绝对定位与固定定位的盒子不参与flex布局\n  - 使用Flex布局以后，子元素的float、clear和vertical-align等属性将失效\n  - 具体语法参考阮大大flex布局语法篇和实例篇\n  - http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n  - http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\n\n5. 三栏布局示例 \n\n```\n/****css****/\n.container{\n  display: flex;\n  min-height: 500px;\n}\n.main{\n  flex-grow:1;\n  background-color: red;\n}\n.left{\n  order: -1;\n  flex-basis: 200px;\n  background-color: yellow;\n}\n.right{\n  flex-basis: 200px;\n  background-color: green;\n}\n\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间内容区域</div>\n  <div class=\"left\">左边栏区域</div>\n  <div class=\"right\">右边栏区域</div>\n</div>\n```\n\n### 绝对定位布局\n\n1. position:absolute绝对定位使元素脱离文档流，因此不占据当前层级的空间\n2. 三栏布局代码示例\n```\n/****css****/\n.container{\n  position: relative;\n}\n.main,.left,.right{\n  min-height: 500px;\n  top: 0;\n}\n.main{\n  background-color: red;\n  margin: 0 200px;\n}\n.left{\n  position: absolute;\n  left: 0px;\n  width: 200px;\n  background-color: green;\n}\n.right{\n  position:absolute;\n  right: 0px;\n  width: 200px;\n  background: yellow;\n}\n\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间内容区域</div>\n  <div class=\"left\">左边区域</div>\n  <div class=\"right\">右边区域</div>\n</div>\n```\n### media响应式布局\n\n1. 定义（Responsive Web Design）：一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本\n2. 优点\n  - 跨平台，面对不同分辨率设备灵活性强\n  - 能够快捷解决多设备显示适应问题\n  - 节约成本\n3. 缺点\n  - 兼容性 不兼容低版本浏览器，\b各种设备工作量大，效率低下\n  - 代码冗余量大，加载时间长\n  - 折中方案，达不到理想的布局效果 \n\n### 移动端rem布局\n\n1. 定义（font size of the root element）：相对于根元素的字体大小的单位\n2. 作用：通过js动态计算html font-size 能够使html页面比响应式布局，流式布局，设置最大宽度布局等效果更完善\n3. 需要考虑当前手机的dpr","slug":"css/base-layout","published":1,"updated":"2019-08-26T16:46:27.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n6t0007kuu6jmyuzdtq","content":"<h3 id=\"自适应两栏布局\"><a href=\"#自适应两栏布局\" class=\"headerlink\" title=\"自适应两栏布局\"></a>自适应两栏布局</h3><p>利用BFC实现自适应两栏布局</p>\n<pre><code>/****css****/\n.aside{\n  float: left;\n  width: 180px;\n  height: 500px;\n  background-color: red;\n  opacity: 0.5;\n}\n.main{\n  overflow: hidden;\n  height: 500px;\n  background-color: green;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;box&quot;&gt;\n  &lt;div class=&quot;aside&quot;&gt;左侧&lt;/div&gt;\n  &lt;div class=&quot;main&quot;&gt;右侧&lt;/div&gt;\n&lt;/div&gt;</code></pre><p><img src=\"/images/%E8%87%AA%E9%80%82%E5%BA%94%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80.gif\" alt></p>\n<h3 id=\"圣杯布局和双飞翼布局\"><a href=\"#圣杯布局和双飞翼布局\" class=\"headerlink\" title=\"圣杯布局和双飞翼布局\"></a>圣杯布局和双飞翼布局</h3><ol>\n<li>解决什么问题：两边定宽，中间自适应的三栏布局，中间栏放在文档流前面以优先渲染</li>\n<li>相同点：三栏全float浮动，左右两栏加上负margin让中间栏div并排，形成三栏</li>\n<li>不同点： <ul>\n<li>圣杯布局为了中间内容不被遮挡，将中间div设置左右padding-left和padding-right,将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</li>\n<li>双飞翼布局，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</li>\n</ul>\n</li>\n<li>圣杯布局代码</li>\n</ol>\n<pre><code>/****css****/\n.main{\n  width: 100%;\n  background: green;\n}\n.left{\n  left: -200px;\n  width: 200px;\n  margin-left: -100%;\n  background: yellowgreen;\n}\n.right{\n  right: -200px;\n  width: 200px;\n  margin-left: -200px;\n  background-color: red;\n}\n.main,.left,.right{\n  position: relative;\n  float: left;\n  min-height: 500px;\n}\n.container{\n  padding: 0 200px;\n  overflow: hidden;\n  border: 5px solid #ccc;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;container&quot;&gt;\n  &lt;div class=&quot;main&quot;&gt;中间栏目&lt;/div&gt;\n  &lt;div class=&quot;left&quot;&gt;左侧栏目&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;右侧栏目&lt;/div&gt;\n&lt;/div&gt;</code></pre><ol start=\"5\">\n<li>双飞翼布局代码</li>\n</ol>\n<pre><code>/****css****/\n.main,.left,.right{\n  float: left;\n  min-height: 500px;\n}\n.main{\n  width:100%;\n  background-color: red;\n}\n.left{\n  width: 200px;\n  margin-left: -100%;\n  background-color: yellow;\n}\n.right{\n  width: 200px;\n  background-color: green;\n  margin-left: -200px;\n}\n.content{\n  margin: 0 200px;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;container&quot;&gt; \n　　&lt;div class=&quot;main&quot;&gt;\n    　　&lt;div class=&quot;content&quot;&gt;中间栏目&lt;/div&gt; \n    &lt;/div&gt;\n　　&lt;div class=&quot;left&quot;&gt;左侧栏目&lt;/div&gt; \n　　&lt;div class=&quot;right&quot;&gt;右侧栏目&lt;/div&gt; \n&lt;/div&gt;</code></pre><ol start=\"6\">\n<li>效果图<br><img src=\"/images/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.gif\" alt></li>\n</ol>\n<h3 id=\"flex弹性盒子布局\"><a href=\"#flex弹性盒子布局\" class=\"headerlink\" title=\"flex弹性盒子布局\"></a>flex弹性盒子布局</h3><ol>\n<li><p>定义：Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n</li>\n<li><p>优点：相对于传统布局更具有灵活性。</p>\n</li>\n<li><p>缺点：虽然现代浏览器都支持，但是还有少部分浏览器需要单独处理其兼容性</p>\n</li>\n<li><p>问题：</p>\n<ul>\n<li>绝对定位与固定定位的盒子不参与flex布局</li>\n<li>使用Flex布局以后，子元素的float、clear和vertical-align等属性将失效</li>\n<li>具体语法参考阮大大flex布局语法篇和实例篇</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></li>\n</ul>\n</li>\n<li><p>三栏布局示例 </p>\n</li>\n</ol>\n<pre><code>/****css****/\n.container{\n  display: flex;\n  min-height: 500px;\n}\n.main{\n  flex-grow:1;\n  background-color: red;\n}\n.left{\n  order: -1;\n  flex-basis: 200px;\n  background-color: yellow;\n}\n.right{\n  flex-basis: 200px;\n  background-color: green;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;container&quot;&gt;\n  &lt;div class=&quot;main&quot;&gt;中间内容区域&lt;/div&gt;\n  &lt;div class=&quot;left&quot;&gt;左边栏区域&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;右边栏区域&lt;/div&gt;\n&lt;/div&gt;</code></pre><h3 id=\"绝对定位布局\"><a href=\"#绝对定位布局\" class=\"headerlink\" title=\"绝对定位布局\"></a>绝对定位布局</h3><ol>\n<li>position:absolute绝对定位使元素脱离文档流，因此不占据当前层级的空间</li>\n<li>三栏布局代码示例<pre><code>/****css****/\n.container{\nposition: relative;\n}\n.main,.left,.right{\nmin-height: 500px;\ntop: 0;\n}\n.main{\nbackground-color: red;\nmargin: 0 200px;\n}\n.left{\nposition: absolute;\nleft: 0px;\nwidth: 200px;\nbackground-color: green;\n}\n.right{\nposition:absolute;\nright: 0px;\nwidth: 200px;\nbackground: yellow;\n}\n</code></pre></li>\n</ol>\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间内容区域</div>\n  <div class=\"left\">左边区域</div>\n  <div class=\"right\">右边区域</div>\n</div>\n```\n### media响应式布局\n\n<ol>\n<li>定义（Responsive Web Design）：一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本</li>\n<li>优点<ul>\n<li>跨平台，面对不同分辨率设备灵活性强</li>\n<li>能够快捷解决多设备显示适应问题</li>\n<li>节约成本</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>兼容性 不兼容低版本浏览器，\b各种设备工作量大，效率低下</li>\n<li>代码冗余量大，加载时间长</li>\n<li>折中方案，达不到理想的布局效果 </li>\n</ul>\n</li>\n</ol>\n<h3 id=\"移动端rem布局\"><a href=\"#移动端rem布局\" class=\"headerlink\" title=\"移动端rem布局\"></a>移动端rem布局</h3><ol>\n<li>定义（font size of the root element）：相对于根元素的字体大小的单位</li>\n<li>作用：通过js动态计算html font-size 能够使html页面比响应式布局，流式布局，设置最大宽度布局等效果更完善</li>\n<li>需要考虑当前手机的dpr</li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"自适应两栏布局\"><a href=\"#自适应两栏布局\" class=\"headerlink\" title=\"自适应两栏布局\"></a>自适应两栏布局</h3><p>利用BFC实现自适应两栏布局</p>\n<pre><code>/****css****/\n.aside{\n  float: left;\n  width: 180px;\n  height: 500px;\n  background-color: red;\n  opacity: 0.5;\n}\n.main{\n  overflow: hidden;\n  height: 500px;\n  background-color: green;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;box&quot;&gt;\n  &lt;div class=&quot;aside&quot;&gt;左侧&lt;/div&gt;\n  &lt;div class=&quot;main&quot;&gt;右侧&lt;/div&gt;\n&lt;/div&gt;</code></pre><p><img src=\"/images/%E8%87%AA%E9%80%82%E5%BA%94%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80.gif\" alt></p>\n<h3 id=\"圣杯布局和双飞翼布局\"><a href=\"#圣杯布局和双飞翼布局\" class=\"headerlink\" title=\"圣杯布局和双飞翼布局\"></a>圣杯布局和双飞翼布局</h3><ol>\n<li>解决什么问题：两边定宽，中间自适应的三栏布局，中间栏放在文档流前面以优先渲染</li>\n<li>相同点：三栏全float浮动，左右两栏加上负margin让中间栏div并排，形成三栏</li>\n<li>不同点： <ul>\n<li>圣杯布局为了中间内容不被遮挡，将中间div设置左右padding-left和padding-right,将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</li>\n<li>双飞翼布局，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</li>\n</ul>\n</li>\n<li>圣杯布局代码</li>\n</ol>\n<pre><code>/****css****/\n.main{\n  width: 100%;\n  background: green;\n}\n.left{\n  left: -200px;\n  width: 200px;\n  margin-left: -100%;\n  background: yellowgreen;\n}\n.right{\n  right: -200px;\n  width: 200px;\n  margin-left: -200px;\n  background-color: red;\n}\n.main,.left,.right{\n  position: relative;\n  float: left;\n  min-height: 500px;\n}\n.container{\n  padding: 0 200px;\n  overflow: hidden;\n  border: 5px solid #ccc;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;container&quot;&gt;\n  &lt;div class=&quot;main&quot;&gt;中间栏目&lt;/div&gt;\n  &lt;div class=&quot;left&quot;&gt;左侧栏目&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;右侧栏目&lt;/div&gt;\n&lt;/div&gt;</code></pre><ol start=\"5\">\n<li>双飞翼布局代码</li>\n</ol>\n<pre><code>/****css****/\n.main,.left,.right{\n  float: left;\n  min-height: 500px;\n}\n.main{\n  width:100%;\n  background-color: red;\n}\n.left{\n  width: 200px;\n  margin-left: -100%;\n  background-color: yellow;\n}\n.right{\n  width: 200px;\n  background-color: green;\n  margin-left: -200px;\n}\n.content{\n  margin: 0 200px;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;container&quot;&gt; \n　　&lt;div class=&quot;main&quot;&gt;\n    　　&lt;div class=&quot;content&quot;&gt;中间栏目&lt;/div&gt; \n    &lt;/div&gt;\n　　&lt;div class=&quot;left&quot;&gt;左侧栏目&lt;/div&gt; \n　　&lt;div class=&quot;right&quot;&gt;右侧栏目&lt;/div&gt; \n&lt;/div&gt;</code></pre><ol start=\"6\">\n<li>效果图<br><img src=\"/images/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.gif\" alt></li>\n</ol>\n<h3 id=\"flex弹性盒子布局\"><a href=\"#flex弹性盒子布局\" class=\"headerlink\" title=\"flex弹性盒子布局\"></a>flex弹性盒子布局</h3><ol>\n<li><p>定义：Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n</li>\n<li><p>优点：相对于传统布局更具有灵活性。</p>\n</li>\n<li><p>缺点：虽然现代浏览器都支持，但是还有少部分浏览器需要单独处理其兼容性</p>\n</li>\n<li><p>问题：</p>\n<ul>\n<li>绝对定位与固定定位的盒子不参与flex布局</li>\n<li>使用Flex布局以后，子元素的float、clear和vertical-align等属性将失效</li>\n<li>具体语法参考阮大大flex布局语法篇和实例篇</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></li>\n</ul>\n</li>\n<li><p>三栏布局示例 </p>\n</li>\n</ol>\n<pre><code>/****css****/\n.container{\n  display: flex;\n  min-height: 500px;\n}\n.main{\n  flex-grow:1;\n  background-color: red;\n}\n.left{\n  order: -1;\n  flex-basis: 200px;\n  background-color: yellow;\n}\n.right{\n  flex-basis: 200px;\n  background-color: green;\n}\n\n&lt;!--html--&gt;\n&lt;div class=&quot;container&quot;&gt;\n  &lt;div class=&quot;main&quot;&gt;中间内容区域&lt;/div&gt;\n  &lt;div class=&quot;left&quot;&gt;左边栏区域&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;右边栏区域&lt;/div&gt;\n&lt;/div&gt;</code></pre><h3 id=\"绝对定位布局\"><a href=\"#绝对定位布局\" class=\"headerlink\" title=\"绝对定位布局\"></a>绝对定位布局</h3><ol>\n<li>position:absolute绝对定位使元素脱离文档流，因此不占据当前层级的空间</li>\n<li>三栏布局代码示例<pre><code>/****css****/\n.container{\nposition: relative;\n}\n.main,.left,.right{\nmin-height: 500px;\ntop: 0;\n}\n.main{\nbackground-color: red;\nmargin: 0 200px;\n}\n.left{\nposition: absolute;\nleft: 0px;\nwidth: 200px;\nbackground-color: green;\n}\n.right{\nposition:absolute;\nright: 0px;\nwidth: 200px;\nbackground: yellow;\n}\n</code></pre></li>\n</ol>\n<!--html-->\n<div class=\"container\">\n  <div class=\"main\">中间内容区域</div>\n  <div class=\"left\">左边区域</div>\n  <div class=\"right\">右边区域</div>\n</div>\n```\n### media响应式布局\n\n<ol>\n<li>定义（Responsive Web Design）：一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本</li>\n<li>优点<ul>\n<li>跨平台，面对不同分辨率设备灵活性强</li>\n<li>能够快捷解决多设备显示适应问题</li>\n<li>节约成本</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>兼容性 不兼容低版本浏览器，\b各种设备工作量大，效率低下</li>\n<li>代码冗余量大，加载时间长</li>\n<li>折中方案，达不到理想的布局效果 </li>\n</ul>\n</li>\n</ol>\n<h3 id=\"移动端rem布局\"><a href=\"#移动端rem布局\" class=\"headerlink\" title=\"移动端rem布局\"></a>移动端rem布局</h3><ol>\n<li>定义（font size of the root element）：相对于根元素的字体大小的单位</li>\n<li>作用：通过js动态计算html font-size 能够使html页面比响应式布局，流式布局，设置最大宽度布局等效果更完善</li>\n<li>需要考虑当前手机的dpr</li>\n</ol>\n"},{"title":"CSS 动画","date":"2017-06-20T13:06:05.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识","_content":"\n\nAPI的简介及简单动画的实现\n\n### 3D转换（transform）\n\n1. 定义向元素应用 2D 或 3D 转换，可以对元素进行移动、缩放、转动、拉长或拉伸\n\n  translate(移动) 根据X轴和Y轴位置给定的参数，从当前元素位置移动\n  ```\n  transform: translate(100px,200px);\n  ```\n\n  rotate（旋转） 给定度数顺时针旋转的元素。负值则为逆时针旋转\n  ```\n  transform: rotate(60deg);\n  ```\n\n  scale (缩放) 对元素减小或者放大，取决于宽度（X轴）和高度（Y轴）的参数\n  ```\n  transform: scale(2,2);\n  ```\n\n  skew (倾斜) 根据X轴和Y轴位置给定的角度参数，进行倾斜，负数则为反方向倾斜\n  ```\n  transform: skew(40deg,50deg);\n  ```\n\n2. transform-origin：允许改变被转换元素的位置\n  ```\n  transform-origin: x-axis y-axis z-axis;\n  ```\n\n3. transform-style：规定被嵌套元素如何在 3D 空间中显示\n  ```\n  // preserve-3d所有子元素在3D空间中呈现\n  // flat所有子元素在2D平面呈现\n  transform-style: flat|preserve-3d;\n  ```\n\n4. perspective:设置元素距离视图的距离，以像素计，与 perspective-origin 属性一同使用，能够改变 3D 元素的底部位置\n  ```\n  perspective: number|none;\n  ``` \n\n5. backface-visibility:定义当元素不面向屏幕时是否可见，在旋转元素不希望看到其背面时，该属性很有用\n  ```\n  backface-visibility: visible|hidden;\n  ```\n\n### CSS3过渡（transition）\n1. 某种效果可以从一种样式转变到另一种样式的效果\n   ```\n   transition: property duration timing-function delay;\n   ```\n   ```\n   transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);\n   ```\n\n### CSS3 动画（animation及@keyframes）\n\n1. 使元素从一种样式逐渐变化为另一种样式的效果\n   - animation\n   - @keyframes\n   - 语法规则及拆解\n   ```\n    animation: animation-name animation-duration animation-timing-function animation-fill-mode animation-delay animation-iteration-count\tanimation-direction animation-play-state;\n\n    animation-name(keyframe名字): keyframename|none;\n\n    animation-duration(动画完成一个周期需要多少秒或毫秒):animation-duration: time | 0;\n\n    animation-timing-function(动画的速度曲线,使用的数学函数，称为三次贝塞尔曲线，速度曲线): linear\t| ease\t| ease-in | ease-out\t| ease-in-out\t | cubic-bezier(n,n,n,n);\n\n    animation-fill-mode(当动画完成时或又一个延迟未开始播放时的样式): none|forwards|backwards|both|initial|inherit;\n\n    animation-delay(动画什么时候开始): time;\n\n    animation-iteration-count(动画被播放的次数):n |infinite\n\n    animation-direction(是否循环交替反向播放动画): normal|reverse|alternate|alternate-reverse|initial|inherit;\n    \n    animation-play-state(动画是否正在运行或暂停):paused|running;\n   ```\n \n### css动画库以及动画工具\n   - matrix3d(http://ds-overdesign.com/transform/matrix3d.html)\n   - matrix(http://meyerweb.com/eric/tools/matrix)\n   - tools(http://www.f2e.name/case/css3/tools.html)\n\n  ","source":"_posts/css/css-animation.md","raw":"---\ntitle: CSS 动画\ndate: 2017-6-20 21:06:05\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识\ntags:\n- CSS\ncategories:\n- CSS\n---\n\n\nAPI的简介及简单动画的实现\n\n### 3D转换（transform）\n\n1. 定义向元素应用 2D 或 3D 转换，可以对元素进行移动、缩放、转动、拉长或拉伸\n\n  translate(移动) 根据X轴和Y轴位置给定的参数，从当前元素位置移动\n  ```\n  transform: translate(100px,200px);\n  ```\n\n  rotate（旋转） 给定度数顺时针旋转的元素。负值则为逆时针旋转\n  ```\n  transform: rotate(60deg);\n  ```\n\n  scale (缩放) 对元素减小或者放大，取决于宽度（X轴）和高度（Y轴）的参数\n  ```\n  transform: scale(2,2);\n  ```\n\n  skew (倾斜) 根据X轴和Y轴位置给定的角度参数，进行倾斜，负数则为反方向倾斜\n  ```\n  transform: skew(40deg,50deg);\n  ```\n\n2. transform-origin：允许改变被转换元素的位置\n  ```\n  transform-origin: x-axis y-axis z-axis;\n  ```\n\n3. transform-style：规定被嵌套元素如何在 3D 空间中显示\n  ```\n  // preserve-3d所有子元素在3D空间中呈现\n  // flat所有子元素在2D平面呈现\n  transform-style: flat|preserve-3d;\n  ```\n\n4. perspective:设置元素距离视图的距离，以像素计，与 perspective-origin 属性一同使用，能够改变 3D 元素的底部位置\n  ```\n  perspective: number|none;\n  ``` \n\n5. backface-visibility:定义当元素不面向屏幕时是否可见，在旋转元素不希望看到其背面时，该属性很有用\n  ```\n  backface-visibility: visible|hidden;\n  ```\n\n### CSS3过渡（transition）\n1. 某种效果可以从一种样式转变到另一种样式的效果\n   ```\n   transition: property duration timing-function delay;\n   ```\n   ```\n   transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);\n   ```\n\n### CSS3 动画（animation及@keyframes）\n\n1. 使元素从一种样式逐渐变化为另一种样式的效果\n   - animation\n   - @keyframes\n   - 语法规则及拆解\n   ```\n    animation: animation-name animation-duration animation-timing-function animation-fill-mode animation-delay animation-iteration-count\tanimation-direction animation-play-state;\n\n    animation-name(keyframe名字): keyframename|none;\n\n    animation-duration(动画完成一个周期需要多少秒或毫秒):animation-duration: time | 0;\n\n    animation-timing-function(动画的速度曲线,使用的数学函数，称为三次贝塞尔曲线，速度曲线): linear\t| ease\t| ease-in | ease-out\t| ease-in-out\t | cubic-bezier(n,n,n,n);\n\n    animation-fill-mode(当动画完成时或又一个延迟未开始播放时的样式): none|forwards|backwards|both|initial|inherit;\n\n    animation-delay(动画什么时候开始): time;\n\n    animation-iteration-count(动画被播放的次数):n |infinite\n\n    animation-direction(是否循环交替反向播放动画): normal|reverse|alternate|alternate-reverse|initial|inherit;\n    \n    animation-play-state(动画是否正在运行或暂停):paused|running;\n   ```\n \n### css动画库以及动画工具\n   - matrix3d(http://ds-overdesign.com/transform/matrix3d.html)\n   - matrix(http://meyerweb.com/eric/tools/matrix)\n   - tools(http://www.f2e.name/case/css3/tools.html)\n\n  ","slug":"css/css-animation","published":1,"updated":"2019-08-26T16:46:27.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n6x000akuu6jicslpeu","content":"<p>API的简介及简单动画的实现</p>\n<h3 id=\"3D转换（transform）\"><a href=\"#3D转换（transform）\" class=\"headerlink\" title=\"3D转换（transform）\"></a>3D转换（transform）</h3><ol>\n<li><p>定义向元素应用 2D 或 3D 转换，可以对元素进行移动、缩放、转动、拉长或拉伸</p>\n<p>translate(移动) 根据X轴和Y轴位置给定的参数，从当前元素位置移动</p>\n<pre><code>transform: translate(100px,200px);</code></pre><p>rotate（旋转） 给定度数顺时针旋转的元素。负值则为逆时针旋转</p>\n<pre><code>transform: rotate(60deg);</code></pre><p>scale (缩放) 对元素减小或者放大，取决于宽度（X轴）和高度（Y轴）的参数</p>\n<pre><code>transform: scale(2,2);</code></pre><p>skew (倾斜) 根据X轴和Y轴位置给定的角度参数，进行倾斜，负数则为反方向倾斜</p>\n<pre><code>transform: skew(40deg,50deg);</code></pre></li>\n<li><p>transform-origin：允许改变被转换元素的位置</p>\n<pre><code>transform-origin: x-axis y-axis z-axis;</code></pre></li>\n<li><p>transform-style：规定被嵌套元素如何在 3D 空间中显示</p>\n<pre><code>// preserve-3d所有子元素在3D空间中呈现\n// flat所有子元素在2D平面呈现\ntransform-style: flat|preserve-3d;</code></pre></li>\n<li><p>perspective:设置元素距离视图的距离，以像素计，与 perspective-origin 属性一同使用，能够改变 3D 元素的底部位置</p>\n<pre><code>perspective: number|none;</code></pre></li>\n<li><p>backface-visibility:定义当元素不面向屏幕时是否可见，在旋转元素不希望看到其背面时，该属性很有用</p>\n<pre><code>backface-visibility: visible|hidden;</code></pre></li>\n</ol>\n<h3 id=\"CSS3过渡（transition）\"><a href=\"#CSS3过渡（transition）\" class=\"headerlink\" title=\"CSS3过渡（transition）\"></a>CSS3过渡（transition）</h3><ol>\n<li>某种效果可以从一种样式转变到另一种样式的效果<pre><code>transition: property duration timing-function delay;</code></pre><pre><code>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code></pre></li>\n</ol>\n<h3 id=\"CSS3-动画（animation及-keyframes）\"><a href=\"#CSS3-动画（animation及-keyframes）\" class=\"headerlink\" title=\"CSS3 动画（animation及@keyframes）\"></a>CSS3 动画（animation及@keyframes）</h3><ol>\n<li><p>使元素从一种样式逐渐变化为另一种样式的效果</p>\n<ul>\n<li><p>animation</p>\n</li>\n<li><p>@keyframes</p>\n</li>\n<li><p>语法规则及拆解</p>\n<pre><code>animation: animation-name animation-duration animation-timing-function animation-fill-mode animation-delay animation-iteration-count    animation-direction animation-play-state;\n\nanimation-name(keyframe名字): keyframename|none;\n\nanimation-duration(动画完成一个周期需要多少秒或毫秒):animation-duration: time | 0;\n\nanimation-timing-function(动画的速度曲线,使用的数学函数，称为三次贝塞尔曲线，速度曲线): linear    | ease    | ease-in | ease-out    | ease-in-out     | cubic-bezier(n,n,n,n);\n\nanimation-fill-mode(当动画完成时或又一个延迟未开始播放时的样式): none|forwards|backwards|both|initial|inherit;\n\nanimation-delay(动画什么时候开始): time;\n\nanimation-iteration-count(动画被播放的次数):n |infinite\n\nanimation-direction(是否循环交替反向播放动画): normal|reverse|alternate|alternate-reverse|initial|inherit;\n\nanimation-play-state(动画是否正在运行或暂停):paused|running;</code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"css动画库以及动画工具\"><a href=\"#css动画库以及动画工具\" class=\"headerlink\" title=\"css动画库以及动画工具\"></a>css动画库以及动画工具</h3><ul>\n<li>matrix3d(<a href=\"http://ds-overdesign.com/transform/matrix3d.html\" target=\"_blank\" rel=\"noopener\">http://ds-overdesign.com/transform/matrix3d.html</a>)</li>\n<li>matrix(<a href=\"http://meyerweb.com/eric/tools/matrix\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/matrix</a>)</li>\n<li>tools(<a href=\"http://www.f2e.name/case/css3/tools.html\" target=\"_blank\" rel=\"noopener\">http://www.f2e.name/case/css3/tools.html</a>)</li>\n</ul>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>API的简介及简单动画的实现</p>\n<h3 id=\"3D转换（transform）\"><a href=\"#3D转换（transform）\" class=\"headerlink\" title=\"3D转换（transform）\"></a>3D转换（transform）</h3><ol>\n<li><p>定义向元素应用 2D 或 3D 转换，可以对元素进行移动、缩放、转动、拉长或拉伸</p>\n<p>translate(移动) 根据X轴和Y轴位置给定的参数，从当前元素位置移动</p>\n<pre><code>transform: translate(100px,200px);</code></pre><p>rotate（旋转） 给定度数顺时针旋转的元素。负值则为逆时针旋转</p>\n<pre><code>transform: rotate(60deg);</code></pre><p>scale (缩放) 对元素减小或者放大，取决于宽度（X轴）和高度（Y轴）的参数</p>\n<pre><code>transform: scale(2,2);</code></pre><p>skew (倾斜) 根据X轴和Y轴位置给定的角度参数，进行倾斜，负数则为反方向倾斜</p>\n<pre><code>transform: skew(40deg,50deg);</code></pre></li>\n<li><p>transform-origin：允许改变被转换元素的位置</p>\n<pre><code>transform-origin: x-axis y-axis z-axis;</code></pre></li>\n<li><p>transform-style：规定被嵌套元素如何在 3D 空间中显示</p>\n<pre><code>// preserve-3d所有子元素在3D空间中呈现\n// flat所有子元素在2D平面呈现\ntransform-style: flat|preserve-3d;</code></pre></li>\n<li><p>perspective:设置元素距离视图的距离，以像素计，与 perspective-origin 属性一同使用，能够改变 3D 元素的底部位置</p>\n<pre><code>perspective: number|none;</code></pre></li>\n<li><p>backface-visibility:定义当元素不面向屏幕时是否可见，在旋转元素不希望看到其背面时，该属性很有用</p>\n<pre><code>backface-visibility: visible|hidden;</code></pre></li>\n</ol>\n<h3 id=\"CSS3过渡（transition）\"><a href=\"#CSS3过渡（transition）\" class=\"headerlink\" title=\"CSS3过渡（transition）\"></a>CSS3过渡（transition）</h3><ol>\n<li>某种效果可以从一种样式转变到另一种样式的效果<pre><code>transition: property duration timing-function delay;</code></pre><pre><code>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code></pre></li>\n</ol>\n<h3 id=\"CSS3-动画（animation及-keyframes）\"><a href=\"#CSS3-动画（animation及-keyframes）\" class=\"headerlink\" title=\"CSS3 动画（animation及@keyframes）\"></a>CSS3 动画（animation及@keyframes）</h3><ol>\n<li><p>使元素从一种样式逐渐变化为另一种样式的效果</p>\n<ul>\n<li><p>animation</p>\n</li>\n<li><p>@keyframes</p>\n</li>\n<li><p>语法规则及拆解</p>\n<pre><code>animation: animation-name animation-duration animation-timing-function animation-fill-mode animation-delay animation-iteration-count    animation-direction animation-play-state;\n\nanimation-name(keyframe名字): keyframename|none;\n\nanimation-duration(动画完成一个周期需要多少秒或毫秒):animation-duration: time | 0;\n\nanimation-timing-function(动画的速度曲线,使用的数学函数，称为三次贝塞尔曲线，速度曲线): linear    | ease    | ease-in | ease-out    | ease-in-out     | cubic-bezier(n,n,n,n);\n\nanimation-fill-mode(当动画完成时或又一个延迟未开始播放时的样式): none|forwards|backwards|both|initial|inherit;\n\nanimation-delay(动画什么时候开始): time;\n\nanimation-iteration-count(动画被播放的次数):n |infinite\n\nanimation-direction(是否循环交替反向播放动画): normal|reverse|alternate|alternate-reverse|initial|inherit;\n\nanimation-play-state(动画是否正在运行或暂停):paused|running;</code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"css动画库以及动画工具\"><a href=\"#css动画库以及动画工具\" class=\"headerlink\" title=\"css动画库以及动画工具\"></a>css动画库以及动画工具</h3><ul>\n<li>matrix3d(<a href=\"http://ds-overdesign.com/transform/matrix3d.html\" target=\"_blank\" rel=\"noopener\">http://ds-overdesign.com/transform/matrix3d.html</a>)</li>\n<li>matrix(<a href=\"http://meyerweb.com/eric/tools/matrix\" target=\"_blank\" rel=\"noopener\">http://meyerweb.com/eric/tools/matrix</a>)</li>\n<li>tools(<a href=\"http://www.f2e.name/case/css3/tools.html\" target=\"_blank\" rel=\"noopener\">http://www.f2e.name/case/css3/tools.html</a>)</li>\n</ul>\n"},{"title":"CSS 基础知识概念","date":"2017-06-11T12:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识","_content":"\n### 什么是css\n层叠样式表(英文全称：Cascading Style Sheets),是一种用来表现html或者xml等文件样式的计算机语言。\n\n### 盒子模型\n- 在html文档中，每一个渲染在页面中的标签都是一个个盒子模型；\n- 盒子模型分为w3c标准盒子模型和IE标准盒子模型；当不对Doctype进行定义时，会触发怪异模式。\n- 盒子模型\n\n```\n/****css****/\n.box{\n  width:100px;\n  height:100px;\n  border:10px;\n  background-color:red;\n  padding:20px;\n  margin:20px;\n}\n\n<div class=\"box\"></div>\n```\n\n![](/images/css盒子模型.png)\n\n### BFC\n\n  - 定义（Block fomatting context）：块级格式化上下文(每一个元素盒子从上向下排列)\n  - block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n  - 是一个独立的渲染区域，只有Block-level box参与\n  - 布局规则\n    1. 内部的Box会在垂直方向链接放置\n    2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n    3. 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n    4. BFC的区域不会与float box重叠\n    5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n    6. 计算BFC的高度时，浮动元素也参与计算\n  - 那些元素会生成BFC\n    1. 根元素\n    2. float元素不为none\n    3. position为 absolute或者fixed\n    4. display为inline-block, table-cell, table-caption, flex, inline-flex\n    5. overflow不为visible\n  - BFC作用\n    1. 自适应两栏布局\n    2. 清除内部浮动\n    3. 防止margin重叠\n\n  - 例子说明\n  - 根据以上BFC布局规则第3条、第4条来触发main生成BFC，来实现自适应两栏布局\n      ```\n      /****css****/\n      .main{\n        overflow: hidden;\n        height: 500px;\n        background: yellow;\n      }\n      .aside{\n        float: left;\n        width: 200px;\n        height: 500px;\n        background-color: red;\n      }\n      \n      <!--html-->\n      <div class=\"box\">\n        <div class=\"aside\">侧边栏区域</div>\n        <div class=\"main\">内容区域</div>\n      </div>\n      ```\n  - 根据BFC布局规则第6条，解决float元素使其父元素高度塌陷问题\n    ```\n      /****css****/\n      .parent{\n        border: 1px solid red;\n        width: 400px;\n        overflow: hidden;\n        padding: 10px;\n      }\n      .child{\n        float: left;\n        height: 300px;\n        width: 198px;\n        border: 1px solid green;\n      }\n      \n      <!--html-->\n      <div class=\"parent\">\n        <div class=\"child\"></div>\n        <div class=\"child\"></div>\n      </div>\n    ```\n  - 防止margin重叠,根据生成BFC第4条规则\n    ```\n      /****css****/\n      .box{\n        width: 300px;\n        height: auto;\n      }\n      .content{\n        width: 300px;\n        height: 200px;\n        margin: 100px;\n        background: red;\n      }\n      .warp{\n        display: inline-block;\n      }\n\n      <!--html-->\n      <div class=\"box\">\n        <div class=\"content\"></div>\n        <div class=\"content warp\"></div>\n      </div>\n    ```\n\n### IFC\n\n  1. 布局规则\n    - 定义(Inline Formatting Contexts)：内联格式化上下文（每一个元素盒子从左到右排列）\n    - IFC的line box高度 由其行内元素中 最高的实际高度计算而来（不受到竖直方向的padding/margin影响)\n    - inline-level box:display 属性为 inline, inline-box，inline-table，table-cell，table-column-group等，会生成 inline-level box。并且参与 inline fomatting context；\n    - 当inline-level box的宽度大于containing block，且达到内容换行条件时，会将inline-level拆散为多个inline-level box并分布到多行中\n    - inline-level box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短\n    - IFC中不可能有块级元素，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。\n  2. 作用\n    - 水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。\n    - 垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。\n\n  3. 示例\n   - 根据布局规则第4条\n    ```\n      /****css****/\n      .break{\n        border: 1px solid red;\n        background: yellow;\n      }\n      \n      <!--html-->\n      <span class=\"break\">这是一个行内盒子这是一个行内盒子这是一个行内盒子</span>\n    ```\n    ![](/images/css-IFC.jpg)\n  4. 根据作用第1条,设置span为inline-block,则会在box上产生ifc,在box上设置text-align使span元素水平居中。\n    ```\n      /****css****/\n      .box{text-align: center;}\n      .content{\n        display: inline-block;\n        border: 1px solid red;\n      }\n      \n      <!--html-->\n      <div class=\"box\">\n        <span class=\"content\">内容区域</span>\n      </div>\n    ```\n  5. 根据作用第2条，设置盒子2为inline-block，则会在box上产生ifc，设置其vertical-align:middle，盒子1垂直居中。\n    ```\n      /****css****/\n      .box{\n        text-align: center;\n        border: 1px solid red;\n      }\n      .label{\n        display: inline-block;\n        height: 100px;\n        width: 100px;\n        vertical-align: middle;\n      }\n      \n      <!--html-->\n      <div class=\"box\">\n        <span class=\"content\">盒子1</span>\n        <span class=\"label\">盒子2</span>\n      </div>\n    ```\n\n### FFC\n\n  1. 定义(Flex Formatting Contexts)：自适应格式化上下文\n  2. display值为flex或者inline-flex的元素将会生成自适应容器（flex container）\n  3. FFC和BFC区别\n    - Flexbox 不支持 ::first-line 和 ::first-letter 这两种伪元素\n    - vertical-align 对 Flexbox 中的子元素失效\n    - float 和 clear 属性对 Flexbox 中的子元素是没有效果的，也不会使子元素脱离文档流\n    - 多栏布局（column-*） 在 Flexbox 中失效\n    - Flexbox 下的子元素不会继承父级容器的宽\n\n### GFC\n\n  1. 定义(GridLayout Formatting Contexts)：网格布局格式化上下文\n  2. display值为grid的元素，获得一个独立的渲染区域，可在网格内定义项目（item）、行（row）、列（columns）\n\n\n\n","source":"_posts/css/base-concepts.md","raw":"---\ntitle: CSS 基础知识概念\ndate: 2017-6-11 20:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识\ntags:\n- CSS\ncategories:\n- CSS\n---\n\n### 什么是css\n层叠样式表(英文全称：Cascading Style Sheets),是一种用来表现html或者xml等文件样式的计算机语言。\n\n### 盒子模型\n- 在html文档中，每一个渲染在页面中的标签都是一个个盒子模型；\n- 盒子模型分为w3c标准盒子模型和IE标准盒子模型；当不对Doctype进行定义时，会触发怪异模式。\n- 盒子模型\n\n```\n/****css****/\n.box{\n  width:100px;\n  height:100px;\n  border:10px;\n  background-color:red;\n  padding:20px;\n  margin:20px;\n}\n\n<div class=\"box\"></div>\n```\n\n![](/images/css盒子模型.png)\n\n### BFC\n\n  - 定义（Block fomatting context）：块级格式化上下文(每一个元素盒子从上向下排列)\n  - block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；\n  - 是一个独立的渲染区域，只有Block-level box参与\n  - 布局规则\n    1. 内部的Box会在垂直方向链接放置\n    2. Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠\n    3. 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n    4. BFC的区域不会与float box重叠\n    5. BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n    6. 计算BFC的高度时，浮动元素也参与计算\n  - 那些元素会生成BFC\n    1. 根元素\n    2. float元素不为none\n    3. position为 absolute或者fixed\n    4. display为inline-block, table-cell, table-caption, flex, inline-flex\n    5. overflow不为visible\n  - BFC作用\n    1. 自适应两栏布局\n    2. 清除内部浮动\n    3. 防止margin重叠\n\n  - 例子说明\n  - 根据以上BFC布局规则第3条、第4条来触发main生成BFC，来实现自适应两栏布局\n      ```\n      /****css****/\n      .main{\n        overflow: hidden;\n        height: 500px;\n        background: yellow;\n      }\n      .aside{\n        float: left;\n        width: 200px;\n        height: 500px;\n        background-color: red;\n      }\n      \n      <!--html-->\n      <div class=\"box\">\n        <div class=\"aside\">侧边栏区域</div>\n        <div class=\"main\">内容区域</div>\n      </div>\n      ```\n  - 根据BFC布局规则第6条，解决float元素使其父元素高度塌陷问题\n    ```\n      /****css****/\n      .parent{\n        border: 1px solid red;\n        width: 400px;\n        overflow: hidden;\n        padding: 10px;\n      }\n      .child{\n        float: left;\n        height: 300px;\n        width: 198px;\n        border: 1px solid green;\n      }\n      \n      <!--html-->\n      <div class=\"parent\">\n        <div class=\"child\"></div>\n        <div class=\"child\"></div>\n      </div>\n    ```\n  - 防止margin重叠,根据生成BFC第4条规则\n    ```\n      /****css****/\n      .box{\n        width: 300px;\n        height: auto;\n      }\n      .content{\n        width: 300px;\n        height: 200px;\n        margin: 100px;\n        background: red;\n      }\n      .warp{\n        display: inline-block;\n      }\n\n      <!--html-->\n      <div class=\"box\">\n        <div class=\"content\"></div>\n        <div class=\"content warp\"></div>\n      </div>\n    ```\n\n### IFC\n\n  1. 布局规则\n    - 定义(Inline Formatting Contexts)：内联格式化上下文（每一个元素盒子从左到右排列）\n    - IFC的line box高度 由其行内元素中 最高的实际高度计算而来（不受到竖直方向的padding/margin影响)\n    - inline-level box:display 属性为 inline, inline-box，inline-table，table-cell，table-column-group等，会生成 inline-level box。并且参与 inline fomatting context；\n    - 当inline-level box的宽度大于containing block，且达到内容换行条件时，会将inline-level拆散为多个inline-level box并分布到多行中\n    - inline-level box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短\n    - IFC中不可能有块级元素，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。\n  2. 作用\n    - 水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。\n    - 垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。\n\n  3. 示例\n   - 根据布局规则第4条\n    ```\n      /****css****/\n      .break{\n        border: 1px solid red;\n        background: yellow;\n      }\n      \n      <!--html-->\n      <span class=\"break\">这是一个行内盒子这是一个行内盒子这是一个行内盒子</span>\n    ```\n    ![](/images/css-IFC.jpg)\n  4. 根据作用第1条,设置span为inline-block,则会在box上产生ifc,在box上设置text-align使span元素水平居中。\n    ```\n      /****css****/\n      .box{text-align: center;}\n      .content{\n        display: inline-block;\n        border: 1px solid red;\n      }\n      \n      <!--html-->\n      <div class=\"box\">\n        <span class=\"content\">内容区域</span>\n      </div>\n    ```\n  5. 根据作用第2条，设置盒子2为inline-block，则会在box上产生ifc，设置其vertical-align:middle，盒子1垂直居中。\n    ```\n      /****css****/\n      .box{\n        text-align: center;\n        border: 1px solid red;\n      }\n      .label{\n        display: inline-block;\n        height: 100px;\n        width: 100px;\n        vertical-align: middle;\n      }\n      \n      <!--html-->\n      <div class=\"box\">\n        <span class=\"content\">盒子1</span>\n        <span class=\"label\">盒子2</span>\n      </div>\n    ```\n\n### FFC\n\n  1. 定义(Flex Formatting Contexts)：自适应格式化上下文\n  2. display值为flex或者inline-flex的元素将会生成自适应容器（flex container）\n  3. FFC和BFC区别\n    - Flexbox 不支持 ::first-line 和 ::first-letter 这两种伪元素\n    - vertical-align 对 Flexbox 中的子元素失效\n    - float 和 clear 属性对 Flexbox 中的子元素是没有效果的，也不会使子元素脱离文档流\n    - 多栏布局（column-*） 在 Flexbox 中失效\n    - Flexbox 下的子元素不会继承父级容器的宽\n\n### GFC\n\n  1. 定义(GridLayout Formatting Contexts)：网格布局格式化上下文\n  2. display值为grid的元素，获得一个独立的渲染区域，可在网格内定义项目（item）、行（row）、列（columns）\n\n\n\n","slug":"css/base-concepts","published":1,"updated":"2019-08-26T16:46:27.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n6y000bkuu6ia867ky4","content":"<h3 id=\"什么是css\"><a href=\"#什么是css\" class=\"headerlink\" title=\"什么是css\"></a>什么是css</h3><p>层叠样式表(英文全称：Cascading Style Sheets),是一种用来表现html或者xml等文件样式的计算机语言。</p>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><ul>\n<li>在html文档中，每一个渲染在页面中的标签都是一个个盒子模型；</li>\n<li>盒子模型分为w3c标准盒子模型和IE标准盒子模型；当不对Doctype进行定义时，会触发怪异模式。</li>\n<li>盒子模型</li>\n</ul>\n<pre><code>/****css****/\n.box{\n  width:100px;\n  height:100px;\n  border:10px;\n  background-color:red;\n  padding:20px;\n  margin:20px;\n}\n\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><p><img src=\"/images/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png\" alt></p>\n<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><ul>\n<li><p>定义（Block fomatting context）：块级格式化上下文(每一个元素盒子从上向下排列)</p>\n</li>\n<li><p>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</p>\n</li>\n<li><p>是一个独立的渲染区域，只有Block-level box参与</p>\n</li>\n<li><p>布局规则</p>\n<ol>\n<li>内部的Box会在垂直方向链接放置</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>\n<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算</li>\n</ol>\n</li>\n<li><p>那些元素会生成BFC</p>\n<ol>\n<li>根元素</li>\n<li>float元素不为none</li>\n<li>position为 absolute或者fixed</li>\n<li>display为inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow不为visible</li>\n</ol>\n</li>\n<li><p>BFC作用</p>\n<ol>\n<li>自适应两栏布局</li>\n<li>清除内部浮动</li>\n<li>防止margin重叠</li>\n</ol>\n</li>\n<li><p>例子说明</p>\n</li>\n<li><p>根据以上BFC布局规则第3条、第4条来触发main生成BFC，来实现自适应两栏布局</p>\n<pre><code>  /****css****/\n  .main{\n    overflow: hidden;\n    height: 500px;\n    background: yellow;\n  }\n  .aside{\n    float: left;\n    width: 200px;\n    height: 500px;\n    background-color: red;\n  }\n\n  &lt;!--html--&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;aside&quot;&gt;侧边栏区域&lt;/div&gt;\n    &lt;div class=&quot;main&quot;&gt;内容区域&lt;/div&gt;\n  &lt;/div&gt;</code></pre></li>\n<li><p>根据BFC布局规则第6条，解决float元素使其父元素高度塌陷问题</p>\n<pre><code>  /****css****/\n  .parent{\n    border: 1px solid red;\n    width: 400px;\n    overflow: hidden;\n    padding: 10px;\n  }\n  .child{\n    float: left;\n    height: 300px;\n    width: 198px;\n    border: 1px solid green;\n  }\n\n  &lt;!--html--&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;</code></pre></li>\n<li><p>防止margin重叠,根据生成BFC第4条规则</p>\n<pre><code>  /****css****/\n  .box{\n    width: 300px;\n    height: auto;\n  }\n  .content{\n    width: 300px;\n    height: 200px;\n    margin: 100px;\n    background: red;\n  }\n  .warp{\n    display: inline-block;\n  }\n\n  &lt;!--html--&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;content warp&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;</code></pre></li>\n</ul>\n<h3 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h3><ol>\n<li><p>布局规则</p>\n<ul>\n<li>定义(Inline Formatting Contexts)：内联格式化上下文（每一个元素盒子从左到右排列）</li>\n<li>IFC的line box高度 由其行内元素中 最高的实际高度计算而来（不受到竖直方向的padding/margin影响)</li>\n<li>inline-level box:display 属性为 inline, inline-box，inline-table，table-cell，table-column-group等，会生成 inline-level box。并且参与 inline fomatting context；</li>\n<li>当inline-level box的宽度大于containing block，且达到内容换行条件时，会将inline-level拆散为多个inline-level box并分布到多行中</li>\n<li>inline-level box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短</li>\n<li>IFC中不可能有块级元素，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。</li>\n</ul>\n</li>\n<li><p>作用</p>\n<ul>\n<li>水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。</li>\n<li>垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>\n</ul>\n</li>\n<li><p>示例</p>\n<ul>\n<li><p>根据布局规则第4条</p>\n<pre><code>/****css****/\n.break{\n border: 1px solid red;\n background: yellow;\n}\n\n&lt;!--html--&gt;\n&lt;span class=&quot;break&quot;&gt;这是一个行内盒子这是一个行内盒子这是一个行内盒子&lt;/span&gt;</code></pre><p><img src=\"/images/css-IFC.jpg\" alt></p>\n</li>\n</ul>\n</li>\n<li><p>根据作用第1条,设置span为inline-block,则会在box上产生ifc,在box上设置text-align使span元素水平居中。</p>\n<pre><code> /****css****/\n .box{text-align: center;}\n .content{\n   display: inline-block;\n   border: 1px solid red;\n }\n\n &lt;!--html--&gt;\n &lt;div class=&quot;box&quot;&gt;\n   &lt;span class=&quot;content&quot;&gt;内容区域&lt;/span&gt;\n &lt;/div&gt;</code></pre></li>\n<li><p>根据作用第2条，设置盒子2为inline-block，则会在box上产生ifc，设置其vertical-align:middle，盒子1垂直居中。</p>\n<pre><code> /****css****/\n .box{\n   text-align: center;\n   border: 1px solid red;\n }\n .label{\n   display: inline-block;\n   height: 100px;\n   width: 100px;\n   vertical-align: middle;\n }\n\n &lt;!--html--&gt;\n &lt;div class=&quot;box&quot;&gt;\n   &lt;span class=&quot;content&quot;&gt;盒子1&lt;/span&gt;\n   &lt;span class=&quot;label&quot;&gt;盒子2&lt;/span&gt;\n &lt;/div&gt;</code></pre></li>\n</ol>\n<h3 id=\"FFC\"><a href=\"#FFC\" class=\"headerlink\" title=\"FFC\"></a>FFC</h3><ol>\n<li>定义(Flex Formatting Contexts)：自适应格式化上下文</li>\n<li>display值为flex或者inline-flex的元素将会生成自适应容器（flex container）</li>\n<li>FFC和BFC区别<ul>\n<li>Flexbox 不支持 ::first-line 和 ::first-letter 这两种伪元素</li>\n<li>vertical-align 对 Flexbox 中的子元素失效</li>\n<li>float 和 clear 属性对 Flexbox 中的子元素是没有效果的，也不会使子元素脱离文档流</li>\n<li>多栏布局（column-*） 在 Flexbox 中失效</li>\n<li>Flexbox 下的子元素不会继承父级容器的宽</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"GFC\"><a href=\"#GFC\" class=\"headerlink\" title=\"GFC\"></a>GFC</h3><ol>\n<li>定义(GridLayout Formatting Contexts)：网格布局格式化上下文</li>\n<li>display值为grid的元素，获得一个独立的渲染区域，可在网格内定义项目（item）、行（row）、列（columns）</li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"什么是css\"><a href=\"#什么是css\" class=\"headerlink\" title=\"什么是css\"></a>什么是css</h3><p>层叠样式表(英文全称：Cascading Style Sheets),是一种用来表现html或者xml等文件样式的计算机语言。</p>\n<h3 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h3><ul>\n<li>在html文档中，每一个渲染在页面中的标签都是一个个盒子模型；</li>\n<li>盒子模型分为w3c标准盒子模型和IE标准盒子模型；当不对Doctype进行定义时，会触发怪异模式。</li>\n<li>盒子模型</li>\n</ul>\n<pre><code>/****css****/\n.box{\n  width:100px;\n  height:100px;\n  border:10px;\n  background-color:red;\n  padding:20px;\n  margin:20px;\n}\n\n&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><p><img src=\"/images/css%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png\" alt></p>\n<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><ul>\n<li><p>定义（Block fomatting context）：块级格式化上下文(每一个元素盒子从上向下排列)</p>\n</li>\n<li><p>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</p>\n</li>\n<li><p>是一个独立的渲染区域，只有Block-level box参与</p>\n</li>\n<li><p>布局规则</p>\n<ol>\n<li>内部的Box会在垂直方向链接放置</li>\n<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>\n<li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>\n<li>BFC的区域不会与float box重叠</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算BFC的高度时，浮动元素也参与计算</li>\n</ol>\n</li>\n<li><p>那些元素会生成BFC</p>\n<ol>\n<li>根元素</li>\n<li>float元素不为none</li>\n<li>position为 absolute或者fixed</li>\n<li>display为inline-block, table-cell, table-caption, flex, inline-flex</li>\n<li>overflow不为visible</li>\n</ol>\n</li>\n<li><p>BFC作用</p>\n<ol>\n<li>自适应两栏布局</li>\n<li>清除内部浮动</li>\n<li>防止margin重叠</li>\n</ol>\n</li>\n<li><p>例子说明</p>\n</li>\n<li><p>根据以上BFC布局规则第3条、第4条来触发main生成BFC，来实现自适应两栏布局</p>\n<pre><code>  /****css****/\n  .main{\n    overflow: hidden;\n    height: 500px;\n    background: yellow;\n  }\n  .aside{\n    float: left;\n    width: 200px;\n    height: 500px;\n    background-color: red;\n  }\n\n  &lt;!--html--&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;aside&quot;&gt;侧边栏区域&lt;/div&gt;\n    &lt;div class=&quot;main&quot;&gt;内容区域&lt;/div&gt;\n  &lt;/div&gt;</code></pre></li>\n<li><p>根据BFC布局规则第6条，解决float元素使其父元素高度塌陷问题</p>\n<pre><code>  /****css****/\n  .parent{\n    border: 1px solid red;\n    width: 400px;\n    overflow: hidden;\n    padding: 10px;\n  }\n  .child{\n    float: left;\n    height: 300px;\n    width: 198px;\n    border: 1px solid green;\n  }\n\n  &lt;!--html--&gt;\n  &lt;div class=&quot;parent&quot;&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;</code></pre></li>\n<li><p>防止margin重叠,根据生成BFC第4条规则</p>\n<pre><code>  /****css****/\n  .box{\n    width: 300px;\n    height: auto;\n  }\n  .content{\n    width: 300px;\n    height: 200px;\n    margin: 100px;\n    background: red;\n  }\n  .warp{\n    display: inline-block;\n  }\n\n  &lt;!--html--&gt;\n  &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;content warp&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;</code></pre></li>\n</ul>\n<h3 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h3><ol>\n<li><p>布局规则</p>\n<ul>\n<li>定义(Inline Formatting Contexts)：内联格式化上下文（每一个元素盒子从左到右排列）</li>\n<li>IFC的line box高度 由其行内元素中 最高的实际高度计算而来（不受到竖直方向的padding/margin影响)</li>\n<li>inline-level box:display 属性为 inline, inline-box，inline-table，table-cell，table-column-group等，会生成 inline-level box。并且参与 inline fomatting context；</li>\n<li>当inline-level box的宽度大于containing block，且达到内容换行条件时，会将inline-level拆散为多个inline-level box并分布到多行中</li>\n<li>inline-level box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短</li>\n<li>IFC中不可能有块级元素，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。</li>\n</ul>\n</li>\n<li><p>作用</p>\n<ul>\n<li>水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。</li>\n<li>垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>\n</ul>\n</li>\n<li><p>示例</p>\n<ul>\n<li><p>根据布局规则第4条</p>\n<pre><code>/****css****/\n.break{\n border: 1px solid red;\n background: yellow;\n}\n\n&lt;!--html--&gt;\n&lt;span class=&quot;break&quot;&gt;这是一个行内盒子这是一个行内盒子这是一个行内盒子&lt;/span&gt;</code></pre><p><img src=\"/images/css-IFC.jpg\" alt></p>\n</li>\n</ul>\n</li>\n<li><p>根据作用第1条,设置span为inline-block,则会在box上产生ifc,在box上设置text-align使span元素水平居中。</p>\n<pre><code> /****css****/\n .box{text-align: center;}\n .content{\n   display: inline-block;\n   border: 1px solid red;\n }\n\n &lt;!--html--&gt;\n &lt;div class=&quot;box&quot;&gt;\n   &lt;span class=&quot;content&quot;&gt;内容区域&lt;/span&gt;\n &lt;/div&gt;</code></pre></li>\n<li><p>根据作用第2条，设置盒子2为inline-block，则会在box上产生ifc，设置其vertical-align:middle，盒子1垂直居中。</p>\n<pre><code> /****css****/\n .box{\n   text-align: center;\n   border: 1px solid red;\n }\n .label{\n   display: inline-block;\n   height: 100px;\n   width: 100px;\n   vertical-align: middle;\n }\n\n &lt;!--html--&gt;\n &lt;div class=&quot;box&quot;&gt;\n   &lt;span class=&quot;content&quot;&gt;盒子1&lt;/span&gt;\n   &lt;span class=&quot;label&quot;&gt;盒子2&lt;/span&gt;\n &lt;/div&gt;</code></pre></li>\n</ol>\n<h3 id=\"FFC\"><a href=\"#FFC\" class=\"headerlink\" title=\"FFC\"></a>FFC</h3><ol>\n<li>定义(Flex Formatting Contexts)：自适应格式化上下文</li>\n<li>display值为flex或者inline-flex的元素将会生成自适应容器（flex container）</li>\n<li>FFC和BFC区别<ul>\n<li>Flexbox 不支持 ::first-line 和 ::first-letter 这两种伪元素</li>\n<li>vertical-align 对 Flexbox 中的子元素失效</li>\n<li>float 和 clear 属性对 Flexbox 中的子元素是没有效果的，也不会使子元素脱离文档流</li>\n<li>多栏布局（column-*） 在 Flexbox 中失效</li>\n<li>Flexbox 下的子元素不会继承父级容器的宽</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"GFC\"><a href=\"#GFC\" class=\"headerlink\" title=\"GFC\"></a>GFC</h3><ol>\n<li>定义(GridLayout Formatting Contexts)：网格布局格式化上下文</li>\n<li>display值为grid的元素，获得一个独立的渲染区域，可在网格内定义项目（item）、行（row）、列（columns）</li>\n</ol>\n"},{"title":"css分层理论","date":"2017-06-22T10:02:25.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识","_content":"\ncss分层理论和命令规则将有助于它的可扩展性，性能的提高和代码的组织管理。\n\n### OOSS\n1. 定义：面向对象css\n2. 设计原则：表现与结构分离，容器与内容分离\n3. 用途：创建可复用的CSS模块以提高性能\n4. 提高团队开发效率，减少耦合\n\n### SMACSS\n1. 定义：可扩展的模块化架构的CSS\n2. 设计原则： 使用一套五个层次来划分CSS\n3. 用途：创建更结构化的模块以提高性能，增加效率\n  ```\n  Base - 设定HTML elements 的默认值\n  Layout -Page structure 整个网站的「大架构」的外观   \n  Module - Re-usable code bloks 不同页面公共模块 \n  State - Active/Inactive etc 定义元素不同的状态 \n  Theme - Typography and colour schemes 页面上所有「主视觉」的定义 \n  ```\n    \n  ```\n  .header {}\n  .header-top {}\n  .header-top__title {}\n  .header-top__title--ico {}\n\n  <div class=\"header\">\n    <div class=\"header-top\">\n      <div class=\"header-top__title\">\n        <div class=\"header-top__title--ico\"></div>\n      </div>\n    </div>\n  </div>\n  ```\n\n### BEM\n1. 定义：block：块，Element：元素，Modifier：修饰符 \n2. 设计原则：通过给每个元素添加它的父级block模块作为前缀\n3. 用途：有助于消除页面和body类对嵌套或者附加样式依赖\n  ```\n  .product-details {}\n  .product-details__header {}\n  .product-details__header--ico {}\n\n  <div class=\"product-details\">\n    <div class=\"product-details__header\">\n      <div class=\"product-details__header--ico\"><div> \n    </div>\n  </div>\n  ```\n\n### SUIT\n1. 定义：SUIT起源于BEM，对组件名使用驼峰式和连字号把组件从他们的修饰和子孙后代中区分出来\n2. 用途：通过抽离组件级别的的样式表，消除潜在的混乱连字符号连接元素名来使得选择器的可读性更强。\n3. 代码示例同BEM 只不过是抽离的组件\n\n### ACSS\n\n定义： 考虑如何设计一个系统的接口。原子(Atoms)是创建一个区块的最基本的特质，比如说表单按钮。分子(Molecules)是很多个原子(Atoms)的组合，比如说一个表单中包括了一个标签，输入框和按钮。生物(Organisms)是众多分子(Molecules)的组合物，比如一个网站的顶部区域，它包括了网站的标题、导航等。而模板(Templates)又是众多生物(Organisms)的结合体。比如一个网站页面的布局。而最后的页面就是特殊的模板。\n\n![](/images/Acss.jpg)\n\n### ITCSS\n\n定义：创造了一系列的层次来管理依赖关系和促进可扩展性。基础的层次包括通用和广泛的选择器。顶部的层次包含了局部模块具体化的选择器。\n\n```\n.Settings — 全局可用配置，设置开关。$color-ui: #BADA55; $spacing-unit:10px\n.Tools —通用工具函数。@mixin font-color() {font-color: $color-ui;}\n.Generic — 通用基础样式。Normalize, resets, box-sizing: border-box;\n.Base — 未归类的HTML元素。ul {list-style: square outside;}\n.Objects —设计部分开始使用专用类。.ui-list__item {padding: $spacing-unit;}\n.Components — 设计符合你们的组件。products-list {@include font-brand();border-top: 1px solid $color-ui;}\n.Trumps —重写，只影响一块的DOM。(通常带上我们的!important)\n\n```\n","source":"_posts/css/css-layered.md","raw":"---\ntitle: css分层理论\ndate: 2017-6-22 18:02:25\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识\ntags:\n- CSS\ncategories:\n- CSS\n---\n\ncss分层理论和命令规则将有助于它的可扩展性，性能的提高和代码的组织管理。\n\n### OOSS\n1. 定义：面向对象css\n2. 设计原则：表现与结构分离，容器与内容分离\n3. 用途：创建可复用的CSS模块以提高性能\n4. 提高团队开发效率，减少耦合\n\n### SMACSS\n1. 定义：可扩展的模块化架构的CSS\n2. 设计原则： 使用一套五个层次来划分CSS\n3. 用途：创建更结构化的模块以提高性能，增加效率\n  ```\n  Base - 设定HTML elements 的默认值\n  Layout -Page structure 整个网站的「大架构」的外观   \n  Module - Re-usable code bloks 不同页面公共模块 \n  State - Active/Inactive etc 定义元素不同的状态 \n  Theme - Typography and colour schemes 页面上所有「主视觉」的定义 \n  ```\n    \n  ```\n  .header {}\n  .header-top {}\n  .header-top__title {}\n  .header-top__title--ico {}\n\n  <div class=\"header\">\n    <div class=\"header-top\">\n      <div class=\"header-top__title\">\n        <div class=\"header-top__title--ico\"></div>\n      </div>\n    </div>\n  </div>\n  ```\n\n### BEM\n1. 定义：block：块，Element：元素，Modifier：修饰符 \n2. 设计原则：通过给每个元素添加它的父级block模块作为前缀\n3. 用途：有助于消除页面和body类对嵌套或者附加样式依赖\n  ```\n  .product-details {}\n  .product-details__header {}\n  .product-details__header--ico {}\n\n  <div class=\"product-details\">\n    <div class=\"product-details__header\">\n      <div class=\"product-details__header--ico\"><div> \n    </div>\n  </div>\n  ```\n\n### SUIT\n1. 定义：SUIT起源于BEM，对组件名使用驼峰式和连字号把组件从他们的修饰和子孙后代中区分出来\n2. 用途：通过抽离组件级别的的样式表，消除潜在的混乱连字符号连接元素名来使得选择器的可读性更强。\n3. 代码示例同BEM 只不过是抽离的组件\n\n### ACSS\n\n定义： 考虑如何设计一个系统的接口。原子(Atoms)是创建一个区块的最基本的特质，比如说表单按钮。分子(Molecules)是很多个原子(Atoms)的组合，比如说一个表单中包括了一个标签，输入框和按钮。生物(Organisms)是众多分子(Molecules)的组合物，比如一个网站的顶部区域，它包括了网站的标题、导航等。而模板(Templates)又是众多生物(Organisms)的结合体。比如一个网站页面的布局。而最后的页面就是特殊的模板。\n\n![](/images/Acss.jpg)\n\n### ITCSS\n\n定义：创造了一系列的层次来管理依赖关系和促进可扩展性。基础的层次包括通用和广泛的选择器。顶部的层次包含了局部模块具体化的选择器。\n\n```\n.Settings — 全局可用配置，设置开关。$color-ui: #BADA55; $spacing-unit:10px\n.Tools —通用工具函数。@mixin font-color() {font-color: $color-ui;}\n.Generic — 通用基础样式。Normalize, resets, box-sizing: border-box;\n.Base — 未归类的HTML元素。ul {list-style: square outside;}\n.Objects —设计部分开始使用专用类。.ui-list__item {padding: $spacing-unit;}\n.Components — 设计符合你们的组件。products-list {@include font-brand();border-top: 1px solid $color-ui;}\n.Trumps —重写，只影响一块的DOM。(通常带上我们的!important)\n\n```\n","slug":"css/css-layered","published":1,"updated":"2019-08-26T16:46:27.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n6z000ckuu66aaxtqna","content":"<p>css分层理论和命令规则将有助于它的可扩展性，性能的提高和代码的组织管理。</p>\n<h3 id=\"OOSS\"><a href=\"#OOSS\" class=\"headerlink\" title=\"OOSS\"></a>OOSS</h3><ol>\n<li>定义：面向对象css</li>\n<li>设计原则：表现与结构分离，容器与内容分离</li>\n<li>用途：创建可复用的CSS模块以提高性能</li>\n<li>提高团队开发效率，减少耦合</li>\n</ol>\n<h3 id=\"SMACSS\"><a href=\"#SMACSS\" class=\"headerlink\" title=\"SMACSS\"></a>SMACSS</h3><ol>\n<li><p>定义：可扩展的模块化架构的CSS</p>\n</li>\n<li><p>设计原则： 使用一套五个层次来划分CSS</p>\n</li>\n<li><p>用途：创建更结构化的模块以提高性能，增加效率</p>\n<pre><code>Base - 设定HTML elements 的默认值\nLayout -Page structure 整个网站的「大架构」的外观   \nModule - Re-usable code bloks 不同页面公共模块 \nState - Active/Inactive etc 定义元素不同的状态 \nTheme - Typography and colour schemes 页面上所有「主视觉」的定义 </code></pre><pre><code>.header {}\n.header-top {}\n.header-top__title {}\n.header-top__title--ico {}\n\n&lt;div class=&quot;header&quot;&gt;\n &lt;div class=&quot;header-top&quot;&gt;\n   &lt;div class=&quot;header-top__title&quot;&gt;\n     &lt;div class=&quot;header-top__title--ico&quot;&gt;&lt;/div&gt;\n   &lt;/div&gt;\n &lt;/div&gt;\n&lt;/div&gt;</code></pre></li>\n</ol>\n<h3 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h3><ol>\n<li><p>定义：block：块，Element：元素，Modifier：修饰符 </p>\n</li>\n<li><p>设计原则：通过给每个元素添加它的父级block模块作为前缀</p>\n</li>\n<li><p>用途：有助于消除页面和body类对嵌套或者附加样式依赖</p>\n<pre><code>.product-details {}\n.product-details__header {}\n.product-details__header--ico {}\n\n&lt;div class=&quot;product-details&quot;&gt;\n &lt;div class=&quot;product-details__header&quot;&gt;\n   &lt;div class=&quot;product-details__header--ico&quot;&gt;&lt;div&gt; \n &lt;/div&gt;\n&lt;/div&gt;</code></pre></li>\n</ol>\n<h3 id=\"SUIT\"><a href=\"#SUIT\" class=\"headerlink\" title=\"SUIT\"></a>SUIT</h3><ol>\n<li>定义：SUIT起源于BEM，对组件名使用驼峰式和连字号把组件从他们的修饰和子孙后代中区分出来</li>\n<li>用途：通过抽离组件级别的的样式表，消除潜在的混乱连字符号连接元素名来使得选择器的可读性更强。</li>\n<li>代码示例同BEM 只不过是抽离的组件</li>\n</ol>\n<h3 id=\"ACSS\"><a href=\"#ACSS\" class=\"headerlink\" title=\"ACSS\"></a>ACSS</h3><p>定义： 考虑如何设计一个系统的接口。原子(Atoms)是创建一个区块的最基本的特质，比如说表单按钮。分子(Molecules)是很多个原子(Atoms)的组合，比如说一个表单中包括了一个标签，输入框和按钮。生物(Organisms)是众多分子(Molecules)的组合物，比如一个网站的顶部区域，它包括了网站的标题、导航等。而模板(Templates)又是众多生物(Organisms)的结合体。比如一个网站页面的布局。而最后的页面就是特殊的模板。</p>\n<p><img src=\"/images/Acss.jpg\" alt></p>\n<h3 id=\"ITCSS\"><a href=\"#ITCSS\" class=\"headerlink\" title=\"ITCSS\"></a>ITCSS</h3><p>定义：创造了一系列的层次来管理依赖关系和促进可扩展性。基础的层次包括通用和广泛的选择器。顶部的层次包含了局部模块具体化的选择器。</p>\n<pre><code>.Settings — 全局可用配置，设置开关。$color-ui: #BADA55; $spacing-unit:10px\n.Tools —通用工具函数。@mixin font-color() {font-color: $color-ui;}\n.Generic — 通用基础样式。Normalize, resets, box-sizing: border-box;\n.Base — 未归类的HTML元素。ul {list-style: square outside;}\n.Objects —设计部分开始使用专用类。.ui-list__item {padding: $spacing-unit;}\n.Components — 设计符合你们的组件。products-list {@include font-brand();border-top: 1px solid $color-ui;}\n.Trumps —重写，只影响一块的DOM。(通常带上我们的!important)\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>css分层理论和命令规则将有助于它的可扩展性，性能的提高和代码的组织管理。</p>\n<h3 id=\"OOSS\"><a href=\"#OOSS\" class=\"headerlink\" title=\"OOSS\"></a>OOSS</h3><ol>\n<li>定义：面向对象css</li>\n<li>设计原则：表现与结构分离，容器与内容分离</li>\n<li>用途：创建可复用的CSS模块以提高性能</li>\n<li>提高团队开发效率，减少耦合</li>\n</ol>\n<h3 id=\"SMACSS\"><a href=\"#SMACSS\" class=\"headerlink\" title=\"SMACSS\"></a>SMACSS</h3><ol>\n<li><p>定义：可扩展的模块化架构的CSS</p>\n</li>\n<li><p>设计原则： 使用一套五个层次来划分CSS</p>\n</li>\n<li><p>用途：创建更结构化的模块以提高性能，增加效率</p>\n<pre><code>Base - 设定HTML elements 的默认值\nLayout -Page structure 整个网站的「大架构」的外观   \nModule - Re-usable code bloks 不同页面公共模块 \nState - Active/Inactive etc 定义元素不同的状态 \nTheme - Typography and colour schemes 页面上所有「主视觉」的定义 </code></pre><pre><code>.header {}\n.header-top {}\n.header-top__title {}\n.header-top__title--ico {}\n\n&lt;div class=&quot;header&quot;&gt;\n &lt;div class=&quot;header-top&quot;&gt;\n   &lt;div class=&quot;header-top__title&quot;&gt;\n     &lt;div class=&quot;header-top__title--ico&quot;&gt;&lt;/div&gt;\n   &lt;/div&gt;\n &lt;/div&gt;\n&lt;/div&gt;</code></pre></li>\n</ol>\n<h3 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h3><ol>\n<li><p>定义：block：块，Element：元素，Modifier：修饰符 </p>\n</li>\n<li><p>设计原则：通过给每个元素添加它的父级block模块作为前缀</p>\n</li>\n<li><p>用途：有助于消除页面和body类对嵌套或者附加样式依赖</p>\n<pre><code>.product-details {}\n.product-details__header {}\n.product-details__header--ico {}\n\n&lt;div class=&quot;product-details&quot;&gt;\n &lt;div class=&quot;product-details__header&quot;&gt;\n   &lt;div class=&quot;product-details__header--ico&quot;&gt;&lt;div&gt; \n &lt;/div&gt;\n&lt;/div&gt;</code></pre></li>\n</ol>\n<h3 id=\"SUIT\"><a href=\"#SUIT\" class=\"headerlink\" title=\"SUIT\"></a>SUIT</h3><ol>\n<li>定义：SUIT起源于BEM，对组件名使用驼峰式和连字号把组件从他们的修饰和子孙后代中区分出来</li>\n<li>用途：通过抽离组件级别的的样式表，消除潜在的混乱连字符号连接元素名来使得选择器的可读性更强。</li>\n<li>代码示例同BEM 只不过是抽离的组件</li>\n</ol>\n<h3 id=\"ACSS\"><a href=\"#ACSS\" class=\"headerlink\" title=\"ACSS\"></a>ACSS</h3><p>定义： 考虑如何设计一个系统的接口。原子(Atoms)是创建一个区块的最基本的特质，比如说表单按钮。分子(Molecules)是很多个原子(Atoms)的组合，比如说一个表单中包括了一个标签，输入框和按钮。生物(Organisms)是众多分子(Molecules)的组合物，比如一个网站的顶部区域，它包括了网站的标题、导航等。而模板(Templates)又是众多生物(Organisms)的结合体。比如一个网站页面的布局。而最后的页面就是特殊的模板。</p>\n<p><img src=\"/images/Acss.jpg\" alt></p>\n<h3 id=\"ITCSS\"><a href=\"#ITCSS\" class=\"headerlink\" title=\"ITCSS\"></a>ITCSS</h3><p>定义：创造了一系列的层次来管理依赖关系和促进可扩展性。基础的层次包括通用和广泛的选择器。顶部的层次包含了局部模块具体化的选择器。</p>\n<pre><code>.Settings — 全局可用配置，设置开关。$color-ui: #BADA55; $spacing-unit:10px\n.Tools —通用工具函数。@mixin font-color() {font-color: $color-ui;}\n.Generic — 通用基础样式。Normalize, resets, box-sizing: border-box;\n.Base — 未归类的HTML元素。ul {list-style: square outside;}\n.Objects —设计部分开始使用专用类。.ui-list__item {padding: $spacing-unit;}\n.Components — 设计符合你们的组件。products-list {@include font-brand();border-top: 1px solid $color-ui;}\n.Trumps —重写，只影响一块的DOM。(通常带上我们的!important)\n</code></pre>"},{"title":"CSS预处理器","date":"2017-07-01T14:25:01.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识","_content":"\nCSS 预处理器赋予我们很多css强大的功能，能够很清晰地实现代码的分层、复用和依赖管理，提高开发效率\n\n### 基本语法\n\n1. Less 的基本语法跟原生的css的风格几乎差不多\n2. Sass、Stylus 利用缩进、空格和换行来减少需要输入的字符\n\nSass\n\n```\n.header\n  background-color:red\n```\n\nLess & SCSS\n\n```\n.header {\n  background-color:red;\n}\n```\n\nStylus\n\n```\n.header\n  background-color:red\n```\n\n### 嵌套语法\n\n嵌套语法都是一致的,区别是 Sass 和 Stylus 可以不用书写大括号\n\nless\n\n```\n.header {\n  &.title {\n    color: red;\n  }\n}\n```\n\n### 变量\n\n为 CSS 增加了一种有效的复用方式，减少CSS书写重复\n\nSass\n\n```\n$bg: #ccc;\n\n.header \n  background-color:$bg;\n```\n\nLess\n```\n@bg: #ccc;\n\nheader {\n  background-color: @bg;\n}\n```\n\nStylus\n\n```\nbg = #ccc\n\nheader\n  background-color: bg\n```\n\n### @import\n\nSass 只能使用 url() 表达式引入时进行变量插值\n  ```\n  $public: public;\n\n  @import url(styles.#{$public}.css);\n  ```\n\nLess可以在字符串中进行插值：\n  ```\n  @public: public;\n\n  @import \"styles.@{public}.css\";\n  ```\n\nStylus 可以利用其字符串拼接的功能实现\n  ```\n  public = \"public\"\n\n  @import \"styles.\" + public + \".css\"\n  ```\n\n\n### 混入(Mixins)\n\n作用: 样式层面的抽象\n\nSass\n  ```\n  @mixin product-public-text {\n    font: {\n      size: 20px;\n      weight: 600;\n      family: PingFangSC;\n    }\n    color: rgba(72,72,72,1);\n  }\n  .product-header-title {\n    @include product-public-text;\n    padding: 10px;\n  }\n  ```\n\nLess\n  ```\n  .product-public-font-weight {\n    font-weight: 600;\n  }\n\n  .product-public-font(@color: red) {\n    font-size: 20px;\n    color: @color;\n  }\n\n  .product-header-title{\n    .product-public-font-weight;\n    .product-public-font(red);\n  }\n  ```\n\n### 继承\n\nSass\n  ```\n  .header {\n    background-color: red;\n  }\n  .main.active {\n    @extend .header;\n  }\n  ```\n\nless\n  ```\n  .header {\n    background-color: red;\n  }\n  .main {\n    &:extend(.header);\n  }\n  ```\n\nStylus,Scss\n  ```\n  .header\n    background-color: red;\n\n  .main\n    @extend .header\n  ```\n\n### 高级用法（函数）\n\n三种预处理器都自带了诸如色彩处理（darken等）、类型判断（if each for while 等）、数值计算等内置函数\n\n### 三种预处理器手册\n\n1. Sass：http://sass.bootcss.com/\n2. Less： https://less.bootcss.com/\n3. stylus：https://stylus.bootcss.com/\n","source":"_posts/css/css-preprocessor.md","raw":"---\ntitle: CSS预处理器\ndate: 2017-7-01 22:25:01\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: css 基础系列文章，包含基础概念、常用基本基本布局、css分层与面向对象理论、css动画与3D、css与处理器等基础知识\ntags:\n- CSS\ncategories:\n- CSS\n---\n\nCSS 预处理器赋予我们很多css强大的功能，能够很清晰地实现代码的分层、复用和依赖管理，提高开发效率\n\n### 基本语法\n\n1. Less 的基本语法跟原生的css的风格几乎差不多\n2. Sass、Stylus 利用缩进、空格和换行来减少需要输入的字符\n\nSass\n\n```\n.header\n  background-color:red\n```\n\nLess & SCSS\n\n```\n.header {\n  background-color:red;\n}\n```\n\nStylus\n\n```\n.header\n  background-color:red\n```\n\n### 嵌套语法\n\n嵌套语法都是一致的,区别是 Sass 和 Stylus 可以不用书写大括号\n\nless\n\n```\n.header {\n  &.title {\n    color: red;\n  }\n}\n```\n\n### 变量\n\n为 CSS 增加了一种有效的复用方式，减少CSS书写重复\n\nSass\n\n```\n$bg: #ccc;\n\n.header \n  background-color:$bg;\n```\n\nLess\n```\n@bg: #ccc;\n\nheader {\n  background-color: @bg;\n}\n```\n\nStylus\n\n```\nbg = #ccc\n\nheader\n  background-color: bg\n```\n\n### @import\n\nSass 只能使用 url() 表达式引入时进行变量插值\n  ```\n  $public: public;\n\n  @import url(styles.#{$public}.css);\n  ```\n\nLess可以在字符串中进行插值：\n  ```\n  @public: public;\n\n  @import \"styles.@{public}.css\";\n  ```\n\nStylus 可以利用其字符串拼接的功能实现\n  ```\n  public = \"public\"\n\n  @import \"styles.\" + public + \".css\"\n  ```\n\n\n### 混入(Mixins)\n\n作用: 样式层面的抽象\n\nSass\n  ```\n  @mixin product-public-text {\n    font: {\n      size: 20px;\n      weight: 600;\n      family: PingFangSC;\n    }\n    color: rgba(72,72,72,1);\n  }\n  .product-header-title {\n    @include product-public-text;\n    padding: 10px;\n  }\n  ```\n\nLess\n  ```\n  .product-public-font-weight {\n    font-weight: 600;\n  }\n\n  .product-public-font(@color: red) {\n    font-size: 20px;\n    color: @color;\n  }\n\n  .product-header-title{\n    .product-public-font-weight;\n    .product-public-font(red);\n  }\n  ```\n\n### 继承\n\nSass\n  ```\n  .header {\n    background-color: red;\n  }\n  .main.active {\n    @extend .header;\n  }\n  ```\n\nless\n  ```\n  .header {\n    background-color: red;\n  }\n  .main {\n    &:extend(.header);\n  }\n  ```\n\nStylus,Scss\n  ```\n  .header\n    background-color: red;\n\n  .main\n    @extend .header\n  ```\n\n### 高级用法（函数）\n\n三种预处理器都自带了诸如色彩处理（darken等）、类型判断（if each for while 等）、数值计算等内置函数\n\n### 三种预处理器手册\n\n1. Sass：http://sass.bootcss.com/\n2. Less： https://less.bootcss.com/\n3. stylus：https://stylus.bootcss.com/\n","slug":"css/css-preprocessor","published":1,"updated":"2019-08-26T16:46:27.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n72000gkuu6iuh3kt2o","content":"<p>CSS 预处理器赋予我们很多css强大的功能，能够很清晰地实现代码的分层、复用和依赖管理，提高开发效率</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><ol>\n<li>Less 的基本语法跟原生的css的风格几乎差不多</li>\n<li>Sass、Stylus 利用缩进、空格和换行来减少需要输入的字符</li>\n</ol>\n<p>Sass</p>\n<pre><code>.header\n  background-color:red</code></pre><p>Less &amp; SCSS</p>\n<pre><code>.header {\n  background-color:red;\n}</code></pre><p>Stylus</p>\n<pre><code>.header\n  background-color:red</code></pre><h3 id=\"嵌套语法\"><a href=\"#嵌套语法\" class=\"headerlink\" title=\"嵌套语法\"></a>嵌套语法</h3><p>嵌套语法都是一致的,区别是 Sass 和 Stylus 可以不用书写大括号</p>\n<p>less</p>\n<pre><code>.header {\n  &amp;.title {\n    color: red;\n  }\n}</code></pre><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>为 CSS 增加了一种有效的复用方式，减少CSS书写重复</p>\n<p>Sass</p>\n<pre><code>$bg: #ccc;\n\n.header \n  background-color:$bg;</code></pre><p>Less</p>\n<pre><code>@bg: #ccc;\n\nheader {\n  background-color: @bg;\n}</code></pre><p>Stylus</p>\n<pre><code>bg = #ccc\n\nheader\n  background-color: bg</code></pre><h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h3><p>Sass 只能使用 url() 表达式引入时进行变量插值</p>\n<pre><code>  $public: public;\n\n  @import url(styles.#{$public}.css);</code></pre><p>Less可以在字符串中进行插值：</p>\n<pre><code>  @public: public;\n\n  @import &quot;styles.@{public}.css&quot;;</code></pre><p>Stylus 可以利用其字符串拼接的功能实现</p>\n<pre><code>  public = &quot;public&quot;\n\n  @import &quot;styles.&quot; + public + &quot;.css&quot;</code></pre><h3 id=\"混入-Mixins\"><a href=\"#混入-Mixins\" class=\"headerlink\" title=\"混入(Mixins)\"></a>混入(Mixins)</h3><p>作用: 样式层面的抽象</p>\n<p>Sass</p>\n<pre><code>  @mixin product-public-text {\n    font: {\n      size: 20px;\n      weight: 600;\n      family: PingFangSC;\n    }\n    color: rgba(72,72,72,1);\n  }\n  .product-header-title {\n    @include product-public-text;\n    padding: 10px;\n  }</code></pre><p>Less</p>\n<pre><code>  .product-public-font-weight {\n    font-weight: 600;\n  }\n\n  .product-public-font(@color: red) {\n    font-size: 20px;\n    color: @color;\n  }\n\n  .product-header-title{\n    .product-public-font-weight;\n    .product-public-font(red);\n  }</code></pre><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>Sass</p>\n<pre><code>  .header {\n    background-color: red;\n  }\n  .main.active {\n    @extend .header;\n  }</code></pre><p>less</p>\n<pre><code>  .header {\n    background-color: red;\n  }\n  .main {\n    &amp;:extend(.header);\n  }</code></pre><p>Stylus,Scss</p>\n<pre><code>  .header\n    background-color: red;\n\n  .main\n    @extend .header</code></pre><h3 id=\"高级用法（函数）\"><a href=\"#高级用法（函数）\" class=\"headerlink\" title=\"高级用法（函数）\"></a>高级用法（函数）</h3><p>三种预处理器都自带了诸如色彩处理（darken等）、类型判断（if each for while 等）、数值计算等内置函数</p>\n<h3 id=\"三种预处理器手册\"><a href=\"#三种预处理器手册\" class=\"headerlink\" title=\"三种预处理器手册\"></a>三种预处理器手册</h3><ol>\n<li>Sass：<a href=\"http://sass.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://sass.bootcss.com/</a></li>\n<li>Less： <a href=\"https://less.bootcss.com/\" target=\"_blank\" rel=\"noopener\">https://less.bootcss.com/</a></li>\n<li>stylus：<a href=\"https://stylus.bootcss.com/\" target=\"_blank\" rel=\"noopener\">https://stylus.bootcss.com/</a></li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>CSS 预处理器赋予我们很多css强大的功能，能够很清晰地实现代码的分层、复用和依赖管理，提高开发效率</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><ol>\n<li>Less 的基本语法跟原生的css的风格几乎差不多</li>\n<li>Sass、Stylus 利用缩进、空格和换行来减少需要输入的字符</li>\n</ol>\n<p>Sass</p>\n<pre><code>.header\n  background-color:red</code></pre><p>Less &amp; SCSS</p>\n<pre><code>.header {\n  background-color:red;\n}</code></pre><p>Stylus</p>\n<pre><code>.header\n  background-color:red</code></pre><h3 id=\"嵌套语法\"><a href=\"#嵌套语法\" class=\"headerlink\" title=\"嵌套语法\"></a>嵌套语法</h3><p>嵌套语法都是一致的,区别是 Sass 和 Stylus 可以不用书写大括号</p>\n<p>less</p>\n<pre><code>.header {\n  &amp;.title {\n    color: red;\n  }\n}</code></pre><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>为 CSS 增加了一种有效的复用方式，减少CSS书写重复</p>\n<p>Sass</p>\n<pre><code>$bg: #ccc;\n\n.header \n  background-color:$bg;</code></pre><p>Less</p>\n<pre><code>@bg: #ccc;\n\nheader {\n  background-color: @bg;\n}</code></pre><p>Stylus</p>\n<pre><code>bg = #ccc\n\nheader\n  background-color: bg</code></pre><h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h3><p>Sass 只能使用 url() 表达式引入时进行变量插值</p>\n<pre><code>  $public: public;\n\n  @import url(styles.#{$public}.css);</code></pre><p>Less可以在字符串中进行插值：</p>\n<pre><code>  @public: public;\n\n  @import &quot;styles.@{public}.css&quot;;</code></pre><p>Stylus 可以利用其字符串拼接的功能实现</p>\n<pre><code>  public = &quot;public&quot;\n\n  @import &quot;styles.&quot; + public + &quot;.css&quot;</code></pre><h3 id=\"混入-Mixins\"><a href=\"#混入-Mixins\" class=\"headerlink\" title=\"混入(Mixins)\"></a>混入(Mixins)</h3><p>作用: 样式层面的抽象</p>\n<p>Sass</p>\n<pre><code>  @mixin product-public-text {\n    font: {\n      size: 20px;\n      weight: 600;\n      family: PingFangSC;\n    }\n    color: rgba(72,72,72,1);\n  }\n  .product-header-title {\n    @include product-public-text;\n    padding: 10px;\n  }</code></pre><p>Less</p>\n<pre><code>  .product-public-font-weight {\n    font-weight: 600;\n  }\n\n  .product-public-font(@color: red) {\n    font-size: 20px;\n    color: @color;\n  }\n\n  .product-header-title{\n    .product-public-font-weight;\n    .product-public-font(red);\n  }</code></pre><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>Sass</p>\n<pre><code>  .header {\n    background-color: red;\n  }\n  .main.active {\n    @extend .header;\n  }</code></pre><p>less</p>\n<pre><code>  .header {\n    background-color: red;\n  }\n  .main {\n    &amp;:extend(.header);\n  }</code></pre><p>Stylus,Scss</p>\n<pre><code>  .header\n    background-color: red;\n\n  .main\n    @extend .header</code></pre><h3 id=\"高级用法（函数）\"><a href=\"#高级用法（函数）\" class=\"headerlink\" title=\"高级用法（函数）\"></a>高级用法（函数）</h3><p>三种预处理器都自带了诸如色彩处理（darken等）、类型判断（if each for while 等）、数值计算等内置函数</p>\n<h3 id=\"三种预处理器手册\"><a href=\"#三种预处理器手册\" class=\"headerlink\" title=\"三种预处理器手册\"></a>三种预处理器手册</h3><ol>\n<li>Sass：<a href=\"http://sass.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://sass.bootcss.com/</a></li>\n<li>Less： <a href=\"https://less.bootcss.com/\" target=\"_blank\" rel=\"noopener\">https://less.bootcss.com/</a></li>\n<li>stylus：<a href=\"https://stylus.bootcss.com/\" target=\"_blank\" rel=\"noopener\">https://stylus.bootcss.com/</a></li>\n</ol>\n"},{"title":"Generator 与 Async","date":"2019-08-26T08:22:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### 概述\n在前端中异步编程一直是前端开发的一个痛点，因为 JavaScript 语法的灵活性和特殊性导致前端开发的困难（因为 JavaScript 是单线程，如果没有异步的世界可以想象一下，将无法执行卡死操作）\n\n### 什么是异步编程\n所谓\"异步\"，一个任务不是连续完成的，先执行第一段，然后执行其他任务，等做好了准备，回过头执行第二段\n\n所谓\"同步\"，就是不间断的连续执行一个任务\n\n### 异步编程示例\n我们熟悉的异步编程有很多种例如 `代码的执行任务队列`,`setTimeout`, `setInterval`, `callback`, `promise` 等\n\n回调函数\n\n```\nfunction Fun(name, callback) {\n  console.log(name)\n  callback && callback()\n}\nfun('renbo',function () {})\n\n再例如数组的操作方法\n\n[1,2,3,4,5].map(function(v,i){\n  return i+':'+v\n})\n\n```\n\nPromise\n\n```\nvar readFile = require('fs-readfile-promise');\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n\n```\n\n### Generator概念\n\nES6 提供的一种异步编程解决方案，执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。\n\n### Generator特征\n- function关键字与函数名之间有一个星号\n- 函数体内部使用yield表达式，定义不同的内部状态\n- 执行函数不会立即执行，只有调用了next方法才会执行\n- 如果函数内部不写 yield 表达式，则此函数就是单纯的暂缓执行函数\n- 每次调用遍历器对象的next方法，返回value和done两个属性的对象\n- value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值\n- done属性是一个布尔值，表示是否遍历结束\n\n```\nfunction* funGenerator() {\n  yield 'hello';\n  yield 'my name is renbo';\n  return 'ending';\n}\n\nvar fun = funGenerator();\n\nfun.next() // { value: 'hello', done: false }\nfun.next() // { value: 'my name is renbo', done: false }\nfun.next()  // { value: 'ending', done: true }\nfun.next()  // { value: undefined, done: true }\n```\n\n### 控制流管理\n\n回调\n\n```\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n```\n\npromise\n\n```\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n```\n\nGenerator\n\n```\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n\n```\n\n### 单个异步任务\n\nGenerator + Promise\n\n```\nvar fetch = require('node-fetch');\n\nfunction* gen(){\n  var url = 'https://api.github.com/users/github';\n  var result = yield fetch(url);\n  console.log(result);\n}\n\n// 调用\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n    return data.json();\n}).then(function(data){\n    g.next(data);\n});\n```\n\n上述的执行过程调用 gen 会返回遍历器，然后通过遍历器的 next 方法返回 fetch 的 promise 实例`{ value: Promise { <pending> }, done: false }`，通过调用 then 方法执行结果\n\n\n###  多个异步任务\n\n```\nvar fetch = require('node-fetch');\n\nfunction* gen() {\n  var r1 = yield fetch('https://api.github.com/users/github');\n  var r2 = yield fetch('https://api.github.com/users/github/followers');\n  var r3 = yield fetch('https://api.github.com/users/github/repos');\n\n  console.log([r1.bio, r2[0].login, r3[0].full_name].join('\\n'));\n}\n\n```\n\n获得执行结果\n\n```\nvar g = gen();\nvar result1 = g.next();\n\nresult1.value.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value;\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    g.next(data)\n});\n\n```\n\n利用递归封装上述执行结果\n\n```\nfunction run(gen) {\n  var g = gen();\n\n  function next(data) {\n    var result = g.next(data);\n\n    if (result.done) return;\n\n    result.value.then(function(data) {\n        return data.json();\n    }).then(function(data) {\n        next(data);\n    });\n\n  }\n\n  next();\n}\n\nrun(gen);\n```\n\n### 启动器函数 （Generator + Promise）\n\n由于 fetch 方法返回 promise 有 json 方法，所以上述例子成立，如果 yield 直接结合 promise 函数那么就会变成启动器函数。由于 Generator 不能像普通函数一样自动执行和自己暂缓执行的特性，所以增加自执行启动函数，这也是 co 模块的初衷（）\n\n```\nvar fetch = require('node-fetch');\n\nfunction* gen() {\n  var r1 = yield fetch('https://api.github.com/users/github');\n  var json1 = yield r1.json();\n  var r2 = yield fetch('https://api.github.com/users/github/followers');\n  var json2 = yield r2.json();\n  var r3 = yield fetch('https://api.github.com/users/github/repos');\n  var json3 = yield r3.json();\n\n  console.log([json1.bio, json2[0].login, json3[0].full_name].join('\\n'));\n}\n\nfunction run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value.then(function(data) {\n            next(data);\n        });\n\n    }\n\n    next();\n}\n\nrun(gen);\n\n```\n\n### 启动器函数 （Generator + 回调）\n\n回调函数\n\n```\nfunction fetchData(url) {\n    return function(cb){\n        setTimeout(function(){\n            cb({status: 200, data: url})\n        }, 1000)\n    }\n}\n```\n\nGenerator函数\n\n```\nfunction* gen() {\n    var r1 = yield fetchData('https://api.github.com/users/github');\n    var r2 = yield fetchData('https://api.github.com/users/github/followers');\n\n    console.log([r1.data, r2.data].join('\\n'));\n}\n```\n\n获得结果\n\n```\nvar g = gen();\n\nvar r1 = g.next();\n\nr1.value(function(data) {\n  var r2 = g.next(data);\n  r2.value(function(data) {\n      g.next(data);\n  });\n});\n```\n\n通过上面的示例代码我们观察到回调函数依然解决不了多个 yield 时代码会循环嵌套。还的借助递归\n\n```\nfunction run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value(next);\n    }\n\n    next();\n}\n\nrun(gen);\n```\n\n### run \n\n通过上面代码可以看出 Generator 函数的自动执行需要一种机制，当异步操作有了结果，才能自动交回执行权\n\n- 回调函数。 将异步操作进行包装，暴露出回调函数，在回调函数里面交回执行权\n- Promise对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权\n\n上面两种方法写了一个 run 的启动器函数，那么我们将两种封装在一起，返回了一个 Promise，获得 Generator 函数的返回值，并且捕获错误\n\n```\nfunction run(gen) {\n\n    return new Promise(function(resolve, reject) {\n        if (typeof gen == 'function') gen = gen();\n\n        // 如果 gen 不是一个迭代器\n        if (!gen || typeof gen.next !== 'function') return resolve(gen)\n\n        onFulfilled();\n\n        function onFulfilled(res) {\n            var ret;\n            try {\n                ret = gen.next(res);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function onRejected(err) {\n            var ret;\n            try {\n                ret = gen.throw(err);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function next(ret) {\n            if (ret.done) return resolve(ret.value);\n            var value = toPromise(ret.value);\n            if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n            return onRejected(new TypeError('You may only yield a function, promise ' +\n                'but the following object was passed: \"' + String(ret.value) + '\"'));\n        }\n    })\n}\n\nfunction isPromise(obj) {\n    return 'function' == typeof obj.then;\n}\n\nfunction toPromise(obj) {\n    if (isPromise(obj)) return obj;\n    if ('function' == typeof obj) return thunkToPromise(obj);\n    return obj;\n}\n\nfunction thunkToPromise(fn) {\n    return new Promise(function(resolve, reject) {\n        fn(function(err, res) {\n            if (err) return reject(err);\n            resolve(res);\n        });\n    });\n}\n\nmodule.exports = run;\n```\n\n### co\n \nco 是大神 TJ Holowaychuk 于 2013 年 6 月发布的一个小模块，用于 Generator 函数的自动执行。\n\n如果直接使用 co 模块，这两种不同的例子可以简写为\n\nyield 后是一个 Promise\n\n```\nvar fetch = require('node-fetch');\nvar co = require('co');\n\nfunction* gen() {\n    var r1 = yield fetch('https://api.github.com/users/github');\n    var json1 = yield r1.json();\n    var r2 = yield fetch('https://api.github.com/users/github/followers');\n    var json2 = yield r2.json();\n    var r3 = yield fetch('https://api.github.com/users/github/repos');\n    var json3 = yield r3.json();\n\n    console.log([json1.bio, json2[0].login, json3[0].full_name].join('\\n'));\n}\n\nco(gen);\n```\n\nyield 后是一个回调函数\n\n```\n\nvar co = require('co');\n\nfunction fetchData(url) {\n    return function(cb) {\n        setTimeout(function() {\n            cb(null, { status: 200, data: url })\n        }, 1000)\n    }\n}\n\nfunction* gen() {\n    var r1 = yield fetchData('https://api.github.com/users/github');\n    var r2 = yield fetchData('https://api.github.com/users/github/followers');\n\n    console.log([r1.data, r2.data].join('\\n'));\n}\n\nco(gen);\n```\n\n\n### async 有点\n\n async 函数，使得异步操作变得更加方便,它也是 Generator 函数的语法糖。\n\n当使用 Generator 函数的时候\n\n```\nvar fetch = require('node-fetch');\nvar co = require('co');\n\nfunction* gen() {\n    var r1 = yield fetch('https://api.github.com/users/github');\n    var json1 = yield r1.json();\n    console.log(json1.bio);\n}\n\nco(gen);\n```\n\n当使用 async 时候\n\n```\nvar fetch = require('node-fetch');\n\nvar fetchData = async function () {\n    var r1 = await fetch('https://api.github.com/users/github');\n    var json1 = await r1.json();\n    console.log(json1.bio);\n};\n\nfetchData();\n```\n\n通过上面观察到代码基本一样，所以 async 的原理就是将 Generator 函数和自动执行器，包装在一个函数里面\n\n```\nasync function fn(args) {\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return spawn(function* () {\n    // ...\n  });\n}\n```\n\nasync 函数返回一个 Promise 对象所以也可以理解为 async 函数是基于 Promise 和 Generator 的一层封装\n随意处理初步流程 async 会比使用 Promise 更优雅\n\n```\nfunction fetch() {\n  return (\n    fetchData().then(() => {\n      return \"done\"\n    });\n  )\n}\n\nasync function fetch() {\n  await fetchData()\n  return \"done\"\n};\n```\n\n```\nfunction fetch() {\n  return fetchData().then(data => {\n    if (data.moreData) {\n      return fetchAnotherData(data).then(moreData => {\n        return moreData\n      })\n    } else {\n      return data\n    }\n  });\n}\n\nasync function fetch() {\n  const data = await fetchData()\n  if (data.moreData) {\n    const moreData = await fetchAnotherData(data);\n    return moreData\n  } else {\n    return data\n  }\n}\n```\n\n```\nfunction fetch() {\n  return (\n    fetchData()\n    .then(value1 => {\n      return fetchMoreData(value1)\n    })\n    .then(value2 => {\n      return fetchMoreData2(value2)\n    })\n  )\n}\n\nasync function fetch() {\n  const value1 = await fetchData()\n  const value2 = await fetchMoreData(value1)\n  return fetchMoreData2(value2)\n};\n```\n\n### async 缺点\n\n- 用try...catch 处理上是原本的优雅代码变得不再优雅\n- 语法的简洁让原本可以并行执行的内容变成了顺序执行，从而影响了性能\n\nawait由于返回 promise 对象，所以结果可能是rejected，所以最好把await命令放在try...catch代码块中\n但是如果想捕获 JSON.parse 中的错误那么就需要再添加一层 try...catch\n\n```\nasync function fetch() {\n  try {\n    const data = JSON.parse(await fetchData())\n  } catch (err) {\n    console.log(err)\n  }\n};\n```\n\n原本没有依赖关系的两个函数，却只能等待 getList 返回才能执行 getAnotherList，导致请求时间多了一倍\n\n```\n(async () => {\n  const getList = await getList();\n  const getAnotherList = await getAnotherList();\n})();\n```\n\n将上面的函数改为如下函数可以解决上述问题\n```\n(async () => {\n  const listPromise = getList();\n  const anotherListPromise = getAnotherList();\n  await listPromise;\n  await anotherListPromise;\n})();\n```\n\n也可以使用 Promse.all\n\n```\n(async () => {\n  Promise.all([getList(), getAnotherList()]).then(...);\n})();\n```\n\n并发执行 async 函数\n\n\n```\nasync function handleList() {\n  const listPromise = await getList();\n  // ...\n  await submit(listData);\n}\n\nasync function handleAnotherList() {\n  const anotherListPromise = await getAnotherList()\n  // ...\n  await submit(anotherListData)\n}\n\n// 方法一\n(async () => {\n  const handleListPromise = handleList()\n  const handleAnotherListPromise = handleAnotherList()\n  await handleListPromise\n  await handleAnotherListPromise\n})()\n\n// 方法二\n(async () => {\n  Promise.all([handleList(), handleAnotherList()]).then()\n})()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/Generator-Async.md","raw":"---\ntitle: Generator 与 Async\ndate: 2019-8-26 16:22:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n\n### 概述\n在前端中异步编程一直是前端开发的一个痛点，因为 JavaScript 语法的灵活性和特殊性导致前端开发的困难（因为 JavaScript 是单线程，如果没有异步的世界可以想象一下，将无法执行卡死操作）\n\n### 什么是异步编程\n所谓\"异步\"，一个任务不是连续完成的，先执行第一段，然后执行其他任务，等做好了准备，回过头执行第二段\n\n所谓\"同步\"，就是不间断的连续执行一个任务\n\n### 异步编程示例\n我们熟悉的异步编程有很多种例如 `代码的执行任务队列`,`setTimeout`, `setInterval`, `callback`, `promise` 等\n\n回调函数\n\n```\nfunction Fun(name, callback) {\n  console.log(name)\n  callback && callback()\n}\nfun('renbo',function () {})\n\n再例如数组的操作方法\n\n[1,2,3,4,5].map(function(v,i){\n  return i+':'+v\n})\n\n```\n\nPromise\n\n```\nvar readFile = require('fs-readfile-promise');\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n\n```\n\n### Generator概念\n\nES6 提供的一种异步编程解决方案，执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。\n\n### Generator特征\n- function关键字与函数名之间有一个星号\n- 函数体内部使用yield表达式，定义不同的内部状态\n- 执行函数不会立即执行，只有调用了next方法才会执行\n- 如果函数内部不写 yield 表达式，则此函数就是单纯的暂缓执行函数\n- 每次调用遍历器对象的next方法，返回value和done两个属性的对象\n- value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值\n- done属性是一个布尔值，表示是否遍历结束\n\n```\nfunction* funGenerator() {\n  yield 'hello';\n  yield 'my name is renbo';\n  return 'ending';\n}\n\nvar fun = funGenerator();\n\nfun.next() // { value: 'hello', done: false }\nfun.next() // { value: 'my name is renbo', done: false }\nfun.next()  // { value: 'ending', done: true }\nfun.next()  // { value: undefined, done: true }\n```\n\n### 控制流管理\n\n回调\n\n```\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n```\n\npromise\n\n```\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n```\n\nGenerator\n\n```\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n\n```\n\n### 单个异步任务\n\nGenerator + Promise\n\n```\nvar fetch = require('node-fetch');\n\nfunction* gen(){\n  var url = 'https://api.github.com/users/github';\n  var result = yield fetch(url);\n  console.log(result);\n}\n\n// 调用\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n    return data.json();\n}).then(function(data){\n    g.next(data);\n});\n```\n\n上述的执行过程调用 gen 会返回遍历器，然后通过遍历器的 next 方法返回 fetch 的 promise 实例`{ value: Promise { <pending> }, done: false }`，通过调用 then 方法执行结果\n\n\n###  多个异步任务\n\n```\nvar fetch = require('node-fetch');\n\nfunction* gen() {\n  var r1 = yield fetch('https://api.github.com/users/github');\n  var r2 = yield fetch('https://api.github.com/users/github/followers');\n  var r3 = yield fetch('https://api.github.com/users/github/repos');\n\n  console.log([r1.bio, r2[0].login, r3[0].full_name].join('\\n'));\n}\n\n```\n\n获得执行结果\n\n```\nvar g = gen();\nvar result1 = g.next();\n\nresult1.value.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value;\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    g.next(data)\n});\n\n```\n\n利用递归封装上述执行结果\n\n```\nfunction run(gen) {\n  var g = gen();\n\n  function next(data) {\n    var result = g.next(data);\n\n    if (result.done) return;\n\n    result.value.then(function(data) {\n        return data.json();\n    }).then(function(data) {\n        next(data);\n    });\n\n  }\n\n  next();\n}\n\nrun(gen);\n```\n\n### 启动器函数 （Generator + Promise）\n\n由于 fetch 方法返回 promise 有 json 方法，所以上述例子成立，如果 yield 直接结合 promise 函数那么就会变成启动器函数。由于 Generator 不能像普通函数一样自动执行和自己暂缓执行的特性，所以增加自执行启动函数，这也是 co 模块的初衷（）\n\n```\nvar fetch = require('node-fetch');\n\nfunction* gen() {\n  var r1 = yield fetch('https://api.github.com/users/github');\n  var json1 = yield r1.json();\n  var r2 = yield fetch('https://api.github.com/users/github/followers');\n  var json2 = yield r2.json();\n  var r3 = yield fetch('https://api.github.com/users/github/repos');\n  var json3 = yield r3.json();\n\n  console.log([json1.bio, json2[0].login, json3[0].full_name].join('\\n'));\n}\n\nfunction run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value.then(function(data) {\n            next(data);\n        });\n\n    }\n\n    next();\n}\n\nrun(gen);\n\n```\n\n### 启动器函数 （Generator + 回调）\n\n回调函数\n\n```\nfunction fetchData(url) {\n    return function(cb){\n        setTimeout(function(){\n            cb({status: 200, data: url})\n        }, 1000)\n    }\n}\n```\n\nGenerator函数\n\n```\nfunction* gen() {\n    var r1 = yield fetchData('https://api.github.com/users/github');\n    var r2 = yield fetchData('https://api.github.com/users/github/followers');\n\n    console.log([r1.data, r2.data].join('\\n'));\n}\n```\n\n获得结果\n\n```\nvar g = gen();\n\nvar r1 = g.next();\n\nr1.value(function(data) {\n  var r2 = g.next(data);\n  r2.value(function(data) {\n      g.next(data);\n  });\n});\n```\n\n通过上面的示例代码我们观察到回调函数依然解决不了多个 yield 时代码会循环嵌套。还的借助递归\n\n```\nfunction run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value(next);\n    }\n\n    next();\n}\n\nrun(gen);\n```\n\n### run \n\n通过上面代码可以看出 Generator 函数的自动执行需要一种机制，当异步操作有了结果，才能自动交回执行权\n\n- 回调函数。 将异步操作进行包装，暴露出回调函数，在回调函数里面交回执行权\n- Promise对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权\n\n上面两种方法写了一个 run 的启动器函数，那么我们将两种封装在一起，返回了一个 Promise，获得 Generator 函数的返回值，并且捕获错误\n\n```\nfunction run(gen) {\n\n    return new Promise(function(resolve, reject) {\n        if (typeof gen == 'function') gen = gen();\n\n        // 如果 gen 不是一个迭代器\n        if (!gen || typeof gen.next !== 'function') return resolve(gen)\n\n        onFulfilled();\n\n        function onFulfilled(res) {\n            var ret;\n            try {\n                ret = gen.next(res);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function onRejected(err) {\n            var ret;\n            try {\n                ret = gen.throw(err);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function next(ret) {\n            if (ret.done) return resolve(ret.value);\n            var value = toPromise(ret.value);\n            if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n            return onRejected(new TypeError('You may only yield a function, promise ' +\n                'but the following object was passed: \"' + String(ret.value) + '\"'));\n        }\n    })\n}\n\nfunction isPromise(obj) {\n    return 'function' == typeof obj.then;\n}\n\nfunction toPromise(obj) {\n    if (isPromise(obj)) return obj;\n    if ('function' == typeof obj) return thunkToPromise(obj);\n    return obj;\n}\n\nfunction thunkToPromise(fn) {\n    return new Promise(function(resolve, reject) {\n        fn(function(err, res) {\n            if (err) return reject(err);\n            resolve(res);\n        });\n    });\n}\n\nmodule.exports = run;\n```\n\n### co\n \nco 是大神 TJ Holowaychuk 于 2013 年 6 月发布的一个小模块，用于 Generator 函数的自动执行。\n\n如果直接使用 co 模块，这两种不同的例子可以简写为\n\nyield 后是一个 Promise\n\n```\nvar fetch = require('node-fetch');\nvar co = require('co');\n\nfunction* gen() {\n    var r1 = yield fetch('https://api.github.com/users/github');\n    var json1 = yield r1.json();\n    var r2 = yield fetch('https://api.github.com/users/github/followers');\n    var json2 = yield r2.json();\n    var r3 = yield fetch('https://api.github.com/users/github/repos');\n    var json3 = yield r3.json();\n\n    console.log([json1.bio, json2[0].login, json3[0].full_name].join('\\n'));\n}\n\nco(gen);\n```\n\nyield 后是一个回调函数\n\n```\n\nvar co = require('co');\n\nfunction fetchData(url) {\n    return function(cb) {\n        setTimeout(function() {\n            cb(null, { status: 200, data: url })\n        }, 1000)\n    }\n}\n\nfunction* gen() {\n    var r1 = yield fetchData('https://api.github.com/users/github');\n    var r2 = yield fetchData('https://api.github.com/users/github/followers');\n\n    console.log([r1.data, r2.data].join('\\n'));\n}\n\nco(gen);\n```\n\n\n### async 有点\n\n async 函数，使得异步操作变得更加方便,它也是 Generator 函数的语法糖。\n\n当使用 Generator 函数的时候\n\n```\nvar fetch = require('node-fetch');\nvar co = require('co');\n\nfunction* gen() {\n    var r1 = yield fetch('https://api.github.com/users/github');\n    var json1 = yield r1.json();\n    console.log(json1.bio);\n}\n\nco(gen);\n```\n\n当使用 async 时候\n\n```\nvar fetch = require('node-fetch');\n\nvar fetchData = async function () {\n    var r1 = await fetch('https://api.github.com/users/github');\n    var json1 = await r1.json();\n    console.log(json1.bio);\n};\n\nfetchData();\n```\n\n通过上面观察到代码基本一样，所以 async 的原理就是将 Generator 函数和自动执行器，包装在一个函数里面\n\n```\nasync function fn(args) {\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return spawn(function* () {\n    // ...\n  });\n}\n```\n\nasync 函数返回一个 Promise 对象所以也可以理解为 async 函数是基于 Promise 和 Generator 的一层封装\n随意处理初步流程 async 会比使用 Promise 更优雅\n\n```\nfunction fetch() {\n  return (\n    fetchData().then(() => {\n      return \"done\"\n    });\n  )\n}\n\nasync function fetch() {\n  await fetchData()\n  return \"done\"\n};\n```\n\n```\nfunction fetch() {\n  return fetchData().then(data => {\n    if (data.moreData) {\n      return fetchAnotherData(data).then(moreData => {\n        return moreData\n      })\n    } else {\n      return data\n    }\n  });\n}\n\nasync function fetch() {\n  const data = await fetchData()\n  if (data.moreData) {\n    const moreData = await fetchAnotherData(data);\n    return moreData\n  } else {\n    return data\n  }\n}\n```\n\n```\nfunction fetch() {\n  return (\n    fetchData()\n    .then(value1 => {\n      return fetchMoreData(value1)\n    })\n    .then(value2 => {\n      return fetchMoreData2(value2)\n    })\n  )\n}\n\nasync function fetch() {\n  const value1 = await fetchData()\n  const value2 = await fetchMoreData(value1)\n  return fetchMoreData2(value2)\n};\n```\n\n### async 缺点\n\n- 用try...catch 处理上是原本的优雅代码变得不再优雅\n- 语法的简洁让原本可以并行执行的内容变成了顺序执行，从而影响了性能\n\nawait由于返回 promise 对象，所以结果可能是rejected，所以最好把await命令放在try...catch代码块中\n但是如果想捕获 JSON.parse 中的错误那么就需要再添加一层 try...catch\n\n```\nasync function fetch() {\n  try {\n    const data = JSON.parse(await fetchData())\n  } catch (err) {\n    console.log(err)\n  }\n};\n```\n\n原本没有依赖关系的两个函数，却只能等待 getList 返回才能执行 getAnotherList，导致请求时间多了一倍\n\n```\n(async () => {\n  const getList = await getList();\n  const getAnotherList = await getAnotherList();\n})();\n```\n\n将上面的函数改为如下函数可以解决上述问题\n```\n(async () => {\n  const listPromise = getList();\n  const anotherListPromise = getAnotherList();\n  await listPromise;\n  await anotherListPromise;\n})();\n```\n\n也可以使用 Promse.all\n\n```\n(async () => {\n  Promise.all([getList(), getAnotherList()]).then(...);\n})();\n```\n\n并发执行 async 函数\n\n\n```\nasync function handleList() {\n  const listPromise = await getList();\n  // ...\n  await submit(listData);\n}\n\nasync function handleAnotherList() {\n  const anotherListPromise = await getAnotherList()\n  // ...\n  await submit(anotherListData)\n}\n\n// 方法一\n(async () => {\n  const handleListPromise = handleList()\n  const handleAnotherListPromise = handleAnotherList()\n  await handleListPromise\n  await handleAnotherListPromise\n})()\n\n// 方法二\n(async () => {\n  Promise.all([handleList(), handleAnotherList()]).then()\n})()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/Generator-Async","published":1,"updated":"2019-08-26T16:46:27.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n73000hkuu60gciwyw0","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在前端中异步编程一直是前端开发的一个痛点，因为 JavaScript 语法的灵活性和特殊性导致前端开发的困难（因为 JavaScript 是单线程，如果没有异步的世界可以想象一下，将无法执行卡死操作）</p>\n<h3 id=\"什么是异步编程\"><a href=\"#什么是异步编程\" class=\"headerlink\" title=\"什么是异步编程\"></a>什么是异步编程</h3><p>所谓”异步”，一个任务不是连续完成的，先执行第一段，然后执行其他任务，等做好了准备，回过头执行第二段</p>\n<p>所谓”同步”，就是不间断的连续执行一个任务</p>\n<h3 id=\"异步编程示例\"><a href=\"#异步编程示例\" class=\"headerlink\" title=\"异步编程示例\"></a>异步编程示例</h3><p>我们熟悉的异步编程有很多种例如 <code>代码的执行任务队列</code>,<code>setTimeout</code>, <code>setInterval</code>, <code>callback</code>, <code>promise</code> 等</p>\n<p>回调函数</p>\n<pre><code>function Fun(name, callback) {\n  console.log(name)\n  callback &amp;&amp; callback()\n}\nfun(&#39;renbo&#39;,function () {})\n\n再例如数组的操作方法\n\n[1,2,3,4,5].map(function(v,i){\n  return i+&#39;:&#39;+v\n})\n</code></pre><p>Promise</p>\n<pre><code>var readFile = require(&#39;fs-readfile-promise&#39;);\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n</code></pre><h3 id=\"Generator概念\"><a href=\"#Generator概念\" class=\"headerlink\" title=\"Generator概念\"></a>Generator概念</h3><p>ES6 提供的一种异步编程解决方案，执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>\n<h3 id=\"Generator特征\"><a href=\"#Generator特征\" class=\"headerlink\" title=\"Generator特征\"></a>Generator特征</h3><ul>\n<li>function关键字与函数名之间有一个星号</li>\n<li>函数体内部使用yield表达式，定义不同的内部状态</li>\n<li>执行函数不会立即执行，只有调用了next方法才会执行</li>\n<li>如果函数内部不写 yield 表达式，则此函数就是单纯的暂缓执行函数</li>\n<li>每次调用遍历器对象的next方法，返回value和done两个属性的对象</li>\n<li>value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值</li>\n<li>done属性是一个布尔值，表示是否遍历结束</li>\n</ul>\n<pre><code>function* funGenerator() {\n  yield &#39;hello&#39;;\n  yield &#39;my name is renbo&#39;;\n  return &#39;ending&#39;;\n}\n\nvar fun = funGenerator();\n\nfun.next() // { value: &#39;hello&#39;, done: false }\nfun.next() // { value: &#39;my name is renbo&#39;, done: false }\nfun.next()  // { value: &#39;ending&#39;, done: true }\nfun.next()  // { value: undefined, done: true }</code></pre><h3 id=\"控制流管理\"><a href=\"#控制流管理\" class=\"headerlink\" title=\"控制流管理\"></a>控制流管理</h3><p>回调</p>\n<pre><code>step1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n</code></pre><p>promise</p>\n<pre><code>Promise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();</code></pre><p>Generator</p>\n<pre><code>function* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n</code></pre><h3 id=\"单个异步任务\"><a href=\"#单个异步任务\" class=\"headerlink\" title=\"单个异步任务\"></a>单个异步任务</h3><p>Generator + Promise</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nfunction* gen(){\n  var url = &#39;https://api.github.com/users/github&#39;;\n  var result = yield fetch(url);\n  console.log(result);\n}\n\n// 调用\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n    return data.json();\n}).then(function(data){\n    g.next(data);\n});</code></pre><p>上述的执行过程调用 gen 会返回遍历器，然后通过遍历器的 next 方法返回 fetch 的 promise 实例<code>{ value: Promise { &lt;pending&gt; }, done: false }</code>，通过调用 then 方法执行结果</p>\n<h3 id=\"多个异步任务\"><a href=\"#多个异步任务\" class=\"headerlink\" title=\"多个异步任务\"></a>多个异步任务</h3><pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nfunction* gen() {\n  var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n  var r2 = yield fetch(&#39;https://api.github.com/users/github/followers&#39;);\n  var r3 = yield fetch(&#39;https://api.github.com/users/github/repos&#39;);\n\n  console.log([r1.bio, r2[0].login, r3[0].full_name].join(&#39;\\n&#39;));\n}\n</code></pre><p>获得执行结果</p>\n<pre><code>var g = gen();\nvar result1 = g.next();\n\nresult1.value.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value;\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    g.next(data)\n});\n</code></pre><p>利用递归封装上述执行结果</p>\n<pre><code>function run(gen) {\n  var g = gen();\n\n  function next(data) {\n    var result = g.next(data);\n\n    if (result.done) return;\n\n    result.value.then(function(data) {\n        return data.json();\n    }).then(function(data) {\n        next(data);\n    });\n\n  }\n\n  next();\n}\n\nrun(gen);</code></pre><h3 id=\"启动器函数-（Generator-Promise）\"><a href=\"#启动器函数-（Generator-Promise）\" class=\"headerlink\" title=\"启动器函数 （Generator + Promise）\"></a>启动器函数 （Generator + Promise）</h3><p>由于 fetch 方法返回 promise 有 json 方法，所以上述例子成立，如果 yield 直接结合 promise 函数那么就会变成启动器函数。由于 Generator 不能像普通函数一样自动执行和自己暂缓执行的特性，所以增加自执行启动函数，这也是 co 模块的初衷（）</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nfunction* gen() {\n  var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n  var json1 = yield r1.json();\n  var r2 = yield fetch(&#39;https://api.github.com/users/github/followers&#39;);\n  var json2 = yield r2.json();\n  var r3 = yield fetch(&#39;https://api.github.com/users/github/repos&#39;);\n  var json3 = yield r3.json();\n\n  console.log([json1.bio, json2[0].login, json3[0].full_name].join(&#39;\\n&#39;));\n}\n\nfunction run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value.then(function(data) {\n            next(data);\n        });\n\n    }\n\n    next();\n}\n\nrun(gen);\n</code></pre><h3 id=\"启动器函数-（Generator-回调）\"><a href=\"#启动器函数-（Generator-回调）\" class=\"headerlink\" title=\"启动器函数 （Generator + 回调）\"></a>启动器函数 （Generator + 回调）</h3><p>回调函数</p>\n<pre><code>function fetchData(url) {\n    return function(cb){\n        setTimeout(function(){\n            cb({status: 200, data: url})\n        }, 1000)\n    }\n}</code></pre><p>Generator函数</p>\n<pre><code>function* gen() {\n    var r1 = yield fetchData(&#39;https://api.github.com/users/github&#39;);\n    var r2 = yield fetchData(&#39;https://api.github.com/users/github/followers&#39;);\n\n    console.log([r1.data, r2.data].join(&#39;\\n&#39;));\n}</code></pre><p>获得结果</p>\n<pre><code>var g = gen();\n\nvar r1 = g.next();\n\nr1.value(function(data) {\n  var r2 = g.next(data);\n  r2.value(function(data) {\n      g.next(data);\n  });\n});</code></pre><p>通过上面的示例代码我们观察到回调函数依然解决不了多个 yield 时代码会循环嵌套。还的借助递归</p>\n<pre><code>function run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value(next);\n    }\n\n    next();\n}\n\nrun(gen);</code></pre><h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p>通过上面代码可以看出 Generator 函数的自动执行需要一种机制，当异步操作有了结果，才能自动交回执行权</p>\n<ul>\n<li>回调函数。 将异步操作进行包装，暴露出回调函数，在回调函数里面交回执行权</li>\n<li>Promise对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权</li>\n</ul>\n<p>上面两种方法写了一个 run 的启动器函数，那么我们将两种封装在一起，返回了一个 Promise，获得 Generator 函数的返回值，并且捕获错误</p>\n<pre><code>function run(gen) {\n\n    return new Promise(function(resolve, reject) {\n        if (typeof gen == &#39;function&#39;) gen = gen();\n\n        // 如果 gen 不是一个迭代器\n        if (!gen || typeof gen.next !== &#39;function&#39;) return resolve(gen)\n\n        onFulfilled();\n\n        function onFulfilled(res) {\n            var ret;\n            try {\n                ret = gen.next(res);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function onRejected(err) {\n            var ret;\n            try {\n                ret = gen.throw(err);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function next(ret) {\n            if (ret.done) return resolve(ret.value);\n            var value = toPromise(ret.value);\n            if (value &amp;&amp; isPromise(value)) return value.then(onFulfilled, onRejected);\n            return onRejected(new TypeError(&#39;You may only yield a function, promise &#39; +\n                &#39;but the following object was passed: &quot;&#39; + String(ret.value) + &#39;&quot;&#39;));\n        }\n    })\n}\n\nfunction isPromise(obj) {\n    return &#39;function&#39; == typeof obj.then;\n}\n\nfunction toPromise(obj) {\n    if (isPromise(obj)) return obj;\n    if (&#39;function&#39; == typeof obj) return thunkToPromise(obj);\n    return obj;\n}\n\nfunction thunkToPromise(fn) {\n    return new Promise(function(resolve, reject) {\n        fn(function(err, res) {\n            if (err) return reject(err);\n            resolve(res);\n        });\n    });\n}\n\nmodule.exports = run;</code></pre><h3 id=\"co\"><a href=\"#co\" class=\"headerlink\" title=\"co\"></a>co</h3><p>co 是大神 TJ Holowaychuk 于 2013 年 6 月发布的一个小模块，用于 Generator 函数的自动执行。</p>\n<p>如果直接使用 co 模块，这两种不同的例子可以简写为</p>\n<p>yield 后是一个 Promise</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\nvar co = require(&#39;co&#39;);\n\nfunction* gen() {\n    var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n    var json1 = yield r1.json();\n    var r2 = yield fetch(&#39;https://api.github.com/users/github/followers&#39;);\n    var json2 = yield r2.json();\n    var r3 = yield fetch(&#39;https://api.github.com/users/github/repos&#39;);\n    var json3 = yield r3.json();\n\n    console.log([json1.bio, json2[0].login, json3[0].full_name].join(&#39;\\n&#39;));\n}\n\nco(gen);</code></pre><p>yield 后是一个回调函数</p>\n<pre><code>\nvar co = require(&#39;co&#39;);\n\nfunction fetchData(url) {\n    return function(cb) {\n        setTimeout(function() {\n            cb(null, { status: 200, data: url })\n        }, 1000)\n    }\n}\n\nfunction* gen() {\n    var r1 = yield fetchData(&#39;https://api.github.com/users/github&#39;);\n    var r2 = yield fetchData(&#39;https://api.github.com/users/github/followers&#39;);\n\n    console.log([r1.data, r2.data].join(&#39;\\n&#39;));\n}\n\nco(gen);</code></pre><h3 id=\"async-有点\"><a href=\"#async-有点\" class=\"headerlink\" title=\"async 有点\"></a>async 有点</h3><p> async 函数，使得异步操作变得更加方便,它也是 Generator 函数的语法糖。</p>\n<p>当使用 Generator 函数的时候</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\nvar co = require(&#39;co&#39;);\n\nfunction* gen() {\n    var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n    var json1 = yield r1.json();\n    console.log(json1.bio);\n}\n\nco(gen);</code></pre><p>当使用 async 时候</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nvar fetchData = async function () {\n    var r1 = await fetch(&#39;https://api.github.com/users/github&#39;);\n    var json1 = await r1.json();\n    console.log(json1.bio);\n};\n\nfetchData();</code></pre><p>通过上面观察到代码基本一样，所以 async 的原理就是将 Generator 函数和自动执行器，包装在一个函数里面</p>\n<pre><code>async function fn(args) {\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return spawn(function* () {\n    // ...\n  });\n}</code></pre><p>async 函数返回一个 Promise 对象所以也可以理解为 async 函数是基于 Promise 和 Generator 的一层封装<br>随意处理初步流程 async 会比使用 Promise 更优雅</p>\n<pre><code>function fetch() {\n  return (\n    fetchData().then(() =&gt; {\n      return &quot;done&quot;\n    });\n  )\n}\n\nasync function fetch() {\n  await fetchData()\n  return &quot;done&quot;\n};</code></pre><pre><code>function fetch() {\n  return fetchData().then(data =&gt; {\n    if (data.moreData) {\n      return fetchAnotherData(data).then(moreData =&gt; {\n        return moreData\n      })\n    } else {\n      return data\n    }\n  });\n}\n\nasync function fetch() {\n  const data = await fetchData()\n  if (data.moreData) {\n    const moreData = await fetchAnotherData(data);\n    return moreData\n  } else {\n    return data\n  }\n}</code></pre><pre><code>function fetch() {\n  return (\n    fetchData()\n    .then(value1 =&gt; {\n      return fetchMoreData(value1)\n    })\n    .then(value2 =&gt; {\n      return fetchMoreData2(value2)\n    })\n  )\n}\n\nasync function fetch() {\n  const value1 = await fetchData()\n  const value2 = await fetchMoreData(value1)\n  return fetchMoreData2(value2)\n};</code></pre><h3 id=\"async-缺点\"><a href=\"#async-缺点\" class=\"headerlink\" title=\"async 缺点\"></a>async 缺点</h3><ul>\n<li>用try…catch 处理上是原本的优雅代码变得不再优雅</li>\n<li>语法的简洁让原本可以并行执行的内容变成了顺序执行，从而影响了性能</li>\n</ul>\n<p>await由于返回 promise 对象，所以结果可能是rejected，所以最好把await命令放在try…catch代码块中<br>但是如果想捕获 JSON.parse 中的错误那么就需要再添加一层 try…catch</p>\n<pre><code>async function fetch() {\n  try {\n    const data = JSON.parse(await fetchData())\n  } catch (err) {\n    console.log(err)\n  }\n};</code></pre><p>原本没有依赖关系的两个函数，却只能等待 getList 返回才能执行 getAnotherList，导致请求时间多了一倍</p>\n<pre><code>(async () =&gt; {\n  const getList = await getList();\n  const getAnotherList = await getAnotherList();\n})();</code></pre><p>将上面的函数改为如下函数可以解决上述问题</p>\n<pre><code>(async () =&gt; {\n  const listPromise = getList();\n  const anotherListPromise = getAnotherList();\n  await listPromise;\n  await anotherListPromise;\n})();</code></pre><p>也可以使用 Promse.all</p>\n<pre><code>(async () =&gt; {\n  Promise.all([getList(), getAnotherList()]).then(...);\n})();</code></pre><p>并发执行 async 函数</p>\n<pre><code>async function handleList() {\n  const listPromise = await getList();\n  // ...\n  await submit(listData);\n}\n\nasync function handleAnotherList() {\n  const anotherListPromise = await getAnotherList()\n  // ...\n  await submit(anotherListData)\n}\n\n// 方法一\n(async () =&gt; {\n  const handleListPromise = handleList()\n  const handleAnotherListPromise = handleAnotherList()\n  await handleListPromise\n  await handleAnotherListPromise\n})()\n\n// 方法二\n(async () =&gt; {\n  Promise.all([handleList(), handleAnotherList()]).then()\n})()</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在前端中异步编程一直是前端开发的一个痛点，因为 JavaScript 语法的灵活性和特殊性导致前端开发的困难（因为 JavaScript 是单线程，如果没有异步的世界可以想象一下，将无法执行卡死操作）</p>\n<h3 id=\"什么是异步编程\"><a href=\"#什么是异步编程\" class=\"headerlink\" title=\"什么是异步编程\"></a>什么是异步编程</h3><p>所谓”异步”，一个任务不是连续完成的，先执行第一段，然后执行其他任务，等做好了准备，回过头执行第二段</p>\n<p>所谓”同步”，就是不间断的连续执行一个任务</p>\n<h3 id=\"异步编程示例\"><a href=\"#异步编程示例\" class=\"headerlink\" title=\"异步编程示例\"></a>异步编程示例</h3><p>我们熟悉的异步编程有很多种例如 <code>代码的执行任务队列</code>,<code>setTimeout</code>, <code>setInterval</code>, <code>callback</code>, <code>promise</code> 等</p>\n<p>回调函数</p>\n<pre><code>function Fun(name, callback) {\n  console.log(name)\n  callback &amp;&amp; callback()\n}\nfun(&#39;renbo&#39;,function () {})\n\n再例如数组的操作方法\n\n[1,2,3,4,5].map(function(v,i){\n  return i+&#39;:&#39;+v\n})\n</code></pre><p>Promise</p>\n<pre><code>var readFile = require(&#39;fs-readfile-promise&#39;);\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n</code></pre><h3 id=\"Generator概念\"><a href=\"#Generator概念\" class=\"headerlink\" title=\"Generator概念\"></a>Generator概念</h3><p>ES6 提供的一种异步编程解决方案，执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>\n<h3 id=\"Generator特征\"><a href=\"#Generator特征\" class=\"headerlink\" title=\"Generator特征\"></a>Generator特征</h3><ul>\n<li>function关键字与函数名之间有一个星号</li>\n<li>函数体内部使用yield表达式，定义不同的内部状态</li>\n<li>执行函数不会立即执行，只有调用了next方法才会执行</li>\n<li>如果函数内部不写 yield 表达式，则此函数就是单纯的暂缓执行函数</li>\n<li>每次调用遍历器对象的next方法，返回value和done两个属性的对象</li>\n<li>value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值</li>\n<li>done属性是一个布尔值，表示是否遍历结束</li>\n</ul>\n<pre><code>function* funGenerator() {\n  yield &#39;hello&#39;;\n  yield &#39;my name is renbo&#39;;\n  return &#39;ending&#39;;\n}\n\nvar fun = funGenerator();\n\nfun.next() // { value: &#39;hello&#39;, done: false }\nfun.next() // { value: &#39;my name is renbo&#39;, done: false }\nfun.next()  // { value: &#39;ending&#39;, done: true }\nfun.next()  // { value: undefined, done: true }</code></pre><h3 id=\"控制流管理\"><a href=\"#控制流管理\" class=\"headerlink\" title=\"控制流管理\"></a>控制流管理</h3><p>回调</p>\n<pre><code>step1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n</code></pre><p>promise</p>\n<pre><code>Promise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();</code></pre><p>Generator</p>\n<pre><code>function* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n</code></pre><h3 id=\"单个异步任务\"><a href=\"#单个异步任务\" class=\"headerlink\" title=\"单个异步任务\"></a>单个异步任务</h3><p>Generator + Promise</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nfunction* gen(){\n  var url = &#39;https://api.github.com/users/github&#39;;\n  var result = yield fetch(url);\n  console.log(result);\n}\n\n// 调用\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n    return data.json();\n}).then(function(data){\n    g.next(data);\n});</code></pre><p>上述的执行过程调用 gen 会返回遍历器，然后通过遍历器的 next 方法返回 fetch 的 promise 实例<code>{ value: Promise { &lt;pending&gt; }, done: false }</code>，通过调用 then 方法执行结果</p>\n<h3 id=\"多个异步任务\"><a href=\"#多个异步任务\" class=\"headerlink\" title=\"多个异步任务\"></a>多个异步任务</h3><pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nfunction* gen() {\n  var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n  var r2 = yield fetch(&#39;https://api.github.com/users/github/followers&#39;);\n  var r3 = yield fetch(&#39;https://api.github.com/users/github/repos&#39;);\n\n  console.log([r1.bio, r2[0].login, r3[0].full_name].join(&#39;\\n&#39;));\n}\n</code></pre><p>获得执行结果</p>\n<pre><code>var g = gen();\nvar result1 = g.next();\n\nresult1.value.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value;\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    return g.next(data).value\n})\n.then(function(data){\n    return data.json();\n})\n.then(function(data){\n    g.next(data)\n});\n</code></pre><p>利用递归封装上述执行结果</p>\n<pre><code>function run(gen) {\n  var g = gen();\n\n  function next(data) {\n    var result = g.next(data);\n\n    if (result.done) return;\n\n    result.value.then(function(data) {\n        return data.json();\n    }).then(function(data) {\n        next(data);\n    });\n\n  }\n\n  next();\n}\n\nrun(gen);</code></pre><h3 id=\"启动器函数-（Generator-Promise）\"><a href=\"#启动器函数-（Generator-Promise）\" class=\"headerlink\" title=\"启动器函数 （Generator + Promise）\"></a>启动器函数 （Generator + Promise）</h3><p>由于 fetch 方法返回 promise 有 json 方法，所以上述例子成立，如果 yield 直接结合 promise 函数那么就会变成启动器函数。由于 Generator 不能像普通函数一样自动执行和自己暂缓执行的特性，所以增加自执行启动函数，这也是 co 模块的初衷（）</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nfunction* gen() {\n  var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n  var json1 = yield r1.json();\n  var r2 = yield fetch(&#39;https://api.github.com/users/github/followers&#39;);\n  var json2 = yield r2.json();\n  var r3 = yield fetch(&#39;https://api.github.com/users/github/repos&#39;);\n  var json3 = yield r3.json();\n\n  console.log([json1.bio, json2[0].login, json3[0].full_name].join(&#39;\\n&#39;));\n}\n\nfunction run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value.then(function(data) {\n            next(data);\n        });\n\n    }\n\n    next();\n}\n\nrun(gen);\n</code></pre><h3 id=\"启动器函数-（Generator-回调）\"><a href=\"#启动器函数-（Generator-回调）\" class=\"headerlink\" title=\"启动器函数 （Generator + 回调）\"></a>启动器函数 （Generator + 回调）</h3><p>回调函数</p>\n<pre><code>function fetchData(url) {\n    return function(cb){\n        setTimeout(function(){\n            cb({status: 200, data: url})\n        }, 1000)\n    }\n}</code></pre><p>Generator函数</p>\n<pre><code>function* gen() {\n    var r1 = yield fetchData(&#39;https://api.github.com/users/github&#39;);\n    var r2 = yield fetchData(&#39;https://api.github.com/users/github/followers&#39;);\n\n    console.log([r1.data, r2.data].join(&#39;\\n&#39;));\n}</code></pre><p>获得结果</p>\n<pre><code>var g = gen();\n\nvar r1 = g.next();\n\nr1.value(function(data) {\n  var r2 = g.next(data);\n  r2.value(function(data) {\n      g.next(data);\n  });\n});</code></pre><p>通过上面的示例代码我们观察到回调函数依然解决不了多个 yield 时代码会循环嵌套。还的借助递归</p>\n<pre><code>function run(gen) {\n    var g = gen();\n\n    function next(data) {\n        var result = g.next(data);\n\n        if (result.done) return;\n\n        result.value(next);\n    }\n\n    next();\n}\n\nrun(gen);</code></pre><h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p>通过上面代码可以看出 Generator 函数的自动执行需要一种机制，当异步操作有了结果，才能自动交回执行权</p>\n<ul>\n<li>回调函数。 将异步操作进行包装，暴露出回调函数，在回调函数里面交回执行权</li>\n<li>Promise对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权</li>\n</ul>\n<p>上面两种方法写了一个 run 的启动器函数，那么我们将两种封装在一起，返回了一个 Promise，获得 Generator 函数的返回值，并且捕获错误</p>\n<pre><code>function run(gen) {\n\n    return new Promise(function(resolve, reject) {\n        if (typeof gen == &#39;function&#39;) gen = gen();\n\n        // 如果 gen 不是一个迭代器\n        if (!gen || typeof gen.next !== &#39;function&#39;) return resolve(gen)\n\n        onFulfilled();\n\n        function onFulfilled(res) {\n            var ret;\n            try {\n                ret = gen.next(res);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function onRejected(err) {\n            var ret;\n            try {\n                ret = gen.throw(err);\n            } catch (e) {\n                return reject(e);\n            }\n            next(ret);\n        }\n\n        function next(ret) {\n            if (ret.done) return resolve(ret.value);\n            var value = toPromise(ret.value);\n            if (value &amp;&amp; isPromise(value)) return value.then(onFulfilled, onRejected);\n            return onRejected(new TypeError(&#39;You may only yield a function, promise &#39; +\n                &#39;but the following object was passed: &quot;&#39; + String(ret.value) + &#39;&quot;&#39;));\n        }\n    })\n}\n\nfunction isPromise(obj) {\n    return &#39;function&#39; == typeof obj.then;\n}\n\nfunction toPromise(obj) {\n    if (isPromise(obj)) return obj;\n    if (&#39;function&#39; == typeof obj) return thunkToPromise(obj);\n    return obj;\n}\n\nfunction thunkToPromise(fn) {\n    return new Promise(function(resolve, reject) {\n        fn(function(err, res) {\n            if (err) return reject(err);\n            resolve(res);\n        });\n    });\n}\n\nmodule.exports = run;</code></pre><h3 id=\"co\"><a href=\"#co\" class=\"headerlink\" title=\"co\"></a>co</h3><p>co 是大神 TJ Holowaychuk 于 2013 年 6 月发布的一个小模块，用于 Generator 函数的自动执行。</p>\n<p>如果直接使用 co 模块，这两种不同的例子可以简写为</p>\n<p>yield 后是一个 Promise</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\nvar co = require(&#39;co&#39;);\n\nfunction* gen() {\n    var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n    var json1 = yield r1.json();\n    var r2 = yield fetch(&#39;https://api.github.com/users/github/followers&#39;);\n    var json2 = yield r2.json();\n    var r3 = yield fetch(&#39;https://api.github.com/users/github/repos&#39;);\n    var json3 = yield r3.json();\n\n    console.log([json1.bio, json2[0].login, json3[0].full_name].join(&#39;\\n&#39;));\n}\n\nco(gen);</code></pre><p>yield 后是一个回调函数</p>\n<pre><code>\nvar co = require(&#39;co&#39;);\n\nfunction fetchData(url) {\n    return function(cb) {\n        setTimeout(function() {\n            cb(null, { status: 200, data: url })\n        }, 1000)\n    }\n}\n\nfunction* gen() {\n    var r1 = yield fetchData(&#39;https://api.github.com/users/github&#39;);\n    var r2 = yield fetchData(&#39;https://api.github.com/users/github/followers&#39;);\n\n    console.log([r1.data, r2.data].join(&#39;\\n&#39;));\n}\n\nco(gen);</code></pre><h3 id=\"async-有点\"><a href=\"#async-有点\" class=\"headerlink\" title=\"async 有点\"></a>async 有点</h3><p> async 函数，使得异步操作变得更加方便,它也是 Generator 函数的语法糖。</p>\n<p>当使用 Generator 函数的时候</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\nvar co = require(&#39;co&#39;);\n\nfunction* gen() {\n    var r1 = yield fetch(&#39;https://api.github.com/users/github&#39;);\n    var json1 = yield r1.json();\n    console.log(json1.bio);\n}\n\nco(gen);</code></pre><p>当使用 async 时候</p>\n<pre><code>var fetch = require(&#39;node-fetch&#39;);\n\nvar fetchData = async function () {\n    var r1 = await fetch(&#39;https://api.github.com/users/github&#39;);\n    var json1 = await r1.json();\n    console.log(json1.bio);\n};\n\nfetchData();</code></pre><p>通过上面观察到代码基本一样，所以 async 的原理就是将 Generator 函数和自动执行器，包装在一个函数里面</p>\n<pre><code>async function fn(args) {\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return spawn(function* () {\n    // ...\n  });\n}</code></pre><p>async 函数返回一个 Promise 对象所以也可以理解为 async 函数是基于 Promise 和 Generator 的一层封装<br>随意处理初步流程 async 会比使用 Promise 更优雅</p>\n<pre><code>function fetch() {\n  return (\n    fetchData().then(() =&gt; {\n      return &quot;done&quot;\n    });\n  )\n}\n\nasync function fetch() {\n  await fetchData()\n  return &quot;done&quot;\n};</code></pre><pre><code>function fetch() {\n  return fetchData().then(data =&gt; {\n    if (data.moreData) {\n      return fetchAnotherData(data).then(moreData =&gt; {\n        return moreData\n      })\n    } else {\n      return data\n    }\n  });\n}\n\nasync function fetch() {\n  const data = await fetchData()\n  if (data.moreData) {\n    const moreData = await fetchAnotherData(data);\n    return moreData\n  } else {\n    return data\n  }\n}</code></pre><pre><code>function fetch() {\n  return (\n    fetchData()\n    .then(value1 =&gt; {\n      return fetchMoreData(value1)\n    })\n    .then(value2 =&gt; {\n      return fetchMoreData2(value2)\n    })\n  )\n}\n\nasync function fetch() {\n  const value1 = await fetchData()\n  const value2 = await fetchMoreData(value1)\n  return fetchMoreData2(value2)\n};</code></pre><h3 id=\"async-缺点\"><a href=\"#async-缺点\" class=\"headerlink\" title=\"async 缺点\"></a>async 缺点</h3><ul>\n<li>用try…catch 处理上是原本的优雅代码变得不再优雅</li>\n<li>语法的简洁让原本可以并行执行的内容变成了顺序执行，从而影响了性能</li>\n</ul>\n<p>await由于返回 promise 对象，所以结果可能是rejected，所以最好把await命令放在try…catch代码块中<br>但是如果想捕获 JSON.parse 中的错误那么就需要再添加一层 try…catch</p>\n<pre><code>async function fetch() {\n  try {\n    const data = JSON.parse(await fetchData())\n  } catch (err) {\n    console.log(err)\n  }\n};</code></pre><p>原本没有依赖关系的两个函数，却只能等待 getList 返回才能执行 getAnotherList，导致请求时间多了一倍</p>\n<pre><code>(async () =&gt; {\n  const getList = await getList();\n  const getAnotherList = await getAnotherList();\n})();</code></pre><p>将上面的函数改为如下函数可以解决上述问题</p>\n<pre><code>(async () =&gt; {\n  const listPromise = getList();\n  const anotherListPromise = getAnotherList();\n  await listPromise;\n  await anotherListPromise;\n})();</code></pre><p>也可以使用 Promse.all</p>\n<pre><code>(async () =&gt; {\n  Promise.all([getList(), getAnotherList()]).then(...);\n})();</code></pre><p>并发执行 async 函数</p>\n<pre><code>async function handleList() {\n  const listPromise = await getList();\n  // ...\n  await submit(listData);\n}\n\nasync function handleAnotherList() {\n  const anotherListPromise = await getAnotherList()\n  // ...\n  await submit(anotherListData)\n}\n\n// 方法一\n(async () =&gt; {\n  const handleListPromise = handleList()\n  const handleAnotherListPromise = handleAnotherList()\n  await handleListPromise\n  await handleAnotherListPromise\n})()\n\n// 方法二\n(async () =&gt; {\n  Promise.all([handleList(), handleAnotherList()]).then()\n})()</code></pre>"},{"title":"操作数组API方法","date":"2019-03-20T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"介绍Array对象中的作用，属性、常规方法等","_content":"\n### Array对象的作用\n\nArray 对象用于在单个的变量中存储多个值\n\n### 创建Array对象的方法\n\n`var arrayObj = new Array()；`<br/>\n`var arrayObj = []; //本人习惯用这种`<br/>\n返回值：返回新创建并被初始化了的数组。如果调用arrayObj时没有参数或者没有指定 值，那么返回的值为空，数组的length为0。<br/>\n\n### Array对象的三个属性 \n\n`constructor` //返回数组函数的引用。<br/>\n`length` //返回数组元素的长度（最常用）<br/>\n`prototype` //可以向数组对象添加属性和方法。<br/>\n\n### concat()\n\n该方法用于连接或者合并数组，并且不会改变原数组，返回一个新数组的副本\n\n```\nvar arrObj = [1,2,3,4];\nvar arrObj1 = [5,6,7,8];\narrObj.concat(arrObj1); //[1,2,3,4,5,6,7,8]\n```\n\n### join()\n\n该方法用于把数组中的所有元素用指定的分隔符分割，返回一个字符串\n\n```\nnewArray.join() //\"1,2,3,4,5,6,7,8\"\n```\n\n### pop()\n\n该方法用于删除并返回数组的最后一个元素,并将原数组的length -1\n\n```\narrObj.pop()//4\nconsole.log(arrObj); //[1,2,3]\n```\n\n### push()\n\n该方法可向数组的末尾添加一个或多个元素，并返回新的长度\n\n```\narrObj.push(4);\nconsole.log(arrObj); //[1,2,3,4]\n```\n\n### shift()\n\n该方法用于删除并返回数组的第一个元素,并将原数组的length -1\n\n```\narrObj.shift() //1\nconsole.log(arrObj) //[2,3,4]\n```\n\n### unshift()\n\n该方法可向数组的开头添加一个或多个元素，并返回新的长度\n\n``` \narrObj.unshift(1);\nconsole.log(arrObj); //[1,2,3,4]\n```\n\n### slice()\n\n该方法可从已有的数组中返回选定的元素,形成一个新的数组\n\n```\narrObj.slice(1,2); //[2]\nconsole.log(arrObj) //[1,2,3,4]\n```\n\n### splice()\n\n该法向数组中添加/删除元素，然后返回被删除的元素。该方法会改变原数组\n\n```\narrObj.splice(1,2,5); //[2,3]\nconsole.log(arrObj); //[1,5,4]\n```\n\n### reverse()\n\n该方法用于颠倒数组中元素的顺序，并且改变原来的数组，而不会创建新的数组\n\n```\narrObj.reverse(); //[4,5,1]\n```\n\n### sort()\n\n该方法用于对数组的元素进行排序\n\n注意：该方法是按照字符编码顺序进行排序，如果想要实现业务逻辑排序需要自定义比较函数\n\n```\nvar arrObjSort = [1,5,4,2,3];\nvar arrObjSort1 = [1,2,10,3,20,4,30,50,5];\narrObjSort.sort(); //[1,2,3,4,5]\narrObjSort1.sort(); //[1, 10, 2, 20, 3, 30, 4, 5, 50]\n```\n\n自定义排序\n\n```\nfunction __sortNumber(a,b){\n   return a-b;\n}\narrObjSort1.sort(__sortNumber); //[1, 2, 3, 4, 5, 10, 20, 30, 50]\n```\n\n### toString()\n\n该方法可把数组转换为字符串，并返回结果，与不带参数的join相同\n\n```\narrObjSort1.toString(); //\"1,2,3,4,5,10,20,30,50\"\n```\n\ntoLocaleString-该方法可数组转换为本地字符串。和toString基本相同，但toLocaleString调用的是地区特定的分隔符把生成的字符串连接起来。<br/>\n\n如果你开发的脚本在世界范围都有人使用,那么将对象转换成字符串时请使用toString()方法<br/>\n\n因为LocaleString()会根据你机器的本地环境来返回字符串,它和toString()返回的值在不同的本地环境下使用的符号会有微妙的变化<br/>\n\n如果是为了返回时间类型的数据,推荐使用LocaleString().若是在后台处理字符串,请务必使用toString()<br/>\n\n```\nvar date = new Date();\nvar myArr = [date,'go home'];\nmyArr.toLocaleString(); //\"2017/11/7 下午4:35:43,go home\"\nmyArr.toString(); //\"Tue Nov 07 2017 16:36:25 GMT+0800 (CST),go home\"\n```\n\n### indexOf()\n\n该方法可确定某个元素在数组实例中第一次出现的索引位置。如果没找到返回-1,可用索引值进行逻辑判断\n\n```\nvar arr = [1,2,3,4,5];\narr.indexOf(2);  //1\narr.indexOf(2,1); //1\narr.indexOf(2,2); //-1\narr.indexOf(6);  //-1\n\n```\n\n查找元素出现的位置索引<br/>\n\n```\nvar indices = [];\nvar arr = [1,2,3,2,5,2,7];\nvar index = arr.indexOf(2);\nwhile(index != -1){\n  indices.push(index);\n  index = arr.indexOf(2,index + 1);\n}\nconsole.log(indices)\n```\n\n判断一个元素是否在数组里，不在则向数组中添加元素<br/>\n\n```\nvar arr = [1,2,3,4,5,6,7];\nfunction __upDataCollection(arrCollection,indicesEle){\n  var matchIndex =  arrCollection.indexOf(indicesEle);\n  if(matchIndex === -1){\n     arr.push(indicesEle);        \n  }else{\n    console.log('元素中存在相同的值');\n  }\n}\n__upDataCollection(arr,8); //[1, 2, 3, 4, 5, 6, 7, 8]\n__upDataCollection(arr,2); //'元素中存在相同的值'\n```\n\n### forEach()\n\n该方法按升序为数组中含有效值的每一项执行一次callback 函数（遍历数组）\n\n`forEach()` 为每个数组元素执行callback函数；不像`map()` 或者`reduce()` ，它总是返回 `undefined`值，也没有办法终止或跳出正在运行循环的`forEach`。如果常规的遍历想要检测条件返回bool , 并且可以终止循环，可使用`Array.some,Ayyay.every`.或者es6新方法`Array.find()`等等\n\n```\nvar arrayObj = [1,2,3,,5];\narrayObj.forEach(function(element, index, array){\n   console.log(\"value[\" + index + \"] = \" + element) \n},this);\n//value[0] = 1\n//value[1] = 2\n//value[2] = 3\n//value[4] = 5\n//可以观察到以上遍历并没有出现undefind\n```\n\n### map()\n\n该方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组，并且不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）\n\n```\n//常用的有些业务场景需要重新重组数组对象\nvar arrayObj = [\n    {name: 'zhangsan', age: 20}, \n    {name: 'lisi', age: 30}, \n    {name: 'wangwu', age: 26}\n  ];\nvar newArrayObj = arrayObj.map(function(obj, index, array) { \n   var newObj = {};\n   newObj[obj.name] = obj.age;\n   return newObj;\n});\nconsole.log(newArrayObj);\n//[{'zhangsan':20},{'lisi':30},{'wangwu':26}]\n```\n\n### filter()\n\n该方法创建一个新数组,通过次函数方法会返回相应的过滤后的数据,并且不会改变原数组\n\n```\nvar arrayObj = [3,1,3,2,4,5,6];\nvar newArrayObj = arrayObj.filter(function(value,index,array){\n   return value > 3\n});\nconsole.log(newArrayObj);//[4, 5, 6]\n```\n\n### reduce()\n\n为数组中的每一个元素依次执行callback函数，不包括数组中被删除或从未被赋值的元素,返回函数累计处理的结果\n\n`callback`执行数组中每个值的函数，包含四个参数：<br/>\n\n`accumulator`累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。<br/>\n\n`currentValue`数组中正在处理的元素。<br/>\n\n`currentIndex`数组中正在处理的当前元素的索引。<br/>\n\n如果提供了initialValue，则索引号为0，否则为索引为1。array调用reduce的数组initialValue[可选] 用作第一个调用 callback的第一个参数的值。<br/>\n\n如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<br/>\n\n```\nvar totalValue = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0); \n// totalValue  6\n\n//将二维数组转化为一维数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n    function(a, b) {\n      return a.concat(b);\n    },[]);\n  // flattened is [0, 1, 2, 3, 4, 5] \n```\n\n### some()\n\n该方法用于检测数组中的某些元素是否通过callback函数实现的方法。返回bool值\n\n```\nvar arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element > 2;\n});\nconsole.log(flag);//true\n```\n\n### every()\n\n该方法用于检测数组中的所有元素是否通过callback函数实现的方法。返回bool值\n\n```\nvar arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element > 2;\n});\nconsole.log(flag);//false\n```\n\n### 扩展运算符(...)\n\n该运算符将一个数组转为用逗号分隔的参数序列\n\n扩展运算符即可以复制，合并数组，操作分割字符串与结构赋值结合还可以当函数的形参<br/>\n```\nconsole.log(...[1,2,3,4,5]);//1 2 3 4 5\n```\n\n合并数组：<br/>\n\n```\nlet arrayObj = [1,2,3,4,5,6];\nlet arrayObj1 = [7,8,9];\nlet newArray = [...arrayObj,...arrayObj1];\nconsole.log(newArray) //[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n复制数组：<br/>\n```\nlet arrayObj = [1,2,3,4,5];\nlet arrayObjNew = [...arrayObj];\nconsole.log(arrayObjNew) //[1,2,3,4,5];\n```\n\n与结构赋值结合：<br/>\n```\nconst [variable, ...array] = [1, 2, 3, 4, 5];\nconsole.log(variable); //1\nconsole.log(array); //[2,3,4,5]\n```\n\n函数形参：\n```\n//例子1:\nlet _arrayObj = [1];\nlet _arrayObj1 = [1,2,3,4,5];\nvar __operationArr = (array,items)=>{ \n   array.push(...items);\n   console.log(array); //[1,1,2,3,4,5]\n}\n__operationArr(_arrayObj,_arrayObj1);\n//例子2:\nvar __add = (a,b,c,d,e) =>{\n  return a + b + c +d + e;\n}\n__add(..._arrayObj1); //15\n```\n\n求出数组最大元素：<br/>\n```\nlet arrayObj = [2,3,4,5,3,2,8];\nMath.max(...arrayObj) //8\n```\n\n### form()\n\n该法从一个类似数组或可迭代对象中创建一个新的数组实例，相当于相当于[].slice.call()\n\n```\n//例子1:\nlet arrayItems = {\n    '0': 'zhangsan',\n    '1': 'lisi',\n    '2': 'wangwu',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayItems); // ['zhangsan', 'lisi', 'wangwu']\n// ES6的写法\nlet arr2 = Array.from(arrayItems); // ['zhangsan', 'lisi', 'wangwu']\n\n例子2:\n// 常见的DOM NodeList对象\nlet ps = document.querySelectorAll('p');\nlet pElementArr = Array.from(ps);\npElementArr.forEach((p)=> {\n  console.log(p);\n});\n```\n将字符串分割字后变为数组<br/>\n```\nArray.from('foo');//['f','o','o']\n```\n\n\n### of()\n\n该方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型\n\nArray.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。<br/>\n\n```\nArray.of(7);       // [7] \nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]\n```\n\n\n### copyWithin()\n\n该方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小\n\narr.copyWithin(target)<br/>\n\narr.copyWithin(target, start)<br/>\n\narr.copyWithin(target, start, end)<br/>\n\narr.copyWithin(目标索引, [源开始索引], [结束源索引])<br/>\n```\n[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}\n```\n\n### find()\n\n该方法返回数组中满足提供的callback的第一个元素的值。否则返回 undefined\n\n如果你需要找到一个元素的位置或者一个元素是否存在于数组中，使用`Array.prototype.indexOf()` 或 `Array.prototype.includes()`。\n\n如果你需要找到元素的索引，而不是其值`Array.prototype.findIndex() `;\n```\nlet arrayObj = [2,4,5,60,39];\nlet backValue = arrayObj.find((element)=>{return element > 20});\nconsole.log(backValue); //60\n```\n\n\n### fill()\n\n该方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素\n\n语法：<br/>\narr.fill(value) <br/>\narr.fill(value, start) <br/>\narr.fill(value, start, end)<br/>\n```\n[1, 2, 3].fill(4)            // [4, 4, 4]\n[1, 2, 3].fill(4, 1)         // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2)      // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1)      // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2)    // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN)  // [1, 2, 3]\nArray(3).fill(4);            // [4, 4, 4]\n[].fill.call({length: 3}, 4) // {0: 4, 1: 4, 2: 4, length: 3}\n```\n\n### entries()\n\n该方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对\n\n```\nvar arr = [\"a\", \"b\", \"c\"];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, \"a\"]\nconsole.log(iterator.next().value); \n// [1, \"b\"]\nconsole.log(iterator.next().value); \n// [2, \"c\"]\n```\n\n### includes()\n\n该方法用来判断一个数组是否包含一个指定的值，如果是，酌情返回 true或 false\n\n语法：<br/>\narr.includes(searchElement)<br/>\narr.includes(searchElement, fromIndex)<br/>\n```\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n\n","source":"_posts/javascript/api.md","raw":"---\ntitle: 操作数组API方法\ndate: 2019-3-20 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 介绍Array对象中的作用，属性、常规方法等\ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n### Array对象的作用\n\nArray 对象用于在单个的变量中存储多个值\n\n### 创建Array对象的方法\n\n`var arrayObj = new Array()；`<br/>\n`var arrayObj = []; //本人习惯用这种`<br/>\n返回值：返回新创建并被初始化了的数组。如果调用arrayObj时没有参数或者没有指定 值，那么返回的值为空，数组的length为0。<br/>\n\n### Array对象的三个属性 \n\n`constructor` //返回数组函数的引用。<br/>\n`length` //返回数组元素的长度（最常用）<br/>\n`prototype` //可以向数组对象添加属性和方法。<br/>\n\n### concat()\n\n该方法用于连接或者合并数组，并且不会改变原数组，返回一个新数组的副本\n\n```\nvar arrObj = [1,2,3,4];\nvar arrObj1 = [5,6,7,8];\narrObj.concat(arrObj1); //[1,2,3,4,5,6,7,8]\n```\n\n### join()\n\n该方法用于把数组中的所有元素用指定的分隔符分割，返回一个字符串\n\n```\nnewArray.join() //\"1,2,3,4,5,6,7,8\"\n```\n\n### pop()\n\n该方法用于删除并返回数组的最后一个元素,并将原数组的length -1\n\n```\narrObj.pop()//4\nconsole.log(arrObj); //[1,2,3]\n```\n\n### push()\n\n该方法可向数组的末尾添加一个或多个元素，并返回新的长度\n\n```\narrObj.push(4);\nconsole.log(arrObj); //[1,2,3,4]\n```\n\n### shift()\n\n该方法用于删除并返回数组的第一个元素,并将原数组的length -1\n\n```\narrObj.shift() //1\nconsole.log(arrObj) //[2,3,4]\n```\n\n### unshift()\n\n该方法可向数组的开头添加一个或多个元素，并返回新的长度\n\n``` \narrObj.unshift(1);\nconsole.log(arrObj); //[1,2,3,4]\n```\n\n### slice()\n\n该方法可从已有的数组中返回选定的元素,形成一个新的数组\n\n```\narrObj.slice(1,2); //[2]\nconsole.log(arrObj) //[1,2,3,4]\n```\n\n### splice()\n\n该法向数组中添加/删除元素，然后返回被删除的元素。该方法会改变原数组\n\n```\narrObj.splice(1,2,5); //[2,3]\nconsole.log(arrObj); //[1,5,4]\n```\n\n### reverse()\n\n该方法用于颠倒数组中元素的顺序，并且改变原来的数组，而不会创建新的数组\n\n```\narrObj.reverse(); //[4,5,1]\n```\n\n### sort()\n\n该方法用于对数组的元素进行排序\n\n注意：该方法是按照字符编码顺序进行排序，如果想要实现业务逻辑排序需要自定义比较函数\n\n```\nvar arrObjSort = [1,5,4,2,3];\nvar arrObjSort1 = [1,2,10,3,20,4,30,50,5];\narrObjSort.sort(); //[1,2,3,4,5]\narrObjSort1.sort(); //[1, 10, 2, 20, 3, 30, 4, 5, 50]\n```\n\n自定义排序\n\n```\nfunction __sortNumber(a,b){\n   return a-b;\n}\narrObjSort1.sort(__sortNumber); //[1, 2, 3, 4, 5, 10, 20, 30, 50]\n```\n\n### toString()\n\n该方法可把数组转换为字符串，并返回结果，与不带参数的join相同\n\n```\narrObjSort1.toString(); //\"1,2,3,4,5,10,20,30,50\"\n```\n\ntoLocaleString-该方法可数组转换为本地字符串。和toString基本相同，但toLocaleString调用的是地区特定的分隔符把生成的字符串连接起来。<br/>\n\n如果你开发的脚本在世界范围都有人使用,那么将对象转换成字符串时请使用toString()方法<br/>\n\n因为LocaleString()会根据你机器的本地环境来返回字符串,它和toString()返回的值在不同的本地环境下使用的符号会有微妙的变化<br/>\n\n如果是为了返回时间类型的数据,推荐使用LocaleString().若是在后台处理字符串,请务必使用toString()<br/>\n\n```\nvar date = new Date();\nvar myArr = [date,'go home'];\nmyArr.toLocaleString(); //\"2017/11/7 下午4:35:43,go home\"\nmyArr.toString(); //\"Tue Nov 07 2017 16:36:25 GMT+0800 (CST),go home\"\n```\n\n### indexOf()\n\n该方法可确定某个元素在数组实例中第一次出现的索引位置。如果没找到返回-1,可用索引值进行逻辑判断\n\n```\nvar arr = [1,2,3,4,5];\narr.indexOf(2);  //1\narr.indexOf(2,1); //1\narr.indexOf(2,2); //-1\narr.indexOf(6);  //-1\n\n```\n\n查找元素出现的位置索引<br/>\n\n```\nvar indices = [];\nvar arr = [1,2,3,2,5,2,7];\nvar index = arr.indexOf(2);\nwhile(index != -1){\n  indices.push(index);\n  index = arr.indexOf(2,index + 1);\n}\nconsole.log(indices)\n```\n\n判断一个元素是否在数组里，不在则向数组中添加元素<br/>\n\n```\nvar arr = [1,2,3,4,5,6,7];\nfunction __upDataCollection(arrCollection,indicesEle){\n  var matchIndex =  arrCollection.indexOf(indicesEle);\n  if(matchIndex === -1){\n     arr.push(indicesEle);        \n  }else{\n    console.log('元素中存在相同的值');\n  }\n}\n__upDataCollection(arr,8); //[1, 2, 3, 4, 5, 6, 7, 8]\n__upDataCollection(arr,2); //'元素中存在相同的值'\n```\n\n### forEach()\n\n该方法按升序为数组中含有效值的每一项执行一次callback 函数（遍历数组）\n\n`forEach()` 为每个数组元素执行callback函数；不像`map()` 或者`reduce()` ，它总是返回 `undefined`值，也没有办法终止或跳出正在运行循环的`forEach`。如果常规的遍历想要检测条件返回bool , 并且可以终止循环，可使用`Array.some,Ayyay.every`.或者es6新方法`Array.find()`等等\n\n```\nvar arrayObj = [1,2,3,,5];\narrayObj.forEach(function(element, index, array){\n   console.log(\"value[\" + index + \"] = \" + element) \n},this);\n//value[0] = 1\n//value[1] = 2\n//value[2] = 3\n//value[4] = 5\n//可以观察到以上遍历并没有出现undefind\n```\n\n### map()\n\n该方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组，并且不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）\n\n```\n//常用的有些业务场景需要重新重组数组对象\nvar arrayObj = [\n    {name: 'zhangsan', age: 20}, \n    {name: 'lisi', age: 30}, \n    {name: 'wangwu', age: 26}\n  ];\nvar newArrayObj = arrayObj.map(function(obj, index, array) { \n   var newObj = {};\n   newObj[obj.name] = obj.age;\n   return newObj;\n});\nconsole.log(newArrayObj);\n//[{'zhangsan':20},{'lisi':30},{'wangwu':26}]\n```\n\n### filter()\n\n该方法创建一个新数组,通过次函数方法会返回相应的过滤后的数据,并且不会改变原数组\n\n```\nvar arrayObj = [3,1,3,2,4,5,6];\nvar newArrayObj = arrayObj.filter(function(value,index,array){\n   return value > 3\n});\nconsole.log(newArrayObj);//[4, 5, 6]\n```\n\n### reduce()\n\n为数组中的每一个元素依次执行callback函数，不包括数组中被删除或从未被赋值的元素,返回函数累计处理的结果\n\n`callback`执行数组中每个值的函数，包含四个参数：<br/>\n\n`accumulator`累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。<br/>\n\n`currentValue`数组中正在处理的元素。<br/>\n\n`currentIndex`数组中正在处理的当前元素的索引。<br/>\n\n如果提供了initialValue，则索引号为0，否则为索引为1。array调用reduce的数组initialValue[可选] 用作第一个调用 callback的第一个参数的值。<br/>\n\n如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<br/>\n\n```\nvar totalValue = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0); \n// totalValue  6\n\n//将二维数组转化为一维数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n    function(a, b) {\n      return a.concat(b);\n    },[]);\n  // flattened is [0, 1, 2, 3, 4, 5] \n```\n\n### some()\n\n该方法用于检测数组中的某些元素是否通过callback函数实现的方法。返回bool值\n\n```\nvar arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element > 2;\n});\nconsole.log(flag);//true\n```\n\n### every()\n\n该方法用于检测数组中的所有元素是否通过callback函数实现的方法。返回bool值\n\n```\nvar arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element > 2;\n});\nconsole.log(flag);//false\n```\n\n### 扩展运算符(...)\n\n该运算符将一个数组转为用逗号分隔的参数序列\n\n扩展运算符即可以复制，合并数组，操作分割字符串与结构赋值结合还可以当函数的形参<br/>\n```\nconsole.log(...[1,2,3,4,5]);//1 2 3 4 5\n```\n\n合并数组：<br/>\n\n```\nlet arrayObj = [1,2,3,4,5,6];\nlet arrayObj1 = [7,8,9];\nlet newArray = [...arrayObj,...arrayObj1];\nconsole.log(newArray) //[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n复制数组：<br/>\n```\nlet arrayObj = [1,2,3,4,5];\nlet arrayObjNew = [...arrayObj];\nconsole.log(arrayObjNew) //[1,2,3,4,5];\n```\n\n与结构赋值结合：<br/>\n```\nconst [variable, ...array] = [1, 2, 3, 4, 5];\nconsole.log(variable); //1\nconsole.log(array); //[2,3,4,5]\n```\n\n函数形参：\n```\n//例子1:\nlet _arrayObj = [1];\nlet _arrayObj1 = [1,2,3,4,5];\nvar __operationArr = (array,items)=>{ \n   array.push(...items);\n   console.log(array); //[1,1,2,3,4,5]\n}\n__operationArr(_arrayObj,_arrayObj1);\n//例子2:\nvar __add = (a,b,c,d,e) =>{\n  return a + b + c +d + e;\n}\n__add(..._arrayObj1); //15\n```\n\n求出数组最大元素：<br/>\n```\nlet arrayObj = [2,3,4,5,3,2,8];\nMath.max(...arrayObj) //8\n```\n\n### form()\n\n该法从一个类似数组或可迭代对象中创建一个新的数组实例，相当于相当于[].slice.call()\n\n```\n//例子1:\nlet arrayItems = {\n    '0': 'zhangsan',\n    '1': 'lisi',\n    '2': 'wangwu',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayItems); // ['zhangsan', 'lisi', 'wangwu']\n// ES6的写法\nlet arr2 = Array.from(arrayItems); // ['zhangsan', 'lisi', 'wangwu']\n\n例子2:\n// 常见的DOM NodeList对象\nlet ps = document.querySelectorAll('p');\nlet pElementArr = Array.from(ps);\npElementArr.forEach((p)=> {\n  console.log(p);\n});\n```\n将字符串分割字后变为数组<br/>\n```\nArray.from('foo');//['f','o','o']\n```\n\n\n### of()\n\n该方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型\n\nArray.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。<br/>\n\n```\nArray.of(7);       // [7] \nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]\n```\n\n\n### copyWithin()\n\n该方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小\n\narr.copyWithin(target)<br/>\n\narr.copyWithin(target, start)<br/>\n\narr.copyWithin(target, start, end)<br/>\n\narr.copyWithin(目标索引, [源开始索引], [结束源索引])<br/>\n```\n[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}\n```\n\n### find()\n\n该方法返回数组中满足提供的callback的第一个元素的值。否则返回 undefined\n\n如果你需要找到一个元素的位置或者一个元素是否存在于数组中，使用`Array.prototype.indexOf()` 或 `Array.prototype.includes()`。\n\n如果你需要找到元素的索引，而不是其值`Array.prototype.findIndex() `;\n```\nlet arrayObj = [2,4,5,60,39];\nlet backValue = arrayObj.find((element)=>{return element > 20});\nconsole.log(backValue); //60\n```\n\n\n### fill()\n\n该方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素\n\n语法：<br/>\narr.fill(value) <br/>\narr.fill(value, start) <br/>\narr.fill(value, start, end)<br/>\n```\n[1, 2, 3].fill(4)            // [4, 4, 4]\n[1, 2, 3].fill(4, 1)         // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2)      // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1)      // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2)    // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN)  // [1, 2, 3]\nArray(3).fill(4);            // [4, 4, 4]\n[].fill.call({length: 3}, 4) // {0: 4, 1: 4, 2: 4, length: 3}\n```\n\n### entries()\n\n该方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对\n\n```\nvar arr = [\"a\", \"b\", \"c\"];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, \"a\"]\nconsole.log(iterator.next().value); \n// [1, \"b\"]\nconsole.log(iterator.next().value); \n// [2, \"c\"]\n```\n\n### includes()\n\n该方法用来判断一个数组是否包含一个指定的值，如果是，酌情返回 true或 false\n\n语法：<br/>\narr.includes(searchElement)<br/>\narr.includes(searchElement, fromIndex)<br/>\n```\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n\n","slug":"javascript/api","published":1,"updated":"2019-08-26T16:46:27.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n76000mkuu6mmmt6hb6","content":"<h3 id=\"Array对象的作用\"><a href=\"#Array对象的作用\" class=\"headerlink\" title=\"Array对象的作用\"></a>Array对象的作用</h3><p>Array 对象用于在单个的变量中存储多个值</p>\n<h3 id=\"创建Array对象的方法\"><a href=\"#创建Array对象的方法\" class=\"headerlink\" title=\"创建Array对象的方法\"></a>创建Array对象的方法</h3><p><code>var arrayObj = new Array()；</code><br><br><code>var arrayObj = []; //本人习惯用这种</code><br><br>返回值：返回新创建并被初始化了的数组。如果调用arrayObj时没有参数或者没有指定 值，那么返回的值为空，数组的length为0。<br></p>\n<h3 id=\"Array对象的三个属性\"><a href=\"#Array对象的三个属性\" class=\"headerlink\" title=\"Array对象的三个属性\"></a>Array对象的三个属性</h3><p><code>constructor</code> //返回数组函数的引用。<br><br><code>length</code> //返回数组元素的长度（最常用）<br><br><code>prototype</code> //可以向数组对象添加属性和方法。<br></p>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h3><p>该方法用于连接或者合并数组，并且不会改变原数组，返回一个新数组的副本</p>\n<pre><code>var arrObj = [1,2,3,4];\nvar arrObj1 = [5,6,7,8];\narrObj.concat(arrObj1); //[1,2,3,4,5,6,7,8]</code></pre><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>该方法用于把数组中的所有元素用指定的分隔符分割，返回一个字符串</p>\n<pre><code>newArray.join() //&quot;1,2,3,4,5,6,7,8&quot;</code></pre><h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><p>该方法用于删除并返回数组的最后一个元素,并将原数组的length -1</p>\n<pre><code>arrObj.pop()//4\nconsole.log(arrObj); //[1,2,3]</code></pre><h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><p>该方法可向数组的末尾添加一个或多个元素，并返回新的长度</p>\n<pre><code>arrObj.push(4);\nconsole.log(arrObj); //[1,2,3,4]</code></pre><h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><p>该方法用于删除并返回数组的第一个元素,并将原数组的length -1</p>\n<pre><code>arrObj.shift() //1\nconsole.log(arrObj) //[2,3,4]</code></pre><h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><p>该方法可向数组的开头添加一个或多个元素，并返回新的长度</p>\n<pre><code>arrObj.unshift(1);\nconsole.log(arrObj); //[1,2,3,4]</code></pre><h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>该方法可从已有的数组中返回选定的元素,形成一个新的数组</p>\n<pre><code>arrObj.slice(1,2); //[2]\nconsole.log(arrObj) //[1,2,3,4]</code></pre><h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>该法向数组中添加/删除元素，然后返回被删除的元素。该方法会改变原数组</p>\n<pre><code>arrObj.splice(1,2,5); //[2,3]\nconsole.log(arrObj); //[1,5,4]</code></pre><h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h3><p>该方法用于颠倒数组中元素的顺序，并且改变原来的数组，而不会创建新的数组</p>\n<pre><code>arrObj.reverse(); //[4,5,1]</code></pre><h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p>该方法用于对数组的元素进行排序</p>\n<p>注意：该方法是按照字符编码顺序进行排序，如果想要实现业务逻辑排序需要自定义比较函数</p>\n<pre><code>var arrObjSort = [1,5,4,2,3];\nvar arrObjSort1 = [1,2,10,3,20,4,30,50,5];\narrObjSort.sort(); //[1,2,3,4,5]\narrObjSort1.sort(); //[1, 10, 2, 20, 3, 30, 4, 5, 50]</code></pre><p>自定义排序</p>\n<pre><code>function __sortNumber(a,b){\n   return a-b;\n}\narrObjSort1.sort(__sortNumber); //[1, 2, 3, 4, 5, 10, 20, 30, 50]</code></pre><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>该方法可把数组转换为字符串，并返回结果，与不带参数的join相同</p>\n<pre><code>arrObjSort1.toString(); //&quot;1,2,3,4,5,10,20,30,50&quot;</code></pre><p>toLocaleString-该方法可数组转换为本地字符串。和toString基本相同，但toLocaleString调用的是地区特定的分隔符把生成的字符串连接起来。<br></p>\n<p>如果你开发的脚本在世界范围都有人使用,那么将对象转换成字符串时请使用toString()方法<br></p>\n<p>因为LocaleString()会根据你机器的本地环境来返回字符串,它和toString()返回的值在不同的本地环境下使用的符号会有微妙的变化<br></p>\n<p>如果是为了返回时间类型的数据,推荐使用LocaleString().若是在后台处理字符串,请务必使用toString()<br></p>\n<pre><code>var date = new Date();\nvar myArr = [date,&#39;go home&#39;];\nmyArr.toLocaleString(); //&quot;2017/11/7 下午4:35:43,go home&quot;\nmyArr.toString(); //&quot;Tue Nov 07 2017 16:36:25 GMT+0800 (CST),go home&quot;</code></pre><h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h3><p>该方法可确定某个元素在数组实例中第一次出现的索引位置。如果没找到返回-1,可用索引值进行逻辑判断</p>\n<pre><code>var arr = [1,2,3,4,5];\narr.indexOf(2);  //1\narr.indexOf(2,1); //1\narr.indexOf(2,2); //-1\narr.indexOf(6);  //-1\n</code></pre><p>查找元素出现的位置索引<br></p>\n<pre><code>var indices = [];\nvar arr = [1,2,3,2,5,2,7];\nvar index = arr.indexOf(2);\nwhile(index != -1){\n  indices.push(index);\n  index = arr.indexOf(2,index + 1);\n}\nconsole.log(indices)</code></pre><p>判断一个元素是否在数组里，不在则向数组中添加元素<br></p>\n<pre><code>var arr = [1,2,3,4,5,6,7];\nfunction __upDataCollection(arrCollection,indicesEle){\n  var matchIndex =  arrCollection.indexOf(indicesEle);\n  if(matchIndex === -1){\n     arr.push(indicesEle);        \n  }else{\n    console.log(&#39;元素中存在相同的值&#39;);\n  }\n}\n__upDataCollection(arr,8); //[1, 2, 3, 4, 5, 6, 7, 8]\n__upDataCollection(arr,2); //&#39;元素中存在相同的值&#39;</code></pre><h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h3><p>该方法按升序为数组中含有效值的每一项执行一次callback 函数（遍历数组）</p>\n<p><code>forEach()</code> 为每个数组元素执行callback函数；不像<code>map()</code> 或者<code>reduce()</code> ，它总是返回 <code>undefined</code>值，也没有办法终止或跳出正在运行循环的<code>forEach</code>。如果常规的遍历想要检测条件返回bool , 并且可以终止循环，可使用<code>Array.some,Ayyay.every</code>.或者es6新方法<code>Array.find()</code>等等</p>\n<pre><code>var arrayObj = [1,2,3,,5];\narrayObj.forEach(function(element, index, array){\n   console.log(&quot;value[&quot; + index + &quot;] = &quot; + element) \n},this);\n//value[0] = 1\n//value[1] = 2\n//value[2] = 3\n//value[4] = 5\n//可以观察到以上遍历并没有出现undefind</code></pre><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>该方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组，并且不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）</p>\n<pre><code>//常用的有些业务场景需要重新重组数组对象\nvar arrayObj = [\n    {name: &#39;zhangsan&#39;, age: 20}, \n    {name: &#39;lisi&#39;, age: 30}, \n    {name: &#39;wangwu&#39;, age: 26}\n  ];\nvar newArrayObj = arrayObj.map(function(obj, index, array) { \n   var newObj = {};\n   newObj[obj.name] = obj.age;\n   return newObj;\n});\nconsole.log(newArrayObj);\n//[{&#39;zhangsan&#39;:20},{&#39;lisi&#39;:30},{&#39;wangwu&#39;:26}]</code></pre><h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>该方法创建一个新数组,通过次函数方法会返回相应的过滤后的数据,并且不会改变原数组</p>\n<pre><code>var arrayObj = [3,1,3,2,4,5,6];\nvar newArrayObj = arrayObj.filter(function(value,index,array){\n   return value &gt; 3\n});\nconsole.log(newArrayObj);//[4, 5, 6]</code></pre><h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h3><p>为数组中的每一个元素依次执行callback函数，不包括数组中被删除或从未被赋值的元素,返回函数累计处理的结果</p>\n<p><code>callback</code>执行数组中每个值的函数，包含四个参数：<br></p>\n<p><code>accumulator</code>累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。<br></p>\n<p><code>currentValue</code>数组中正在处理的元素。<br></p>\n<p><code>currentIndex</code>数组中正在处理的当前元素的索引。<br></p>\n<p>如果提供了initialValue，则索引号为0，否则为索引为1。array调用reduce的数组initialValue[可选] 用作第一个调用 callback的第一个参数的值。<br></p>\n<p>如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<br></p>\n<pre><code>var totalValue = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0); \n// totalValue  6\n\n//将二维数组转化为一维数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n    function(a, b) {\n      return a.concat(b);\n    },[]);\n  // flattened is [0, 1, 2, 3, 4, 5] </code></pre><h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h3><p>该方法用于检测数组中的某些元素是否通过callback函数实现的方法。返回bool值</p>\n<pre><code>var arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element &gt; 2;\n});\nconsole.log(flag);//true</code></pre><h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h3><p>该方法用于检测数组中的所有元素是否通过callback函数实现的方法。返回bool值</p>\n<pre><code>var arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element &gt; 2;\n});\nconsole.log(flag);//false</code></pre><h3 id=\"扩展运算符-…\"><a href=\"#扩展运算符-…\" class=\"headerlink\" title=\"扩展运算符(…)\"></a>扩展运算符(…)</h3><p>该运算符将一个数组转为用逗号分隔的参数序列</p>\n<p>扩展运算符即可以复制，合并数组，操作分割字符串与结构赋值结合还可以当函数的形参<br></p>\n<pre><code>console.log(...[1,2,3,4,5]);//1 2 3 4 5</code></pre><p>合并数组：<br></p>\n<pre><code>let arrayObj = [1,2,3,4,5,6];\nlet arrayObj1 = [7,8,9];\nlet newArray = [...arrayObj,...arrayObj1];\nconsole.log(newArray) //[1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre><p>复制数组：<br></p>\n<pre><code>let arrayObj = [1,2,3,4,5];\nlet arrayObjNew = [...arrayObj];\nconsole.log(arrayObjNew) //[1,2,3,4,5];</code></pre><p>与结构赋值结合：<br></p>\n<pre><code>const [variable, ...array] = [1, 2, 3, 4, 5];\nconsole.log(variable); //1\nconsole.log(array); //[2,3,4,5]</code></pre><p>函数形参：</p>\n<pre><code>//例子1:\nlet _arrayObj = [1];\nlet _arrayObj1 = [1,2,3,4,5];\nvar __operationArr = (array,items)=&gt;{ \n   array.push(...items);\n   console.log(array); //[1,1,2,3,4,5]\n}\n__operationArr(_arrayObj,_arrayObj1);\n//例子2:\nvar __add = (a,b,c,d,e) =&gt;{\n  return a + b + c +d + e;\n}\n__add(..._arrayObj1); //15</code></pre><p>求出数组最大元素：<br></p>\n<pre><code>let arrayObj = [2,3,4,5,3,2,8];\nMath.max(...arrayObj) //8</code></pre><h3 id=\"form\"><a href=\"#form\" class=\"headerlink\" title=\"form()\"></a>form()</h3><p>该法从一个类似数组或可迭代对象中创建一个新的数组实例，相当于相当于[].slice.call()</p>\n<pre><code>//例子1:\nlet arrayItems = {\n    &#39;0&#39;: &#39;zhangsan&#39;,\n    &#39;1&#39;: &#39;lisi&#39;,\n    &#39;2&#39;: &#39;wangwu&#39;,\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayItems); // [&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]\n// ES6的写法\nlet arr2 = Array.from(arrayItems); // [&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]\n\n例子2:\n// 常见的DOM NodeList对象\nlet ps = document.querySelectorAll(&#39;p&#39;);\nlet pElementArr = Array.from(ps);\npElementArr.forEach((p)=&gt; {\n  console.log(p);\n});</code></pre><p>将字符串分割字后变为数组<br></p>\n<pre><code>Array.from(&#39;foo&#39;);//[&#39;f&#39;,&#39;o&#39;,&#39;o&#39;]</code></pre><h3 id=\"of\"><a href=\"#of\" class=\"headerlink\" title=\"of()\"></a>of()</h3><p>该方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p>\n<p>Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。<br></p>\n<pre><code>Array.of(7);       // [7] \nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]</code></pre><h3 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h3><p>该方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小</p>\n<p>arr.copyWithin(target)<br></p>\n<p>arr.copyWithin(target, start)<br></p>\n<p>arr.copyWithin(target, start, end)<br></p>\n<p>arr.copyWithin(目标索引, [源开始索引], [结束源索引])<br></p>\n<pre><code>[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}</code></pre><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p>该方法返回数组中满足提供的callback的第一个元素的值。否则返回 undefined</p>\n<p>如果你需要找到一个元素的位置或者一个元素是否存在于数组中，使用<code>Array.prototype.indexOf()</code> 或 <code>Array.prototype.includes()</code>。</p>\n<p>如果你需要找到元素的索引，而不是其值<code>Array.prototype.findIndex()</code>;</p>\n<pre><code>let arrayObj = [2,4,5,60,39];\nlet backValue = arrayObj.find((element)=&gt;{return element &gt; 20});\nconsole.log(backValue); //60</code></pre><h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p>该方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p>\n<p>语法：<br><br>arr.fill(value) <br><br>arr.fill(value, start) <br><br>arr.fill(value, start, end)<br></p>\n<pre><code>[1, 2, 3].fill(4)            // [4, 4, 4]\n[1, 2, 3].fill(4, 1)         // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2)      // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1)      // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2)    // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN)  // [1, 2, 3]\nArray(3).fill(4);            // [4, 4, 4]\n[].fill.call({length: 3}, 4) // {0: 4, 1: 4, 2: 4, length: 3}</code></pre><h3 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h3><p>该方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对</p>\n<pre><code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, &quot;a&quot;]\nconsole.log(iterator.next().value); \n// [1, &quot;b&quot;]\nconsole.log(iterator.next().value); \n// [2, &quot;c&quot;]</code></pre><h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p>该方法用来判断一个数组是否包含一个指定的值，如果是，酌情返回 true或 false</p>\n<p>语法：<br><br>arr.includes(searchElement)<br><br>arr.includes(searchElement, fromIndex)<br></p>\n<pre><code>[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"Array对象的作用\"><a href=\"#Array对象的作用\" class=\"headerlink\" title=\"Array对象的作用\"></a>Array对象的作用</h3><p>Array 对象用于在单个的变量中存储多个值</p>\n<h3 id=\"创建Array对象的方法\"><a href=\"#创建Array对象的方法\" class=\"headerlink\" title=\"创建Array对象的方法\"></a>创建Array对象的方法</h3><p><code>var arrayObj = new Array()；</code><br><br><code>var arrayObj = []; //本人习惯用这种</code><br><br>返回值：返回新创建并被初始化了的数组。如果调用arrayObj时没有参数或者没有指定 值，那么返回的值为空，数组的length为0。<br></p>\n<h3 id=\"Array对象的三个属性\"><a href=\"#Array对象的三个属性\" class=\"headerlink\" title=\"Array对象的三个属性\"></a>Array对象的三个属性</h3><p><code>constructor</code> //返回数组函数的引用。<br><br><code>length</code> //返回数组元素的长度（最常用）<br><br><code>prototype</code> //可以向数组对象添加属性和方法。<br></p>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h3><p>该方法用于连接或者合并数组，并且不会改变原数组，返回一个新数组的副本</p>\n<pre><code>var arrObj = [1,2,3,4];\nvar arrObj1 = [5,6,7,8];\narrObj.concat(arrObj1); //[1,2,3,4,5,6,7,8]</code></pre><h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join()\"></a>join()</h3><p>该方法用于把数组中的所有元素用指定的分隔符分割，返回一个字符串</p>\n<pre><code>newArray.join() //&quot;1,2,3,4,5,6,7,8&quot;</code></pre><h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><p>该方法用于删除并返回数组的最后一个元素,并将原数组的length -1</p>\n<pre><code>arrObj.pop()//4\nconsole.log(arrObj); //[1,2,3]</code></pre><h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><p>该方法可向数组的末尾添加一个或多个元素，并返回新的长度</p>\n<pre><code>arrObj.push(4);\nconsole.log(arrObj); //[1,2,3,4]</code></pre><h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><p>该方法用于删除并返回数组的第一个元素,并将原数组的length -1</p>\n<pre><code>arrObj.shift() //1\nconsole.log(arrObj) //[2,3,4]</code></pre><h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><p>该方法可向数组的开头添加一个或多个元素，并返回新的长度</p>\n<pre><code>arrObj.unshift(1);\nconsole.log(arrObj); //[1,2,3,4]</code></pre><h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>该方法可从已有的数组中返回选定的元素,形成一个新的数组</p>\n<pre><code>arrObj.slice(1,2); //[2]\nconsole.log(arrObj) //[1,2,3,4]</code></pre><h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>该法向数组中添加/删除元素，然后返回被删除的元素。该方法会改变原数组</p>\n<pre><code>arrObj.splice(1,2,5); //[2,3]\nconsole.log(arrObj); //[1,5,4]</code></pre><h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse()\"></a>reverse()</h3><p>该方法用于颠倒数组中元素的顺序，并且改变原来的数组，而不会创建新的数组</p>\n<pre><code>arrObj.reverse(); //[4,5,1]</code></pre><h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p>该方法用于对数组的元素进行排序</p>\n<p>注意：该方法是按照字符编码顺序进行排序，如果想要实现业务逻辑排序需要自定义比较函数</p>\n<pre><code>var arrObjSort = [1,5,4,2,3];\nvar arrObjSort1 = [1,2,10,3,20,4,30,50,5];\narrObjSort.sort(); //[1,2,3,4,5]\narrObjSort1.sort(); //[1, 10, 2, 20, 3, 30, 4, 5, 50]</code></pre><p>自定义排序</p>\n<pre><code>function __sortNumber(a,b){\n   return a-b;\n}\narrObjSort1.sort(__sortNumber); //[1, 2, 3, 4, 5, 10, 20, 30, 50]</code></pre><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>该方法可把数组转换为字符串，并返回结果，与不带参数的join相同</p>\n<pre><code>arrObjSort1.toString(); //&quot;1,2,3,4,5,10,20,30,50&quot;</code></pre><p>toLocaleString-该方法可数组转换为本地字符串。和toString基本相同，但toLocaleString调用的是地区特定的分隔符把生成的字符串连接起来。<br></p>\n<p>如果你开发的脚本在世界范围都有人使用,那么将对象转换成字符串时请使用toString()方法<br></p>\n<p>因为LocaleString()会根据你机器的本地环境来返回字符串,它和toString()返回的值在不同的本地环境下使用的符号会有微妙的变化<br></p>\n<p>如果是为了返回时间类型的数据,推荐使用LocaleString().若是在后台处理字符串,请务必使用toString()<br></p>\n<pre><code>var date = new Date();\nvar myArr = [date,&#39;go home&#39;];\nmyArr.toLocaleString(); //&quot;2017/11/7 下午4:35:43,go home&quot;\nmyArr.toString(); //&quot;Tue Nov 07 2017 16:36:25 GMT+0800 (CST),go home&quot;</code></pre><h3 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h3><p>该方法可确定某个元素在数组实例中第一次出现的索引位置。如果没找到返回-1,可用索引值进行逻辑判断</p>\n<pre><code>var arr = [1,2,3,4,5];\narr.indexOf(2);  //1\narr.indexOf(2,1); //1\narr.indexOf(2,2); //-1\narr.indexOf(6);  //-1\n</code></pre><p>查找元素出现的位置索引<br></p>\n<pre><code>var indices = [];\nvar arr = [1,2,3,2,5,2,7];\nvar index = arr.indexOf(2);\nwhile(index != -1){\n  indices.push(index);\n  index = arr.indexOf(2,index + 1);\n}\nconsole.log(indices)</code></pre><p>判断一个元素是否在数组里，不在则向数组中添加元素<br></p>\n<pre><code>var arr = [1,2,3,4,5,6,7];\nfunction __upDataCollection(arrCollection,indicesEle){\n  var matchIndex =  arrCollection.indexOf(indicesEle);\n  if(matchIndex === -1){\n     arr.push(indicesEle);        \n  }else{\n    console.log(&#39;元素中存在相同的值&#39;);\n  }\n}\n__upDataCollection(arr,8); //[1, 2, 3, 4, 5, 6, 7, 8]\n__upDataCollection(arr,2); //&#39;元素中存在相同的值&#39;</code></pre><h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h3><p>该方法按升序为数组中含有效值的每一项执行一次callback 函数（遍历数组）</p>\n<p><code>forEach()</code> 为每个数组元素执行callback函数；不像<code>map()</code> 或者<code>reduce()</code> ，它总是返回 <code>undefined</code>值，也没有办法终止或跳出正在运行循环的<code>forEach</code>。如果常规的遍历想要检测条件返回bool , 并且可以终止循环，可使用<code>Array.some,Ayyay.every</code>.或者es6新方法<code>Array.find()</code>等等</p>\n<pre><code>var arrayObj = [1,2,3,,5];\narrayObj.forEach(function(element, index, array){\n   console.log(&quot;value[&quot; + index + &quot;] = &quot; + element) \n},this);\n//value[0] = 1\n//value[1] = 2\n//value[2] = 3\n//value[4] = 5\n//可以观察到以上遍历并没有出现undefind</code></pre><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>该方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组，并且不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）</p>\n<pre><code>//常用的有些业务场景需要重新重组数组对象\nvar arrayObj = [\n    {name: &#39;zhangsan&#39;, age: 20}, \n    {name: &#39;lisi&#39;, age: 30}, \n    {name: &#39;wangwu&#39;, age: 26}\n  ];\nvar newArrayObj = arrayObj.map(function(obj, index, array) { \n   var newObj = {};\n   newObj[obj.name] = obj.age;\n   return newObj;\n});\nconsole.log(newArrayObj);\n//[{&#39;zhangsan&#39;:20},{&#39;lisi&#39;:30},{&#39;wangwu&#39;:26}]</code></pre><h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>该方法创建一个新数组,通过次函数方法会返回相应的过滤后的数据,并且不会改变原数组</p>\n<pre><code>var arrayObj = [3,1,3,2,4,5,6];\nvar newArrayObj = arrayObj.filter(function(value,index,array){\n   return value &gt; 3\n});\nconsole.log(newArrayObj);//[4, 5, 6]</code></pre><h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h3><p>为数组中的每一个元素依次执行callback函数，不包括数组中被删除或从未被赋值的元素,返回函数累计处理的结果</p>\n<p><code>callback</code>执行数组中每个值的函数，包含四个参数：<br></p>\n<p><code>accumulator</code>累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。<br></p>\n<p><code>currentValue</code>数组中正在处理的元素。<br></p>\n<p><code>currentIndex</code>数组中正在处理的当前元素的索引。<br></p>\n<p>如果提供了initialValue，则索引号为0，否则为索引为1。array调用reduce的数组initialValue[可选] 用作第一个调用 callback的第一个参数的值。<br></p>\n<p>如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。<br></p>\n<pre><code>var totalValue = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0); \n// totalValue  6\n\n//将二维数组转化为一维数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n    function(a, b) {\n      return a.concat(b);\n    },[]);\n  // flattened is [0, 1, 2, 3, 4, 5] </code></pre><h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h3><p>该方法用于检测数组中的某些元素是否通过callback函数实现的方法。返回bool值</p>\n<pre><code>var arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element &gt; 2;\n});\nconsole.log(flag);//true</code></pre><h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h3><p>该方法用于检测数组中的所有元素是否通过callback函数实现的方法。返回bool值</p>\n<pre><code>var arrayObj = [1,2,3,4,5,6];\nvar flag = arrayObj.some(function(element,index,array){\n  return element &gt; 2;\n});\nconsole.log(flag);//false</code></pre><h3 id=\"扩展运算符-…\"><a href=\"#扩展运算符-…\" class=\"headerlink\" title=\"扩展运算符(…)\"></a>扩展运算符(…)</h3><p>该运算符将一个数组转为用逗号分隔的参数序列</p>\n<p>扩展运算符即可以复制，合并数组，操作分割字符串与结构赋值结合还可以当函数的形参<br></p>\n<pre><code>console.log(...[1,2,3,4,5]);//1 2 3 4 5</code></pre><p>合并数组：<br></p>\n<pre><code>let arrayObj = [1,2,3,4,5,6];\nlet arrayObj1 = [7,8,9];\nlet newArray = [...arrayObj,...arrayObj1];\nconsole.log(newArray) //[1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre><p>复制数组：<br></p>\n<pre><code>let arrayObj = [1,2,3,4,5];\nlet arrayObjNew = [...arrayObj];\nconsole.log(arrayObjNew) //[1,2,3,4,5];</code></pre><p>与结构赋值结合：<br></p>\n<pre><code>const [variable, ...array] = [1, 2, 3, 4, 5];\nconsole.log(variable); //1\nconsole.log(array); //[2,3,4,5]</code></pre><p>函数形参：</p>\n<pre><code>//例子1:\nlet _arrayObj = [1];\nlet _arrayObj1 = [1,2,3,4,5];\nvar __operationArr = (array,items)=&gt;{ \n   array.push(...items);\n   console.log(array); //[1,1,2,3,4,5]\n}\n__operationArr(_arrayObj,_arrayObj1);\n//例子2:\nvar __add = (a,b,c,d,e) =&gt;{\n  return a + b + c +d + e;\n}\n__add(..._arrayObj1); //15</code></pre><p>求出数组最大元素：<br></p>\n<pre><code>let arrayObj = [2,3,4,5,3,2,8];\nMath.max(...arrayObj) //8</code></pre><h3 id=\"form\"><a href=\"#form\" class=\"headerlink\" title=\"form()\"></a>form()</h3><p>该法从一个类似数组或可迭代对象中创建一个新的数组实例，相当于相当于[].slice.call()</p>\n<pre><code>//例子1:\nlet arrayItems = {\n    &#39;0&#39;: &#39;zhangsan&#39;,\n    &#39;1&#39;: &#39;lisi&#39;,\n    &#39;2&#39;: &#39;wangwu&#39;,\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayItems); // [&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]\n// ES6的写法\nlet arr2 = Array.from(arrayItems); // [&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;]\n\n例子2:\n// 常见的DOM NodeList对象\nlet ps = document.querySelectorAll(&#39;p&#39;);\nlet pElementArr = Array.from(ps);\npElementArr.forEach((p)=&gt; {\n  console.log(p);\n});</code></pre><p>将字符串分割字后变为数组<br></p>\n<pre><code>Array.from(&#39;foo&#39;);//[&#39;f&#39;,&#39;o&#39;,&#39;o&#39;]</code></pre><h3 id=\"of\"><a href=\"#of\" class=\"headerlink\" title=\"of()\"></a>of()</h3><p>该方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p>\n<p>Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。<br></p>\n<pre><code>Array.of(7);       // [7] \nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]</code></pre><h3 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin()\"></a>copyWithin()</h3><p>该方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小</p>\n<p>arr.copyWithin(target)<br></p>\n<p>arr.copyWithin(target, start)<br></p>\n<p>arr.copyWithin(target, start, end)<br></p>\n<p>arr.copyWithin(目标索引, [源开始索引], [结束源索引])<br></p>\n<pre><code>[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}</code></pre><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h3><p>该方法返回数组中满足提供的callback的第一个元素的值。否则返回 undefined</p>\n<p>如果你需要找到一个元素的位置或者一个元素是否存在于数组中，使用<code>Array.prototype.indexOf()</code> 或 <code>Array.prototype.includes()</code>。</p>\n<p>如果你需要找到元素的索引，而不是其值<code>Array.prototype.findIndex()</code>;</p>\n<pre><code>let arrayObj = [2,4,5,60,39];\nlet backValue = arrayObj.find((element)=&gt;{return element &gt; 20});\nconsole.log(backValue); //60</code></pre><h3 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill()\"></a>fill()</h3><p>该方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p>\n<p>语法：<br><br>arr.fill(value) <br><br>arr.fill(value, start) <br><br>arr.fill(value, start, end)<br></p>\n<pre><code>[1, 2, 3].fill(4)            // [4, 4, 4]\n[1, 2, 3].fill(4, 1)         // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2)      // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1)      // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2)    // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN)  // [1, 2, 3]\nArray(3).fill(4);            // [4, 4, 4]\n[].fill.call({length: 3}, 4) // {0: 4, 1: 4, 2: 4, length: 3}</code></pre><h3 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h3><p>该方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对</p>\n<pre><code>var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, &quot;a&quot;]\nconsole.log(iterator.next().value); \n// [1, &quot;b&quot;]\nconsole.log(iterator.next().value); \n// [2, &quot;c&quot;]</code></pre><h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p>该方法用来判断一个数组是否包含一个指定的值，如果是，酌情返回 true或 false</p>\n<p>语法：<br><br>arr.includes(searchElement)<br><br>arr.includes(searchElement, fromIndex)<br></p>\n<pre><code>[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true</code></pre>"},{"title":"bind 函数的实现","date":"2019-04-21T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\nbind 方法其实和 call apply 功能上差不多，只不过 bind() 方法会绑定一个新的函数，通过这个新的函数我们可以当作构造函数、偏函数等等去使用\n\n\n### 作为绑定函数使用\n\ndemo1\n\n```\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return this.value;\n  }\n}\n\n// 直接调用 this 指向 obj\nobj.getValue()  // 29\n\n// obj.getValue 是一个函数体，在全局作用域中调用，所以 this 指向 window\nlet valFun = obj.getValue;\nvalFun(); // 20\n\n// 使用 bind 将当前的 this 指针指向 obj 对象上\nlet boundGetValue = valFun.bind(obj);\nboundGetValue(); // 29\n```\n\ndemo2\n\n```\n/**\n * obj.getValue() 返回的是一个匿名函数\n * obj.getValue()() 立即执行函数\n * 匿名函数上下文执行环境具有全局性，所以 this 通常指向 window\n */\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 20\n\n\n\n// 利用bind我们可以使匿名函数的 this 指针指向当前对象（当然还有很多方法比如在匿名函数内增加变量 _this = this）\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 29\n\n\n// 当然要是改变上述 this 指针不只用 bind 可以如下方法(还有很多方法 比如 apply call)\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    let _this = this;\n    return function () {\n      return _this.value\n    }\n  }\n}\n\nobj.getValue()() // 29\n\n```\n\n### 作为偏函数使用\n\n使一个函数拥有预设的初始参数，这就是偏函数。比如函数A已经拥有参数或者变量，此时我们通过调用函数A，产生函数B，我们就说B为偏函数\n\n在这里我们不展开说明偏函数，柯里化一些函数式编程的概念，在 **JS 高级系列** 函数式编程中会有详细介绍\n\n\n```\n/**\n * 插入到目标函数的参数列表的开始位置\n * 传递给绑定函数的参数会跟在它们后面\n */\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\n\n// 偏函数\nlet listArr = list.bind(null, 28);\n\nconsole.log(listArr()); // [28]\n\nconsole.log(listArr(1, 2, 3)); // [28, 1, 2, 3]\n\n\n/**\n * 多次 bind 无效 只能执行一次\n * bind 内部 使用call apply 实现\n */\n\nfunction bar () {\n  console.log(this.value);\n}\n\nlet foo = {\n  value: 1\n}\n\nlet foo1 = {\n  value: 2\n}\n\nlet func = bar.bind(foo).bind(foo1);\nconsole.log(func()); // 1\n\n```\n\n### 模拟第一步\n\n通过上面的应用我们实现 bind 有几个条件\n\n- bind 会返回一个新的函数\n- 可以传递任意参数\n- 绑定 bind 的函数可以有返回值\n\n```\nFunction.prototype.newBind = function (context) {\n  var _this = this;\n  // 获取 bind 的参数，如上面偏函数的例子\n  var _args = Array.prototype.slice.call(arguments, 1);\n  // 返回新函数\n  return function () {\n    // bind 返回函数传入的参数\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 合并参数返回\n    return self.apply(context, _args.concat(_bindArgs));\n  }\n}\n\n```\n\n### 模拟第二步\n\n通过第一步其实我们已经模拟了 bind 的大部分功能，但是在 JS 中也可以把函数当成构造函数来用 可以使用 new 关键字， 这个时候 bind 绑定的函数的 this 就会失效，因为在构造函数中 this 永远指向的是它的实例，关于 new 会在下篇文章中作出解释<br/>\n\n- 通过修改返回的函数的原型，来改变 this 指向问题\n- 调用 bind 一定是函数，否则提示错误\n\n```\nFunction.prototype.newBind  = function (context) {\n\n  // 提示错误信息\n  if (typeof this != 'function') {\n    throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n  }\n\n  var _this = this;\n  \n  // 获取参数\n  var _args = Array.prototype.slice.call(arguments, 1);\n\n  // 利用空函数来防止修改绑定函数的原型，关于 prototype 请查看 prototype 章节\n  var _fNOP = function () {};\n\n  // bind 返回的新函数\n  var _fBound = function () {\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 如果返回的 _fBound 被当做 new 的构造函数调用\n    return _this.apply(this instanceof _fBound ? this : context, args.concat(_bindArgs));\n  }\n\n  // 让 _fBound 构造的实例继承绑定函数原型中的值，否则会修改绑定函数的原型的值\n  _fNOP.prototype = this.prototype;\n  _fBound.prototype = new _fNOP();\n\n  return _fBound;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/bind.md","raw":"---\ntitle: bind 函数的实现\ndate: 2019-4-21 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\nbind 方法其实和 call apply 功能上差不多，只不过 bind() 方法会绑定一个新的函数，通过这个新的函数我们可以当作构造函数、偏函数等等去使用\n\n\n### 作为绑定函数使用\n\ndemo1\n\n```\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return this.value;\n  }\n}\n\n// 直接调用 this 指向 obj\nobj.getValue()  // 29\n\n// obj.getValue 是一个函数体，在全局作用域中调用，所以 this 指向 window\nlet valFun = obj.getValue;\nvalFun(); // 20\n\n// 使用 bind 将当前的 this 指针指向 obj 对象上\nlet boundGetValue = valFun.bind(obj);\nboundGetValue(); // 29\n```\n\ndemo2\n\n```\n/**\n * obj.getValue() 返回的是一个匿名函数\n * obj.getValue()() 立即执行函数\n * 匿名函数上下文执行环境具有全局性，所以 this 通常指向 window\n */\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 20\n\n\n\n// 利用bind我们可以使匿名函数的 this 指针指向当前对象（当然还有很多方法比如在匿名函数内增加变量 _this = this）\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 29\n\n\n// 当然要是改变上述 this 指针不只用 bind 可以如下方法(还有很多方法 比如 apply call)\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    let _this = this;\n    return function () {\n      return _this.value\n    }\n  }\n}\n\nobj.getValue()() // 29\n\n```\n\n### 作为偏函数使用\n\n使一个函数拥有预设的初始参数，这就是偏函数。比如函数A已经拥有参数或者变量，此时我们通过调用函数A，产生函数B，我们就说B为偏函数\n\n在这里我们不展开说明偏函数，柯里化一些函数式编程的概念，在 **JS 高级系列** 函数式编程中会有详细介绍\n\n\n```\n/**\n * 插入到目标函数的参数列表的开始位置\n * 传递给绑定函数的参数会跟在它们后面\n */\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\n\n// 偏函数\nlet listArr = list.bind(null, 28);\n\nconsole.log(listArr()); // [28]\n\nconsole.log(listArr(1, 2, 3)); // [28, 1, 2, 3]\n\n\n/**\n * 多次 bind 无效 只能执行一次\n * bind 内部 使用call apply 实现\n */\n\nfunction bar () {\n  console.log(this.value);\n}\n\nlet foo = {\n  value: 1\n}\n\nlet foo1 = {\n  value: 2\n}\n\nlet func = bar.bind(foo).bind(foo1);\nconsole.log(func()); // 1\n\n```\n\n### 模拟第一步\n\n通过上面的应用我们实现 bind 有几个条件\n\n- bind 会返回一个新的函数\n- 可以传递任意参数\n- 绑定 bind 的函数可以有返回值\n\n```\nFunction.prototype.newBind = function (context) {\n  var _this = this;\n  // 获取 bind 的参数，如上面偏函数的例子\n  var _args = Array.prototype.slice.call(arguments, 1);\n  // 返回新函数\n  return function () {\n    // bind 返回函数传入的参数\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 合并参数返回\n    return self.apply(context, _args.concat(_bindArgs));\n  }\n}\n\n```\n\n### 模拟第二步\n\n通过第一步其实我们已经模拟了 bind 的大部分功能，但是在 JS 中也可以把函数当成构造函数来用 可以使用 new 关键字， 这个时候 bind 绑定的函数的 this 就会失效，因为在构造函数中 this 永远指向的是它的实例，关于 new 会在下篇文章中作出解释<br/>\n\n- 通过修改返回的函数的原型，来改变 this 指向问题\n- 调用 bind 一定是函数，否则提示错误\n\n```\nFunction.prototype.newBind  = function (context) {\n\n  // 提示错误信息\n  if (typeof this != 'function') {\n    throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n  }\n\n  var _this = this;\n  \n  // 获取参数\n  var _args = Array.prototype.slice.call(arguments, 1);\n\n  // 利用空函数来防止修改绑定函数的原型，关于 prototype 请查看 prototype 章节\n  var _fNOP = function () {};\n\n  // bind 返回的新函数\n  var _fBound = function () {\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 如果返回的 _fBound 被当做 new 的构造函数调用\n    return _this.apply(this instanceof _fBound ? this : context, args.concat(_bindArgs));\n  }\n\n  // 让 _fBound 构造的实例继承绑定函数原型中的值，否则会修改绑定函数的原型的值\n  _fNOP.prototype = this.prototype;\n  _fBound.prototype = new _fNOP();\n\n  return _fBound;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/bind","published":1,"updated":"2019-08-26T16:46:27.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n78000okuu6bdosih4n","content":"<p>bind 方法其实和 call apply 功能上差不多，只不过 bind() 方法会绑定一个新的函数，通过这个新的函数我们可以当作构造函数、偏函数等等去使用</p>\n<h3 id=\"作为绑定函数使用\"><a href=\"#作为绑定函数使用\" class=\"headerlink\" title=\"作为绑定函数使用\"></a>作为绑定函数使用</h3><p>demo1</p>\n<pre><code>this.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return this.value;\n  }\n}\n\n// 直接调用 this 指向 obj\nobj.getValue()  // 29\n\n// obj.getValue 是一个函数体，在全局作用域中调用，所以 this 指向 window\nlet valFun = obj.getValue;\nvalFun(); // 20\n\n// 使用 bind 将当前的 this 指针指向 obj 对象上\nlet boundGetValue = valFun.bind(obj);\nboundGetValue(); // 29</code></pre><p>demo2</p>\n<pre><code>/**\n * obj.getValue() 返回的是一个匿名函数\n * obj.getValue()() 立即执行函数\n * 匿名函数上下文执行环境具有全局性，所以 this 通常指向 window\n */\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 20\n\n\n\n// 利用bind我们可以使匿名函数的 this 指针指向当前对象（当然还有很多方法比如在匿名函数内增加变量 _this = this）\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 29\n\n\n// 当然要是改变上述 this 指针不只用 bind 可以如下方法(还有很多方法 比如 apply call)\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    let _this = this;\n    return function () {\n      return _this.value\n    }\n  }\n}\n\nobj.getValue()() // 29\n</code></pre><h3 id=\"作为偏函数使用\"><a href=\"#作为偏函数使用\" class=\"headerlink\" title=\"作为偏函数使用\"></a>作为偏函数使用</h3><p>使一个函数拥有预设的初始参数，这就是偏函数。比如函数A已经拥有参数或者变量，此时我们通过调用函数A，产生函数B，我们就说B为偏函数</p>\n<p>在这里我们不展开说明偏函数，柯里化一些函数式编程的概念，在 <strong>JS 高级系列</strong> 函数式编程中会有详细介绍</p>\n<pre><code>/**\n * 插入到目标函数的参数列表的开始位置\n * 传递给绑定函数的参数会跟在它们后面\n */\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\n\n// 偏函数\nlet listArr = list.bind(null, 28);\n\nconsole.log(listArr()); // [28]\n\nconsole.log(listArr(1, 2, 3)); // [28, 1, 2, 3]\n\n\n/**\n * 多次 bind 无效 只能执行一次\n * bind 内部 使用call apply 实现\n */\n\nfunction bar () {\n  console.log(this.value);\n}\n\nlet foo = {\n  value: 1\n}\n\nlet foo1 = {\n  value: 2\n}\n\nlet func = bar.bind(foo).bind(foo1);\nconsole.log(func()); // 1\n</code></pre><h3 id=\"模拟第一步\"><a href=\"#模拟第一步\" class=\"headerlink\" title=\"模拟第一步\"></a>模拟第一步</h3><p>通过上面的应用我们实现 bind 有几个条件</p>\n<ul>\n<li>bind 会返回一个新的函数</li>\n<li>可以传递任意参数</li>\n<li>绑定 bind 的函数可以有返回值</li>\n</ul>\n<pre><code>Function.prototype.newBind = function (context) {\n  var _this = this;\n  // 获取 bind 的参数，如上面偏函数的例子\n  var _args = Array.prototype.slice.call(arguments, 1);\n  // 返回新函数\n  return function () {\n    // bind 返回函数传入的参数\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 合并参数返回\n    return self.apply(context, _args.concat(_bindArgs));\n  }\n}\n</code></pre><h3 id=\"模拟第二步\"><a href=\"#模拟第二步\" class=\"headerlink\" title=\"模拟第二步\"></a>模拟第二步</h3><p>通过第一步其实我们已经模拟了 bind 的大部分功能，但是在 JS 中也可以把函数当成构造函数来用 可以使用 new 关键字， 这个时候 bind 绑定的函数的 this 就会失效，因为在构造函数中 this 永远指向的是它的实例，关于 new 会在下篇文章中作出解释<br></p>\n<ul>\n<li>通过修改返回的函数的原型，来改变 this 指向问题</li>\n<li>调用 bind 一定是函数，否则提示错误</li>\n</ul>\n<pre><code>Function.prototype.newBind  = function (context) {\n\n  // 提示错误信息\n  if (typeof this != &#39;function&#39;) {\n    throw new TypeError(&#39;Function.prototype.bind - what is trying to be bound is not callable&#39;);\n  }\n\n  var _this = this;\n\n  // 获取参数\n  var _args = Array.prototype.slice.call(arguments, 1);\n\n  // 利用空函数来防止修改绑定函数的原型，关于 prototype 请查看 prototype 章节\n  var _fNOP = function () {};\n\n  // bind 返回的新函数\n  var _fBound = function () {\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 如果返回的 _fBound 被当做 new 的构造函数调用\n    return _this.apply(this instanceof _fBound ? this : context, args.concat(_bindArgs));\n  }\n\n  // 让 _fBound 构造的实例继承绑定函数原型中的值，否则会修改绑定函数的原型的值\n  _fNOP.prototype = this.prototype;\n  _fBound.prototype = new _fNOP();\n\n  return _fBound;\n}\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>bind 方法其实和 call apply 功能上差不多，只不过 bind() 方法会绑定一个新的函数，通过这个新的函数我们可以当作构造函数、偏函数等等去使用</p>\n<h3 id=\"作为绑定函数使用\"><a href=\"#作为绑定函数使用\" class=\"headerlink\" title=\"作为绑定函数使用\"></a>作为绑定函数使用</h3><p>demo1</p>\n<pre><code>this.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return this.value;\n  }\n}\n\n// 直接调用 this 指向 obj\nobj.getValue()  // 29\n\n// obj.getValue 是一个函数体，在全局作用域中调用，所以 this 指向 window\nlet valFun = obj.getValue;\nvalFun(); // 20\n\n// 使用 bind 将当前的 this 指针指向 obj 对象上\nlet boundGetValue = valFun.bind(obj);\nboundGetValue(); // 29</code></pre><p>demo2</p>\n<pre><code>/**\n * obj.getValue() 返回的是一个匿名函数\n * obj.getValue()() 立即执行函数\n * 匿名函数上下文执行环境具有全局性，所以 this 通常指向 window\n */\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 20\n\n\n\n// 利用bind我们可以使匿名函数的 this 指针指向当前对象（当然还有很多方法比如在匿名函数内增加变量 _this = this）\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    return function () {\n      return this.value\n    }.bind(this);\n  }\n}\n\nobj.getValue()() // 29\n\n\n// 当然要是改变上述 this 指针不只用 bind 可以如下方法(还有很多方法 比如 apply call)\nthis.value = 20;\n\nlet obj = {\n  value: 29,\n  getValue:function () {\n    let _this = this;\n    return function () {\n      return _this.value\n    }\n  }\n}\n\nobj.getValue()() // 29\n</code></pre><h3 id=\"作为偏函数使用\"><a href=\"#作为偏函数使用\" class=\"headerlink\" title=\"作为偏函数使用\"></a>作为偏函数使用</h3><p>使一个函数拥有预设的初始参数，这就是偏函数。比如函数A已经拥有参数或者变量，此时我们通过调用函数A，产生函数B，我们就说B为偏函数</p>\n<p>在这里我们不展开说明偏函数，柯里化一些函数式编程的概念，在 <strong>JS 高级系列</strong> 函数式编程中会有详细介绍</p>\n<pre><code>/**\n * 插入到目标函数的参数列表的开始位置\n * 传递给绑定函数的参数会跟在它们后面\n */\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\n\n// 偏函数\nlet listArr = list.bind(null, 28);\n\nconsole.log(listArr()); // [28]\n\nconsole.log(listArr(1, 2, 3)); // [28, 1, 2, 3]\n\n\n/**\n * 多次 bind 无效 只能执行一次\n * bind 内部 使用call apply 实现\n */\n\nfunction bar () {\n  console.log(this.value);\n}\n\nlet foo = {\n  value: 1\n}\n\nlet foo1 = {\n  value: 2\n}\n\nlet func = bar.bind(foo).bind(foo1);\nconsole.log(func()); // 1\n</code></pre><h3 id=\"模拟第一步\"><a href=\"#模拟第一步\" class=\"headerlink\" title=\"模拟第一步\"></a>模拟第一步</h3><p>通过上面的应用我们实现 bind 有几个条件</p>\n<ul>\n<li>bind 会返回一个新的函数</li>\n<li>可以传递任意参数</li>\n<li>绑定 bind 的函数可以有返回值</li>\n</ul>\n<pre><code>Function.prototype.newBind = function (context) {\n  var _this = this;\n  // 获取 bind 的参数，如上面偏函数的例子\n  var _args = Array.prototype.slice.call(arguments, 1);\n  // 返回新函数\n  return function () {\n    // bind 返回函数传入的参数\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 合并参数返回\n    return self.apply(context, _args.concat(_bindArgs));\n  }\n}\n</code></pre><h3 id=\"模拟第二步\"><a href=\"#模拟第二步\" class=\"headerlink\" title=\"模拟第二步\"></a>模拟第二步</h3><p>通过第一步其实我们已经模拟了 bind 的大部分功能，但是在 JS 中也可以把函数当成构造函数来用 可以使用 new 关键字， 这个时候 bind 绑定的函数的 this 就会失效，因为在构造函数中 this 永远指向的是它的实例，关于 new 会在下篇文章中作出解释<br></p>\n<ul>\n<li>通过修改返回的函数的原型，来改变 this 指向问题</li>\n<li>调用 bind 一定是函数，否则提示错误</li>\n</ul>\n<pre><code>Function.prototype.newBind  = function (context) {\n\n  // 提示错误信息\n  if (typeof this != &#39;function&#39;) {\n    throw new TypeError(&#39;Function.prototype.bind - what is trying to be bound is not callable&#39;);\n  }\n\n  var _this = this;\n\n  // 获取参数\n  var _args = Array.prototype.slice.call(arguments, 1);\n\n  // 利用空函数来防止修改绑定函数的原型，关于 prototype 请查看 prototype 章节\n  var _fNOP = function () {};\n\n  // bind 返回的新函数\n  var _fBound = function () {\n    var _bindArgs = Array.prototype.slice.call(arguments);\n    // 如果返回的 _fBound 被当做 new 的构造函数调用\n    return _this.apply(this instanceof _fBound ? this : context, args.concat(_bindArgs));\n  }\n\n  // 让 _fBound 构造的实例继承绑定函数原型中的值，否则会修改绑定函数的原型的值\n  _fNOP.prototype = this.prototype;\n  _fBound.prototype = new _fNOP();\n\n  return _fBound;\n}\n</code></pre>"},{"title":"闭包","date":"2019-02-25T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n说起闭包那么首先先来了解一下js执行环境（execution context）、作用域以及作用域链（scope chain）\n\n### 上下文执行环境\n 执行环境定义了变量或者函数有权访问的其他数据，决定了各自的行为\n\n### 组成部分\n1. 变量对象（varible object）：存放当前执行环境中定义的变量和函数，**如果当前环境是函数则将活动对象（activation object）作为变量对象，但不包括函数表达式**\n2. 作用域链：当代码在执行环境中运行时，会创建**变量对象**的一个**作用域链（词法作用域）**，能够保证对执行环境中所有变量和函数有序访问\n3. this指向：根据调用的规则不同this指向不同产生的执行环境上下文不同\n\n### 类型\n\n1. 全局执行环境\n2. 局部执行环境\n\n### 执行过程  \n\n1. 在全局代码执行前, js引擎就会创建一个栈来存储管理所有的执行上下文对象\n2. 在全局执行环境(window)确定后, 将其push到栈中\n3. 在函数执行环境创建后, 将其push到栈中\n4. 在当前函数执行完后,将栈顶的对象pop\n5. 当所有的代码执行完后, 栈中只剩下window\n\n```\n  // demo1:  先执行变量提升, 再执行函数提升\n  function a() {}\n  var a\n  console.log(typeof a) // 'function'\n\n  //demo2:\n  if (!(b in window)) {\n    var b = 1\n  }\n  console.log(b) // undefined\n\n  // demo3:\n  console.log(a);    // f a() {console.log(10)}\n  console.log(a());    //  undefined\n  var a = 1;\n  function a() {\n    console.log('nihao') //nihao\n  }\n  console.log(a)   //1\n  a = 3;\n  console.log(a());  //a is not a function;\n\n  // demo4:\n  function fun(){ var a=b=3;}\n  console.log(b)//B是全局变量 var a是局部变量  b=3;a=undefine\n```\n\n### 作用域\n- 概念： 执行上下文中声明的变量和声明的作用范围。\n- 分类：\n  - 全局作用域\n  - 函数作用域\n  - es6块级作用域\n- 作用： 隔离变量，不同作用域下同名变量不会有冲突\n- 区别：\n  - 创建时机不同，全局执行上下文是在全局作用域确定后js代码执行前创建而函数执行上下文是在调用函数时, 函数体代码执行之前创建\n  - 作用域是静态的，执行上下文是动态的\n\n### 作用域链\n- 从内到外多个作用域形成的链\n- 包含父级(**[[scope]]**)变量对象与作用域链和自身的变量对象(**如果是函数则为活动对象AO**)\n\n```\nvar x = 10;\nfunction fn () {\n  console.log(x);\n}\nfunction show (fn) {\n  var x = 20;\n  fn();\n}\nshow(fn) // 10;\n```\n\n### 闭包概念 \n\n能够访问其他函数内变量的函数，是一个比较特殊的作用域函数\n\n### 闭包作用\n\n匿名自执行函数,减少内存消耗\n\n```\n(function ($) {})(jQuery);\n```\n\n缓存计算结果\n\n```\n  var fun1 = function(){\n    var a=1;\n    return function fun2(){\n      a++;\n      alert(a)\n    }\n  }\n  var b = fun1();\n  b(); // 2       \n  b(); // 3           \n```\n\n封装,管理私有方法和变量，避免全局变量冲突污染\n\n```\n  var person = function(){    \n    var name = \"renbo\";       \n    return {    \n      getName : function(){    \n        return name;    \n      },    \n      setName : function(newName){    \n        name = newName;    \n      }    \n    }    \n  }() \n```\n实现类和继承等等\n\n### 闭包缺点\n\n1. 由于变量对象一直在内存中引用不被释放，导致内存过高。\n2. 由于多个函数共享一个父级，当父级有变量更改时，所有子函数受影响\n","source":"_posts/javascript/closure.md","raw":"---\ntitle: 闭包\ndate: 2019-2-25 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n说起闭包那么首先先来了解一下js执行环境（execution context）、作用域以及作用域链（scope chain）\n\n### 上下文执行环境\n 执行环境定义了变量或者函数有权访问的其他数据，决定了各自的行为\n\n### 组成部分\n1. 变量对象（varible object）：存放当前执行环境中定义的变量和函数，**如果当前环境是函数则将活动对象（activation object）作为变量对象，但不包括函数表达式**\n2. 作用域链：当代码在执行环境中运行时，会创建**变量对象**的一个**作用域链（词法作用域）**，能够保证对执行环境中所有变量和函数有序访问\n3. this指向：根据调用的规则不同this指向不同产生的执行环境上下文不同\n\n### 类型\n\n1. 全局执行环境\n2. 局部执行环境\n\n### 执行过程  \n\n1. 在全局代码执行前, js引擎就会创建一个栈来存储管理所有的执行上下文对象\n2. 在全局执行环境(window)确定后, 将其push到栈中\n3. 在函数执行环境创建后, 将其push到栈中\n4. 在当前函数执行完后,将栈顶的对象pop\n5. 当所有的代码执行完后, 栈中只剩下window\n\n```\n  // demo1:  先执行变量提升, 再执行函数提升\n  function a() {}\n  var a\n  console.log(typeof a) // 'function'\n\n  //demo2:\n  if (!(b in window)) {\n    var b = 1\n  }\n  console.log(b) // undefined\n\n  // demo3:\n  console.log(a);    // f a() {console.log(10)}\n  console.log(a());    //  undefined\n  var a = 1;\n  function a() {\n    console.log('nihao') //nihao\n  }\n  console.log(a)   //1\n  a = 3;\n  console.log(a());  //a is not a function;\n\n  // demo4:\n  function fun(){ var a=b=3;}\n  console.log(b)//B是全局变量 var a是局部变量  b=3;a=undefine\n```\n\n### 作用域\n- 概念： 执行上下文中声明的变量和声明的作用范围。\n- 分类：\n  - 全局作用域\n  - 函数作用域\n  - es6块级作用域\n- 作用： 隔离变量，不同作用域下同名变量不会有冲突\n- 区别：\n  - 创建时机不同，全局执行上下文是在全局作用域确定后js代码执行前创建而函数执行上下文是在调用函数时, 函数体代码执行之前创建\n  - 作用域是静态的，执行上下文是动态的\n\n### 作用域链\n- 从内到外多个作用域形成的链\n- 包含父级(**[[scope]]**)变量对象与作用域链和自身的变量对象(**如果是函数则为活动对象AO**)\n\n```\nvar x = 10;\nfunction fn () {\n  console.log(x);\n}\nfunction show (fn) {\n  var x = 20;\n  fn();\n}\nshow(fn) // 10;\n```\n\n### 闭包概念 \n\n能够访问其他函数内变量的函数，是一个比较特殊的作用域函数\n\n### 闭包作用\n\n匿名自执行函数,减少内存消耗\n\n```\n(function ($) {})(jQuery);\n```\n\n缓存计算结果\n\n```\n  var fun1 = function(){\n    var a=1;\n    return function fun2(){\n      a++;\n      alert(a)\n    }\n  }\n  var b = fun1();\n  b(); // 2       \n  b(); // 3           \n```\n\n封装,管理私有方法和变量，避免全局变量冲突污染\n\n```\n  var person = function(){    \n    var name = \"renbo\";       \n    return {    \n      getName : function(){    \n        return name;    \n      },    \n      setName : function(newName){    \n        name = newName;    \n      }    \n    }    \n  }() \n```\n实现类和继承等等\n\n### 闭包缺点\n\n1. 由于变量对象一直在内存中引用不被释放，导致内存过高。\n2. 由于多个函数共享一个父级，当父级有变量更改时，所有子函数受影响\n","slug":"javascript/closure","published":1,"updated":"2019-08-26T16:46:27.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7a000skuu6hp38zhi6","content":"<p>说起闭包那么首先先来了解一下js执行环境（execution context）、作用域以及作用域链（scope chain）</p>\n<h3 id=\"上下文执行环境\"><a href=\"#上下文执行环境\" class=\"headerlink\" title=\"上下文执行环境\"></a>上下文执行环境</h3><p> 执行环境定义了变量或者函数有权访问的其他数据，决定了各自的行为</p>\n<h3 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h3><ol>\n<li>变量对象（varible object）：存放当前执行环境中定义的变量和函数，<strong>如果当前环境是函数则将活动对象（activation object）作为变量对象，但不包括函数表达式</strong></li>\n<li>作用域链：当代码在执行环境中运行时，会创建<strong>变量对象</strong>的一个<strong>作用域链（词法作用域）</strong>，能够保证对执行环境中所有变量和函数有序访问</li>\n<li>this指向：根据调用的规则不同this指向不同产生的执行环境上下文不同</li>\n</ol>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ol>\n<li>全局执行环境</li>\n<li>局部执行环境</li>\n</ol>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li>在全局代码执行前, js引擎就会创建一个栈来存储管理所有的执行上下文对象</li>\n<li>在全局执行环境(window)确定后, 将其push到栈中</li>\n<li>在函数执行环境创建后, 将其push到栈中</li>\n<li>在当前函数执行完后,将栈顶的对象pop</li>\n<li>当所有的代码执行完后, 栈中只剩下window</li>\n</ol>\n<pre><code>  // demo1:  先执行变量提升, 再执行函数提升\n  function a() {}\n  var a\n  console.log(typeof a) // &#39;function&#39;\n\n  //demo2:\n  if (!(b in window)) {\n    var b = 1\n  }\n  console.log(b) // undefined\n\n  // demo3:\n  console.log(a);    // f a() {console.log(10)}\n  console.log(a());    //  undefined\n  var a = 1;\n  function a() {\n    console.log(&#39;nihao&#39;) //nihao\n  }\n  console.log(a)   //1\n  a = 3;\n  console.log(a());  //a is not a function;\n\n  // demo4:\n  function fun(){ var a=b=3;}\n  console.log(b)//B是全局变量 var a是局部变量  b=3;a=undefine</code></pre><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>概念： 执行上下文中声明的变量和声明的作用范围。</li>\n<li>分类：<ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li>es6块级作用域</li>\n</ul>\n</li>\n<li>作用： 隔离变量，不同作用域下同名变量不会有冲突</li>\n<li>区别：<ul>\n<li>创建时机不同，全局执行上下文是在全局作用域确定后js代码执行前创建而函数执行上下文是在调用函数时, 函数体代码执行之前创建</li>\n<li>作用域是静态的，执行上下文是动态的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>从内到外多个作用域形成的链</li>\n<li>包含父级(<strong>[[scope]]</strong>)变量对象与作用域链和自身的变量对象(<strong>如果是函数则为活动对象AO</strong>)</li>\n</ul>\n<pre><code>var x = 10;\nfunction fn () {\n  console.log(x);\n}\nfunction show (fn) {\n  var x = 20;\n  fn();\n}\nshow(fn) // 10;</code></pre><h3 id=\"闭包概念\"><a href=\"#闭包概念\" class=\"headerlink\" title=\"闭包概念\"></a>闭包概念</h3><p>能够访问其他函数内变量的函数，是一个比较特殊的作用域函数</p>\n<h3 id=\"闭包作用\"><a href=\"#闭包作用\" class=\"headerlink\" title=\"闭包作用\"></a>闭包作用</h3><p>匿名自执行函数,减少内存消耗</p>\n<pre><code>(function ($) {})(jQuery);</code></pre><p>缓存计算结果</p>\n<pre><code>  var fun1 = function(){\n    var a=1;\n    return function fun2(){\n      a++;\n      alert(a)\n    }\n  }\n  var b = fun1();\n  b(); // 2       \n  b(); // 3           </code></pre><p>封装,管理私有方法和变量，避免全局变量冲突污染</p>\n<pre><code>  var person = function(){    \n    var name = &quot;renbo&quot;;       \n    return {    \n      getName : function(){    \n        return name;    \n      },    \n      setName : function(newName){    \n        name = newName;    \n      }    \n    }    \n  }() </code></pre><p>实现类和继承等等</p>\n<h3 id=\"闭包缺点\"><a href=\"#闭包缺点\" class=\"headerlink\" title=\"闭包缺点\"></a>闭包缺点</h3><ol>\n<li>由于变量对象一直在内存中引用不被释放，导致内存过高。</li>\n<li>由于多个函数共享一个父级，当父级有变量更改时，所有子函数受影响</li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>说起闭包那么首先先来了解一下js执行环境（execution context）、作用域以及作用域链（scope chain）</p>\n<h3 id=\"上下文执行环境\"><a href=\"#上下文执行环境\" class=\"headerlink\" title=\"上下文执行环境\"></a>上下文执行环境</h3><p> 执行环境定义了变量或者函数有权访问的其他数据，决定了各自的行为</p>\n<h3 id=\"组成部分\"><a href=\"#组成部分\" class=\"headerlink\" title=\"组成部分\"></a>组成部分</h3><ol>\n<li>变量对象（varible object）：存放当前执行环境中定义的变量和函数，<strong>如果当前环境是函数则将活动对象（activation object）作为变量对象，但不包括函数表达式</strong></li>\n<li>作用域链：当代码在执行环境中运行时，会创建<strong>变量对象</strong>的一个<strong>作用域链（词法作用域）</strong>，能够保证对执行环境中所有变量和函数有序访问</li>\n<li>this指向：根据调用的规则不同this指向不同产生的执行环境上下文不同</li>\n</ol>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ol>\n<li>全局执行环境</li>\n<li>局部执行环境</li>\n</ol>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li>在全局代码执行前, js引擎就会创建一个栈来存储管理所有的执行上下文对象</li>\n<li>在全局执行环境(window)确定后, 将其push到栈中</li>\n<li>在函数执行环境创建后, 将其push到栈中</li>\n<li>在当前函数执行完后,将栈顶的对象pop</li>\n<li>当所有的代码执行完后, 栈中只剩下window</li>\n</ol>\n<pre><code>  // demo1:  先执行变量提升, 再执行函数提升\n  function a() {}\n  var a\n  console.log(typeof a) // &#39;function&#39;\n\n  //demo2:\n  if (!(b in window)) {\n    var b = 1\n  }\n  console.log(b) // undefined\n\n  // demo3:\n  console.log(a);    // f a() {console.log(10)}\n  console.log(a());    //  undefined\n  var a = 1;\n  function a() {\n    console.log(&#39;nihao&#39;) //nihao\n  }\n  console.log(a)   //1\n  a = 3;\n  console.log(a());  //a is not a function;\n\n  // demo4:\n  function fun(){ var a=b=3;}\n  console.log(b)//B是全局变量 var a是局部变量  b=3;a=undefine</code></pre><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>概念： 执行上下文中声明的变量和声明的作用范围。</li>\n<li>分类：<ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li>es6块级作用域</li>\n</ul>\n</li>\n<li>作用： 隔离变量，不同作用域下同名变量不会有冲突</li>\n<li>区别：<ul>\n<li>创建时机不同，全局执行上下文是在全局作用域确定后js代码执行前创建而函数执行上下文是在调用函数时, 函数体代码执行之前创建</li>\n<li>作用域是静态的，执行上下文是动态的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>从内到外多个作用域形成的链</li>\n<li>包含父级(<strong>[[scope]]</strong>)变量对象与作用域链和自身的变量对象(<strong>如果是函数则为活动对象AO</strong>)</li>\n</ul>\n<pre><code>var x = 10;\nfunction fn () {\n  console.log(x);\n}\nfunction show (fn) {\n  var x = 20;\n  fn();\n}\nshow(fn) // 10;</code></pre><h3 id=\"闭包概念\"><a href=\"#闭包概念\" class=\"headerlink\" title=\"闭包概念\"></a>闭包概念</h3><p>能够访问其他函数内变量的函数，是一个比较特殊的作用域函数</p>\n<h3 id=\"闭包作用\"><a href=\"#闭包作用\" class=\"headerlink\" title=\"闭包作用\"></a>闭包作用</h3><p>匿名自执行函数,减少内存消耗</p>\n<pre><code>(function ($) {})(jQuery);</code></pre><p>缓存计算结果</p>\n<pre><code>  var fun1 = function(){\n    var a=1;\n    return function fun2(){\n      a++;\n      alert(a)\n    }\n  }\n  var b = fun1();\n  b(); // 2       \n  b(); // 3           </code></pre><p>封装,管理私有方法和变量，避免全局变量冲突污染</p>\n<pre><code>  var person = function(){    \n    var name = &quot;renbo&quot;;       \n    return {    \n      getName : function(){    \n        return name;    \n      },    \n      setName : function(newName){    \n        name = newName;    \n      }    \n    }    \n  }() </code></pre><p>实现类和继承等等</p>\n<h3 id=\"闭包缺点\"><a href=\"#闭包缺点\" class=\"headerlink\" title=\"闭包缺点\"></a>闭包缺点</h3><ol>\n<li>由于变量对象一直在内存中引用不被释放，导致内存过高。</li>\n<li>由于多个函数共享一个父级，当父级有变量更改时，所有子函数受影响</li>\n</ol>\n"},{"title":"call 和 apply","date":"2019-04-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n谈起 call 和 apply 这两个 Function.prototype 上的方法可能很熟悉了，它在继承，改变this指针上有很多的应用场景。接下来我们简单的来重新回忆一下 call 和 apply 这两个函数的功能 <br/>\n\n### 例子一\n\n```\nlet obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.call(obj) //20\n\n```\n\n### 例子二\n\n```\ndocument.getElementById( 'element' ).onclick = function(){\n  let func = function(){ \n      console.log ( this ); // 指向element元素\n  } \n  func.call(this);\n}; \n```\n\n\n### 例子三\n\n```\nfunction FunA (val) {\n  this.value = val;\n}\n\nfunction FunB () {\n  FunA.apply(this, arguments);\n}\n\nFunB.prototype.getValue = function () {\n  return this.value\n}\n\nlet funb = new FunB(20);\nconsole.log(funb.getValue()) //20\n```\n经过上面的例子我们可以直观的知道call apply 的作用大部分都是用作改变this的指针。那么接下来我们来模拟 call apply 实现简单的一下这两个函数<br/>\n\n### 模拟实现第一步\n\n实现思路<br/>\n1、将函数设为对象的属性用来改变 this 指向<br/>\n2、调用对应函数<br/>\n3、删除对象的函数<br/>\n\n接下来我们改造一下例子一的函数<br/>\n```\nlet obj = {\n  value: 20,\n  fun: function () {\n    this.value\n  }\n}\n\nobj.fun() // 20\ndelete obj.fun\n\nconsole.log(obj) // {value: 20}\n```\n\n接下来简单的把上面的函数封装一下<br/>\n```\nFunction.prototype.newCall = function (context) {\n  context.fn = this;\n  context.fn();\n  delete context.fn;\n}\n\n// 通过例子一测试\nlet obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.newCall(obj) // 20\n```\n\n### 模拟实现第二步\n第一步的我们只实现了基础。没有考虑参数的情况。call，apply 的基本区别就是在参数上 call 参数数量不确定，apply 只接受两个参数。接下来我们继续优化上面的例子\n\n1、将函数设为对象的属性用来改变 this 指向<br/>\n2、调用对应函数<br/>\n3、删除对象的函数<br/>\n4、取出不定长的参数放到执行的函数里面<br/>\n\n```\nFunction.prototype.newCall = function (context, ...args) {\n\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === 'object' ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newCall(obj, 'renbo', 27); \n```\n\n通过以上 call 的实现我们对apply的实现应该说也清楚了， 上述说过call 和 apply 的区别就在与参数上面，通过ES6实现的方法实际上 call, apply 一样<br/>\n\n### 模拟实现 apply\n```\nFunction.prototype.newApply = function (context, args) {\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === 'object' ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newApply(obj, ['renbo', 27]); \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/call.md","raw":"---\ntitle: call 和 apply\ndate: 2019-4-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n谈起 call 和 apply 这两个 Function.prototype 上的方法可能很熟悉了，它在继承，改变this指针上有很多的应用场景。接下来我们简单的来重新回忆一下 call 和 apply 这两个函数的功能 <br/>\n\n### 例子一\n\n```\nlet obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.call(obj) //20\n\n```\n\n### 例子二\n\n```\ndocument.getElementById( 'element' ).onclick = function(){\n  let func = function(){ \n      console.log ( this ); // 指向element元素\n  } \n  func.call(this);\n}; \n```\n\n\n### 例子三\n\n```\nfunction FunA (val) {\n  this.value = val;\n}\n\nfunction FunB () {\n  FunA.apply(this, arguments);\n}\n\nFunB.prototype.getValue = function () {\n  return this.value\n}\n\nlet funb = new FunB(20);\nconsole.log(funb.getValue()) //20\n```\n经过上面的例子我们可以直观的知道call apply 的作用大部分都是用作改变this的指针。那么接下来我们来模拟 call apply 实现简单的一下这两个函数<br/>\n\n### 模拟实现第一步\n\n实现思路<br/>\n1、将函数设为对象的属性用来改变 this 指向<br/>\n2、调用对应函数<br/>\n3、删除对象的函数<br/>\n\n接下来我们改造一下例子一的函数<br/>\n```\nlet obj = {\n  value: 20,\n  fun: function () {\n    this.value\n  }\n}\n\nobj.fun() // 20\ndelete obj.fun\n\nconsole.log(obj) // {value: 20}\n```\n\n接下来简单的把上面的函数封装一下<br/>\n```\nFunction.prototype.newCall = function (context) {\n  context.fn = this;\n  context.fn();\n  delete context.fn;\n}\n\n// 通过例子一测试\nlet obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.newCall(obj) // 20\n```\n\n### 模拟实现第二步\n第一步的我们只实现了基础。没有考虑参数的情况。call，apply 的基本区别就是在参数上 call 参数数量不确定，apply 只接受两个参数。接下来我们继续优化上面的例子\n\n1、将函数设为对象的属性用来改变 this 指向<br/>\n2、调用对应函数<br/>\n3、删除对象的函数<br/>\n4、取出不定长的参数放到执行的函数里面<br/>\n\n```\nFunction.prototype.newCall = function (context, ...args) {\n\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === 'object' ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newCall(obj, 'renbo', 27); \n```\n\n通过以上 call 的实现我们对apply的实现应该说也清楚了， 上述说过call 和 apply 的区别就在与参数上面，通过ES6实现的方法实际上 call, apply 一样<br/>\n\n### 模拟实现 apply\n```\nFunction.prototype.newApply = function (context, args) {\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === 'object' ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newApply(obj, ['renbo', 27]); \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/call","published":1,"updated":"2019-08-26T16:46:27.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7c000vkuu6bq4sckjx","content":"<p>谈起 call 和 apply 这两个 Function.prototype 上的方法可能很熟悉了，它在继承，改变this指针上有很多的应用场景。接下来我们简单的来重新回忆一下 call 和 apply 这两个函数的功能 <br></p>\n<h3 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h3><pre><code>let obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.call(obj) //20\n</code></pre><h3 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h3><pre><code>document.getElementById( &#39;element&#39; ).onclick = function(){\n  let func = function(){ \n      console.log ( this ); // 指向element元素\n  } \n  func.call(this);\n}; </code></pre><h3 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h3><pre><code>function FunA (val) {\n  this.value = val;\n}\n\nfunction FunB () {\n  FunA.apply(this, arguments);\n}\n\nFunB.prototype.getValue = function () {\n  return this.value\n}\n\nlet funb = new FunB(20);\nconsole.log(funb.getValue()) //20</code></pre><p>经过上面的例子我们可以直观的知道call apply 的作用大部分都是用作改变this的指针。那么接下来我们来模拟 call apply 实现简单的一下这两个函数<br></p>\n<h3 id=\"模拟实现第一步\"><a href=\"#模拟实现第一步\" class=\"headerlink\" title=\"模拟实现第一步\"></a>模拟实现第一步</h3><p>实现思路<br><br>1、将函数设为对象的属性用来改变 this 指向<br><br>2、调用对应函数<br><br>3、删除对象的函数<br></p>\n<p>接下来我们改造一下例子一的函数<br></p>\n<pre><code>let obj = {\n  value: 20,\n  fun: function () {\n    this.value\n  }\n}\n\nobj.fun() // 20\ndelete obj.fun\n\nconsole.log(obj) // {value: 20}</code></pre><p>接下来简单的把上面的函数封装一下<br></p>\n<pre><code>Function.prototype.newCall = function (context) {\n  context.fn = this;\n  context.fn();\n  delete context.fn;\n}\n\n// 通过例子一测试\nlet obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.newCall(obj) // 20</code></pre><h3 id=\"模拟实现第二步\"><a href=\"#模拟实现第二步\" class=\"headerlink\" title=\"模拟实现第二步\"></a>模拟实现第二步</h3><p>第一步的我们只实现了基础。没有考虑参数的情况。call，apply 的基本区别就是在参数上 call 参数数量不确定，apply 只接受两个参数。接下来我们继续优化上面的例子</p>\n<p>1、将函数设为对象的属性用来改变 this 指向<br><br>2、调用对应函数<br><br>3、删除对象的函数<br><br>4、取出不定长的参数放到执行的函数里面<br></p>\n<pre><code>Function.prototype.newCall = function (context, ...args) {\n\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === &#39;object&#39; ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newCall(obj, &#39;renbo&#39;, 27); </code></pre><p>通过以上 call 的实现我们对apply的实现应该说也清楚了， 上述说过call 和 apply 的区别就在与参数上面，通过ES6实现的方法实际上 call, apply 一样<br></p>\n<h3 id=\"模拟实现-apply\"><a href=\"#模拟实现-apply\" class=\"headerlink\" title=\"模拟实现 apply\"></a>模拟实现 apply</h3><pre><code>Function.prototype.newApply = function (context, args) {\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === &#39;object&#39; ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newApply(obj, [&#39;renbo&#39;, 27]); </code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>谈起 call 和 apply 这两个 Function.prototype 上的方法可能很熟悉了，它在继承，改变this指针上有很多的应用场景。接下来我们简单的来重新回忆一下 call 和 apply 这两个函数的功能 <br></p>\n<h3 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h3><pre><code>let obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.call(obj) //20\n</code></pre><h3 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h3><pre><code>document.getElementById( &#39;element&#39; ).onclick = function(){\n  let func = function(){ \n      console.log ( this ); // 指向element元素\n  } \n  func.call(this);\n}; </code></pre><h3 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h3><pre><code>function FunA (val) {\n  this.value = val;\n}\n\nfunction FunB () {\n  FunA.apply(this, arguments);\n}\n\nFunB.prototype.getValue = function () {\n  return this.value\n}\n\nlet funb = new FunB(20);\nconsole.log(funb.getValue()) //20</code></pre><p>经过上面的例子我们可以直观的知道call apply 的作用大部分都是用作改变this的指针。那么接下来我们来模拟 call apply 实现简单的一下这两个函数<br></p>\n<h3 id=\"模拟实现第一步\"><a href=\"#模拟实现第一步\" class=\"headerlink\" title=\"模拟实现第一步\"></a>模拟实现第一步</h3><p>实现思路<br><br>1、将函数设为对象的属性用来改变 this 指向<br><br>2、调用对应函数<br><br>3、删除对象的函数<br></p>\n<p>接下来我们改造一下例子一的函数<br></p>\n<pre><code>let obj = {\n  value: 20,\n  fun: function () {\n    this.value\n  }\n}\n\nobj.fun() // 20\ndelete obj.fun\n\nconsole.log(obj) // {value: 20}</code></pre><p>接下来简单的把上面的函数封装一下<br></p>\n<pre><code>Function.prototype.newCall = function (context) {\n  context.fn = this;\n  context.fn();\n  delete context.fn;\n}\n\n// 通过例子一测试\nlet obj = {\n  value : 20\n}\n\nfunction fun () {\n  console.log(this.value)\n}\n\nfun.newCall(obj) // 20</code></pre><h3 id=\"模拟实现第二步\"><a href=\"#模拟实现第二步\" class=\"headerlink\" title=\"模拟实现第二步\"></a>模拟实现第二步</h3><p>第一步的我们只实现了基础。没有考虑参数的情况。call，apply 的基本区别就是在参数上 call 参数数量不确定，apply 只接受两个参数。接下来我们继续优化上面的例子</p>\n<p>1、将函数设为对象的属性用来改变 this 指向<br><br>2、调用对应函数<br><br>3、删除对象的函数<br><br>4、取出不定长的参数放到执行的函数里面<br></p>\n<pre><code>Function.prototype.newCall = function (context, ...args) {\n\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === &#39;object&#39; ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newCall(obj, &#39;renbo&#39;, 27); </code></pre><p>通过以上 call 的实现我们对apply的实现应该说也清楚了， 上述说过call 和 apply 的区别就在与参数上面，通过ES6实现的方法实际上 call, apply 一样<br></p>\n<h3 id=\"模拟实现-apply\"><a href=\"#模拟实现-apply\" class=\"headerlink\" title=\"模拟实现 apply\"></a>模拟实现 apply</h3><pre><code>Function.prototype.newApply = function (context, args) {\n  // 如果传入参数 this 为 null，则默认为当前宿主环境\n  let ec = typeof window === &#39;object&#39; ? window : global;\n\n  // 防止方法冲突覆盖\n  let fn = Symbol();\n  context = context || ec;\n\n  // 改变 this\n  context[fn] = this;\n\n  // 将参数放入函数内\n  let result = context[fn](...args);\n\n  // 删除对象中的函数\n  delete context[fn];\n\n  return result;\n}\n\n// 测试一下\nlet obj = {\n  value: 1\n};\nfunction bar(name, age) {\n  console.log(name);\n  console.log(age);\n  console.log(this.value);\n}\n\nbar.newApply(obj, [&#39;renbo&#39;, 27]); </code></pre>"},{"title":"函数节流与抖动","date":"2019-05-15T04:32:09.000Z","top":true,"cover":true,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 浏览器内核\n\n说起函数的节流与抖动这个老生长谈的话题，我们就需要了解一下关于浏览器的知识\n\n浏览器有各种进程，来保证浏览器正常的、流畅的呈现在用户的眼前。例如渲染进程（也就是浏览器的内核）是非常重要的一个进程，其中包含了很多的线程\n\n```\nGUI渲染线程(负责渲染浏览器界面，解析HTML,CSS,构建DOM树和RenderObject树，布局和绘制等)\n\nJS引擎线程(JS内核，负责处理JavaScript脚本程序)\n\n事件触发线程(归属于浏览器而不是JS引擎，用来控制事件循环)\n\n定时触发器线程(传说中的setTimeout和setInterval所在的线程)\n\n异步http请求线程(在XMLHttpRequest在连接后是通过浏览器新型一个线程请求)\n```\n\n这里我们大概了解一下着几个概念，关于更过的相关知识会在后续的文章中介绍\n\n\n### 请求过程\n\n我们先来看下面一张来至 W3C 的图\n\n<img src=\"/images/timestamp-diagram.svg\"></img>\n\n\n从图中我们看到处理模型大概分为如下几个阶段\n- DNS 查询\n- TCP 连接\n- HTTP 请求即响应\n- 服务器响应\n- 客户端渲染\n\n这篇文章我们不讨论 Resource Timing 阶段，会在后续文章前端性能的时候重新提起\n\n### 渲染过程\n\n通过第五个阶段客户端渲染简单的回忆一下网页的生成过程，大致分为几个步骤\n\n- HTML解析器解析成DOM 树\n- CSS解析器解析成CSSOM 树\n- 结合DOM树和CSSOM树，生成一棵渲染树(Render Tree)\n- 生成布局（Layout），根据渲染树来布局，以计算每个节点的几何信息\n- 最后一步是绘制（Paint），使用最终渲染树将像素渲染到在屏幕上\n\n\n<img src=\"/images/render-process.jpg\">\n\n通过上面的总结我们解析每一个步骤能更加深入的了解浏览器渲染过程\n\n### HTML 解析器解析过程\n\nHTML 解析器构建 DOM 树，实际上是经过下面几个步骤\n\n```\n字节 -> 字符 -> 令牌 -> 节点对象 -> 对象模型\n\n编码阶段将 HTML 的原始字节数据转换为文件指定编码\n\n令牌阶段根据HTML规范来将字符串转换成各种令牌也就是标签节点\n\n生成节点对象阶段是根据每个令牌转换定义其属性和规则的对象（节点对象）\n\n最后阶段 DOM 树构建完成，整个对象集合就像是一棵树形结构（对象模型）\n```\n\n下面通过代码和图片来解释上面的步骤\n\n```\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title></title>\n  </head>\n  <body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"\"></div>\n  </body>\n</html>\n```\n\n<img src=\"/images/dom-render.jpg\" />\n\n### CSS 解析过程\n\n浏览器获得 CSS 文件的数据后 CSS 解析器根据具体的样式将渲染 CSSDOM 树\n\n<img src=\"/images/css-dom-render.jpg\" />\n\n### 渲染树渲染\n\n构建 两个树之后渲染树出场，浏览器会先从DOM树的根节点开始遍历，对每个可见节点，找到对应的 CSS 样式规则，进行匹配形成构建完成的渲染树\n\n<img src=\"/images/render-tree.jpg\">\n\n\n渲染树构建后浏览器根据节点对象的规则进行flow（布局）阶段，布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置最后生成我们大家知道的浏览器盒模型\n\n\n最后当Layout布局事件完成后，浏览器会立即发出Paint Setup与Paint事件，开始将渲染树绘制成像素，最后渲染到在屏幕上\n\n\n通过上面大致的流程我们知道了浏览器的渲染过程，我们知道网页在生成的时候，至少会渲染一次执行css之后 load 对应 JS 也会进行重新渲染\n\n重新渲染就可能会 reflow + repaint\n\n### 重绘与回流\n\n回流(reflow)： 当render tree中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建\n\n重绘(repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘\n\n回流必定会发生重绘，重绘不一定会引发回流\n\n浏览器的reflow + repaint 在我们设置节点样式时频繁出现，对性能是个巨大的消耗，因为回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流，所以我们经常说尽可能的减少重排次数、重排范围，这样就能呈现给用户更改的感官（关于优化手段会在后续的性能优化文章中介绍）\n\n\n根据上面说了这么多，我们来进入文章的主题**防抖和节流**当我们窗口发生改变，浏览器的滚动条执行scroll，输入框校验，搜索请求接口等这些都会使页面频繁重新渲染，加重浏览器的负担，这是我们通过**防抖和节流**的方式减少触发频率，这样就会大大的提高用户体验\n\n### debounce（防抖）\n\n动作发生一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。\n\nhtml \n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>防抖</title>\n  <style>\n    #container{\n      width: 100%; \n      height: 500px; \n      background: #000; \n      font-size: 50px;\n      color: #fff;\n      line-height: 500px; \n      text-align: center; \n    }\n  </style>\n</head>\n<body>\n  <div id=\"content\"><div>\n  <script src=\"debounce.js\"></script>\n  <script>\n    var count = 1;\n    var container = document.getElementById('container');\n    function getContent(e) {\n      container.innerHTML = count++;\n    };\n    // container.onmousemove = getContent\n    container.onmousemove = debounce(getContent, 500, true);\n  </script>\n</body>\n</html>\n```\n\ndebounce.js \n\n```\n@underscore.js\n\nvar debounce = /** @class */ (function () {\n  \n  /**\n   * @desc 函数防抖\n   * @param {*} func 回调函数\n   * @param {*} wait 延迟执行毫秒数\n   * @param {*} immediate  true 表立即执行，false 表非立即执行\n   */\n  function debounce(func, wait, immediate) {\n\n    // 创建一个标记用来存放定时器的返回值\n    var timeout,result;\n    \n    return function () {\n\n      // 指定this 作用域\n      var context = this;\n      // event 对象\n      var args = arguments;\n\n      // 再次执行事件的时候，清除上一个定时器\n      if (timeout) clearTimeout(timeout);\n      \n      if (immediate) {\n        // 如果已经执行过，将不再执行\n        var callNow = !timeout;\n        timeout = setTimeout(function(){\n          timeout = null;\n        }, wait)\n        \n        if (callNow) result = func.apply(context, args)\n      }\n      else {\n        \n        timeout = setTimeout(function(){\n          func.apply(context, args)\n        }, wait);\n      }\n      // func 这个函数，可能有返回值\n      return result;\n    }\n  }\n\n  return debounce;\n  \n}())\n\n```\n\n\n### throttle\n\n动作执行一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新执行\n\n关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器\n\n使用时间戳\n\n当触发事件的时候，取出当前的时间戳，之后减去之前的时间戳(最一开始值设为 0 )，如果大于设置的时间周期，执行函数并更新当前时间戳，反之就不执行。\n\n```\nvar throttle = /** @class */ (function () {\n  \n  function throttle(func, wait) {\n    var args;\n    var previous = 0;\n  \n    return function() {\n      var now = +new Date();\n      args = arguments;\n      if (now - previous > wait) {\n        func.apply(this, args);\n        previous = now;\n      }\n    }\n  }\n\n  return throttle\n}())\n```\n\n使用定时器\n\n事件触发的时候，设置一个定时器，如果定时器存在，就不执行，等定时器到指定的时间，清空定时器，执行事件\n\n```\nfunction throttle(func, wait) {\n  var timeout;\n  var previous = 0;\n\n  return function() {\n    context = this;\n    args = arguments;\n    if (!timeout) {\n      timeout = setTimeout(function(){\n        timeout = null;\n        func.apply(context, args)\n      }, wait)\n    }\n  }\n}\n```\n\n对比两种实现方式\n\n- 第一种会立刻执行，第二种会在设定的时间后第一次执行\n- 第一种停止触发后不会再执行，第二种停止触发后依然会再执行一次\n\n现在我们要结合上面两种方式实现一个开始触发立刻执行，停止触发的时候还能再执行一次\n\n```\n@underscore.js\n\nvar throttle = /** @class */ (function () {\n\n  /**\n   * throttle 节流\n   * @param {*} func  回调函数\n   * @param {*} wait  执行时间间隔\n   * @param {*} options  如果想忽略开始函数的的调用，传入{leading: false}\n   *                     如果想忽略结尾函数的调用，传入{trailing: false}\n   *                     两者不能共存，否则函数不能执行\n   */\n  function throttle(func, wait, options) {\n\n    var timeout, context, args;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      previous = options.leading === false ? 0 : new Date().getTime();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = new Date().getTime();\n      \n      if (!previous && options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing，没有就开启一个定时器\n        timeout = setTimeout(later, remaining);\n      }\n    };\n    return throttled;\n}\n\n  return throttle\n}())\n```\n\n调用例子\n```\nontainer.onmousemove = throttle(getContent, 1000);\ncontainer.onmousemove = throttle(getContent, 1000, {\n  leading: false\n});\ncontainer.onmousemove = throttle(getContent, 1000, {\n  trailing: false\n});\n```\n\n### 总结\n\n上面的就是函数的节流与抖动的全部，我们在面试和工作中会经常的遇到。这也是性能优化的一种方案。当然还有很多版本比如多 promise 版本的就不再这里叙述了，有兴趣的可以找找技术论坛\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/debounce.md","raw":"---\ntitle: 函数节流与抖动\ndate: 2019-5-15 12:32:09\ntop: true\ncover: true\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n### 浏览器内核\n\n说起函数的节流与抖动这个老生长谈的话题，我们就需要了解一下关于浏览器的知识\n\n浏览器有各种进程，来保证浏览器正常的、流畅的呈现在用户的眼前。例如渲染进程（也就是浏览器的内核）是非常重要的一个进程，其中包含了很多的线程\n\n```\nGUI渲染线程(负责渲染浏览器界面，解析HTML,CSS,构建DOM树和RenderObject树，布局和绘制等)\n\nJS引擎线程(JS内核，负责处理JavaScript脚本程序)\n\n事件触发线程(归属于浏览器而不是JS引擎，用来控制事件循环)\n\n定时触发器线程(传说中的setTimeout和setInterval所在的线程)\n\n异步http请求线程(在XMLHttpRequest在连接后是通过浏览器新型一个线程请求)\n```\n\n这里我们大概了解一下着几个概念，关于更过的相关知识会在后续的文章中介绍\n\n\n### 请求过程\n\n我们先来看下面一张来至 W3C 的图\n\n<img src=\"/images/timestamp-diagram.svg\"></img>\n\n\n从图中我们看到处理模型大概分为如下几个阶段\n- DNS 查询\n- TCP 连接\n- HTTP 请求即响应\n- 服务器响应\n- 客户端渲染\n\n这篇文章我们不讨论 Resource Timing 阶段，会在后续文章前端性能的时候重新提起\n\n### 渲染过程\n\n通过第五个阶段客户端渲染简单的回忆一下网页的生成过程，大致分为几个步骤\n\n- HTML解析器解析成DOM 树\n- CSS解析器解析成CSSOM 树\n- 结合DOM树和CSSOM树，生成一棵渲染树(Render Tree)\n- 生成布局（Layout），根据渲染树来布局，以计算每个节点的几何信息\n- 最后一步是绘制（Paint），使用最终渲染树将像素渲染到在屏幕上\n\n\n<img src=\"/images/render-process.jpg\">\n\n通过上面的总结我们解析每一个步骤能更加深入的了解浏览器渲染过程\n\n### HTML 解析器解析过程\n\nHTML 解析器构建 DOM 树，实际上是经过下面几个步骤\n\n```\n字节 -> 字符 -> 令牌 -> 节点对象 -> 对象模型\n\n编码阶段将 HTML 的原始字节数据转换为文件指定编码\n\n令牌阶段根据HTML规范来将字符串转换成各种令牌也就是标签节点\n\n生成节点对象阶段是根据每个令牌转换定义其属性和规则的对象（节点对象）\n\n最后阶段 DOM 树构建完成，整个对象集合就像是一棵树形结构（对象模型）\n```\n\n下面通过代码和图片来解释上面的步骤\n\n```\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title></title>\n  </head>\n  <body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"\"></div>\n  </body>\n</html>\n```\n\n<img src=\"/images/dom-render.jpg\" />\n\n### CSS 解析过程\n\n浏览器获得 CSS 文件的数据后 CSS 解析器根据具体的样式将渲染 CSSDOM 树\n\n<img src=\"/images/css-dom-render.jpg\" />\n\n### 渲染树渲染\n\n构建 两个树之后渲染树出场，浏览器会先从DOM树的根节点开始遍历，对每个可见节点，找到对应的 CSS 样式规则，进行匹配形成构建完成的渲染树\n\n<img src=\"/images/render-tree.jpg\">\n\n\n渲染树构建后浏览器根据节点对象的规则进行flow（布局）阶段，布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置最后生成我们大家知道的浏览器盒模型\n\n\n最后当Layout布局事件完成后，浏览器会立即发出Paint Setup与Paint事件，开始将渲染树绘制成像素，最后渲染到在屏幕上\n\n\n通过上面大致的流程我们知道了浏览器的渲染过程，我们知道网页在生成的时候，至少会渲染一次执行css之后 load 对应 JS 也会进行重新渲染\n\n重新渲染就可能会 reflow + repaint\n\n### 重绘与回流\n\n回流(reflow)： 当render tree中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建\n\n重绘(repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘\n\n回流必定会发生重绘，重绘不一定会引发回流\n\n浏览器的reflow + repaint 在我们设置节点样式时频繁出现，对性能是个巨大的消耗，因为回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流，所以我们经常说尽可能的减少重排次数、重排范围，这样就能呈现给用户更改的感官（关于优化手段会在后续的性能优化文章中介绍）\n\n\n根据上面说了这么多，我们来进入文章的主题**防抖和节流**当我们窗口发生改变，浏览器的滚动条执行scroll，输入框校验，搜索请求接口等这些都会使页面频繁重新渲染，加重浏览器的负担，这是我们通过**防抖和节流**的方式减少触发频率，这样就会大大的提高用户体验\n\n### debounce（防抖）\n\n动作发生一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。\n\nhtml \n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>防抖</title>\n  <style>\n    #container{\n      width: 100%; \n      height: 500px; \n      background: #000; \n      font-size: 50px;\n      color: #fff;\n      line-height: 500px; \n      text-align: center; \n    }\n  </style>\n</head>\n<body>\n  <div id=\"content\"><div>\n  <script src=\"debounce.js\"></script>\n  <script>\n    var count = 1;\n    var container = document.getElementById('container');\n    function getContent(e) {\n      container.innerHTML = count++;\n    };\n    // container.onmousemove = getContent\n    container.onmousemove = debounce(getContent, 500, true);\n  </script>\n</body>\n</html>\n```\n\ndebounce.js \n\n```\n@underscore.js\n\nvar debounce = /** @class */ (function () {\n  \n  /**\n   * @desc 函数防抖\n   * @param {*} func 回调函数\n   * @param {*} wait 延迟执行毫秒数\n   * @param {*} immediate  true 表立即执行，false 表非立即执行\n   */\n  function debounce(func, wait, immediate) {\n\n    // 创建一个标记用来存放定时器的返回值\n    var timeout,result;\n    \n    return function () {\n\n      // 指定this 作用域\n      var context = this;\n      // event 对象\n      var args = arguments;\n\n      // 再次执行事件的时候，清除上一个定时器\n      if (timeout) clearTimeout(timeout);\n      \n      if (immediate) {\n        // 如果已经执行过，将不再执行\n        var callNow = !timeout;\n        timeout = setTimeout(function(){\n          timeout = null;\n        }, wait)\n        \n        if (callNow) result = func.apply(context, args)\n      }\n      else {\n        \n        timeout = setTimeout(function(){\n          func.apply(context, args)\n        }, wait);\n      }\n      // func 这个函数，可能有返回值\n      return result;\n    }\n  }\n\n  return debounce;\n  \n}())\n\n```\n\n\n### throttle\n\n动作执行一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新执行\n\n关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器\n\n使用时间戳\n\n当触发事件的时候，取出当前的时间戳，之后减去之前的时间戳(最一开始值设为 0 )，如果大于设置的时间周期，执行函数并更新当前时间戳，反之就不执行。\n\n```\nvar throttle = /** @class */ (function () {\n  \n  function throttle(func, wait) {\n    var args;\n    var previous = 0;\n  \n    return function() {\n      var now = +new Date();\n      args = arguments;\n      if (now - previous > wait) {\n        func.apply(this, args);\n        previous = now;\n      }\n    }\n  }\n\n  return throttle\n}())\n```\n\n使用定时器\n\n事件触发的时候，设置一个定时器，如果定时器存在，就不执行，等定时器到指定的时间，清空定时器，执行事件\n\n```\nfunction throttle(func, wait) {\n  var timeout;\n  var previous = 0;\n\n  return function() {\n    context = this;\n    args = arguments;\n    if (!timeout) {\n      timeout = setTimeout(function(){\n        timeout = null;\n        func.apply(context, args)\n      }, wait)\n    }\n  }\n}\n```\n\n对比两种实现方式\n\n- 第一种会立刻执行，第二种会在设定的时间后第一次执行\n- 第一种停止触发后不会再执行，第二种停止触发后依然会再执行一次\n\n现在我们要结合上面两种方式实现一个开始触发立刻执行，停止触发的时候还能再执行一次\n\n```\n@underscore.js\n\nvar throttle = /** @class */ (function () {\n\n  /**\n   * throttle 节流\n   * @param {*} func  回调函数\n   * @param {*} wait  执行时间间隔\n   * @param {*} options  如果想忽略开始函数的的调用，传入{leading: false}\n   *                     如果想忽略结尾函数的调用，传入{trailing: false}\n   *                     两者不能共存，否则函数不能执行\n   */\n  function throttle(func, wait, options) {\n\n    var timeout, context, args;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      previous = options.leading === false ? 0 : new Date().getTime();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = new Date().getTime();\n      \n      if (!previous && options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing，没有就开启一个定时器\n        timeout = setTimeout(later, remaining);\n      }\n    };\n    return throttled;\n}\n\n  return throttle\n}())\n```\n\n调用例子\n```\nontainer.onmousemove = throttle(getContent, 1000);\ncontainer.onmousemove = throttle(getContent, 1000, {\n  leading: false\n});\ncontainer.onmousemove = throttle(getContent, 1000, {\n  trailing: false\n});\n```\n\n### 总结\n\n上面的就是函数的节流与抖动的全部，我们在面试和工作中会经常的遇到。这也是性能优化的一种方案。当然还有很多版本比如多 promise 版本的就不再这里叙述了，有兴趣的可以找找技术论坛\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/debounce","published":1,"updated":"2019-08-26T16:46:27.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7e000zkuu6wa4jz3si","content":"<h3 id=\"浏览器内核\"><a href=\"#浏览器内核\" class=\"headerlink\" title=\"浏览器内核\"></a>浏览器内核</h3><p>说起函数的节流与抖动这个老生长谈的话题，我们就需要了解一下关于浏览器的知识</p>\n<p>浏览器有各种进程，来保证浏览器正常的、流畅的呈现在用户的眼前。例如渲染进程（也就是浏览器的内核）是非常重要的一个进程，其中包含了很多的线程</p>\n<pre><code>GUI渲染线程(负责渲染浏览器界面，解析HTML,CSS,构建DOM树和RenderObject树，布局和绘制等)\n\nJS引擎线程(JS内核，负责处理JavaScript脚本程序)\n\n事件触发线程(归属于浏览器而不是JS引擎，用来控制事件循环)\n\n定时触发器线程(传说中的setTimeout和setInterval所在的线程)\n\n异步http请求线程(在XMLHttpRequest在连接后是通过浏览器新型一个线程请求)</code></pre><p>这里我们大概了解一下着几个概念，关于更过的相关知识会在后续的文章中介绍</p>\n<h3 id=\"请求过程\"><a href=\"#请求过程\" class=\"headerlink\" title=\"请求过程\"></a>请求过程</h3><p>我们先来看下面一张来至 W3C 的图</p>\n<p><img src=\"/images/timestamp-diagram.svg\"></p>\n<p>从图中我们看到处理模型大概分为如下几个阶段</p>\n<ul>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>HTTP 请求即响应</li>\n<li>服务器响应</li>\n<li>客户端渲染</li>\n</ul>\n<p>这篇文章我们不讨论 Resource Timing 阶段，会在后续文章前端性能的时候重新提起</p>\n<h3 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h3><p>通过第五个阶段客户端渲染简单的回忆一下网页的生成过程，大致分为几个步骤</p>\n<ul>\n<li>HTML解析器解析成DOM 树</li>\n<li>CSS解析器解析成CSSOM 树</li>\n<li>结合DOM树和CSSOM树，生成一棵渲染树(Render Tree)</li>\n<li>生成布局（Layout），根据渲染树来布局，以计算每个节点的几何信息</li>\n<li>最后一步是绘制（Paint），使用最终渲染树将像素渲染到在屏幕上</li>\n</ul>\n<img src=\"/images/render-process.jpg\">\n\n<p>通过上面的总结我们解析每一个步骤能更加深入的了解浏览器渲染过程</p>\n<h3 id=\"HTML-解析器解析过程\"><a href=\"#HTML-解析器解析过程\" class=\"headerlink\" title=\"HTML 解析器解析过程\"></a>HTML 解析器解析过程</h3><p>HTML 解析器构建 DOM 树，实际上是经过下面几个步骤</p>\n<pre><code>字节 -&gt; 字符 -&gt; 令牌 -&gt; 节点对象 -&gt; 对象模型\n\n编码阶段将 HTML 的原始字节数据转换为文件指定编码\n\n令牌阶段根据HTML规范来将字符串转换成各种令牌也就是标签节点\n\n生成节点对象阶段是根据每个令牌转换定义其属性和规则的对象（节点对象）\n\n最后阶段 DOM 树构建完成，整个对象集合就像是一棵树形结构（对象模型）</code></pre><p>下面通过代码和图片来解释上面的步骤</p>\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;\n    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hello &lt;span&gt;web performance&lt;/span&gt; students!&lt;/p&gt;\n    &lt;div&gt;&lt;img src=&quot;&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><img src=\"/images/dom-render.jpg\">\n\n<h3 id=\"CSS-解析过程\"><a href=\"#CSS-解析过程\" class=\"headerlink\" title=\"CSS 解析过程\"></a>CSS 解析过程</h3><p>浏览器获得 CSS 文件的数据后 CSS 解析器根据具体的样式将渲染 CSSDOM 树</p>\n<img src=\"/images/css-dom-render.jpg\">\n\n<h3 id=\"渲染树渲染\"><a href=\"#渲染树渲染\" class=\"headerlink\" title=\"渲染树渲染\"></a>渲染树渲染</h3><p>构建 两个树之后渲染树出场，浏览器会先从DOM树的根节点开始遍历，对每个可见节点，找到对应的 CSS 样式规则，进行匹配形成构建完成的渲染树</p>\n<img src=\"/images/render-tree.jpg\">\n\n\n<p>渲染树构建后浏览器根据节点对象的规则进行flow（布局）阶段，布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置最后生成我们大家知道的浏览器盒模型</p>\n<p>最后当Layout布局事件完成后，浏览器会立即发出Paint Setup与Paint事件，开始将渲染树绘制成像素，最后渲染到在屏幕上</p>\n<p>通过上面大致的流程我们知道了浏览器的渲染过程，我们知道网页在生成的时候，至少会渲染一次执行css之后 load 对应 JS 也会进行重新渲染</p>\n<p>重新渲染就可能会 reflow + repaint</p>\n<h3 id=\"重绘与回流\"><a href=\"#重绘与回流\" class=\"headerlink\" title=\"重绘与回流\"></a>重绘与回流</h3><p>回流(reflow)： 当render tree中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建</p>\n<p>重绘(repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘</p>\n<p>回流必定会发生重绘，重绘不一定会引发回流</p>\n<p>浏览器的reflow + repaint 在我们设置节点样式时频繁出现，对性能是个巨大的消耗，因为回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流，所以我们经常说尽可能的减少重排次数、重排范围，这样就能呈现给用户更改的感官（关于优化手段会在后续的性能优化文章中介绍）</p>\n<p>根据上面说了这么多，我们来进入文章的主题<strong>防抖和节流</strong>当我们窗口发生改变，浏览器的滚动条执行scroll，输入框校验，搜索请求接口等这些都会使页面频繁重新渲染，加重浏览器的负担，这是我们通过<strong>防抖和节流</strong>的方式减少触发频率，这样就会大大的提高用户体验</p>\n<h3 id=\"debounce（防抖）\"><a href=\"#debounce（防抖）\" class=\"headerlink\" title=\"debounce（防抖）\"></a>debounce（防抖）</h3><p>动作发生一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。</p>\n<p>html </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n  &lt;title&gt;防抖&lt;/title&gt;\n  &lt;style&gt;\n    #container{\n      width: 100%; \n      height: 500px; \n      background: #000; \n      font-size: 50px;\n      color: #fff;\n      line-height: 500px; \n      text-align: center; \n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=&quot;content&quot;&gt;&lt;div&gt;\n  &lt;script src=&quot;debounce.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    var count = 1;\n    var container = document.getElementById(&#39;container&#39;);\n    function getContent(e) {\n      container.innerHTML = count++;\n    };\n    // container.onmousemove = getContent\n    container.onmousemove = debounce(getContent, 500, true);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>debounce.js </p>\n<pre><code>@underscore.js\n\nvar debounce = /** @class */ (function () {\n\n  /**\n   * @desc 函数防抖\n   * @param {*} func 回调函数\n   * @param {*} wait 延迟执行毫秒数\n   * @param {*} immediate  true 表立即执行，false 表非立即执行\n   */\n  function debounce(func, wait, immediate) {\n\n    // 创建一个标记用来存放定时器的返回值\n    var timeout,result;\n\n    return function () {\n\n      // 指定this 作用域\n      var context = this;\n      // event 对象\n      var args = arguments;\n\n      // 再次执行事件的时候，清除上一个定时器\n      if (timeout) clearTimeout(timeout);\n\n      if (immediate) {\n        // 如果已经执行过，将不再执行\n        var callNow = !timeout;\n        timeout = setTimeout(function(){\n          timeout = null;\n        }, wait)\n\n        if (callNow) result = func.apply(context, args)\n      }\n      else {\n\n        timeout = setTimeout(function(){\n          func.apply(context, args)\n        }, wait);\n      }\n      // func 这个函数，可能有返回值\n      return result;\n    }\n  }\n\n  return debounce;\n\n}())\n</code></pre><h3 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a>throttle</h3><p>动作执行一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新执行</p>\n<p>关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器</p>\n<p>使用时间戳</p>\n<p>当触发事件的时候，取出当前的时间戳，之后减去之前的时间戳(最一开始值设为 0 )，如果大于设置的时间周期，执行函数并更新当前时间戳，反之就不执行。</p>\n<pre><code>var throttle = /** @class */ (function () {\n\n  function throttle(func, wait) {\n    var args;\n    var previous = 0;\n\n    return function() {\n      var now = +new Date();\n      args = arguments;\n      if (now - previous &gt; wait) {\n        func.apply(this, args);\n        previous = now;\n      }\n    }\n  }\n\n  return throttle\n}())</code></pre><p>使用定时器</p>\n<p>事件触发的时候，设置一个定时器，如果定时器存在，就不执行，等定时器到指定的时间，清空定时器，执行事件</p>\n<pre><code>function throttle(func, wait) {\n  var timeout;\n  var previous = 0;\n\n  return function() {\n    context = this;\n    args = arguments;\n    if (!timeout) {\n      timeout = setTimeout(function(){\n        timeout = null;\n        func.apply(context, args)\n      }, wait)\n    }\n  }\n}</code></pre><p>对比两种实现方式</p>\n<ul>\n<li>第一种会立刻执行，第二种会在设定的时间后第一次执行</li>\n<li>第一种停止触发后不会再执行，第二种停止触发后依然会再执行一次</li>\n</ul>\n<p>现在我们要结合上面两种方式实现一个开始触发立刻执行，停止触发的时候还能再执行一次</p>\n<pre><code>@underscore.js\n\nvar throttle = /** @class */ (function () {\n\n  /**\n   * throttle 节流\n   * @param {*} func  回调函数\n   * @param {*} wait  执行时间间隔\n   * @param {*} options  如果想忽略开始函数的的调用，传入{leading: false}\n   *                     如果想忽略结尾函数的调用，传入{trailing: false}\n   *                     两者不能共存，否则函数不能执行\n   */\n  function throttle(func, wait, options) {\n\n    var timeout, context, args;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      previous = options.leading === false ? 0 : new Date().getTime();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = new Date().getTime();\n\n      if (!previous &amp;&amp; options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining &lt;= 0 || remaining &gt; wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout &amp;&amp; options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing，没有就开启一个定时器\n        timeout = setTimeout(later, remaining);\n      }\n    };\n    return throttled;\n}\n\n  return throttle\n}())</code></pre><p>调用例子</p>\n<pre><code>ontainer.onmousemove = throttle(getContent, 1000);\ncontainer.onmousemove = throttle(getContent, 1000, {\n  leading: false\n});\ncontainer.onmousemove = throttle(getContent, 1000, {\n  trailing: false\n});</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的就是函数的节流与抖动的全部，我们在面试和工作中会经常的遇到。这也是性能优化的一种方案。当然还有很多版本比如多 promise 版本的就不再这里叙述了，有兴趣的可以找找技术论坛</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"浏览器内核\"><a href=\"#浏览器内核\" class=\"headerlink\" title=\"浏览器内核\"></a>浏览器内核</h3><p>说起函数的节流与抖动这个老生长谈的话题，我们就需要了解一下关于浏览器的知识</p>\n<p>浏览器有各种进程，来保证浏览器正常的、流畅的呈现在用户的眼前。例如渲染进程（也就是浏览器的内核）是非常重要的一个进程，其中包含了很多的线程</p>\n<pre><code>GUI渲染线程(负责渲染浏览器界面，解析HTML,CSS,构建DOM树和RenderObject树，布局和绘制等)\n\nJS引擎线程(JS内核，负责处理JavaScript脚本程序)\n\n事件触发线程(归属于浏览器而不是JS引擎，用来控制事件循环)\n\n定时触发器线程(传说中的setTimeout和setInterval所在的线程)\n\n异步http请求线程(在XMLHttpRequest在连接后是通过浏览器新型一个线程请求)</code></pre><p>这里我们大概了解一下着几个概念，关于更过的相关知识会在后续的文章中介绍</p>\n<h3 id=\"请求过程\"><a href=\"#请求过程\" class=\"headerlink\" title=\"请求过程\"></a>请求过程</h3><p>我们先来看下面一张来至 W3C 的图</p>\n<p><img src=\"/images/timestamp-diagram.svg\"></p>\n<p>从图中我们看到处理模型大概分为如下几个阶段</p>\n<ul>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>HTTP 请求即响应</li>\n<li>服务器响应</li>\n<li>客户端渲染</li>\n</ul>\n<p>这篇文章我们不讨论 Resource Timing 阶段，会在后续文章前端性能的时候重新提起</p>\n<h3 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h3><p>通过第五个阶段客户端渲染简单的回忆一下网页的生成过程，大致分为几个步骤</p>\n<ul>\n<li>HTML解析器解析成DOM 树</li>\n<li>CSS解析器解析成CSSOM 树</li>\n<li>结合DOM树和CSSOM树，生成一棵渲染树(Render Tree)</li>\n<li>生成布局（Layout），根据渲染树来布局，以计算每个节点的几何信息</li>\n<li>最后一步是绘制（Paint），使用最终渲染树将像素渲染到在屏幕上</li>\n</ul>\n<img src=\"/images/render-process.jpg\">\n\n<p>通过上面的总结我们解析每一个步骤能更加深入的了解浏览器渲染过程</p>\n<h3 id=\"HTML-解析器解析过程\"><a href=\"#HTML-解析器解析过程\" class=\"headerlink\" title=\"HTML 解析器解析过程\"></a>HTML 解析器解析过程</h3><p>HTML 解析器构建 DOM 树，实际上是经过下面几个步骤</p>\n<pre><code>字节 -&gt; 字符 -&gt; 令牌 -&gt; 节点对象 -&gt; 对象模型\n\n编码阶段将 HTML 的原始字节数据转换为文件指定编码\n\n令牌阶段根据HTML规范来将字符串转换成各种令牌也就是标签节点\n\n生成节点对象阶段是根据每个令牌转换定义其属性和规则的对象（节点对象）\n\n最后阶段 DOM 树构建完成，整个对象集合就像是一棵树形结构（对象模型）</code></pre><p>下面通过代码和图片来解释上面的步骤</p>\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;\n    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hello &lt;span&gt;web performance&lt;/span&gt; students!&lt;/p&gt;\n    &lt;div&gt;&lt;img src=&quot;&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><img src=\"/images/dom-render.jpg\">\n\n<h3 id=\"CSS-解析过程\"><a href=\"#CSS-解析过程\" class=\"headerlink\" title=\"CSS 解析过程\"></a>CSS 解析过程</h3><p>浏览器获得 CSS 文件的数据后 CSS 解析器根据具体的样式将渲染 CSSDOM 树</p>\n<img src=\"/images/css-dom-render.jpg\">\n\n<h3 id=\"渲染树渲染\"><a href=\"#渲染树渲染\" class=\"headerlink\" title=\"渲染树渲染\"></a>渲染树渲染</h3><p>构建 两个树之后渲染树出场，浏览器会先从DOM树的根节点开始遍历，对每个可见节点，找到对应的 CSS 样式规则，进行匹配形成构建完成的渲染树</p>\n<img src=\"/images/render-tree.jpg\">\n\n\n<p>渲染树构建后浏览器根据节点对象的规则进行flow（布局）阶段，布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置最后生成我们大家知道的浏览器盒模型</p>\n<p>最后当Layout布局事件完成后，浏览器会立即发出Paint Setup与Paint事件，开始将渲染树绘制成像素，最后渲染到在屏幕上</p>\n<p>通过上面大致的流程我们知道了浏览器的渲染过程，我们知道网页在生成的时候，至少会渲染一次执行css之后 load 对应 JS 也会进行重新渲染</p>\n<p>重新渲染就可能会 reflow + repaint</p>\n<h3 id=\"重绘与回流\"><a href=\"#重绘与回流\" class=\"headerlink\" title=\"重绘与回流\"></a>重绘与回流</h3><p>回流(reflow)： 当render tree中的一部分(或全部)因为元素的规模尺寸、布局、隐藏等改变而需要重新构建</p>\n<p>重绘(repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘</p>\n<p>回流必定会发生重绘，重绘不一定会引发回流</p>\n<p>浏览器的reflow + repaint 在我们设置节点样式时频繁出现，对性能是个巨大的消耗，因为回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流，所以我们经常说尽可能的减少重排次数、重排范围，这样就能呈现给用户更改的感官（关于优化手段会在后续的性能优化文章中介绍）</p>\n<p>根据上面说了这么多，我们来进入文章的主题<strong>防抖和节流</strong>当我们窗口发生改变，浏览器的滚动条执行scroll，输入框校验，搜索请求接口等这些都会使页面频繁重新渲染，加重浏览器的负担，这是我们通过<strong>防抖和节流</strong>的方式减少触发频率，这样就会大大的提高用户体验</p>\n<h3 id=\"debounce（防抖）\"><a href=\"#debounce（防抖）\" class=\"headerlink\" title=\"debounce（防抖）\"></a>debounce（防抖）</h3><p>动作发生一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。</p>\n<p>html </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n  &lt;title&gt;防抖&lt;/title&gt;\n  &lt;style&gt;\n    #container{\n      width: 100%; \n      height: 500px; \n      background: #000; \n      font-size: 50px;\n      color: #fff;\n      line-height: 500px; \n      text-align: center; \n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=&quot;content&quot;&gt;&lt;div&gt;\n  &lt;script src=&quot;debounce.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    var count = 1;\n    var container = document.getElementById(&#39;container&#39;);\n    function getContent(e) {\n      container.innerHTML = count++;\n    };\n    // container.onmousemove = getContent\n    container.onmousemove = debounce(getContent, 500, true);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>debounce.js </p>\n<pre><code>@underscore.js\n\nvar debounce = /** @class */ (function () {\n\n  /**\n   * @desc 函数防抖\n   * @param {*} func 回调函数\n   * @param {*} wait 延迟执行毫秒数\n   * @param {*} immediate  true 表立即执行，false 表非立即执行\n   */\n  function debounce(func, wait, immediate) {\n\n    // 创建一个标记用来存放定时器的返回值\n    var timeout,result;\n\n    return function () {\n\n      // 指定this 作用域\n      var context = this;\n      // event 对象\n      var args = arguments;\n\n      // 再次执行事件的时候，清除上一个定时器\n      if (timeout) clearTimeout(timeout);\n\n      if (immediate) {\n        // 如果已经执行过，将不再执行\n        var callNow = !timeout;\n        timeout = setTimeout(function(){\n          timeout = null;\n        }, wait)\n\n        if (callNow) result = func.apply(context, args)\n      }\n      else {\n\n        timeout = setTimeout(function(){\n          func.apply(context, args)\n        }, wait);\n      }\n      // func 这个函数，可能有返回值\n      return result;\n    }\n  }\n\n  return debounce;\n\n}())\n</code></pre><h3 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a>throttle</h3><p>动作执行一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新执行</p>\n<p>关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器</p>\n<p>使用时间戳</p>\n<p>当触发事件的时候，取出当前的时间戳，之后减去之前的时间戳(最一开始值设为 0 )，如果大于设置的时间周期，执行函数并更新当前时间戳，反之就不执行。</p>\n<pre><code>var throttle = /** @class */ (function () {\n\n  function throttle(func, wait) {\n    var args;\n    var previous = 0;\n\n    return function() {\n      var now = +new Date();\n      args = arguments;\n      if (now - previous &gt; wait) {\n        func.apply(this, args);\n        previous = now;\n      }\n    }\n  }\n\n  return throttle\n}())</code></pre><p>使用定时器</p>\n<p>事件触发的时候，设置一个定时器，如果定时器存在，就不执行，等定时器到指定的时间，清空定时器，执行事件</p>\n<pre><code>function throttle(func, wait) {\n  var timeout;\n  var previous = 0;\n\n  return function() {\n    context = this;\n    args = arguments;\n    if (!timeout) {\n      timeout = setTimeout(function(){\n        timeout = null;\n        func.apply(context, args)\n      }, wait)\n    }\n  }\n}</code></pre><p>对比两种实现方式</p>\n<ul>\n<li>第一种会立刻执行，第二种会在设定的时间后第一次执行</li>\n<li>第一种停止触发后不会再执行，第二种停止触发后依然会再执行一次</li>\n</ul>\n<p>现在我们要结合上面两种方式实现一个开始触发立刻执行，停止触发的时候还能再执行一次</p>\n<pre><code>@underscore.js\n\nvar throttle = /** @class */ (function () {\n\n  /**\n   * throttle 节流\n   * @param {*} func  回调函数\n   * @param {*} wait  执行时间间隔\n   * @param {*} options  如果想忽略开始函数的的调用，传入{leading: false}\n   *                     如果想忽略结尾函数的调用，传入{trailing: false}\n   *                     两者不能共存，否则函数不能执行\n   */\n  function throttle(func, wait, options) {\n\n    var timeout, context, args;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      previous = options.leading === false ? 0 : new Date().getTime();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = new Date().getTime();\n\n      if (!previous &amp;&amp; options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining &lt;= 0 || remaining &gt; wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout &amp;&amp; options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing，没有就开启一个定时器\n        timeout = setTimeout(later, remaining);\n      }\n    };\n    return throttled;\n}\n\n  return throttle\n}())</code></pre><p>调用例子</p>\n<pre><code>ontainer.onmousemove = throttle(getContent, 1000);\ncontainer.onmousemove = throttle(getContent, 1000, {\n  leading: false\n});\ncontainer.onmousemove = throttle(getContent, 1000, {\n  trailing: false\n});</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的就是函数的节流与抖动的全部，我们在面试和工作中会经常的遇到。这也是性能优化的一种方案。当然还有很多版本比如多 promise 版本的就不再这里叙述了，有兴趣的可以找找技术论坛</p>\n"},{"title":"偏应用函数、函数的柯里化","date":"2019-07-17T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n偏应用函数简称偏函数，在模拟 bind 的时候已经说明其概念和作为主要 bind 的实现<br/>\n\n函数柯里化主要是通过偏应用函数的实现，把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数<br/>\n\n```\n// 柯里化之前\nfunction add (a, b) {\n  return a + b;\n}\n\n// 柯里化之后\nfunction add (a) {\n  return function (b) {\n    return a+b\n  }\n}\n\n// 等同于\nconst add = a => b => a + b;\nconst result = add(2)(3); // => 5\n```\n1. 首先函数接受 a 参数 然后返回一个新的匿名函数体确定了新的词法作用域,在该词法作用域中也拥有 a 参数\n2. 该匿名函数调用传入参数 3 返回 a+b 的和\n3. 通过上面程序了解到柯里化函数的特点是总是返回一个一元的函数：一个带有一个参数的新函数，不同的是普通函数可以根据需要一次获取尽可能多的参数\n\n\n### 为什么要柯里化\n\n1. 柯里化在函数组合的上下文中起到关键的作用,能够让你重新组合你的应用，将复杂的功能拆分成一个个简单的部分，这样容易更改，理解\n2. 柯里化也是一种函数预加载的方法，通过传递较少的参数得到一个在相同词法作用域当中缓存了这些参数的新函数，其实这也是一种对参数的缓存\n\n\n### 如何柯里化\n\n```\n// 普通\nconst sayName = name => age => `my name is ${name}, Im years old ${age}` ;\nlet name = sayName('zhangsan');\nlet age = name(27);\n\n// 利用bind\n\nfunction person (name, age, height) {\n  console.log(`my name is ${name}, I,m years old ${age}, my height is ${height} meters`)\n}\nlet info = person.bind(null, 'zhangsan');\nconsole.log(info(27, 175));\n```\n\n### 柯里化函数的应用场景\n\n1. 延迟计算\n2. 参数复用\n3. 动态创建函数\n\n延迟计算<br/>\n```\n\n// 普通实现\nvar sum = function(args){\n  return args.reduce(function(a,b){\n      return a+b\n  });\n};\nvar result = sum([1,2,3,4,5]); // 15\n\n// 柯里化实现\nfunction add() {\n  var _args = [].slice.call(arguments);\n  var adder = function () {\n\n      // 利用闭包特性保存_args的值\n      var _adder = function() {\n          [].push.apply(_args, [].slice.call(arguments));\n          return _adder;\n      };\n\n      // 利用隐式转换的特性，计算最终的值返回\n      _adder.toString = function () {\n          return _args.reduce(function (a, b) {\n              return a + b;\n          });\n      }\n\n      return _adder;\n  }\n  return adder.apply(null, [].slice.call(arguments));\n}\n\nvar sum = add();\nsum(1,2,3)(4);\nsum(5);\nsum() // 15\n\n优点：调用灵活，参数定义随意\n\n充分利用了柯里化提延迟执行的特点\n延迟执行 – 返回新函数可以进行任意调用\n```\n\nDOM操作中的事件绑定(动态创建函数)<br/>\n当在多次调用同一个函数，并且传递的参数绝大多数是相同的。\n``` \n// 普通版本\nvar addEvent = function(el, type, fn, capture) {\n    if (window.addEventListener) {\n      el.addEventListener(type, function(e) {\n        fn.call(el, e);\n      }, capture);\n    } else if (window.attachEvent) {\n      el.attachEvent(\"on\" + type, function(e) {\n        fn.call(el, e);\n      });\n    } \n };\n\n // 柯里化版本\n var addEvent = (function(){\n    if (window.addEventListener) {\n      return function(el, type, fn, capture) {\n        el.addEventListener(type, function(e) {\n          fn.call(el, e);\n        }, (capture));\n      };\n    } else if (window.attachEvent) {\n      return function(el, type, fn, capture) {\n        el.attachEvent(\"on\" + type, function(e) {\n            fn.call(el, e);\n        });\n      };\n    }\n})();\n\n优点：不用每次调用进行 if () {}else {} 判断兼容性问题\n\n充分利用了柯里化提前返回和延迟执行的特点\n提前返回 – 使用函数立即调用进行了一次兼容判断（部分求值），返回兼容的事件绑定方法\n延迟执行 – 返回新函数，在新函数调用兼容的事件方法。等待addEvent新函数调用，延迟执行\n```\n\n当然应用场景还有很多，比如我们经常提到的防抖和节流问题，充分的利用了函数式编程的延迟执行特性，将多个间隔接近的函数执行合并成一次函数执行来提高性能问题。<br/>\n关于事件节流和防抖动将会在后续的专题中单独指出<br/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/functionCurrying.md","raw":"---\ntitle: 偏应用函数、函数的柯里化\ndate: 2019-7-17 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- 函数式编程\ncategories:\n- 函数式编程\n---\n\n偏应用函数简称偏函数，在模拟 bind 的时候已经说明其概念和作为主要 bind 的实现<br/>\n\n函数柯里化主要是通过偏应用函数的实现，把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数<br/>\n\n```\n// 柯里化之前\nfunction add (a, b) {\n  return a + b;\n}\n\n// 柯里化之后\nfunction add (a) {\n  return function (b) {\n    return a+b\n  }\n}\n\n// 等同于\nconst add = a => b => a + b;\nconst result = add(2)(3); // => 5\n```\n1. 首先函数接受 a 参数 然后返回一个新的匿名函数体确定了新的词法作用域,在该词法作用域中也拥有 a 参数\n2. 该匿名函数调用传入参数 3 返回 a+b 的和\n3. 通过上面程序了解到柯里化函数的特点是总是返回一个一元的函数：一个带有一个参数的新函数，不同的是普通函数可以根据需要一次获取尽可能多的参数\n\n\n### 为什么要柯里化\n\n1. 柯里化在函数组合的上下文中起到关键的作用,能够让你重新组合你的应用，将复杂的功能拆分成一个个简单的部分，这样容易更改，理解\n2. 柯里化也是一种函数预加载的方法，通过传递较少的参数得到一个在相同词法作用域当中缓存了这些参数的新函数，其实这也是一种对参数的缓存\n\n\n### 如何柯里化\n\n```\n// 普通\nconst sayName = name => age => `my name is ${name}, Im years old ${age}` ;\nlet name = sayName('zhangsan');\nlet age = name(27);\n\n// 利用bind\n\nfunction person (name, age, height) {\n  console.log(`my name is ${name}, I,m years old ${age}, my height is ${height} meters`)\n}\nlet info = person.bind(null, 'zhangsan');\nconsole.log(info(27, 175));\n```\n\n### 柯里化函数的应用场景\n\n1. 延迟计算\n2. 参数复用\n3. 动态创建函数\n\n延迟计算<br/>\n```\n\n// 普通实现\nvar sum = function(args){\n  return args.reduce(function(a,b){\n      return a+b\n  });\n};\nvar result = sum([1,2,3,4,5]); // 15\n\n// 柯里化实现\nfunction add() {\n  var _args = [].slice.call(arguments);\n  var adder = function () {\n\n      // 利用闭包特性保存_args的值\n      var _adder = function() {\n          [].push.apply(_args, [].slice.call(arguments));\n          return _adder;\n      };\n\n      // 利用隐式转换的特性，计算最终的值返回\n      _adder.toString = function () {\n          return _args.reduce(function (a, b) {\n              return a + b;\n          });\n      }\n\n      return _adder;\n  }\n  return adder.apply(null, [].slice.call(arguments));\n}\n\nvar sum = add();\nsum(1,2,3)(4);\nsum(5);\nsum() // 15\n\n优点：调用灵活，参数定义随意\n\n充分利用了柯里化提延迟执行的特点\n延迟执行 – 返回新函数可以进行任意调用\n```\n\nDOM操作中的事件绑定(动态创建函数)<br/>\n当在多次调用同一个函数，并且传递的参数绝大多数是相同的。\n``` \n// 普通版本\nvar addEvent = function(el, type, fn, capture) {\n    if (window.addEventListener) {\n      el.addEventListener(type, function(e) {\n        fn.call(el, e);\n      }, capture);\n    } else if (window.attachEvent) {\n      el.attachEvent(\"on\" + type, function(e) {\n        fn.call(el, e);\n      });\n    } \n };\n\n // 柯里化版本\n var addEvent = (function(){\n    if (window.addEventListener) {\n      return function(el, type, fn, capture) {\n        el.addEventListener(type, function(e) {\n          fn.call(el, e);\n        }, (capture));\n      };\n    } else if (window.attachEvent) {\n      return function(el, type, fn, capture) {\n        el.attachEvent(\"on\" + type, function(e) {\n            fn.call(el, e);\n        });\n      };\n    }\n})();\n\n优点：不用每次调用进行 if () {}else {} 判断兼容性问题\n\n充分利用了柯里化提前返回和延迟执行的特点\n提前返回 – 使用函数立即调用进行了一次兼容判断（部分求值），返回兼容的事件绑定方法\n延迟执行 – 返回新函数，在新函数调用兼容的事件方法。等待addEvent新函数调用，延迟执行\n```\n\n当然应用场景还有很多，比如我们经常提到的防抖和节流问题，充分的利用了函数式编程的延迟执行特性，将多个间隔接近的函数执行合并成一次函数执行来提高性能问题。<br/>\n关于事件节流和防抖动将会在后续的专题中单独指出<br/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/functionCurrying","published":1,"updated":"2019-08-26T16:46:27.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7f0011kuu60j8cpgtu","content":"<p>偏应用函数简称偏函数，在模拟 bind 的时候已经说明其概念和作为主要 bind 的实现<br></p>\n<p>函数柯里化主要是通过偏应用函数的实现，把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数<br></p>\n<pre><code>// 柯里化之前\nfunction add (a, b) {\n  return a + b;\n}\n\n// 柯里化之后\nfunction add (a) {\n  return function (b) {\n    return a+b\n  }\n}\n\n// 等同于\nconst add = a =&gt; b =&gt; a + b;\nconst result = add(2)(3); // =&gt; 5</code></pre><ol>\n<li>首先函数接受 a 参数 然后返回一个新的匿名函数体确定了新的词法作用域,在该词法作用域中也拥有 a 参数</li>\n<li>该匿名函数调用传入参数 3 返回 a+b 的和</li>\n<li>通过上面程序了解到柯里化函数的特点是总是返回一个一元的函数：一个带有一个参数的新函数，不同的是普通函数可以根据需要一次获取尽可能多的参数</li>\n</ol>\n<h3 id=\"为什么要柯里化\"><a href=\"#为什么要柯里化\" class=\"headerlink\" title=\"为什么要柯里化\"></a>为什么要柯里化</h3><ol>\n<li>柯里化在函数组合的上下文中起到关键的作用,能够让你重新组合你的应用，将复杂的功能拆分成一个个简单的部分，这样容易更改，理解</li>\n<li>柯里化也是一种函数预加载的方法，通过传递较少的参数得到一个在相同词法作用域当中缓存了这些参数的新函数，其实这也是一种对参数的缓存</li>\n</ol>\n<h3 id=\"如何柯里化\"><a href=\"#如何柯里化\" class=\"headerlink\" title=\"如何柯里化\"></a>如何柯里化</h3><pre><code>// 普通\nconst sayName = name =&gt; age =&gt; `my name is ${name}, Im years old ${age}` ;\nlet name = sayName(&#39;zhangsan&#39;);\nlet age = name(27);\n\n// 利用bind\n\nfunction person (name, age, height) {\n  console.log(`my name is ${name}, I,m years old ${age}, my height is ${height} meters`)\n}\nlet info = person.bind(null, &#39;zhangsan&#39;);\nconsole.log(info(27, 175));</code></pre><h3 id=\"柯里化函数的应用场景\"><a href=\"#柯里化函数的应用场景\" class=\"headerlink\" title=\"柯里化函数的应用场景\"></a>柯里化函数的应用场景</h3><ol>\n<li>延迟计算</li>\n<li>参数复用</li>\n<li>动态创建函数</li>\n</ol>\n<p>延迟计算<br></p>\n<pre><code>\n// 普通实现\nvar sum = function(args){\n  return args.reduce(function(a,b){\n      return a+b\n  });\n};\nvar result = sum([1,2,3,4,5]); // 15\n\n// 柯里化实现\nfunction add() {\n  var _args = [].slice.call(arguments);\n  var adder = function () {\n\n      // 利用闭包特性保存_args的值\n      var _adder = function() {\n          [].push.apply(_args, [].slice.call(arguments));\n          return _adder;\n      };\n\n      // 利用隐式转换的特性，计算最终的值返回\n      _adder.toString = function () {\n          return _args.reduce(function (a, b) {\n              return a + b;\n          });\n      }\n\n      return _adder;\n  }\n  return adder.apply(null, [].slice.call(arguments));\n}\n\nvar sum = add();\nsum(1,2,3)(4);\nsum(5);\nsum() // 15\n\n优点：调用灵活，参数定义随意\n\n充分利用了柯里化提延迟执行的特点\n延迟执行 – 返回新函数可以进行任意调用</code></pre><p>DOM操作中的事件绑定(动态创建函数)<br><br>当在多次调用同一个函数，并且传递的参数绝大多数是相同的。</p>\n<pre><code>// 普通版本\nvar addEvent = function(el, type, fn, capture) {\n    if (window.addEventListener) {\n      el.addEventListener(type, function(e) {\n        fn.call(el, e);\n      }, capture);\n    } else if (window.attachEvent) {\n      el.attachEvent(&quot;on&quot; + type, function(e) {\n        fn.call(el, e);\n      });\n    } \n };\n\n // 柯里化版本\n var addEvent = (function(){\n    if (window.addEventListener) {\n      return function(el, type, fn, capture) {\n        el.addEventListener(type, function(e) {\n          fn.call(el, e);\n        }, (capture));\n      };\n    } else if (window.attachEvent) {\n      return function(el, type, fn, capture) {\n        el.attachEvent(&quot;on&quot; + type, function(e) {\n            fn.call(el, e);\n        });\n      };\n    }\n})();\n\n优点：不用每次调用进行 if () {}else {} 判断兼容性问题\n\n充分利用了柯里化提前返回和延迟执行的特点\n提前返回 – 使用函数立即调用进行了一次兼容判断（部分求值），返回兼容的事件绑定方法\n延迟执行 – 返回新函数，在新函数调用兼容的事件方法。等待addEvent新函数调用，延迟执行</code></pre><p>当然应用场景还有很多，比如我们经常提到的防抖和节流问题，充分的利用了函数式编程的延迟执行特性，将多个间隔接近的函数执行合并成一次函数执行来提高性能问题。<br><br>关于事件节流和防抖动将会在后续的专题中单独指出<br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>偏应用函数简称偏函数，在模拟 bind 的时候已经说明其概念和作为主要 bind 的实现<br></p>\n<p>函数柯里化主要是通过偏应用函数的实现，把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数<br></p>\n<pre><code>// 柯里化之前\nfunction add (a, b) {\n  return a + b;\n}\n\n// 柯里化之后\nfunction add (a) {\n  return function (b) {\n    return a+b\n  }\n}\n\n// 等同于\nconst add = a =&gt; b =&gt; a + b;\nconst result = add(2)(3); // =&gt; 5</code></pre><ol>\n<li>首先函数接受 a 参数 然后返回一个新的匿名函数体确定了新的词法作用域,在该词法作用域中也拥有 a 参数</li>\n<li>该匿名函数调用传入参数 3 返回 a+b 的和</li>\n<li>通过上面程序了解到柯里化函数的特点是总是返回一个一元的函数：一个带有一个参数的新函数，不同的是普通函数可以根据需要一次获取尽可能多的参数</li>\n</ol>\n<h3 id=\"为什么要柯里化\"><a href=\"#为什么要柯里化\" class=\"headerlink\" title=\"为什么要柯里化\"></a>为什么要柯里化</h3><ol>\n<li>柯里化在函数组合的上下文中起到关键的作用,能够让你重新组合你的应用，将复杂的功能拆分成一个个简单的部分，这样容易更改，理解</li>\n<li>柯里化也是一种函数预加载的方法，通过传递较少的参数得到一个在相同词法作用域当中缓存了这些参数的新函数，其实这也是一种对参数的缓存</li>\n</ol>\n<h3 id=\"如何柯里化\"><a href=\"#如何柯里化\" class=\"headerlink\" title=\"如何柯里化\"></a>如何柯里化</h3><pre><code>// 普通\nconst sayName = name =&gt; age =&gt; `my name is ${name}, Im years old ${age}` ;\nlet name = sayName(&#39;zhangsan&#39;);\nlet age = name(27);\n\n// 利用bind\n\nfunction person (name, age, height) {\n  console.log(`my name is ${name}, I,m years old ${age}, my height is ${height} meters`)\n}\nlet info = person.bind(null, &#39;zhangsan&#39;);\nconsole.log(info(27, 175));</code></pre><h3 id=\"柯里化函数的应用场景\"><a href=\"#柯里化函数的应用场景\" class=\"headerlink\" title=\"柯里化函数的应用场景\"></a>柯里化函数的应用场景</h3><ol>\n<li>延迟计算</li>\n<li>参数复用</li>\n<li>动态创建函数</li>\n</ol>\n<p>延迟计算<br></p>\n<pre><code>\n// 普通实现\nvar sum = function(args){\n  return args.reduce(function(a,b){\n      return a+b\n  });\n};\nvar result = sum([1,2,3,4,5]); // 15\n\n// 柯里化实现\nfunction add() {\n  var _args = [].slice.call(arguments);\n  var adder = function () {\n\n      // 利用闭包特性保存_args的值\n      var _adder = function() {\n          [].push.apply(_args, [].slice.call(arguments));\n          return _adder;\n      };\n\n      // 利用隐式转换的特性，计算最终的值返回\n      _adder.toString = function () {\n          return _args.reduce(function (a, b) {\n              return a + b;\n          });\n      }\n\n      return _adder;\n  }\n  return adder.apply(null, [].slice.call(arguments));\n}\n\nvar sum = add();\nsum(1,2,3)(4);\nsum(5);\nsum() // 15\n\n优点：调用灵活，参数定义随意\n\n充分利用了柯里化提延迟执行的特点\n延迟执行 – 返回新函数可以进行任意调用</code></pre><p>DOM操作中的事件绑定(动态创建函数)<br><br>当在多次调用同一个函数，并且传递的参数绝大多数是相同的。</p>\n<pre><code>// 普通版本\nvar addEvent = function(el, type, fn, capture) {\n    if (window.addEventListener) {\n      el.addEventListener(type, function(e) {\n        fn.call(el, e);\n      }, capture);\n    } else if (window.attachEvent) {\n      el.attachEvent(&quot;on&quot; + type, function(e) {\n        fn.call(el, e);\n      });\n    } \n };\n\n // 柯里化版本\n var addEvent = (function(){\n    if (window.addEventListener) {\n      return function(el, type, fn, capture) {\n        el.addEventListener(type, function(e) {\n          fn.call(el, e);\n        }, (capture));\n      };\n    } else if (window.attachEvent) {\n      return function(el, type, fn, capture) {\n        el.attachEvent(&quot;on&quot; + type, function(e) {\n            fn.call(el, e);\n        });\n      };\n    }\n})();\n\n优点：不用每次调用进行 if () {}else {} 判断兼容性问题\n\n充分利用了柯里化提前返回和延迟执行的特点\n提前返回 – 使用函数立即调用进行了一次兼容判断（部分求值），返回兼容的事件绑定方法\n延迟执行 – 返回新函数，在新函数调用兼容的事件方法。等待addEvent新函数调用，延迟执行</code></pre><p>当然应用场景还有很多，比如我们经常提到的防抖和节流问题，充分的利用了函数式编程的延迟执行特性，将多个间隔接近的函数执行合并成一次函数执行来提高性能问题。<br><br>关于事件节流和防抖动将会在后续的专题中单独指出<br></p>\n"},{"title":"函数式编程-基本理论","date":"2019-07-12T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 什么是函数式编程\n\n函数式编程主要是范畴论数学中的一个分支，它认为所有的概念体系都可以抽象成一个个范畴，属于结构化编程的一种。运算过程尽量写成一系列嵌套的函数调用 <br/>\n```\n//  函数式编程\nvar result = subtract(multiply(add(1,2), 3), 4);\n\n// 过程编程\nvar a = add(1,2);\nvar b = multiply(a, 3);\nvar c = subtract(b, 4);\n```\n\n### 为什么学习函数式编程\n\n其实个人觉的学习函数式编程就是为了更好的模块化，使其看起来更简洁。这也是<a href=\"http://en.wikipedia.org/wiki/Programming_paradigm\">范式编程</a>和<a href=\"http://en.wikipedia.org/wiki/Structured_programming\">结构化编程</a>的主要思想\n\n### 函数式编程特点\n\n1. 函数是\"第一等公民\"\n2. 只用表达式，不用语句\n3. 没有副作用（函数要保持独立，所有功能就是返回一个新的值，没有其他行为，更不能修改外部状态的值）\n4. 不修改状态（可以使用参数来保存状态，不可以使用变量来保存状态）\n5. 引用透明（函数运行只靠参数）\n\n### 函数式编程的优点\n\n1. 代码更简洁，易于理解，维护更方便\n2. 易于并发编程（由于不修改变量所以不存在锁线程的问题）\n3. 代码的热升级\n\n","source":"_posts/javascript/functionalBase.md","raw":"---\ntitle: 函数式编程-基本理论\ndate: 2019-7-12 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- 函数式编程\ncategories:\n- 函数式编程\n---\n\n### 什么是函数式编程\n\n函数式编程主要是范畴论数学中的一个分支，它认为所有的概念体系都可以抽象成一个个范畴，属于结构化编程的一种。运算过程尽量写成一系列嵌套的函数调用 <br/>\n```\n//  函数式编程\nvar result = subtract(multiply(add(1,2), 3), 4);\n\n// 过程编程\nvar a = add(1,2);\nvar b = multiply(a, 3);\nvar c = subtract(b, 4);\n```\n\n### 为什么学习函数式编程\n\n其实个人觉的学习函数式编程就是为了更好的模块化，使其看起来更简洁。这也是<a href=\"http://en.wikipedia.org/wiki/Programming_paradigm\">范式编程</a>和<a href=\"http://en.wikipedia.org/wiki/Structured_programming\">结构化编程</a>的主要思想\n\n### 函数式编程特点\n\n1. 函数是\"第一等公民\"\n2. 只用表达式，不用语句\n3. 没有副作用（函数要保持独立，所有功能就是返回一个新的值，没有其他行为，更不能修改外部状态的值）\n4. 不修改状态（可以使用参数来保存状态，不可以使用变量来保存状态）\n5. 引用透明（函数运行只靠参数）\n\n### 函数式编程的优点\n\n1. 代码更简洁，易于理解，维护更方便\n2. 易于并发编程（由于不修改变量所以不存在锁线程的问题）\n3. 代码的热升级\n\n","slug":"javascript/functionalBase","published":1,"updated":"2019-08-26T16:46:27.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7g0015kuu6iiq6dxwb","content":"<h3 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h3><p>函数式编程主要是范畴论数学中的一个分支，它认为所有的概念体系都可以抽象成一个个范畴，属于结构化编程的一种。运算过程尽量写成一系列嵌套的函数调用 <br></p>\n<pre><code>//  函数式编程\nvar result = subtract(multiply(add(1,2), 3), 4);\n\n// 过程编程\nvar a = add(1,2);\nvar b = multiply(a, 3);\nvar c = subtract(b, 4);</code></pre><h3 id=\"为什么学习函数式编程\"><a href=\"#为什么学习函数式编程\" class=\"headerlink\" title=\"为什么学习函数式编程\"></a>为什么学习函数式编程</h3><p>其实个人觉的学习函数式编程就是为了更好的模块化，使其看起来更简洁。这也是<a href=\"http://en.wikipedia.org/wiki/Programming_paradigm\" target=\"_blank\" rel=\"noopener\">范式编程</a>和<a href=\"http://en.wikipedia.org/wiki/Structured_programming\" target=\"_blank\" rel=\"noopener\">结构化编程</a>的主要思想</p>\n<h3 id=\"函数式编程特点\"><a href=\"#函数式编程特点\" class=\"headerlink\" title=\"函数式编程特点\"></a>函数式编程特点</h3><ol>\n<li>函数是”第一等公民”</li>\n<li>只用表达式，不用语句</li>\n<li>没有副作用（函数要保持独立，所有功能就是返回一个新的值，没有其他行为，更不能修改外部状态的值）</li>\n<li>不修改状态（可以使用参数来保存状态，不可以使用变量来保存状态）</li>\n<li>引用透明（函数运行只靠参数）</li>\n</ol>\n<h3 id=\"函数式编程的优点\"><a href=\"#函数式编程的优点\" class=\"headerlink\" title=\"函数式编程的优点\"></a>函数式编程的优点</h3><ol>\n<li>代码更简洁，易于理解，维护更方便</li>\n<li>易于并发编程（由于不修改变量所以不存在锁线程的问题）</li>\n<li>代码的热升级</li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"什么是函数式编程\"><a href=\"#什么是函数式编程\" class=\"headerlink\" title=\"什么是函数式编程\"></a>什么是函数式编程</h3><p>函数式编程主要是范畴论数学中的一个分支，它认为所有的概念体系都可以抽象成一个个范畴，属于结构化编程的一种。运算过程尽量写成一系列嵌套的函数调用 <br></p>\n<pre><code>//  函数式编程\nvar result = subtract(multiply(add(1,2), 3), 4);\n\n// 过程编程\nvar a = add(1,2);\nvar b = multiply(a, 3);\nvar c = subtract(b, 4);</code></pre><h3 id=\"为什么学习函数式编程\"><a href=\"#为什么学习函数式编程\" class=\"headerlink\" title=\"为什么学习函数式编程\"></a>为什么学习函数式编程</h3><p>其实个人觉的学习函数式编程就是为了更好的模块化，使其看起来更简洁。这也是<a href=\"http://en.wikipedia.org/wiki/Programming_paradigm\" target=\"_blank\" rel=\"noopener\">范式编程</a>和<a href=\"http://en.wikipedia.org/wiki/Structured_programming\" target=\"_blank\" rel=\"noopener\">结构化编程</a>的主要思想</p>\n<h3 id=\"函数式编程特点\"><a href=\"#函数式编程特点\" class=\"headerlink\" title=\"函数式编程特点\"></a>函数式编程特点</h3><ol>\n<li>函数是”第一等公民”</li>\n<li>只用表达式，不用语句</li>\n<li>没有副作用（函数要保持独立，所有功能就是返回一个新的值，没有其他行为，更不能修改外部状态的值）</li>\n<li>不修改状态（可以使用参数来保存状态，不可以使用变量来保存状态）</li>\n<li>引用透明（函数运行只靠参数）</li>\n</ol>\n<h3 id=\"函数式编程的优点\"><a href=\"#函数式编程的优点\" class=\"headerlink\" title=\"函数式编程的优点\"></a>函数式编程的优点</h3><ol>\n<li>代码更简洁，易于理解，维护更方便</li>\n<li>易于并发编程（由于不修改变量所以不存在锁线程的问题）</li>\n<li>代码的热升级</li>\n</ol>\n"},{"title":"函数式编程-函数组合","date":"2019-07-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 概念\n函数组合是将两个或多个函数组合以产生新函数的过程。将功能组合在一起就像将一系列管道拼凑在一起，以便我们的数据流过<br/>\n\n简而言之，函数` f`和` g`的组合可以定义为`f（g（x））`，它从内到外 - 从右到左进行求值<br/>\n\n### demo toSlug\n\n举例子，想象一个场景，想要将用户的全名转换为URL slugs，以便为每个用户提供个人资料页面。为此，需要完成一系列步骤：\n1. 将名称拆分为空格中的数组\n2. 将名称映射到小写\n3. 加入破折号\n4. 编码URI组件\n\n```\n// toslug.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  input.split(' ')\n    .map(str => str.toLowerCase())\n    .join('-')\n);\n\n```\n\n### 组合功能\n\n不错......但如果我告诉你它可能更具可读性呢？想象一下，这些操作中的每一个都具有相应的可组合功能。可以写成<br/>\n```\n// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  join('-')(\n    map(toLowerCase)(\n      split(' ')(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n\n```\n\n### 简单的偏应用函数\n\n这看起来比我们的第一次尝试更难阅读，但先放在这，我们继续以可组合形式的常用实用程序，如`split（）`，`join（）`和`map（）`。来实现<br/>\n```\n// composables.js hosted with ❤ by GitHub\n\nconst curry = fn => (...args) => fn.bind(null, ...args);\n\nconst map = curry((fn, arr) => arr.map(fn));\n\nconst join = curry((str, arr) => arr.join(str));\n\nconst toLowerCase = str => str.toLowerCase();\n\nconst split = curry((splitOn, str) => str.split(splitOn));\n```\n\n上面的例子在技术上并不是真的柯里化，它总能产生一元函数，但是它是一个简单的偏应用函数。请参考<a href=\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\">有关偏应用函数和柯里化的区别</a> <br/>\n\n\n回到我们的`toSlug（）`实现\n```\n// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  join('-')(\n    map(toLowerCase)(\n      split(' ')(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n```\n\n### compose（）\n我们可以使用一个自动组合这些函数的函数来展平嵌套，这意味着它将从一个函数获取输出并自动将其到下一个函数的输入，直到它输出最终值<br/>\n想象一下我们实现函数 `reduce（）` 的功能，但为了匹配上面的compose行为，我们需要它从右到左，而不是从左到右<br/>\n\n```\n// compose.js hosted with ❤ by GitHub\n\nconst compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);\n```\n\n上面的 `.reduceRight()` 与`.reduce（）`一样，数组`.reduceRight（）`方法采用reducer函数和初始值（`x`）。我们迭代数组函数（从右到左），依次将每个函数应用于累加值（`v`）<br/>\n\n使用compose，我们可以在没有嵌套的情况下重写 toSlug 的组合<br/>\n\n```\n// using-compose.js hosted with ❤ by GitHub\nconst toSlug = compose(\n  encodeURIComponent,\n  join('-'),\n  map(toLowerCase),\n  split(' ')\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n```\n\n### pipe（）\n\n还有另一种通常称为“pipe（）”的形式。 Lodash称之为`flow（）`<br/>\n\n```\n// pipe.js hosted with ❤ by GitHub\n\nconst pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\n\nconst fn1 = s => s.toLowerCase();\nconst fn2 = s => s.split('').reverse().join('');\nconst fn3 = s => s + '!'\n\nconst newFunc = pipe(fn1, fn2, fn3);\nconst result = newFunc('Time'); // emit!\n```\n\n我们看看用`pipe（）`实现的`toSlug（）`函数<br/>\n```\n// using-pipe.js hosted with ❤ by GitHub\n\nconst toSlug = pipe(\n  split(' '),\n  map(toLowerCase),\n  join('-'),\n  encodeURIComponent\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n```\n\n在命令式编程中，当您对某个变量执行转换时，您将在转换的每个步骤中找到对该变量的引用。上面的`pipe（）`实现是以无点的方式编写的，这意味着它根本不识别它运行的参数。<br/>\n\n### trace\n\n我经常在单元测试和Redux状态之类的东西中使用管道来消除对中间变量的需要，这些中间变量只存在于一个操作和下一个操作之间的瞬态值。<br/>\n\n```\n// using-trace.js hosted with ❤ by GitHub\n\nconst trace = curry((label, x) => {\n  console.log(`== ${ label }:  ${ x }`);\n  return x;\n});\n\nconst toSlug = pipe(\n  trace('input'),\n  split(' '),\n  map(toLowerCase),\n  trace('after map'),\n  join('-'),\n  encodeURIComponent\n);\n\nconsole.log(toSlug('JS Cheerleader'));\n// '== input:  JS Cheerleader'\n// '== after map:  js,cheerleader'\n// 'js-cheerleader'\n```\n\n\n`trace（）`只是更通用的`tap（）`的一种特殊形式，它允许你为流经管道的每个值执行一些操作<br/>\n```\n// tap.js hosted with ❤ by GitHub\n\nconst tap = curry((fn, x) => {\n  fn(x);\n  return x;\n});\n```\n\n现在可以看到`trace（）`是一个特殊的`tap（）`\n\n```\nconst trace = label => {\n  return tap(x => console.log(`== ${ label }:  ${ x }`));\n};\n```\n\n\n\n","source":"_posts/javascript/functionalCombination.md","raw":"---\ntitle: 函数式编程-函数组合\ndate: 2019-7-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- 函数式编程\ncategories:\n- 函数式编程\n---\n\n### 概念\n函数组合是将两个或多个函数组合以产生新函数的过程。将功能组合在一起就像将一系列管道拼凑在一起，以便我们的数据流过<br/>\n\n简而言之，函数` f`和` g`的组合可以定义为`f（g（x））`，它从内到外 - 从右到左进行求值<br/>\n\n### demo toSlug\n\n举例子，想象一个场景，想要将用户的全名转换为URL slugs，以便为每个用户提供个人资料页面。为此，需要完成一系列步骤：\n1. 将名称拆分为空格中的数组\n2. 将名称映射到小写\n3. 加入破折号\n4. 编码URI组件\n\n```\n// toslug.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  input.split(' ')\n    .map(str => str.toLowerCase())\n    .join('-')\n);\n\n```\n\n### 组合功能\n\n不错......但如果我告诉你它可能更具可读性呢？想象一下，这些操作中的每一个都具有相应的可组合功能。可以写成<br/>\n```\n// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  join('-')(\n    map(toLowerCase)(\n      split(' ')(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n\n```\n\n### 简单的偏应用函数\n\n这看起来比我们的第一次尝试更难阅读，但先放在这，我们继续以可组合形式的常用实用程序，如`split（）`，`join（）`和`map（）`。来实现<br/>\n```\n// composables.js hosted with ❤ by GitHub\n\nconst curry = fn => (...args) => fn.bind(null, ...args);\n\nconst map = curry((fn, arr) => arr.map(fn));\n\nconst join = curry((str, arr) => arr.join(str));\n\nconst toLowerCase = str => str.toLowerCase();\n\nconst split = curry((splitOn, str) => str.split(splitOn));\n```\n\n上面的例子在技术上并不是真的柯里化，它总能产生一元函数，但是它是一个简单的偏应用函数。请参考<a href=\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\">有关偏应用函数和柯里化的区别</a> <br/>\n\n\n回到我们的`toSlug（）`实现\n```\n// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  join('-')(\n    map(toLowerCase)(\n      split(' ')(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n```\n\n### compose（）\n我们可以使用一个自动组合这些函数的函数来展平嵌套，这意味着它将从一个函数获取输出并自动将其到下一个函数的输入，直到它输出最终值<br/>\n想象一下我们实现函数 `reduce（）` 的功能，但为了匹配上面的compose行为，我们需要它从右到左，而不是从左到右<br/>\n\n```\n// compose.js hosted with ❤ by GitHub\n\nconst compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);\n```\n\n上面的 `.reduceRight()` 与`.reduce（）`一样，数组`.reduceRight（）`方法采用reducer函数和初始值（`x`）。我们迭代数组函数（从右到左），依次将每个函数应用于累加值（`v`）<br/>\n\n使用compose，我们可以在没有嵌套的情况下重写 toSlug 的组合<br/>\n\n```\n// using-compose.js hosted with ❤ by GitHub\nconst toSlug = compose(\n  encodeURIComponent,\n  join('-'),\n  map(toLowerCase),\n  split(' ')\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n```\n\n### pipe（）\n\n还有另一种通常称为“pipe（）”的形式。 Lodash称之为`flow（）`<br/>\n\n```\n// pipe.js hosted with ❤ by GitHub\n\nconst pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\n\nconst fn1 = s => s.toLowerCase();\nconst fn2 = s => s.split('').reverse().join('');\nconst fn3 = s => s + '!'\n\nconst newFunc = pipe(fn1, fn2, fn3);\nconst result = newFunc('Time'); // emit!\n```\n\n我们看看用`pipe（）`实现的`toSlug（）`函数<br/>\n```\n// using-pipe.js hosted with ❤ by GitHub\n\nconst toSlug = pipe(\n  split(' '),\n  map(toLowerCase),\n  join('-'),\n  encodeURIComponent\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n```\n\n在命令式编程中，当您对某个变量执行转换时，您将在转换的每个步骤中找到对该变量的引用。上面的`pipe（）`实现是以无点的方式编写的，这意味着它根本不识别它运行的参数。<br/>\n\n### trace\n\n我经常在单元测试和Redux状态之类的东西中使用管道来消除对中间变量的需要，这些中间变量只存在于一个操作和下一个操作之间的瞬态值。<br/>\n\n```\n// using-trace.js hosted with ❤ by GitHub\n\nconst trace = curry((label, x) => {\n  console.log(`== ${ label }:  ${ x }`);\n  return x;\n});\n\nconst toSlug = pipe(\n  trace('input'),\n  split(' '),\n  map(toLowerCase),\n  trace('after map'),\n  join('-'),\n  encodeURIComponent\n);\n\nconsole.log(toSlug('JS Cheerleader'));\n// '== input:  JS Cheerleader'\n// '== after map:  js,cheerleader'\n// 'js-cheerleader'\n```\n\n\n`trace（）`只是更通用的`tap（）`的一种特殊形式，它允许你为流经管道的每个值执行一些操作<br/>\n```\n// tap.js hosted with ❤ by GitHub\n\nconst tap = curry((fn, x) => {\n  fn(x);\n  return x;\n});\n```\n\n现在可以看到`trace（）`是一个特殊的`tap（）`\n\n```\nconst trace = label => {\n  return tap(x => console.log(`== ${ label }:  ${ x }`));\n};\n```\n\n\n\n","slug":"javascript/functionalCombination","published":1,"updated":"2019-08-26T16:46:27.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7i0017kuu6pn2j7ccq","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>函数组合是将两个或多个函数组合以产生新函数的过程。将功能组合在一起就像将一系列管道拼凑在一起，以便我们的数据流过<br></p>\n<p>简而言之，函数<code>f</code>和<code>g</code>的组合可以定义为<code>f（g（x））</code>，它从内到外 - 从右到左进行求值<br></p>\n<h3 id=\"demo-toSlug\"><a href=\"#demo-toSlug\" class=\"headerlink\" title=\"demo toSlug\"></a>demo toSlug</h3><p>举例子，想象一个场景，想要将用户的全名转换为URL slugs，以便为每个用户提供个人资料页面。为此，需要完成一系列步骤：</p>\n<ol>\n<li>将名称拆分为空格中的数组</li>\n<li>将名称映射到小写</li>\n<li>加入破折号</li>\n<li>编码URI组件</li>\n</ol>\n<pre><code>// toslug.js hosted with ❤ by GitHub\n\nconst toSlug = input =&gt; encodeURIComponent(\n  input.split(&#39; &#39;)\n    .map(str =&gt; str.toLowerCase())\n    .join(&#39;-&#39;)\n);\n</code></pre><h3 id=\"组合功能\"><a href=\"#组合功能\" class=\"headerlink\" title=\"组合功能\"></a>组合功能</h3><p>不错……但如果我告诉你它可能更具可读性呢？想象一下，这些操作中的每一个都具有相应的可组合功能。可以写成<br></p>\n<pre><code>// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input =&gt; encodeURIComponent(\n  join(&#39;-&#39;)(\n    map(toLowerCase)(\n      split(&#39; &#39;)(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;\n</code></pre><h3 id=\"简单的偏应用函数\"><a href=\"#简单的偏应用函数\" class=\"headerlink\" title=\"简单的偏应用函数\"></a>简单的偏应用函数</h3><p>这看起来比我们的第一次尝试更难阅读，但先放在这，我们继续以可组合形式的常用实用程序，如<code>split（）</code>，<code>join（）</code>和<code>map（）</code>。来实现<br></p>\n<pre><code>// composables.js hosted with ❤ by GitHub\n\nconst curry = fn =&gt; (...args) =&gt; fn.bind(null, ...args);\n\nconst map = curry((fn, arr) =&gt; arr.map(fn));\n\nconst join = curry((str, arr) =&gt; arr.join(str));\n\nconst toLowerCase = str =&gt; str.toLowerCase();\n\nconst split = curry((splitOn, str) =&gt; str.split(splitOn));</code></pre><p>上面的例子在技术上并不是真的柯里化，它总能产生一元函数，但是它是一个简单的偏应用函数。请参考<a href=\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\" target=\"_blank\" rel=\"noopener\">有关偏应用函数和柯里化的区别</a> <br></p>\n<p>回到我们的<code>toSlug（）</code>实现</p>\n<pre><code>// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input =&gt; encodeURIComponent(\n  join(&#39;-&#39;)(\n    map(toLowerCase)(\n      split(&#39; &#39;)(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;</code></pre><h3 id=\"compose（）\"><a href=\"#compose（）\" class=\"headerlink\" title=\"compose（）\"></a>compose（）</h3><p>我们可以使用一个自动组合这些函数的函数来展平嵌套，这意味着它将从一个函数获取输出并自动将其到下一个函数的输入，直到它输出最终值<br><br>想象一下我们实现函数 <code>reduce（）</code> 的功能，但为了匹配上面的compose行为，我们需要它从右到左，而不是从左到右<br></p>\n<pre><code>// compose.js hosted with ❤ by GitHub\n\nconst compose = (...fns) =&gt; x =&gt; fns.reduceRight((v, f) =&gt; f(v), x);const compose = (...fns) =&gt; x =&gt; fns.reduceRight((v, f) =&gt; f(v), x);</code></pre><p>上面的 <code>.reduceRight()</code> 与<code>.reduce（）</code>一样，数组<code>.reduceRight（）</code>方法采用reducer函数和初始值（<code>x</code>）。我们迭代数组函数（从右到左），依次将每个函数应用于累加值（<code>v</code>）<br></p>\n<p>使用compose，我们可以在没有嵌套的情况下重写 toSlug 的组合<br></p>\n<pre><code>// using-compose.js hosted with ❤ by GitHub\nconst toSlug = compose(\n  encodeURIComponent,\n  join(&#39;-&#39;),\n  map(toLowerCase),\n  split(&#39; &#39;)\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;</code></pre><h3 id=\"pipe（）\"><a href=\"#pipe（）\" class=\"headerlink\" title=\"pipe（）\"></a>pipe（）</h3><p>还有另一种通常称为“pipe（）”的形式。 Lodash称之为<code>flow（）</code><br></p>\n<pre><code>// pipe.js hosted with ❤ by GitHub\n\nconst pipe = (...fns) =&gt; x =&gt; fns.reduce((v, f) =&gt; f(v), x);\n\nconst fn1 = s =&gt; s.toLowerCase();\nconst fn2 = s =&gt; s.split(&#39;&#39;).reverse().join(&#39;&#39;);\nconst fn3 = s =&gt; s + &#39;!&#39;\n\nconst newFunc = pipe(fn1, fn2, fn3);\nconst result = newFunc(&#39;Time&#39;); // emit!</code></pre><p>我们看看用<code>pipe（）</code>实现的<code>toSlug（）</code>函数<br></p>\n<pre><code>// using-pipe.js hosted with ❤ by GitHub\n\nconst toSlug = pipe(\n  split(&#39; &#39;),\n  map(toLowerCase),\n  join(&#39;-&#39;),\n  encodeURIComponent\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;</code></pre><p>在命令式编程中，当您对某个变量执行转换时，您将在转换的每个步骤中找到对该变量的引用。上面的<code>pipe（）</code>实现是以无点的方式编写的，这意味着它根本不识别它运行的参数。<br></p>\n<h3 id=\"trace\"><a href=\"#trace\" class=\"headerlink\" title=\"trace\"></a>trace</h3><p>我经常在单元测试和Redux状态之类的东西中使用管道来消除对中间变量的需要，这些中间变量只存在于一个操作和下一个操作之间的瞬态值。<br></p>\n<pre><code>// using-trace.js hosted with ❤ by GitHub\n\nconst trace = curry((label, x) =&gt; {\n  console.log(`== ${ label }:  ${ x }`);\n  return x;\n});\n\nconst toSlug = pipe(\n  trace(&#39;input&#39;),\n  split(&#39; &#39;),\n  map(toLowerCase),\n  trace(&#39;after map&#39;),\n  join(&#39;-&#39;),\n  encodeURIComponent\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;));\n// &#39;== input:  JS Cheerleader&#39;\n// &#39;== after map:  js,cheerleader&#39;\n// &#39;js-cheerleader&#39;</code></pre><p><code>trace（）</code>只是更通用的<code>tap（）</code>的一种特殊形式，它允许你为流经管道的每个值执行一些操作<br></p>\n<pre><code>// tap.js hosted with ❤ by GitHub\n\nconst tap = curry((fn, x) =&gt; {\n  fn(x);\n  return x;\n});</code></pre><p>现在可以看到<code>trace（）</code>是一个特殊的<code>tap（）</code></p>\n<pre><code>const trace = label =&gt; {\n  return tap(x =&gt; console.log(`== ${ label }:  ${ x }`));\n};</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>函数组合是将两个或多个函数组合以产生新函数的过程。将功能组合在一起就像将一系列管道拼凑在一起，以便我们的数据流过<br></p>\n<p>简而言之，函数<code>f</code>和<code>g</code>的组合可以定义为<code>f（g（x））</code>，它从内到外 - 从右到左进行求值<br></p>\n<h3 id=\"demo-toSlug\"><a href=\"#demo-toSlug\" class=\"headerlink\" title=\"demo toSlug\"></a>demo toSlug</h3><p>举例子，想象一个场景，想要将用户的全名转换为URL slugs，以便为每个用户提供个人资料页面。为此，需要完成一系列步骤：</p>\n<ol>\n<li>将名称拆分为空格中的数组</li>\n<li>将名称映射到小写</li>\n<li>加入破折号</li>\n<li>编码URI组件</li>\n</ol>\n<pre><code>// toslug.js hosted with ❤ by GitHub\n\nconst toSlug = input =&gt; encodeURIComponent(\n  input.split(&#39; &#39;)\n    .map(str =&gt; str.toLowerCase())\n    .join(&#39;-&#39;)\n);\n</code></pre><h3 id=\"组合功能\"><a href=\"#组合功能\" class=\"headerlink\" title=\"组合功能\"></a>组合功能</h3><p>不错……但如果我告诉你它可能更具可读性呢？想象一下，这些操作中的每一个都具有相应的可组合功能。可以写成<br></p>\n<pre><code>// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input =&gt; encodeURIComponent(\n  join(&#39;-&#39;)(\n    map(toLowerCase)(\n      split(&#39; &#39;)(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;\n</code></pre><h3 id=\"简单的偏应用函数\"><a href=\"#简单的偏应用函数\" class=\"headerlink\" title=\"简单的偏应用函数\"></a>简单的偏应用函数</h3><p>这看起来比我们的第一次尝试更难阅读，但先放在这，我们继续以可组合形式的常用实用程序，如<code>split（）</code>，<code>join（）</code>和<code>map（）</code>。来实现<br></p>\n<pre><code>// composables.js hosted with ❤ by GitHub\n\nconst curry = fn =&gt; (...args) =&gt; fn.bind(null, ...args);\n\nconst map = curry((fn, arr) =&gt; arr.map(fn));\n\nconst join = curry((str, arr) =&gt; arr.join(str));\n\nconst toLowerCase = str =&gt; str.toLowerCase();\n\nconst split = curry((splitOn, str) =&gt; str.split(splitOn));</code></pre><p>上面的例子在技术上并不是真的柯里化，它总能产生一元函数，但是它是一个简单的偏应用函数。请参考<a href=\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\" target=\"_blank\" rel=\"noopener\">有关偏应用函数和柯里化的区别</a> <br></p>\n<p>回到我们的<code>toSlug（）</code>实现</p>\n<pre><code>// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input =&gt; encodeURIComponent(\n  join(&#39;-&#39;)(\n    map(toLowerCase)(\n      split(&#39; &#39;)(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;</code></pre><h3 id=\"compose（）\"><a href=\"#compose（）\" class=\"headerlink\" title=\"compose（）\"></a>compose（）</h3><p>我们可以使用一个自动组合这些函数的函数来展平嵌套，这意味着它将从一个函数获取输出并自动将其到下一个函数的输入，直到它输出最终值<br><br>想象一下我们实现函数 <code>reduce（）</code> 的功能，但为了匹配上面的compose行为，我们需要它从右到左，而不是从左到右<br></p>\n<pre><code>// compose.js hosted with ❤ by GitHub\n\nconst compose = (...fns) =&gt; x =&gt; fns.reduceRight((v, f) =&gt; f(v), x);const compose = (...fns) =&gt; x =&gt; fns.reduceRight((v, f) =&gt; f(v), x);</code></pre><p>上面的 <code>.reduceRight()</code> 与<code>.reduce（）</code>一样，数组<code>.reduceRight（）</code>方法采用reducer函数和初始值（<code>x</code>）。我们迭代数组函数（从右到左），依次将每个函数应用于累加值（<code>v</code>）<br></p>\n<p>使用compose，我们可以在没有嵌套的情况下重写 toSlug 的组合<br></p>\n<pre><code>// using-compose.js hosted with ❤ by GitHub\nconst toSlug = compose(\n  encodeURIComponent,\n  join(&#39;-&#39;),\n  map(toLowerCase),\n  split(&#39; &#39;)\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;</code></pre><h3 id=\"pipe（）\"><a href=\"#pipe（）\" class=\"headerlink\" title=\"pipe（）\"></a>pipe（）</h3><p>还有另一种通常称为“pipe（）”的形式。 Lodash称之为<code>flow（）</code><br></p>\n<pre><code>// pipe.js hosted with ❤ by GitHub\n\nconst pipe = (...fns) =&gt; x =&gt; fns.reduce((v, f) =&gt; f(v), x);\n\nconst fn1 = s =&gt; s.toLowerCase();\nconst fn2 = s =&gt; s.split(&#39;&#39;).reverse().join(&#39;&#39;);\nconst fn3 = s =&gt; s + &#39;!&#39;\n\nconst newFunc = pipe(fn1, fn2, fn3);\nconst result = newFunc(&#39;Time&#39;); // emit!</code></pre><p>我们看看用<code>pipe（）</code>实现的<code>toSlug（）</code>函数<br></p>\n<pre><code>// using-pipe.js hosted with ❤ by GitHub\n\nconst toSlug = pipe(\n  split(&#39; &#39;),\n  map(toLowerCase),\n  join(&#39;-&#39;),\n  encodeURIComponent\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;)); // &#39;js-cheerleader&#39;</code></pre><p>在命令式编程中，当您对某个变量执行转换时，您将在转换的每个步骤中找到对该变量的引用。上面的<code>pipe（）</code>实现是以无点的方式编写的，这意味着它根本不识别它运行的参数。<br></p>\n<h3 id=\"trace\"><a href=\"#trace\" class=\"headerlink\" title=\"trace\"></a>trace</h3><p>我经常在单元测试和Redux状态之类的东西中使用管道来消除对中间变量的需要，这些中间变量只存在于一个操作和下一个操作之间的瞬态值。<br></p>\n<pre><code>// using-trace.js hosted with ❤ by GitHub\n\nconst trace = curry((label, x) =&gt; {\n  console.log(`== ${ label }:  ${ x }`);\n  return x;\n});\n\nconst toSlug = pipe(\n  trace(&#39;input&#39;),\n  split(&#39; &#39;),\n  map(toLowerCase),\n  trace(&#39;after map&#39;),\n  join(&#39;-&#39;),\n  encodeURIComponent\n);\n\nconsole.log(toSlug(&#39;JS Cheerleader&#39;));\n// &#39;== input:  JS Cheerleader&#39;\n// &#39;== after map:  js,cheerleader&#39;\n// &#39;js-cheerleader&#39;</code></pre><p><code>trace（）</code>只是更通用的<code>tap（）</code>的一种特殊形式，它允许你为流经管道的每个值执行一些操作<br></p>\n<pre><code>// tap.js hosted with ❤ by GitHub\n\nconst tap = curry((fn, x) =&gt; {\n  fn(x);\n  return x;\n});</code></pre><p>现在可以看到<code>trace（）</code>是一个特殊的<code>tap（）</code></p>\n<pre><code>const trace = label =&gt; {\n  return tap(x =&gt; console.log(`== ${ label }:  ${ x }`));\n};</code></pre>"},{"title":"函数式编程-Point Free","date":"2019-07-25T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"### 概念\n\nPoint-free 是一种编程风格，其中函数定义不引用函数的参数。不用关心将要操作的数据是什样的。我们来看看 JavaScript 中的函数定义\n\n```\n// 表达式\nfunction foo (/* parameters are declared here*/) {}\n\n// 声明式\nconst foo = (/* parameters are declared here */) => // ...\nconst foo = function (/* parameters are declared here */) {}\n```\n\n\n如何在不引用所需参数的情况下在 JavaScript 中定义函数？我们不能使用 functionkeyword，也不能使用箭头函数（=>），因为它们需要声明形参（这将引用它的参数）。所以我们需要做的是调用一个返回函数的函数<br/>\n\n### demo1\n\n\n```\n// 非 Point-free. 因为函数引用了参数name\nvar greet = function(name) {\n  return ('hello ' + name).toUpperCase();\n}\n\n// Point-free 先定义基本的函数，不用关心中间变量str是什么，抽象基本结构\nvar toUpperCase = str => str.toUpperCase();\nvar hello = str => `hello ${str}`; \n\nvar greet = compose(hello, toUpperCase);\ngreet('renbo');\n```\n### demo2\n\n这个例子来自于<a href=\"https://fr.umio.us/favoring-curry/\">Favoring Curry</a><br/>\n假设我们从服务器获取这样的数据：\n\n```\nvar data = {\n  result: \"SUCCESS\",\n  tasks: [\n    {id: 104, complete: false,            priority: \"high\",\n              dueDate: \"2013-11-29\",      username: \"Scott\",\n              title: \"Do something\",      created: \"9/22/2013\"},\n    {id: 105, complete: false,            priority: \"medium\",\n              dueDate: \"2013-11-22\",      username: \"Lena\",\n              title: \"Do something else\", created: \"9/22/2013\"},\n    {id: 107, complete: true,             priority: \"high\",\n              dueDate: \"2013-11-22\",      username: \"Mike\",\n              title: \"Fix the foo\",       created: \"9/22/2013\"},\n    {id: 108, complete: false,            priority: \"low\",\n              dueDate: \"2013-11-15\",      username: \"Punam\",\n              title: \"Adjust the bar\",    created: \"9/25/2013\"},\n    {id: 110, complete: false,            priority: \"medium\",\n              dueDate: \"2013-11-15\",      username: \"Scott\",\n              title: \"Rename everything\", created: \"10/2/2013\"},\n    {id: 112, complete: true,             priority: \"high\",\n              dueDate: \"2013-11-27\",      username: \"Lena\",\n              title: \"Alter all quuxes\",  created: \"10/5/2013\"}\n  ]\n};\n```\n\n\n### getIncompleteTaskSummaries 函数\n\n我们需要一个名为 getIncompleteTaskSummaries 的函数，接收一个 username 作为参数，从服务器获取数据之后筛选出这个用户未完成的任务的 ids、priorities、titles、和 dueDate 数据，并且按照日期升序排序。<br/>\n\n以 Scott 为例，最终筛选出的数据为<br/>\n```\n[\n    {id: 110, title: \"Rename everything\", \n        dueDate: \"2013-11-15\", priority: \"medium\"},\n    {id: 104, title: \"Do something\", \n        dueDate: \"2013-11-29\", priority: \"high\"}\n]\n```\n\n```\nvar getIncompleteTaskSummaries = function(membername) {\n     return fetchData()\n         .then(function(data) {\n             return data.tasks;\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return task.username == membername\n             })\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return !task.complete\n             })\n         })\n         .then(function(tasks) {\n             return tasks.map(function(task) {\n                 return {\n                     id: task.id,\n                     dueDate: task.dueDate,\n                     title: task.title,\n                     priority: task.priority\n                 }\n             })\n         })\n         .then(function(tasks) {\n             return tasks.sort(function(first, second) {\n                 var a = first.dueDate,\n                     b = second.dueDate;\n                 return a < b ? -1 : a > b ? 1 : 0;\n             });\n         })\n         .then(function(task) {\n             console.log(task)\n         })\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### Point-free 模式<br/>\n\n```\n// 拆分基础函数\ncurry 为封装的通用 curry 韩式\nvar prop = curry(function(name, obj) {\n    return obj[name];\n});\n\nvar propEq = curry(function(name, val, obj) {\n    return obj[name] === val;\n});\n\nvar filter = curry(function(fn, arr) {\n    return arr.filter(fn)\n});\n\nvar map = curry(function(fn, arr) {\n    return arr.map(fn)\n});\n\nvar pick = curry(function(args, obj){\n    var result = {};\n    for (var i = 0; i < args.length; i++) {\n        result[args[i]] = obj[args[i]]\n    }\n    return result;\n});\n\nvar sortBy = curry(function(fn, arr) {\n    return arr.sort(function(a, b){\n        var a = fn(a),\n            b = fn(b);\n        return a < b ? -1 : a > b ? 1 : 0;\n    })\n});\n// 拼装\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(prop('tasks'))\n        .then(filter(propEq('username', membername)))\n        .then(filter(propEq('complete', false)))\n        .then(map(pick(['id', 'dueDate', 'title', 'priority'])))\n        .then(sortBy(prop('dueDate')))\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### 利用 ramda.js 实现 getIncompleteTaskSummarie\n\n如果直接使用 ramda.js，你可以省去编写基本函数<br/>\n```\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.prop('tasks'))\n        .then(R.filter(R.propEq('username', membername)))\n        .then(R.filter(R.propEq('complete', false)))\n        .then(R.map(R.pick(['id', 'dueDate', 'title', 'priority'])))\n        .then(R.sortBy(R.prop('dueDate')))\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### 利用 compose 实现 getIncompleteTaskSummaries\n\n可以从左到右\n\n```\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.compose(\n            R.sortBy(R.prop('dueDate')),\n            R.map(R.pick(['id', 'dueDate', 'title', 'priority'])),\n            R.filter(R.propEq('complete', false)),\n            R.filter(R.propEq('username', membername)),\n            R.prop('tasks')\n        ))\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### 利用 ramda.js 提供的 R.pipe 函数\n\n可以从左到右\n\n```\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n      .then(R.pipe(\n          R.prop('tasks'),\n          R.filter(R.propEq('username', membername)),\n          R.filter(R.propEq('complete', false)),\n          R.map(R.pick(['id', 'dueDate', 'title', 'priority']),\n          R.sortBy(R.prop('dueDate'))\n      ))\n};\n```\n\n\n\n\n\n\n","source":"_posts/javascript/functionalPoint.md","raw":"---\ntitle: 函数式编程-Point Free\ndate: 2019-7-25 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- 函数式编程\ncategories:\n- 函数式编程\n---\n### 概念\n\nPoint-free 是一种编程风格，其中函数定义不引用函数的参数。不用关心将要操作的数据是什样的。我们来看看 JavaScript 中的函数定义\n\n```\n// 表达式\nfunction foo (/* parameters are declared here*/) {}\n\n// 声明式\nconst foo = (/* parameters are declared here */) => // ...\nconst foo = function (/* parameters are declared here */) {}\n```\n\n\n如何在不引用所需参数的情况下在 JavaScript 中定义函数？我们不能使用 functionkeyword，也不能使用箭头函数（=>），因为它们需要声明形参（这将引用它的参数）。所以我们需要做的是调用一个返回函数的函数<br/>\n\n### demo1\n\n\n```\n// 非 Point-free. 因为函数引用了参数name\nvar greet = function(name) {\n  return ('hello ' + name).toUpperCase();\n}\n\n// Point-free 先定义基本的函数，不用关心中间变量str是什么，抽象基本结构\nvar toUpperCase = str => str.toUpperCase();\nvar hello = str => `hello ${str}`; \n\nvar greet = compose(hello, toUpperCase);\ngreet('renbo');\n```\n### demo2\n\n这个例子来自于<a href=\"https://fr.umio.us/favoring-curry/\">Favoring Curry</a><br/>\n假设我们从服务器获取这样的数据：\n\n```\nvar data = {\n  result: \"SUCCESS\",\n  tasks: [\n    {id: 104, complete: false,            priority: \"high\",\n              dueDate: \"2013-11-29\",      username: \"Scott\",\n              title: \"Do something\",      created: \"9/22/2013\"},\n    {id: 105, complete: false,            priority: \"medium\",\n              dueDate: \"2013-11-22\",      username: \"Lena\",\n              title: \"Do something else\", created: \"9/22/2013\"},\n    {id: 107, complete: true,             priority: \"high\",\n              dueDate: \"2013-11-22\",      username: \"Mike\",\n              title: \"Fix the foo\",       created: \"9/22/2013\"},\n    {id: 108, complete: false,            priority: \"low\",\n              dueDate: \"2013-11-15\",      username: \"Punam\",\n              title: \"Adjust the bar\",    created: \"9/25/2013\"},\n    {id: 110, complete: false,            priority: \"medium\",\n              dueDate: \"2013-11-15\",      username: \"Scott\",\n              title: \"Rename everything\", created: \"10/2/2013\"},\n    {id: 112, complete: true,             priority: \"high\",\n              dueDate: \"2013-11-27\",      username: \"Lena\",\n              title: \"Alter all quuxes\",  created: \"10/5/2013\"}\n  ]\n};\n```\n\n\n### getIncompleteTaskSummaries 函数\n\n我们需要一个名为 getIncompleteTaskSummaries 的函数，接收一个 username 作为参数，从服务器获取数据之后筛选出这个用户未完成的任务的 ids、priorities、titles、和 dueDate 数据，并且按照日期升序排序。<br/>\n\n以 Scott 为例，最终筛选出的数据为<br/>\n```\n[\n    {id: 110, title: \"Rename everything\", \n        dueDate: \"2013-11-15\", priority: \"medium\"},\n    {id: 104, title: \"Do something\", \n        dueDate: \"2013-11-29\", priority: \"high\"}\n]\n```\n\n```\nvar getIncompleteTaskSummaries = function(membername) {\n     return fetchData()\n         .then(function(data) {\n             return data.tasks;\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return task.username == membername\n             })\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return !task.complete\n             })\n         })\n         .then(function(tasks) {\n             return tasks.map(function(task) {\n                 return {\n                     id: task.id,\n                     dueDate: task.dueDate,\n                     title: task.title,\n                     priority: task.priority\n                 }\n             })\n         })\n         .then(function(tasks) {\n             return tasks.sort(function(first, second) {\n                 var a = first.dueDate,\n                     b = second.dueDate;\n                 return a < b ? -1 : a > b ? 1 : 0;\n             });\n         })\n         .then(function(task) {\n             console.log(task)\n         })\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### Point-free 模式<br/>\n\n```\n// 拆分基础函数\ncurry 为封装的通用 curry 韩式\nvar prop = curry(function(name, obj) {\n    return obj[name];\n});\n\nvar propEq = curry(function(name, val, obj) {\n    return obj[name] === val;\n});\n\nvar filter = curry(function(fn, arr) {\n    return arr.filter(fn)\n});\n\nvar map = curry(function(fn, arr) {\n    return arr.map(fn)\n});\n\nvar pick = curry(function(args, obj){\n    var result = {};\n    for (var i = 0; i < args.length; i++) {\n        result[args[i]] = obj[args[i]]\n    }\n    return result;\n});\n\nvar sortBy = curry(function(fn, arr) {\n    return arr.sort(function(a, b){\n        var a = fn(a),\n            b = fn(b);\n        return a < b ? -1 : a > b ? 1 : 0;\n    })\n});\n// 拼装\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(prop('tasks'))\n        .then(filter(propEq('username', membername)))\n        .then(filter(propEq('complete', false)))\n        .then(map(pick(['id', 'dueDate', 'title', 'priority'])))\n        .then(sortBy(prop('dueDate')))\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### 利用 ramda.js 实现 getIncompleteTaskSummarie\n\n如果直接使用 ramda.js，你可以省去编写基本函数<br/>\n```\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.prop('tasks'))\n        .then(R.filter(R.propEq('username', membername)))\n        .then(R.filter(R.propEq('complete', false)))\n        .then(R.map(R.pick(['id', 'dueDate', 'title', 'priority'])))\n        .then(R.sortBy(R.prop('dueDate')))\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### 利用 compose 实现 getIncompleteTaskSummaries\n\n可以从左到右\n\n```\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.compose(\n            R.sortBy(R.prop('dueDate')),\n            R.map(R.pick(['id', 'dueDate', 'title', 'priority'])),\n            R.filter(R.propEq('complete', false)),\n            R.filter(R.propEq('username', membername)),\n            R.prop('tasks')\n        ))\n};\n\ngetIncompleteTaskSummaries('Scott')\n```\n\n### 利用 ramda.js 提供的 R.pipe 函数\n\n可以从左到右\n\n```\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n      .then(R.pipe(\n          R.prop('tasks'),\n          R.filter(R.propEq('username', membername)),\n          R.filter(R.propEq('complete', false)),\n          R.map(R.pick(['id', 'dueDate', 'title', 'priority']),\n          R.sortBy(R.prop('dueDate'))\n      ))\n};\n```\n\n\n\n\n\n\n","slug":"javascript/functionalPoint","published":1,"updated":"2019-08-26T16:46:27.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7k001bkuu6g1v3kcfy","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Point-free 是一种编程风格，其中函数定义不引用函数的参数。不用关心将要操作的数据是什样的。我们来看看 JavaScript 中的函数定义</p>\n<pre><code>// 表达式\nfunction foo (/* parameters are declared here*/) {}\n\n// 声明式\nconst foo = (/* parameters are declared here */) =&gt; // ...\nconst foo = function (/* parameters are declared here */) {}</code></pre><p>如何在不引用所需参数的情况下在 JavaScript 中定义函数？我们不能使用 functionkeyword，也不能使用箭头函数（=&gt;），因为它们需要声明形参（这将引用它的参数）。所以我们需要做的是调用一个返回函数的函数<br></p>\n<h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1\"></a>demo1</h3><pre><code>// 非 Point-free. 因为函数引用了参数name\nvar greet = function(name) {\n  return (&#39;hello &#39; + name).toUpperCase();\n}\n\n// Point-free 先定义基本的函数，不用关心中间变量str是什么，抽象基本结构\nvar toUpperCase = str =&gt; str.toUpperCase();\nvar hello = str =&gt; `hello ${str}`; \n\nvar greet = compose(hello, toUpperCase);\ngreet(&#39;renbo&#39;);</code></pre><h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3><p>这个例子来自于<a href=\"https://fr.umio.us/favoring-curry/\" target=\"_blank\" rel=\"noopener\">Favoring Curry</a><br><br>假设我们从服务器获取这样的数据：</p>\n<pre><code>var data = {\n  result: &quot;SUCCESS&quot;,\n  tasks: [\n    {id: 104, complete: false,            priority: &quot;high&quot;,\n              dueDate: &quot;2013-11-29&quot;,      username: &quot;Scott&quot;,\n              title: &quot;Do something&quot;,      created: &quot;9/22/2013&quot;},\n    {id: 105, complete: false,            priority: &quot;medium&quot;,\n              dueDate: &quot;2013-11-22&quot;,      username: &quot;Lena&quot;,\n              title: &quot;Do something else&quot;, created: &quot;9/22/2013&quot;},\n    {id: 107, complete: true,             priority: &quot;high&quot;,\n              dueDate: &quot;2013-11-22&quot;,      username: &quot;Mike&quot;,\n              title: &quot;Fix the foo&quot;,       created: &quot;9/22/2013&quot;},\n    {id: 108, complete: false,            priority: &quot;low&quot;,\n              dueDate: &quot;2013-11-15&quot;,      username: &quot;Punam&quot;,\n              title: &quot;Adjust the bar&quot;,    created: &quot;9/25/2013&quot;},\n    {id: 110, complete: false,            priority: &quot;medium&quot;,\n              dueDate: &quot;2013-11-15&quot;,      username: &quot;Scott&quot;,\n              title: &quot;Rename everything&quot;, created: &quot;10/2/2013&quot;},\n    {id: 112, complete: true,             priority: &quot;high&quot;,\n              dueDate: &quot;2013-11-27&quot;,      username: &quot;Lena&quot;,\n              title: &quot;Alter all quuxes&quot;,  created: &quot;10/5/2013&quot;}\n  ]\n};</code></pre><h3 id=\"getIncompleteTaskSummaries-函数\"><a href=\"#getIncompleteTaskSummaries-函数\" class=\"headerlink\" title=\"getIncompleteTaskSummaries 函数\"></a>getIncompleteTaskSummaries 函数</h3><p>我们需要一个名为 getIncompleteTaskSummaries 的函数，接收一个 username 作为参数，从服务器获取数据之后筛选出这个用户未完成的任务的 ids、priorities、titles、和 dueDate 数据，并且按照日期升序排序。<br></p>\n<p>以 Scott 为例，最终筛选出的数据为<br></p>\n<pre><code>[\n    {id: 110, title: &quot;Rename everything&quot;, \n        dueDate: &quot;2013-11-15&quot;, priority: &quot;medium&quot;},\n    {id: 104, title: &quot;Do something&quot;, \n        dueDate: &quot;2013-11-29&quot;, priority: &quot;high&quot;}\n]</code></pre><pre><code>var getIncompleteTaskSummaries = function(membername) {\n     return fetchData()\n         .then(function(data) {\n             return data.tasks;\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return task.username == membername\n             })\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return !task.complete\n             })\n         })\n         .then(function(tasks) {\n             return tasks.map(function(task) {\n                 return {\n                     id: task.id,\n                     dueDate: task.dueDate,\n                     title: task.title,\n                     priority: task.priority\n                 }\n             })\n         })\n         .then(function(tasks) {\n             return tasks.sort(function(first, second) {\n                 var a = first.dueDate,\n                     b = second.dueDate;\n                 return a &lt; b ? -1 : a &gt; b ? 1 : 0;\n             });\n         })\n         .then(function(task) {\n             console.log(task)\n         })\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"Point-free-模式\"><a href=\"#Point-free-模式\" class=\"headerlink\" title=\"Point-free 模式\"></a>Point-free 模式<br></h3><pre><code>// 拆分基础函数\ncurry 为封装的通用 curry 韩式\nvar prop = curry(function(name, obj) {\n    return obj[name];\n});\n\nvar propEq = curry(function(name, val, obj) {\n    return obj[name] === val;\n});\n\nvar filter = curry(function(fn, arr) {\n    return arr.filter(fn)\n});\n\nvar map = curry(function(fn, arr) {\n    return arr.map(fn)\n});\n\nvar pick = curry(function(args, obj){\n    var result = {};\n    for (var i = 0; i &lt; args.length; i++) {\n        result[args[i]] = obj[args[i]]\n    }\n    return result;\n});\n\nvar sortBy = curry(function(fn, arr) {\n    return arr.sort(function(a, b){\n        var a = fn(a),\n            b = fn(b);\n        return a &lt; b ? -1 : a &gt; b ? 1 : 0;\n    })\n});\n// 拼装\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(prop(&#39;tasks&#39;))\n        .then(filter(propEq(&#39;username&#39;, membername)))\n        .then(filter(propEq(&#39;complete&#39;, false)))\n        .then(map(pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;])))\n        .then(sortBy(prop(&#39;dueDate&#39;)))\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"利用-ramda-js-实现-getIncompleteTaskSummarie\"><a href=\"#利用-ramda-js-实现-getIncompleteTaskSummarie\" class=\"headerlink\" title=\"利用 ramda.js 实现 getIncompleteTaskSummarie\"></a>利用 ramda.js 实现 getIncompleteTaskSummarie</h3><p>如果直接使用 ramda.js，你可以省去编写基本函数<br></p>\n<pre><code>var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.prop(&#39;tasks&#39;))\n        .then(R.filter(R.propEq(&#39;username&#39;, membername)))\n        .then(R.filter(R.propEq(&#39;complete&#39;, false)))\n        .then(R.map(R.pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;])))\n        .then(R.sortBy(R.prop(&#39;dueDate&#39;)))\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"利用-compose-实现-getIncompleteTaskSummaries\"><a href=\"#利用-compose-实现-getIncompleteTaskSummaries\" class=\"headerlink\" title=\"利用 compose 实现 getIncompleteTaskSummaries\"></a>利用 compose 实现 getIncompleteTaskSummaries</h3><p>可以从左到右</p>\n<pre><code>var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.compose(\n            R.sortBy(R.prop(&#39;dueDate&#39;)),\n            R.map(R.pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;])),\n            R.filter(R.propEq(&#39;complete&#39;, false)),\n            R.filter(R.propEq(&#39;username&#39;, membername)),\n            R.prop(&#39;tasks&#39;)\n        ))\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"利用-ramda-js-提供的-R-pipe-函数\"><a href=\"#利用-ramda-js-提供的-R-pipe-函数\" class=\"headerlink\" title=\"利用 ramda.js 提供的 R.pipe 函数\"></a>利用 ramda.js 提供的 R.pipe 函数</h3><p>可以从左到右</p>\n<pre><code>var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n      .then(R.pipe(\n          R.prop(&#39;tasks&#39;),\n          R.filter(R.propEq(&#39;username&#39;, membername)),\n          R.filter(R.propEq(&#39;complete&#39;, false)),\n          R.map(R.pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;]),\n          R.sortBy(R.prop(&#39;dueDate&#39;))\n      ))\n};</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Point-free 是一种编程风格，其中函数定义不引用函数的参数。不用关心将要操作的数据是什样的。我们来看看 JavaScript 中的函数定义</p>\n<pre><code>// 表达式\nfunction foo (/* parameters are declared here*/) {}\n\n// 声明式\nconst foo = (/* parameters are declared here */) =&gt; // ...\nconst foo = function (/* parameters are declared here */) {}</code></pre><p>如何在不引用所需参数的情况下在 JavaScript 中定义函数？我们不能使用 functionkeyword，也不能使用箭头函数（=&gt;），因为它们需要声明形参（这将引用它的参数）。所以我们需要做的是调用一个返回函数的函数<br></p>\n<h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1\"></a>demo1</h3><pre><code>// 非 Point-free. 因为函数引用了参数name\nvar greet = function(name) {\n  return (&#39;hello &#39; + name).toUpperCase();\n}\n\n// Point-free 先定义基本的函数，不用关心中间变量str是什么，抽象基本结构\nvar toUpperCase = str =&gt; str.toUpperCase();\nvar hello = str =&gt; `hello ${str}`; \n\nvar greet = compose(hello, toUpperCase);\ngreet(&#39;renbo&#39;);</code></pre><h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3><p>这个例子来自于<a href=\"https://fr.umio.us/favoring-curry/\" target=\"_blank\" rel=\"noopener\">Favoring Curry</a><br><br>假设我们从服务器获取这样的数据：</p>\n<pre><code>var data = {\n  result: &quot;SUCCESS&quot;,\n  tasks: [\n    {id: 104, complete: false,            priority: &quot;high&quot;,\n              dueDate: &quot;2013-11-29&quot;,      username: &quot;Scott&quot;,\n              title: &quot;Do something&quot;,      created: &quot;9/22/2013&quot;},\n    {id: 105, complete: false,            priority: &quot;medium&quot;,\n              dueDate: &quot;2013-11-22&quot;,      username: &quot;Lena&quot;,\n              title: &quot;Do something else&quot;, created: &quot;9/22/2013&quot;},\n    {id: 107, complete: true,             priority: &quot;high&quot;,\n              dueDate: &quot;2013-11-22&quot;,      username: &quot;Mike&quot;,\n              title: &quot;Fix the foo&quot;,       created: &quot;9/22/2013&quot;},\n    {id: 108, complete: false,            priority: &quot;low&quot;,\n              dueDate: &quot;2013-11-15&quot;,      username: &quot;Punam&quot;,\n              title: &quot;Adjust the bar&quot;,    created: &quot;9/25/2013&quot;},\n    {id: 110, complete: false,            priority: &quot;medium&quot;,\n              dueDate: &quot;2013-11-15&quot;,      username: &quot;Scott&quot;,\n              title: &quot;Rename everything&quot;, created: &quot;10/2/2013&quot;},\n    {id: 112, complete: true,             priority: &quot;high&quot;,\n              dueDate: &quot;2013-11-27&quot;,      username: &quot;Lena&quot;,\n              title: &quot;Alter all quuxes&quot;,  created: &quot;10/5/2013&quot;}\n  ]\n};</code></pre><h3 id=\"getIncompleteTaskSummaries-函数\"><a href=\"#getIncompleteTaskSummaries-函数\" class=\"headerlink\" title=\"getIncompleteTaskSummaries 函数\"></a>getIncompleteTaskSummaries 函数</h3><p>我们需要一个名为 getIncompleteTaskSummaries 的函数，接收一个 username 作为参数，从服务器获取数据之后筛选出这个用户未完成的任务的 ids、priorities、titles、和 dueDate 数据，并且按照日期升序排序。<br></p>\n<p>以 Scott 为例，最终筛选出的数据为<br></p>\n<pre><code>[\n    {id: 110, title: &quot;Rename everything&quot;, \n        dueDate: &quot;2013-11-15&quot;, priority: &quot;medium&quot;},\n    {id: 104, title: &quot;Do something&quot;, \n        dueDate: &quot;2013-11-29&quot;, priority: &quot;high&quot;}\n]</code></pre><pre><code>var getIncompleteTaskSummaries = function(membername) {\n     return fetchData()\n         .then(function(data) {\n             return data.tasks;\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return task.username == membername\n             })\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return !task.complete\n             })\n         })\n         .then(function(tasks) {\n             return tasks.map(function(task) {\n                 return {\n                     id: task.id,\n                     dueDate: task.dueDate,\n                     title: task.title,\n                     priority: task.priority\n                 }\n             })\n         })\n         .then(function(tasks) {\n             return tasks.sort(function(first, second) {\n                 var a = first.dueDate,\n                     b = second.dueDate;\n                 return a &lt; b ? -1 : a &gt; b ? 1 : 0;\n             });\n         })\n         .then(function(task) {\n             console.log(task)\n         })\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"Point-free-模式\"><a href=\"#Point-free-模式\" class=\"headerlink\" title=\"Point-free 模式\"></a>Point-free 模式<br></h3><pre><code>// 拆分基础函数\ncurry 为封装的通用 curry 韩式\nvar prop = curry(function(name, obj) {\n    return obj[name];\n});\n\nvar propEq = curry(function(name, val, obj) {\n    return obj[name] === val;\n});\n\nvar filter = curry(function(fn, arr) {\n    return arr.filter(fn)\n});\n\nvar map = curry(function(fn, arr) {\n    return arr.map(fn)\n});\n\nvar pick = curry(function(args, obj){\n    var result = {};\n    for (var i = 0; i &lt; args.length; i++) {\n        result[args[i]] = obj[args[i]]\n    }\n    return result;\n});\n\nvar sortBy = curry(function(fn, arr) {\n    return arr.sort(function(a, b){\n        var a = fn(a),\n            b = fn(b);\n        return a &lt; b ? -1 : a &gt; b ? 1 : 0;\n    })\n});\n// 拼装\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(prop(&#39;tasks&#39;))\n        .then(filter(propEq(&#39;username&#39;, membername)))\n        .then(filter(propEq(&#39;complete&#39;, false)))\n        .then(map(pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;])))\n        .then(sortBy(prop(&#39;dueDate&#39;)))\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"利用-ramda-js-实现-getIncompleteTaskSummarie\"><a href=\"#利用-ramda-js-实现-getIncompleteTaskSummarie\" class=\"headerlink\" title=\"利用 ramda.js 实现 getIncompleteTaskSummarie\"></a>利用 ramda.js 实现 getIncompleteTaskSummarie</h3><p>如果直接使用 ramda.js，你可以省去编写基本函数<br></p>\n<pre><code>var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.prop(&#39;tasks&#39;))\n        .then(R.filter(R.propEq(&#39;username&#39;, membername)))\n        .then(R.filter(R.propEq(&#39;complete&#39;, false)))\n        .then(R.map(R.pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;])))\n        .then(R.sortBy(R.prop(&#39;dueDate&#39;)))\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"利用-compose-实现-getIncompleteTaskSummaries\"><a href=\"#利用-compose-实现-getIncompleteTaskSummaries\" class=\"headerlink\" title=\"利用 compose 实现 getIncompleteTaskSummaries\"></a>利用 compose 实现 getIncompleteTaskSummaries</h3><p>可以从左到右</p>\n<pre><code>var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.compose(\n            R.sortBy(R.prop(&#39;dueDate&#39;)),\n            R.map(R.pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;])),\n            R.filter(R.propEq(&#39;complete&#39;, false)),\n            R.filter(R.propEq(&#39;username&#39;, membername)),\n            R.prop(&#39;tasks&#39;)\n        ))\n};\n\ngetIncompleteTaskSummaries(&#39;Scott&#39;)</code></pre><h3 id=\"利用-ramda-js-提供的-R-pipe-函数\"><a href=\"#利用-ramda-js-提供的-R-pipe-函数\" class=\"headerlink\" title=\"利用 ramda.js 提供的 R.pipe 函数\"></a>利用 ramda.js 提供的 R.pipe 函数</h3><p>可以从左到右</p>\n<pre><code>var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n      .then(R.pipe(\n          R.prop(&#39;tasks&#39;),\n          R.filter(R.propEq(&#39;username&#39;, membername)),\n          R.filter(R.propEq(&#39;complete&#39;, false)),\n          R.map(R.pick([&#39;id&#39;, &#39;dueDate&#39;, &#39;title&#39;, &#39;priority&#39;]),\n          R.sortBy(R.prop(&#39;dueDate&#39;))\n      ))\n};</code></pre>"},{"title":"面向对象之继承","date":"2019-03-15T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n原型链虽然很强大，也可以用它来实现继承，但是总会有这样那样的问题。其中最主要的问题是原型链的引用问题。下面借鉴JS高程中的几种方式来学习JS继承,JS继承也是面向对象（oo）编程，但不使用类或者接口，而是使用创建对象的形式。虽然在ES6中实现了Class但其实只是语法糖，原理依然是__proto__。在JS超集中（TypeScript）用类与接口实现继承，会在后续文章中学习记录。\n\n### 原型链继承\n\n```\nfunction Parent () {\n  this.name = 'zhansan';\n}\n\nParent.prototype.sayName = function () {\n    console.log(this.name);\n}\n\nfunction Child () {\n}\n\nChild.prototype = new Parent();\n\nvar child = new Child();\nchild.sayName() // zhangsan\n```\n\n  问题\n\n  - 引用类型的值的原型属性会被所有实例共享\n  - 在创建子类型的实例时不能向超类型的构造函数传参（没法办在不影响所有对象实例的情况下传参）\n\n### 借用构造函数继承（经典继承）\n\n在子类构造函数内部调用超类型构造函数\n\n```\nfunction Parent () {\n  this.name = ['zhangsan', 'lisi'];\n}\n\nfunction Child () {\n  Parent.call(this);\n}\n\nvar child = new Child();\nchild.name.push('wangyu');\nchild.name() // ['zhangsan', 'lisi' ,'wangyu']\n\nvar child1 = new Child();\nchild1.name() //  ['zhangsan', 'lisi']\n```\n\n优点：解决了原型链继承的问题\n\n缺点：方法都在构造函数中定义，函数无法复用，创建实例时方法都会被创建一遍\n\n\n### 组合继承（伪经典继承）\n\n```\nfunction Parent (name) {\n  this.name = name;\n  this.colors = ['red', 'blue', 'green'];\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name)\n}\n\nfunction Child (name, age) {\n\n  Parent.call(this, name);\n  this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child = new Child('zhangsan', '20');\nchild.colors.push('black');\n\nconsole.log(child.name); // zhangsan\nconsole.log(child.age); // 20\nconsole.log(child.colors); // [\"red\", \"blue\", \"green\", \"black\"]\n\nvar child1 = new Child('lisi', '28');\nconsole.log(child1.name); // lisi\nconsole.log(child1.age); // 28\nconsole.log(child1.colors); // [\"red\", \"blue\", \"green\"]\n```\n\n优点：融合原型链继承和构造函数的优\n\n缺点：调用多次超类构造函数\n\n\n### 原型式继承（道格拉斯）\n\n```\nfunction createObj(o) {\n  function F(){}\n  F.prototype = o;\n  return new F();\n}\n\nvar person = {\n  name: 'zhansan',\n  hobbies: ['swimming', 'reading']\n}\n\nvar person1 = createObj(person);\nvar person2 = createObj(person);\n\nperson1.name = 'person';\nconsole.log(person2.name); // zhangsan\n\nperson2.hobbies.push('running');\nconsole.log(person2.hobbies); // [\"swimming\", \"reading\", \"running\"]\n\n```\n\n缺点：引用类型的值的原型属性会被所有实例共享\n\n### 寄生式继承（道格拉斯升级版）\n\n```\nfunction createObj (o) {\n  var clone = Object.create(o);\n  clone.sayName = function () {\n      console.log('zhangsan');\n  }\n  return clone;\n}\n```\n\n缺点：跟借用构造函数模式一样，创建实例时方法都会被创建一遍\n\n### 寄生组合式继承\n\n```\nfunction inheritPrototype(Child, Parent){\n  var prototype = Object.create(superType.prototype);\n  prototype.constructor = Child;\n  Child.prototype = prototype;\n}\nfunction Parent(name){\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nParent.prototype.sayName = function(){\n  console.log(this.name);\n};\nfunction Child(name, age){\n  Parent.call(this, name);\n  this.age = age;\n}\ninheritPrototype(Child, Parent);//实现继承\nChild.prototype.sayAge = function(){\n  console.log(this.age);\n}; \n\n```\n\n优点：保证了原型链链路的正确性,没有多余的属性等优点，所以最为理想的ES5继承\n\n### ES6继承\n\n```\n//class 相当于es5中构造函数\n//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中\n//class中定义的所有方法是不可枚举的\n//class中只能定义方法，不能定义对象，变量等\n//class和方法内默认都是严格模式\n//es5中constructor为隐式属性\nclass Parent{\n  constructor(name='wang',age='27'){\n    this.name = name;\n    this.age = age;\n  }\n  eat(){\n    console.log(`${this.name} ${this.age} eat food`)\n  }\n}\n//继承父类\nclass Child extends Parent{ \n  constructor(name = 'ren',age = '27'){ \n    //继承父类属性\n    super(name, age); \n  } \n    eat(){ \n    //继承父类方法\n      super.eat() \n    } \n} \nlet child =new Child('xiaoxiami'); \nchild.eat();\n```\n\n优点\n\n- 在语法糖下代码量明显减少，和ES6区别ES5继承首先是在子类中创建自己的this指向，最后将方法添加到this中\n\n```\nChild.prototype=new Parent() || Parent.apply(this) || Parent.call(this)\n```\n\n- es6继承是使用关键字先创建父类的实例对象this，最后在子类class中修改this\n\n\n\n\n\n\n\n","source":"_posts/javascript/inheritance.md","raw":"---\ntitle: 面向对象之继承\ndate: 2019-3-15 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n原型链虽然很强大，也可以用它来实现继承，但是总会有这样那样的问题。其中最主要的问题是原型链的引用问题。下面借鉴JS高程中的几种方式来学习JS继承,JS继承也是面向对象（oo）编程，但不使用类或者接口，而是使用创建对象的形式。虽然在ES6中实现了Class但其实只是语法糖，原理依然是__proto__。在JS超集中（TypeScript）用类与接口实现继承，会在后续文章中学习记录。\n\n### 原型链继承\n\n```\nfunction Parent () {\n  this.name = 'zhansan';\n}\n\nParent.prototype.sayName = function () {\n    console.log(this.name);\n}\n\nfunction Child () {\n}\n\nChild.prototype = new Parent();\n\nvar child = new Child();\nchild.sayName() // zhangsan\n```\n\n  问题\n\n  - 引用类型的值的原型属性会被所有实例共享\n  - 在创建子类型的实例时不能向超类型的构造函数传参（没法办在不影响所有对象实例的情况下传参）\n\n### 借用构造函数继承（经典继承）\n\n在子类构造函数内部调用超类型构造函数\n\n```\nfunction Parent () {\n  this.name = ['zhangsan', 'lisi'];\n}\n\nfunction Child () {\n  Parent.call(this);\n}\n\nvar child = new Child();\nchild.name.push('wangyu');\nchild.name() // ['zhangsan', 'lisi' ,'wangyu']\n\nvar child1 = new Child();\nchild1.name() //  ['zhangsan', 'lisi']\n```\n\n优点：解决了原型链继承的问题\n\n缺点：方法都在构造函数中定义，函数无法复用，创建实例时方法都会被创建一遍\n\n\n### 组合继承（伪经典继承）\n\n```\nfunction Parent (name) {\n  this.name = name;\n  this.colors = ['red', 'blue', 'green'];\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name)\n}\n\nfunction Child (name, age) {\n\n  Parent.call(this, name);\n  this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child = new Child('zhangsan', '20');\nchild.colors.push('black');\n\nconsole.log(child.name); // zhangsan\nconsole.log(child.age); // 20\nconsole.log(child.colors); // [\"red\", \"blue\", \"green\", \"black\"]\n\nvar child1 = new Child('lisi', '28');\nconsole.log(child1.name); // lisi\nconsole.log(child1.age); // 28\nconsole.log(child1.colors); // [\"red\", \"blue\", \"green\"]\n```\n\n优点：融合原型链继承和构造函数的优\n\n缺点：调用多次超类构造函数\n\n\n### 原型式继承（道格拉斯）\n\n```\nfunction createObj(o) {\n  function F(){}\n  F.prototype = o;\n  return new F();\n}\n\nvar person = {\n  name: 'zhansan',\n  hobbies: ['swimming', 'reading']\n}\n\nvar person1 = createObj(person);\nvar person2 = createObj(person);\n\nperson1.name = 'person';\nconsole.log(person2.name); // zhangsan\n\nperson2.hobbies.push('running');\nconsole.log(person2.hobbies); // [\"swimming\", \"reading\", \"running\"]\n\n```\n\n缺点：引用类型的值的原型属性会被所有实例共享\n\n### 寄生式继承（道格拉斯升级版）\n\n```\nfunction createObj (o) {\n  var clone = Object.create(o);\n  clone.sayName = function () {\n      console.log('zhangsan');\n  }\n  return clone;\n}\n```\n\n缺点：跟借用构造函数模式一样，创建实例时方法都会被创建一遍\n\n### 寄生组合式继承\n\n```\nfunction inheritPrototype(Child, Parent){\n  var prototype = Object.create(superType.prototype);\n  prototype.constructor = Child;\n  Child.prototype = prototype;\n}\nfunction Parent(name){\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\nParent.prototype.sayName = function(){\n  console.log(this.name);\n};\nfunction Child(name, age){\n  Parent.call(this, name);\n  this.age = age;\n}\ninheritPrototype(Child, Parent);//实现继承\nChild.prototype.sayAge = function(){\n  console.log(this.age);\n}; \n\n```\n\n优点：保证了原型链链路的正确性,没有多余的属性等优点，所以最为理想的ES5继承\n\n### ES6继承\n\n```\n//class 相当于es5中构造函数\n//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中\n//class中定义的所有方法是不可枚举的\n//class中只能定义方法，不能定义对象，变量等\n//class和方法内默认都是严格模式\n//es5中constructor为隐式属性\nclass Parent{\n  constructor(name='wang',age='27'){\n    this.name = name;\n    this.age = age;\n  }\n  eat(){\n    console.log(`${this.name} ${this.age} eat food`)\n  }\n}\n//继承父类\nclass Child extends Parent{ \n  constructor(name = 'ren',age = '27'){ \n    //继承父类属性\n    super(name, age); \n  } \n    eat(){ \n    //继承父类方法\n      super.eat() \n    } \n} \nlet child =new Child('xiaoxiami'); \nchild.eat();\n```\n\n优点\n\n- 在语法糖下代码量明显减少，和ES6区别ES5继承首先是在子类中创建自己的this指向，最后将方法添加到this中\n\n```\nChild.prototype=new Parent() || Parent.apply(this) || Parent.call(this)\n```\n\n- es6继承是使用关键字先创建父类的实例对象this，最后在子类class中修改this\n\n\n\n\n\n\n\n","slug":"javascript/inheritance","published":1,"updated":"2019-08-26T16:46:27.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7m001dkuu6dlbihjd3","content":"<p>原型链虽然很强大，也可以用它来实现继承，但是总会有这样那样的问题。其中最主要的问题是原型链的引用问题。下面借鉴JS高程中的几种方式来学习JS继承,JS继承也是面向对象（oo）编程，但不使用类或者接口，而是使用创建对象的形式。虽然在ES6中实现了Class但其实只是语法糖，原理依然是<strong>proto</strong>。在JS超集中（TypeScript）用类与接口实现继承，会在后续文章中学习记录。</p>\n<h3 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h3><pre><code>function Parent () {\n  this.name = &#39;zhansan&#39;;\n}\n\nParent.prototype.sayName = function () {\n    console.log(this.name);\n}\n\nfunction Child () {\n}\n\nChild.prototype = new Parent();\n\nvar child = new Child();\nchild.sayName() // zhangsan</code></pre><p>  问题</p>\n<ul>\n<li>引用类型的值的原型属性会被所有实例共享</li>\n<li>在创建子类型的实例时不能向超类型的构造函数传参（没法办在不影响所有对象实例的情况下传参）</li>\n</ul>\n<h3 id=\"借用构造函数继承（经典继承）\"><a href=\"#借用构造函数继承（经典继承）\" class=\"headerlink\" title=\"借用构造函数继承（经典继承）\"></a>借用构造函数继承（经典继承）</h3><p>在子类构造函数内部调用超类型构造函数</p>\n<pre><code>function Parent () {\n  this.name = [&#39;zhangsan&#39;, &#39;lisi&#39;];\n}\n\nfunction Child () {\n  Parent.call(this);\n}\n\nvar child = new Child();\nchild.name.push(&#39;wangyu&#39;);\nchild.name() // [&#39;zhangsan&#39;, &#39;lisi&#39; ,&#39;wangyu&#39;]\n\nvar child1 = new Child();\nchild1.name() //  [&#39;zhangsan&#39;, &#39;lisi&#39;]</code></pre><p>优点：解决了原型链继承的问题</p>\n<p>缺点：方法都在构造函数中定义，函数无法复用，创建实例时方法都会被创建一遍</p>\n<h3 id=\"组合继承（伪经典继承）\"><a href=\"#组合继承（伪经典继承）\" class=\"headerlink\" title=\"组合继承（伪经典继承）\"></a>组合继承（伪经典继承）</h3><pre><code>function Parent (name) {\n  this.name = name;\n  this.colors = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;];\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name)\n}\n\nfunction Child (name, age) {\n\n  Parent.call(this, name);\n  this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child = new Child(&#39;zhangsan&#39;, &#39;20&#39;);\nchild.colors.push(&#39;black&#39;);\n\nconsole.log(child.name); // zhangsan\nconsole.log(child.age); // 20\nconsole.log(child.colors); // [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]\n\nvar child1 = new Child(&#39;lisi&#39;, &#39;28&#39;);\nconsole.log(child1.name); // lisi\nconsole.log(child1.age); // 28\nconsole.log(child1.colors); // [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</code></pre><p>优点：融合原型链继承和构造函数的优</p>\n<p>缺点：调用多次超类构造函数</p>\n<h3 id=\"原型式继承（道格拉斯）\"><a href=\"#原型式继承（道格拉斯）\" class=\"headerlink\" title=\"原型式继承（道格拉斯）\"></a>原型式继承（道格拉斯）</h3><pre><code>function createObj(o) {\n  function F(){}\n  F.prototype = o;\n  return new F();\n}\n\nvar person = {\n  name: &#39;zhansan&#39;,\n  hobbies: [&#39;swimming&#39;, &#39;reading&#39;]\n}\n\nvar person1 = createObj(person);\nvar person2 = createObj(person);\n\nperson1.name = &#39;person&#39;;\nconsole.log(person2.name); // zhangsan\n\nperson2.hobbies.push(&#39;running&#39;);\nconsole.log(person2.hobbies); // [&quot;swimming&quot;, &quot;reading&quot;, &quot;running&quot;]\n</code></pre><p>缺点：引用类型的值的原型属性会被所有实例共享</p>\n<h3 id=\"寄生式继承（道格拉斯升级版）\"><a href=\"#寄生式继承（道格拉斯升级版）\" class=\"headerlink\" title=\"寄生式继承（道格拉斯升级版）\"></a>寄生式继承（道格拉斯升级版）</h3><pre><code>function createObj (o) {\n  var clone = Object.create(o);\n  clone.sayName = function () {\n      console.log(&#39;zhangsan&#39;);\n  }\n  return clone;\n}</code></pre><p>缺点：跟借用构造函数模式一样，创建实例时方法都会被创建一遍</p>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><pre><code>function inheritPrototype(Child, Parent){\n  var prototype = Object.create(superType.prototype);\n  prototype.constructor = Child;\n  Child.prototype = prototype;\n}\nfunction Parent(name){\n  this.name = name;\n  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];\n}\nParent.prototype.sayName = function(){\n  console.log(this.name);\n};\nfunction Child(name, age){\n  Parent.call(this, name);\n  this.age = age;\n}\ninheritPrototype(Child, Parent);//实现继承\nChild.prototype.sayAge = function(){\n  console.log(this.age);\n}; \n</code></pre><p>优点：保证了原型链链路的正确性,没有多余的属性等优点，所以最为理想的ES5继承</p>\n<h3 id=\"ES6继承\"><a href=\"#ES6继承\" class=\"headerlink\" title=\"ES6继承\"></a>ES6继承</h3><pre><code>//class 相当于es5中构造函数\n//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中\n//class中定义的所有方法是不可枚举的\n//class中只能定义方法，不能定义对象，变量等\n//class和方法内默认都是严格模式\n//es5中constructor为隐式属性\nclass Parent{\n  constructor(name=&#39;wang&#39;,age=&#39;27&#39;){\n    this.name = name;\n    this.age = age;\n  }\n  eat(){\n    console.log(`${this.name} ${this.age} eat food`)\n  }\n}\n//继承父类\nclass Child extends Parent{ \n  constructor(name = &#39;ren&#39;,age = &#39;27&#39;){ \n    //继承父类属性\n    super(name, age); \n  } \n    eat(){ \n    //继承父类方法\n      super.eat() \n    } \n} \nlet child =new Child(&#39;xiaoxiami&#39;); \nchild.eat();</code></pre><p>优点</p>\n<ul>\n<li>在语法糖下代码量明显减少，和ES6区别ES5继承首先是在子类中创建自己的this指向，最后将方法添加到this中</li>\n</ul>\n<pre><code>Child.prototype=new Parent() || Parent.apply(this) || Parent.call(this)</code></pre><ul>\n<li>es6继承是使用关键字先创建父类的实例对象this，最后在子类class中修改this</li>\n</ul>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>原型链虽然很强大，也可以用它来实现继承，但是总会有这样那样的问题。其中最主要的问题是原型链的引用问题。下面借鉴JS高程中的几种方式来学习JS继承,JS继承也是面向对象（oo）编程，但不使用类或者接口，而是使用创建对象的形式。虽然在ES6中实现了Class但其实只是语法糖，原理依然是<strong>proto</strong>。在JS超集中（TypeScript）用类与接口实现继承，会在后续文章中学习记录。</p>\n<h3 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h3><pre><code>function Parent () {\n  this.name = &#39;zhansan&#39;;\n}\n\nParent.prototype.sayName = function () {\n    console.log(this.name);\n}\n\nfunction Child () {\n}\n\nChild.prototype = new Parent();\n\nvar child = new Child();\nchild.sayName() // zhangsan</code></pre><p>  问题</p>\n<ul>\n<li>引用类型的值的原型属性会被所有实例共享</li>\n<li>在创建子类型的实例时不能向超类型的构造函数传参（没法办在不影响所有对象实例的情况下传参）</li>\n</ul>\n<h3 id=\"借用构造函数继承（经典继承）\"><a href=\"#借用构造函数继承（经典继承）\" class=\"headerlink\" title=\"借用构造函数继承（经典继承）\"></a>借用构造函数继承（经典继承）</h3><p>在子类构造函数内部调用超类型构造函数</p>\n<pre><code>function Parent () {\n  this.name = [&#39;zhangsan&#39;, &#39;lisi&#39;];\n}\n\nfunction Child () {\n  Parent.call(this);\n}\n\nvar child = new Child();\nchild.name.push(&#39;wangyu&#39;);\nchild.name() // [&#39;zhangsan&#39;, &#39;lisi&#39; ,&#39;wangyu&#39;]\n\nvar child1 = new Child();\nchild1.name() //  [&#39;zhangsan&#39;, &#39;lisi&#39;]</code></pre><p>优点：解决了原型链继承的问题</p>\n<p>缺点：方法都在构造函数中定义，函数无法复用，创建实例时方法都会被创建一遍</p>\n<h3 id=\"组合继承（伪经典继承）\"><a href=\"#组合继承（伪经典继承）\" class=\"headerlink\" title=\"组合继承（伪经典继承）\"></a>组合继承（伪经典继承）</h3><pre><code>function Parent (name) {\n  this.name = name;\n  this.colors = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;];\n}\n\nParent.prototype.getName = function () {\n  console.log(this.name)\n}\n\nfunction Child (name, age) {\n\n  Parent.call(this, name);\n  this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child = new Child(&#39;zhangsan&#39;, &#39;20&#39;);\nchild.colors.push(&#39;black&#39;);\n\nconsole.log(child.name); // zhangsan\nconsole.log(child.age); // 20\nconsole.log(child.colors); // [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]\n\nvar child1 = new Child(&#39;lisi&#39;, &#39;28&#39;);\nconsole.log(child1.name); // lisi\nconsole.log(child1.age); // 28\nconsole.log(child1.colors); // [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</code></pre><p>优点：融合原型链继承和构造函数的优</p>\n<p>缺点：调用多次超类构造函数</p>\n<h3 id=\"原型式继承（道格拉斯）\"><a href=\"#原型式继承（道格拉斯）\" class=\"headerlink\" title=\"原型式继承（道格拉斯）\"></a>原型式继承（道格拉斯）</h3><pre><code>function createObj(o) {\n  function F(){}\n  F.prototype = o;\n  return new F();\n}\n\nvar person = {\n  name: &#39;zhansan&#39;,\n  hobbies: [&#39;swimming&#39;, &#39;reading&#39;]\n}\n\nvar person1 = createObj(person);\nvar person2 = createObj(person);\n\nperson1.name = &#39;person&#39;;\nconsole.log(person2.name); // zhangsan\n\nperson2.hobbies.push(&#39;running&#39;);\nconsole.log(person2.hobbies); // [&quot;swimming&quot;, &quot;reading&quot;, &quot;running&quot;]\n</code></pre><p>缺点：引用类型的值的原型属性会被所有实例共享</p>\n<h3 id=\"寄生式继承（道格拉斯升级版）\"><a href=\"#寄生式继承（道格拉斯升级版）\" class=\"headerlink\" title=\"寄生式继承（道格拉斯升级版）\"></a>寄生式继承（道格拉斯升级版）</h3><pre><code>function createObj (o) {\n  var clone = Object.create(o);\n  clone.sayName = function () {\n      console.log(&#39;zhangsan&#39;);\n  }\n  return clone;\n}</code></pre><p>缺点：跟借用构造函数模式一样，创建实例时方法都会被创建一遍</p>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><pre><code>function inheritPrototype(Child, Parent){\n  var prototype = Object.create(superType.prototype);\n  prototype.constructor = Child;\n  Child.prototype = prototype;\n}\nfunction Parent(name){\n  this.name = name;\n  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];\n}\nParent.prototype.sayName = function(){\n  console.log(this.name);\n};\nfunction Child(name, age){\n  Parent.call(this, name);\n  this.age = age;\n}\ninheritPrototype(Child, Parent);//实现继承\nChild.prototype.sayAge = function(){\n  console.log(this.age);\n}; \n</code></pre><p>优点：保证了原型链链路的正确性,没有多余的属性等优点，所以最为理想的ES5继承</p>\n<h3 id=\"ES6继承\"><a href=\"#ES6继承\" class=\"headerlink\" title=\"ES6继承\"></a>ES6继承</h3><pre><code>//class 相当于es5中构造函数\n//class中定义方法时，前后不能加function，全部定义在class的protopyte属性中\n//class中定义的所有方法是不可枚举的\n//class中只能定义方法，不能定义对象，变量等\n//class和方法内默认都是严格模式\n//es5中constructor为隐式属性\nclass Parent{\n  constructor(name=&#39;wang&#39;,age=&#39;27&#39;){\n    this.name = name;\n    this.age = age;\n  }\n  eat(){\n    console.log(`${this.name} ${this.age} eat food`)\n  }\n}\n//继承父类\nclass Child extends Parent{ \n  constructor(name = &#39;ren&#39;,age = &#39;27&#39;){ \n    //继承父类属性\n    super(name, age); \n  } \n    eat(){ \n    //继承父类方法\n      super.eat() \n    } \n} \nlet child =new Child(&#39;xiaoxiami&#39;); \nchild.eat();</code></pre><p>优点</p>\n<ul>\n<li>在语法糖下代码量明显减少，和ES6区别ES5继承首先是在子类中创建自己的this指向，最后将方法添加到this中</li>\n</ul>\n<pre><code>Child.prototype=new Parent() || Parent.apply(this) || Parent.call(this)</code></pre><ul>\n<li>es6继承是使用关键字先创建父类的实例对象this，最后在子类class中修改this</li>\n</ul>\n"},{"title":"函数式编程-纯函数","date":"2019-07-15T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"### 概念\n\n说纯函数概念之前我们再来复习一下什么是函数\n\n函数是一个方法，有一些输入，称为变量，并产生一些输出称为返回值\n\n函数可以用于以下目的\n1. 映射：根据给定的输入生成一些输出，函数将输入值映射到输出值上\n2. 过程：调用函数按照一系列的步骤来执行。这就是我们说的过程编程\n3. I/O：与系统其他部分通信的功能。如存储系统日志，网络等\n\n纯函数都是关于映射的所以对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。\n\n```\n// 纯函数\nconst double = x => x * 2;\nconsole.log（double（5））\n\n// 不纯\nlet val = 2;\nconst double = x => x * val;\nconsole.log（double（5））\n\n// 不纯\nMath.random()\nMath.random()\n```\n\n\n### 函数式编程-纯函数\n\n纯函数的优点<br/>\n1. 独立于外部状态，所以不会受外部全局环境的影响而产生的错误或者副作用\n2. 由于其独立，所以易于重构和重组和重用，使程序更加灵活\n\n\n### 函数式编程-幂等性\n执行多次所产生的影响均与一次执行的影响相同，也就是说执行一次和执行多次对系统内部的状态影响是一样的 <br/>\n```\nclass Person {\n  constructor () {\n    this.name = name;\n  },\n  sayName () {\n    console.log(my name is + this.name);\n  } \n}\nvar person = new Person(zhangsan)\nperson.sayName();\nperson.sayName();\n```\n\n### 纯函数和幂等性的区别\n\n1. 法调用多次对内部的状态影响是一样的，则这么方法就具有幂等性，在函数式编程中，纯函数也具有幂等性，但具有幂等性的函数却不一定是纯函数。\n2. 纯函数主要强调相同的输入，多次调用，输出也相同且无副作用，而幂等主要强调多次调用，对内部的状态的影响是一样的，调用返回值可能不同。\n\n","source":"_posts/javascript/functionalPurity.md","raw":"---\ntitle: 函数式编程-纯函数\ndate: 2019-7-15 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- 函数式编程\ncategories:\n- 函数式编程\n---\n### 概念\n\n说纯函数概念之前我们再来复习一下什么是函数\n\n函数是一个方法，有一些输入，称为变量，并产生一些输出称为返回值\n\n函数可以用于以下目的\n1. 映射：根据给定的输入生成一些输出，函数将输入值映射到输出值上\n2. 过程：调用函数按照一系列的步骤来执行。这就是我们说的过程编程\n3. I/O：与系统其他部分通信的功能。如存储系统日志，网络等\n\n纯函数都是关于映射的所以对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。\n\n```\n// 纯函数\nconst double = x => x * 2;\nconsole.log（double（5））\n\n// 不纯\nlet val = 2;\nconst double = x => x * val;\nconsole.log（double（5））\n\n// 不纯\nMath.random()\nMath.random()\n```\n\n\n### 函数式编程-纯函数\n\n纯函数的优点<br/>\n1. 独立于外部状态，所以不会受外部全局环境的影响而产生的错误或者副作用\n2. 由于其独立，所以易于重构和重组和重用，使程序更加灵活\n\n\n### 函数式编程-幂等性\n执行多次所产生的影响均与一次执行的影响相同，也就是说执行一次和执行多次对系统内部的状态影响是一样的 <br/>\n```\nclass Person {\n  constructor () {\n    this.name = name;\n  },\n  sayName () {\n    console.log(my name is + this.name);\n  } \n}\nvar person = new Person(zhangsan)\nperson.sayName();\nperson.sayName();\n```\n\n### 纯函数和幂等性的区别\n\n1. 法调用多次对内部的状态影响是一样的，则这么方法就具有幂等性，在函数式编程中，纯函数也具有幂等性，但具有幂等性的函数却不一定是纯函数。\n2. 纯函数主要强调相同的输入，多次调用，输出也相同且无副作用，而幂等主要强调多次调用，对内部的状态的影响是一样的，调用返回值可能不同。\n\n","slug":"javascript/functionalPurity","published":1,"updated":"2019-08-26T16:46:27.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7o001hkuu6asjnu4ee","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>说纯函数概念之前我们再来复习一下什么是函数</p>\n<p>函数是一个方法，有一些输入，称为变量，并产生一些输出称为返回值</p>\n<p>函数可以用于以下目的</p>\n<ol>\n<li>映射：根据给定的输入生成一些输出，函数将输入值映射到输出值上</li>\n<li>过程：调用函数按照一系列的步骤来执行。这就是我们说的过程编程</li>\n<li>I/O：与系统其他部分通信的功能。如存储系统日志，网络等</li>\n</ol>\n<p>纯函数都是关于映射的所以对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。</p>\n<pre><code>// 纯函数\nconst double = x =&gt; x * 2;\nconsole.log（double（5））\n\n// 不纯\nlet val = 2;\nconst double = x =&gt; x * val;\nconsole.log（double（5））\n\n// 不纯\nMath.random()\nMath.random()</code></pre><h3 id=\"函数式编程-纯函数\"><a href=\"#函数式编程-纯函数\" class=\"headerlink\" title=\"函数式编程-纯函数\"></a>函数式编程-纯函数</h3><p>纯函数的优点<br></p>\n<ol>\n<li>独立于外部状态，所以不会受外部全局环境的影响而产生的错误或者副作用</li>\n<li>由于其独立，所以易于重构和重组和重用，使程序更加灵活</li>\n</ol>\n<h3 id=\"函数式编程-幂等性\"><a href=\"#函数式编程-幂等性\" class=\"headerlink\" title=\"函数式编程-幂等性\"></a>函数式编程-幂等性</h3><p>执行多次所产生的影响均与一次执行的影响相同，也就是说执行一次和执行多次对系统内部的状态影响是一样的 <br></p>\n<pre><code>class Person {\n  constructor () {\n    this.name = name;\n  },\n  sayName () {\n    console.log(my name is + this.name);\n  } \n}\nvar person = new Person(zhangsan)\nperson.sayName();\nperson.sayName();</code></pre><h3 id=\"纯函数和幂等性的区别\"><a href=\"#纯函数和幂等性的区别\" class=\"headerlink\" title=\"纯函数和幂等性的区别\"></a>纯函数和幂等性的区别</h3><ol>\n<li>法调用多次对内部的状态影响是一样的，则这么方法就具有幂等性，在函数式编程中，纯函数也具有幂等性，但具有幂等性的函数却不一定是纯函数。</li>\n<li>纯函数主要强调相同的输入，多次调用，输出也相同且无副作用，而幂等主要强调多次调用，对内部的状态的影响是一样的，调用返回值可能不同。</li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>说纯函数概念之前我们再来复习一下什么是函数</p>\n<p>函数是一个方法，有一些输入，称为变量，并产生一些输出称为返回值</p>\n<p>函数可以用于以下目的</p>\n<ol>\n<li>映射：根据给定的输入生成一些输出，函数将输入值映射到输出值上</li>\n<li>过程：调用函数按照一系列的步骤来执行。这就是我们说的过程编程</li>\n<li>I/O：与系统其他部分通信的功能。如存储系统日志，网络等</li>\n</ol>\n<p>纯函数都是关于映射的所以对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。</p>\n<pre><code>// 纯函数\nconst double = x =&gt; x * 2;\nconsole.log（double（5））\n\n// 不纯\nlet val = 2;\nconst double = x =&gt; x * val;\nconsole.log（double（5））\n\n// 不纯\nMath.random()\nMath.random()</code></pre><h3 id=\"函数式编程-纯函数\"><a href=\"#函数式编程-纯函数\" class=\"headerlink\" title=\"函数式编程-纯函数\"></a>函数式编程-纯函数</h3><p>纯函数的优点<br></p>\n<ol>\n<li>独立于外部状态，所以不会受外部全局环境的影响而产生的错误或者副作用</li>\n<li>由于其独立，所以易于重构和重组和重用，使程序更加灵活</li>\n</ol>\n<h3 id=\"函数式编程-幂等性\"><a href=\"#函数式编程-幂等性\" class=\"headerlink\" title=\"函数式编程-幂等性\"></a>函数式编程-幂等性</h3><p>执行多次所产生的影响均与一次执行的影响相同，也就是说执行一次和执行多次对系统内部的状态影响是一样的 <br></p>\n<pre><code>class Person {\n  constructor () {\n    this.name = name;\n  },\n  sayName () {\n    console.log(my name is + this.name);\n  } \n}\nvar person = new Person(zhangsan)\nperson.sayName();\nperson.sayName();</code></pre><h3 id=\"纯函数和幂等性的区别\"><a href=\"#纯函数和幂等性的区别\" class=\"headerlink\" title=\"纯函数和幂等性的区别\"></a>纯函数和幂等性的区别</h3><ol>\n<li>法调用多次对内部的状态影响是一样的，则这么方法就具有幂等性，在函数式编程中，纯函数也具有幂等性，但具有幂等性的函数却不一定是纯函数。</li>\n<li>纯函数主要强调相同的输入，多次调用，输出也相同且无副作用，而幂等主要强调多次调用，对内部的状态的影响是一样的，调用返回值可能不同。</li>\n</ol>\n"},{"title":"实现 new 运算符","date":"2019-04-27T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n实现 new 运算符也算是 JS 中经典的面试题了。在实际应用中其实 new 运算符的应用场景是定义对象类型的实例\n\n### demo\n\n```\n/**\n * 定义构造函数\n * @param {*} name \n * @param {*} age \n */\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  console.log(`my name is ${this.name}, I'm ${this.age} years old`);\n}\n\nPerson.prototype.study = function () {\n  console.log(`my name is ${this.name}, I'm learning to swim`);\n}\n\nlet person = new Person('renbo', 28);\nconsole.log(person.name)\nconsole.log(person.sayName())\n\n\n// 调用内置函数\nlet array = new Array();\nlet obj = new Object();\n\n```\n\n\n### 模拟实现\n\n用构造函数实际上会经历以下4个步骤（实现思路）\n\n- 创建一个新对象\n- 将构造函数的作用域赋给新对象（因此this就指向了这个对象）\n- 执行构造函数中的代码（为这个新对象添加属性）\n- 返回新对象\n\n```\nfunction newFun (constructor) {\n  var o = {};\n\n  // 将 o 的原型指向构造函数，这样 o 就可以访问到构造函数原型中的属性\n  o.__proto__ = constructor.prototype;\n\n  // 改变构造函数 this 的指向到新建的对象，这样 o 就可以访问到构造函数中的属性\n  var ret = constructor.apply(o, Array.prototype.slice.call(arguments, 1));\n\n  // 需要判断返回的值是否是对象，如果不是对象返回正常数据类型\n  return typeof ret === 'object' ? ret : o;\n}\n\n\n// 再次使用上面的例子\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  return `my name is ${this.name}, I'm ${this.age} years old`;\n}\n\nPerson.prototype.study = function () {\n  return `my name is ${this.name}, I'm learning to swim`;\n}\n\nlet person =  newFun(Person, 'renbo', 28);\nconsole.log(person.name); // renbo\nconsole.log(person.sayName()); // my name is renbo, I'm 28 years old\nconsole.log(person.study()); // my name is renbo, I'm learning to swim\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/new.md","raw":"---\ntitle: 实现 new 运算符\ndate: 2019-4-27 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n实现 new 运算符也算是 JS 中经典的面试题了。在实际应用中其实 new 运算符的应用场景是定义对象类型的实例\n\n### demo\n\n```\n/**\n * 定义构造函数\n * @param {*} name \n * @param {*} age \n */\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  console.log(`my name is ${this.name}, I'm ${this.age} years old`);\n}\n\nPerson.prototype.study = function () {\n  console.log(`my name is ${this.name}, I'm learning to swim`);\n}\n\nlet person = new Person('renbo', 28);\nconsole.log(person.name)\nconsole.log(person.sayName())\n\n\n// 调用内置函数\nlet array = new Array();\nlet obj = new Object();\n\n```\n\n\n### 模拟实现\n\n用构造函数实际上会经历以下4个步骤（实现思路）\n\n- 创建一个新对象\n- 将构造函数的作用域赋给新对象（因此this就指向了这个对象）\n- 执行构造函数中的代码（为这个新对象添加属性）\n- 返回新对象\n\n```\nfunction newFun (constructor) {\n  var o = {};\n\n  // 将 o 的原型指向构造函数，这样 o 就可以访问到构造函数原型中的属性\n  o.__proto__ = constructor.prototype;\n\n  // 改变构造函数 this 的指向到新建的对象，这样 o 就可以访问到构造函数中的属性\n  var ret = constructor.apply(o, Array.prototype.slice.call(arguments, 1));\n\n  // 需要判断返回的值是否是对象，如果不是对象返回正常数据类型\n  return typeof ret === 'object' ? ret : o;\n}\n\n\n// 再次使用上面的例子\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  return `my name is ${this.name}, I'm ${this.age} years old`;\n}\n\nPerson.prototype.study = function () {\n  return `my name is ${this.name}, I'm learning to swim`;\n}\n\nlet person =  newFun(Person, 'renbo', 28);\nconsole.log(person.name); // renbo\nconsole.log(person.sayName()); // my name is renbo, I'm 28 years old\nconsole.log(person.study()); // my name is renbo, I'm learning to swim\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/new","published":1,"updated":"2019-08-26T16:46:27.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7q001jkuu6npltf2c1","content":"<p>实现 new 运算符也算是 JS 中经典的面试题了。在实际应用中其实 new 运算符的应用场景是定义对象类型的实例</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><pre><code>/**\n * 定义构造函数\n * @param {*} name \n * @param {*} age \n */\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  console.log(`my name is ${this.name}, I&#39;m ${this.age} years old`);\n}\n\nPerson.prototype.study = function () {\n  console.log(`my name is ${this.name}, I&#39;m learning to swim`);\n}\n\nlet person = new Person(&#39;renbo&#39;, 28);\nconsole.log(person.name)\nconsole.log(person.sayName())\n\n\n// 调用内置函数\nlet array = new Array();\nlet obj = new Object();\n</code></pre><h3 id=\"模拟实现\"><a href=\"#模拟实现\" class=\"headerlink\" title=\"模拟实现\"></a>模拟实现</h3><p>用构造函数实际上会经历以下4个步骤（实现思路）</p>\n<ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此this就指向了这个对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>返回新对象</li>\n</ul>\n<pre><code>function newFun (constructor) {\n  var o = {};\n\n  // 将 o 的原型指向构造函数，这样 o 就可以访问到构造函数原型中的属性\n  o.__proto__ = constructor.prototype;\n\n  // 改变构造函数 this 的指向到新建的对象，这样 o 就可以访问到构造函数中的属性\n  var ret = constructor.apply(o, Array.prototype.slice.call(arguments, 1));\n\n  // 需要判断返回的值是否是对象，如果不是对象返回正常数据类型\n  return typeof ret === &#39;object&#39; ? ret : o;\n}\n\n\n// 再次使用上面的例子\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  return `my name is ${this.name}, I&#39;m ${this.age} years old`;\n}\n\nPerson.prototype.study = function () {\n  return `my name is ${this.name}, I&#39;m learning to swim`;\n}\n\nlet person =  newFun(Person, &#39;renbo&#39;, 28);\nconsole.log(person.name); // renbo\nconsole.log(person.sayName()); // my name is renbo, I&#39;m 28 years old\nconsole.log(person.study()); // my name is renbo, I&#39;m learning to swim</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>实现 new 运算符也算是 JS 中经典的面试题了。在实际应用中其实 new 运算符的应用场景是定义对象类型的实例</p>\n<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><pre><code>/**\n * 定义构造函数\n * @param {*} name \n * @param {*} age \n */\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  console.log(`my name is ${this.name}, I&#39;m ${this.age} years old`);\n}\n\nPerson.prototype.study = function () {\n  console.log(`my name is ${this.name}, I&#39;m learning to swim`);\n}\n\nlet person = new Person(&#39;renbo&#39;, 28);\nconsole.log(person.name)\nconsole.log(person.sayName())\n\n\n// 调用内置函数\nlet array = new Array();\nlet obj = new Object();\n</code></pre><h3 id=\"模拟实现\"><a href=\"#模拟实现\" class=\"headerlink\" title=\"模拟实现\"></a>模拟实现</h3><p>用构造函数实际上会经历以下4个步骤（实现思路）</p>\n<ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此this就指向了这个对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>返回新对象</li>\n</ul>\n<pre><code>function newFun (constructor) {\n  var o = {};\n\n  // 将 o 的原型指向构造函数，这样 o 就可以访问到构造函数原型中的属性\n  o.__proto__ = constructor.prototype;\n\n  // 改变构造函数 this 的指向到新建的对象，这样 o 就可以访问到构造函数中的属性\n  var ret = constructor.apply(o, Array.prototype.slice.call(arguments, 1));\n\n  // 需要判断返回的值是否是对象，如果不是对象返回正常数据类型\n  return typeof ret === &#39;object&#39; ? ret : o;\n}\n\n\n// 再次使用上面的例子\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayName = function () {\n  return `my name is ${this.name}, I&#39;m ${this.age} years old`;\n}\n\nPerson.prototype.study = function () {\n  return `my name is ${this.name}, I&#39;m learning to swim`;\n}\n\nlet person =  newFun(Person, &#39;renbo&#39;, 28);\nconsole.log(person.name); // renbo\nconsole.log(person.sayName()); // my name is renbo, I&#39;m 28 years old\nconsole.log(person.study()); // my name is renbo, I&#39;m learning to swim</code></pre>"},{"title":"实现 promise","date":"2019-06-11T04:32:09.000Z","top":true,"cover":true,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n本篇文章主要是实现 Promise 的原理, 具体 API 用法不在本文中做介绍。可以查看阮一峰老师的 <a href=\"http://es6.ruanyifeng.com/#docs/promise\">ES6 Promise教程</a><br/>\n\n实现 Promise 首先要知道它的执行特点<br/>\n\n1. Promise 是一个构造函数，接受函数作为参数(resolve(),reject()) \n2. Promise 对象有三种状态 pending(进行中), fulfilled(成功), rejected(失败)\n3. Promise 从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve() \n4. Promise 从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()\n5. Promise 状态无法中途取消，一旦建立立即执行，会一直保持这个结果，这时也叫 resolved(已定型状态)\n6. Promise 状态改变时 then 方法支持多次链式调用 \n7. Promise 如果不设置回调函数内部会抛异常\n\n\n### 定义构造函数 \n \n构造函数 Promise 必须接受函数作为参数\n\n1. 定义构造函数\n2. 判断一个参数是否为函数\n\n```\n/**\n * 封装判断参数是够是函数\n */\nfunction isFunction(fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]';\n}\n\n/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  if (!isFunction(fn)) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n}\n```\n\n### 定义 resolve \n\n在内部定义 resolve 方法作为参数传到 fn 中，fn 调用成功后会调用 resolve 方法，之后在执行 then 中注册的回调函数\n\n```\n/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  // 判断是否是函数\n  var _isFunction = Object.prototype.toString.call(fn) === '[object Function]';\n\n  // 如果不是函数抛出异常\n  if (!_isFunction) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n  \n  // 定义回调状态\n  var __callback\n  this.then = function (status) {\n    __callback = status\n  }\n  // 定义 resolve 函数传入成功的数据\n  function resolve (data) {\n    __callback(data)\n  }\n  fn(resolve)\n}\n```\n\n调用例子\n\n```\nfunction request () {\n  return new Promise(function(resolve){\n    if (true) {\n      setTimeout(function() {\n        resolve(\"renbo\");\n      }, 0);\n    }\n  })\n}\n\nrequest().then(function(data){\n  console.log(data)\n  console.log('success')\n})\n\n// 输出\nrenbo\nsuccess\n```\n\n上面的例子我们已经简单的实现了 promise 的基础回调，接下来我们完成链式语法调用以及then队列管理\n\n### 链式语法及队列管理\n\n```\nfunction Promise (fn) {\n  \n  var _isFunction = Object.prototype.toString.call(fn) === '[object Function]';\n\n  if (!_isFunction) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n  \n  var _this = this,\n      _value = null;\n      _this._resolves = [];\n\n  this.then = function (status) {\n    _this._resolves.push(status);\n    return this;\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n      _this._resolves.forEach(function (callback) {\n        _value = val\n        callback(_value)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}\n```\n\n\n###  加入状态并串行Promise\n\nPromise 对象有三种状态 <br/>\n1. pending(进行中) 立即执行\n2. 从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve('fulfilled') \n3. 从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject('rejected')\n\n`promsie状态 只能由 pending => fulfilled/rejected, 一旦修改就不能再变`\n\n我们加入上面的状态并串行Promise\n\n```\nfunction Promise (fn) {\n  \n  function _isFunction (func) {\n    return Object.prototype.toString.call(func) === '[object Function]';\n  }\n  if (!_isFunction(fn)) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n  \n  var _this = this,\n      _val = null;\n      _this._resolves = [];\n      _this._status = 'PENDING';\n      \n  this.then = function (onFulfilled) {\n    return new Promise(function (resolve) {\n      // handle 函数对上一个 promise 的 then 中回调进行了处理，并且调用当前的 promise 中的 resolve 方法。\n      function handle(_val) {\n        var ret = _isFunction(onFulfilled) && onFulfilled(_val) || _val\n        // 如果是⼀一个 promise 对象，就会调⽤ then 方法，形成一个嵌套\n        if (ret && _isFunction(ret['then'])) {\n          ret.then(function (value) {\n            resolve(value);\n          })\n        } else {\n          resolve(ret)\n        }\n      }\n      if (_this._status === 'PENDING') {\n       _this._resolves.push(handle);\n      } else if(promise._status === 'FULFILLED'){\n        handle(value);\n      }       \n    })\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n       _this.status = \"FULFILLED\";\n      _this._resolves.forEach(function (callback) {\n        _val = val\n        callback(_val)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}\n```\n\n### 错误处理reject\n\n在异步操作中，操作可能失败，执行失败的回调函数，上面已经说到从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()\n\n```\nfunction Promise(fn) {\n\n  /**\n   * 工具函数判断是否是 function\n   * @param {*} func \n   */\n  function _isFunction(func) {\n    return Object.prototype.toString.call(func) === '[object Function]';\n  }\n  if (!_isFunction(fn)) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n\n\n  var _this = this;\n  _this._value;\n  _this._reason;\n  _this._resolves = [];\n  _this._rejects = [];\n  _this._status = \"PENDING\";\n\n  /**\n   * promise then回调\n   * @onFulfilled 执行成功状态的处理函数\n   * @onRejected 执行失败状态处理函数\n   */\n  this.then = function (onFulfilled, onRejected) {\n    return new Promise(function (resolve, reject) {\n\n      /**\n       * 对上一个 promise 的 then 中回调进行了处理\n       * 并且调用当前的 promise 中的 resolve 方法\n       */\n      function handle(value) {\n        var ret = _isFunction(onFulfilled) && onFulfilled(value) || value\n        if (ret && _isFunction(ret['then'])) {\n          ret.then(\n            function (value) {\n              resolve(value);\n            },\n            function (reason) {\n              reject(reason);\n            }\n          )\n        } else {\n          resolve(ret)\n        }\n      }\n\n      /**\n       * 错误处理回调函数\n       */\n      function errback(reason) {\n        reason = _isFunction(onRejected) && onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      /**\n       * 根据当前异步状态执行操作\n       */\n      var config = {\n        'PENDING': function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        'FULFILLED': function () {\n          handle(value);\n        },\n        'REJECTED': function () {\n          errback(_this._reason);\n        }\n      }\n      \n      config[_this._status]()\n    })\n  }\n\n  /**\n   * 成功的回调函数\n   * setTimeout作用是将resolve \n   * 执行回调的逻辑放置到 JS 任务队列列末尾\n   * 防止then执行在resolve之前\n   * @FULFILLED 状态\n   * @param {*} value \n   */\n  function resolve(value) {\n    setTimeout(function () {\n      _this.status = \"FULFILLED\"\n      _this._resolves.forEach(function (callback) {\n       _this._value = callback(value)\n      })\n    }, 0)\n  }\n\n  /**\n   * 错误处理回调函数\n   * @REJECTED 状态\n   * @param {*} value \n   */\n  function reject(value) {\n    setTimeout(function () {\n      _this._status = \"REJECTED\"\n      _this._rejects.forEach(function (callback) {\n        _this._reason = callback(value);\n      })\n    }, 0)\n  }\n\n  fn(resolve, reject)\n}\n```\n\n### 实现Promise.all\n\n实现Promise.all函数\n\n```\n/**\n * Promise.all\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n */\nPromise.all = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError('You must pass an array to all.');\n  }\n  // 返回 promise 实例\n  return new Promise(function (resolve, reject) {\n    let done = gen(promiseArr.length, resolve);\n    promiseArr.forEach(function (promise, index) {\n      promise.then(function (value) {\n        done(index, value)\n      },reject)\n    })\n  })\n}\n\nfunction gen(length, resolve) {\n  let count = 0;\n  let result = [];\n  return function(i, value) {\n    result[i] = value;\n    if (++count === length) {\n      resolve(result);\n    }\n  }\n}\n```\n\n\n### 实现Promise.race\n\n实现Promise.race函数\n\n```\n/**\n * Promise.race\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n */\n\nPromise.race = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError('You must pass an array to all.');\n  }\n  // 返回 promise 实例\n  return new Promise(function(resolve, reject){\n    promiseArr.forEach(function (promise, index) {\n      promise.then(resolve,reject)\n    })\n  })\n}\n\n```\n\n### 实现 catch <br/>\n\n\n实现 catch \n```\n/**\n * 链式写法中可以捕获前面then中发送的异常\n */\n\nfunction Promise () {\n  var _this = this\n  ...\n  \n  this.catch = function (onRejected) {\n    return _this.then(null, onRejected);\n  }\n}\n \n```\n\n\n### 代码封装\n经过上面的几个步骤我们基本实现了 promise 的几个重要特性，下面我们将代码整理一下\n\n\n```\n/*\n * @Description: promise \n * @Author: renbo\n * @Date: 2019-08-12 15:13:40\n * @LastEditTime: 2019-08-15 10:34:44\n */\n\nvar Promise = /** @class */ (function () {\n\n  function Promise (fn) {\n\n    var _this = this;\n    _this._status = 'PENDING';\n    _this._value = undefined;\n    _this._reason = undefined;\n    //存储状态\n    _this._resolves = [];\n    _this._rejects = [];\n\n    // 异常处理\n    if (!(typeof fn === 'function' )) {\n      throw new TypeError('Promise must accept a function as a parameter');\n    }\n    if(!(this instanceof Promise)) return new Promise(fn);\n\n    \n   function resolve(value) {\n      //由於apply參數是數組\n      _this.final.apply(_this,['FULFILLED'].concat([value]));\n    }\n\n    function reject(reason){\n      _this.final.apply(_this,['REJECTED'].concat([reason]));\n    }\n    \n    fn(resolve,reject);\n  }\n\n  /**\n   * 用于resolve 和 reject \n   * 异步调用，保证then是先执行的\n   * @param {*} status \n   * @param {*} value \n   */\n  Promise.prototype.final = function (status,value) {\n    var _this = this, fn, st;\n    if(_this._status !== 'PENDING') return;\n\n    setTimeout(function(){\n      _this._status = status;\n      st = _this._status === 'FULFILLED'\n      queue = _this[st ? '_resolves' : '_rejects'];\n\n      while(fn = queue.shift()) {\n        value = fn.call(_this, value) || value;\n      }\n\n      _this[st ? '_value' : '_reason'] = value;\n      _this['_resolves'] = _this['_rejects'] = undefined;\n    });\n  }\n\n  /**\n   * then \n   * @params onFulfilled\n   * @params onRejected\n   */\n  Promise.prototype.then = function (onFulfilled,onRejected) {\n    var _this = this;\n    // 每次返回一个promise，保证是可thenable的\n    return new Promise(function(resolve,reject){\n        \n      function handle(value) {\n        // 這一步很關鍵，只有這樣才可以將值傳遞給下一個resolve\n        var ret = typeof onFulfilled === 'function' && onFulfilled(value) || value;\n\n        //判断是不是promise 对象\n        if (ret && typeof ret ['then'] == 'function') {\n            ret.then(function(value) {\n                resolve(value);\n            }, function(reason) {\n                reject(reason);\n            });\n        } else {\n          resolve(ret);\n        }\n      }\n\n      function errback(reason){\n        reason = typeof onRejected === 'function' && onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      // 根据当前异步状态执行操作\n      var config = {\n        'PENDING': function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        'FULFILLED': function () {\n          handle(value);\n        },\n        'REJECTED': function () {\n          errback(_this._reason);\n        }\n      }\n      \n      config[_this._status]()\n    });\n  }\n\n\n  /**\n   * 链式写法中可以捕获前面then中发送的异常\n   */\n  Promise.prototype.catch = function(onRejected){\n    return this.then(undefined, onRejected)\n  }\n\n\n  /**\n   * Promise.race\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n   */\n\n  Promise.race = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError('You must pass an array to all.');\n    }\n    // 返回 promise 实例\n    return new Promise(function(resolve, reject){\n      promiseArr.forEach(function (promise, index) {\n        promise.then(resolve,reject)\n      })\n    })\n  }\n\n\n  /**\n   * Promise.all\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n   */\n  Promise.all = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError('You must pass an array to all.');\n    }\n    // 返回 promise 实例\n    return new Promise(function (resolve, reject) {\n      let done = gen(promiseArr.length, resolve);\n      promiseArr.forEach(function (promise, index) {\n        promise.then(function (value) {\n          done(index, value)\n        },reject)\n      })\n    })\n\n    // 判断 promise 状态是否全部 resolve\n    function gen(length, resolve) {\n      let count = 0;\n      let result = [];\n      return function(i, value) {\n        result[i] = value;\n        if (++count === length) {\n          resolve(result);\n        }\n      }\n    }\n  }\n\n  Promise.resolve = function(arg){\n    return new Promise(function(resolve,reject){\n        resolve(arg)\n    })\n  }\n\n  Promise.reject = function(arg){\n    return Promise(function(resolve,reject){\n      reject(arg)\n    })\n  }\n\n  return Promise;\n}())\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/promise.md","raw":"---\ntitle: 实现 promise\ndate: 2019-6-11 12:32:09\ntop: true\ncover: true\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n本篇文章主要是实现 Promise 的原理, 具体 API 用法不在本文中做介绍。可以查看阮一峰老师的 <a href=\"http://es6.ruanyifeng.com/#docs/promise\">ES6 Promise教程</a><br/>\n\n实现 Promise 首先要知道它的执行特点<br/>\n\n1. Promise 是一个构造函数，接受函数作为参数(resolve(),reject()) \n2. Promise 对象有三种状态 pending(进行中), fulfilled(成功), rejected(失败)\n3. Promise 从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve() \n4. Promise 从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()\n5. Promise 状态无法中途取消，一旦建立立即执行，会一直保持这个结果，这时也叫 resolved(已定型状态)\n6. Promise 状态改变时 then 方法支持多次链式调用 \n7. Promise 如果不设置回调函数内部会抛异常\n\n\n### 定义构造函数 \n \n构造函数 Promise 必须接受函数作为参数\n\n1. 定义构造函数\n2. 判断一个参数是否为函数\n\n```\n/**\n * 封装判断参数是够是函数\n */\nfunction isFunction(fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]';\n}\n\n/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  if (!isFunction(fn)) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n}\n```\n\n### 定义 resolve \n\n在内部定义 resolve 方法作为参数传到 fn 中，fn 调用成功后会调用 resolve 方法，之后在执行 then 中注册的回调函数\n\n```\n/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  // 判断是否是函数\n  var _isFunction = Object.prototype.toString.call(fn) === '[object Function]';\n\n  // 如果不是函数抛出异常\n  if (!_isFunction) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n  \n  // 定义回调状态\n  var __callback\n  this.then = function (status) {\n    __callback = status\n  }\n  // 定义 resolve 函数传入成功的数据\n  function resolve (data) {\n    __callback(data)\n  }\n  fn(resolve)\n}\n```\n\n调用例子\n\n```\nfunction request () {\n  return new Promise(function(resolve){\n    if (true) {\n      setTimeout(function() {\n        resolve(\"renbo\");\n      }, 0);\n    }\n  })\n}\n\nrequest().then(function(data){\n  console.log(data)\n  console.log('success')\n})\n\n// 输出\nrenbo\nsuccess\n```\n\n上面的例子我们已经简单的实现了 promise 的基础回调，接下来我们完成链式语法调用以及then队列管理\n\n### 链式语法及队列管理\n\n```\nfunction Promise (fn) {\n  \n  var _isFunction = Object.prototype.toString.call(fn) === '[object Function]';\n\n  if (!_isFunction) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n  \n  var _this = this,\n      _value = null;\n      _this._resolves = [];\n\n  this.then = function (status) {\n    _this._resolves.push(status);\n    return this;\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n      _this._resolves.forEach(function (callback) {\n        _value = val\n        callback(_value)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}\n```\n\n\n###  加入状态并串行Promise\n\nPromise 对象有三种状态 <br/>\n1. pending(进行中) 立即执行\n2. 从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve('fulfilled') \n3. 从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject('rejected')\n\n`promsie状态 只能由 pending => fulfilled/rejected, 一旦修改就不能再变`\n\n我们加入上面的状态并串行Promise\n\n```\nfunction Promise (fn) {\n  \n  function _isFunction (func) {\n    return Object.prototype.toString.call(func) === '[object Function]';\n  }\n  if (!_isFunction(fn)) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n  \n  var _this = this,\n      _val = null;\n      _this._resolves = [];\n      _this._status = 'PENDING';\n      \n  this.then = function (onFulfilled) {\n    return new Promise(function (resolve) {\n      // handle 函数对上一个 promise 的 then 中回调进行了处理，并且调用当前的 promise 中的 resolve 方法。\n      function handle(_val) {\n        var ret = _isFunction(onFulfilled) && onFulfilled(_val) || _val\n        // 如果是⼀一个 promise 对象，就会调⽤ then 方法，形成一个嵌套\n        if (ret && _isFunction(ret['then'])) {\n          ret.then(function (value) {\n            resolve(value);\n          })\n        } else {\n          resolve(ret)\n        }\n      }\n      if (_this._status === 'PENDING') {\n       _this._resolves.push(handle);\n      } else if(promise._status === 'FULFILLED'){\n        handle(value);\n      }       \n    })\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n       _this.status = \"FULFILLED\";\n      _this._resolves.forEach(function (callback) {\n        _val = val\n        callback(_val)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}\n```\n\n### 错误处理reject\n\n在异步操作中，操作可能失败，执行失败的回调函数，上面已经说到从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()\n\n```\nfunction Promise(fn) {\n\n  /**\n   * 工具函数判断是否是 function\n   * @param {*} func \n   */\n  function _isFunction(func) {\n    return Object.prototype.toString.call(func) === '[object Function]';\n  }\n  if (!_isFunction(fn)) {\n    throw new Error('Promise must accept a function as a parameter')\n  }\n\n\n  var _this = this;\n  _this._value;\n  _this._reason;\n  _this._resolves = [];\n  _this._rejects = [];\n  _this._status = \"PENDING\";\n\n  /**\n   * promise then回调\n   * @onFulfilled 执行成功状态的处理函数\n   * @onRejected 执行失败状态处理函数\n   */\n  this.then = function (onFulfilled, onRejected) {\n    return new Promise(function (resolve, reject) {\n\n      /**\n       * 对上一个 promise 的 then 中回调进行了处理\n       * 并且调用当前的 promise 中的 resolve 方法\n       */\n      function handle(value) {\n        var ret = _isFunction(onFulfilled) && onFulfilled(value) || value\n        if (ret && _isFunction(ret['then'])) {\n          ret.then(\n            function (value) {\n              resolve(value);\n            },\n            function (reason) {\n              reject(reason);\n            }\n          )\n        } else {\n          resolve(ret)\n        }\n      }\n\n      /**\n       * 错误处理回调函数\n       */\n      function errback(reason) {\n        reason = _isFunction(onRejected) && onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      /**\n       * 根据当前异步状态执行操作\n       */\n      var config = {\n        'PENDING': function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        'FULFILLED': function () {\n          handle(value);\n        },\n        'REJECTED': function () {\n          errback(_this._reason);\n        }\n      }\n      \n      config[_this._status]()\n    })\n  }\n\n  /**\n   * 成功的回调函数\n   * setTimeout作用是将resolve \n   * 执行回调的逻辑放置到 JS 任务队列列末尾\n   * 防止then执行在resolve之前\n   * @FULFILLED 状态\n   * @param {*} value \n   */\n  function resolve(value) {\n    setTimeout(function () {\n      _this.status = \"FULFILLED\"\n      _this._resolves.forEach(function (callback) {\n       _this._value = callback(value)\n      })\n    }, 0)\n  }\n\n  /**\n   * 错误处理回调函数\n   * @REJECTED 状态\n   * @param {*} value \n   */\n  function reject(value) {\n    setTimeout(function () {\n      _this._status = \"REJECTED\"\n      _this._rejects.forEach(function (callback) {\n        _this._reason = callback(value);\n      })\n    }, 0)\n  }\n\n  fn(resolve, reject)\n}\n```\n\n### 实现Promise.all\n\n实现Promise.all函数\n\n```\n/**\n * Promise.all\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n */\nPromise.all = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError('You must pass an array to all.');\n  }\n  // 返回 promise 实例\n  return new Promise(function (resolve, reject) {\n    let done = gen(promiseArr.length, resolve);\n    promiseArr.forEach(function (promise, index) {\n      promise.then(function (value) {\n        done(index, value)\n      },reject)\n    })\n  })\n}\n\nfunction gen(length, resolve) {\n  let count = 0;\n  let result = [];\n  return function(i, value) {\n    result[i] = value;\n    if (++count === length) {\n      resolve(result);\n    }\n  }\n}\n```\n\n\n### 实现Promise.race\n\n实现Promise.race函数\n\n```\n/**\n * Promise.race\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n */\n\nPromise.race = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError('You must pass an array to all.');\n  }\n  // 返回 promise 实例\n  return new Promise(function(resolve, reject){\n    promiseArr.forEach(function (promise, index) {\n      promise.then(resolve,reject)\n    })\n  })\n}\n\n```\n\n### 实现 catch <br/>\n\n\n实现 catch \n```\n/**\n * 链式写法中可以捕获前面then中发送的异常\n */\n\nfunction Promise () {\n  var _this = this\n  ...\n  \n  this.catch = function (onRejected) {\n    return _this.then(null, onRejected);\n  }\n}\n \n```\n\n\n### 代码封装\n经过上面的几个步骤我们基本实现了 promise 的几个重要特性，下面我们将代码整理一下\n\n\n```\n/*\n * @Description: promise \n * @Author: renbo\n * @Date: 2019-08-12 15:13:40\n * @LastEditTime: 2019-08-15 10:34:44\n */\n\nvar Promise = /** @class */ (function () {\n\n  function Promise (fn) {\n\n    var _this = this;\n    _this._status = 'PENDING';\n    _this._value = undefined;\n    _this._reason = undefined;\n    //存储状态\n    _this._resolves = [];\n    _this._rejects = [];\n\n    // 异常处理\n    if (!(typeof fn === 'function' )) {\n      throw new TypeError('Promise must accept a function as a parameter');\n    }\n    if(!(this instanceof Promise)) return new Promise(fn);\n\n    \n   function resolve(value) {\n      //由於apply參數是數組\n      _this.final.apply(_this,['FULFILLED'].concat([value]));\n    }\n\n    function reject(reason){\n      _this.final.apply(_this,['REJECTED'].concat([reason]));\n    }\n    \n    fn(resolve,reject);\n  }\n\n  /**\n   * 用于resolve 和 reject \n   * 异步调用，保证then是先执行的\n   * @param {*} status \n   * @param {*} value \n   */\n  Promise.prototype.final = function (status,value) {\n    var _this = this, fn, st;\n    if(_this._status !== 'PENDING') return;\n\n    setTimeout(function(){\n      _this._status = status;\n      st = _this._status === 'FULFILLED'\n      queue = _this[st ? '_resolves' : '_rejects'];\n\n      while(fn = queue.shift()) {\n        value = fn.call(_this, value) || value;\n      }\n\n      _this[st ? '_value' : '_reason'] = value;\n      _this['_resolves'] = _this['_rejects'] = undefined;\n    });\n  }\n\n  /**\n   * then \n   * @params onFulfilled\n   * @params onRejected\n   */\n  Promise.prototype.then = function (onFulfilled,onRejected) {\n    var _this = this;\n    // 每次返回一个promise，保证是可thenable的\n    return new Promise(function(resolve,reject){\n        \n      function handle(value) {\n        // 這一步很關鍵，只有這樣才可以將值傳遞給下一個resolve\n        var ret = typeof onFulfilled === 'function' && onFulfilled(value) || value;\n\n        //判断是不是promise 对象\n        if (ret && typeof ret ['then'] == 'function') {\n            ret.then(function(value) {\n                resolve(value);\n            }, function(reason) {\n                reject(reason);\n            });\n        } else {\n          resolve(ret);\n        }\n      }\n\n      function errback(reason){\n        reason = typeof onRejected === 'function' && onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      // 根据当前异步状态执行操作\n      var config = {\n        'PENDING': function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        'FULFILLED': function () {\n          handle(value);\n        },\n        'REJECTED': function () {\n          errback(_this._reason);\n        }\n      }\n      \n      config[_this._status]()\n    });\n  }\n\n\n  /**\n   * 链式写法中可以捕获前面then中发送的异常\n   */\n  Promise.prototype.catch = function(onRejected){\n    return this.then(undefined, onRejected)\n  }\n\n\n  /**\n   * Promise.race\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n   */\n\n  Promise.race = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError('You must pass an array to all.');\n    }\n    // 返回 promise 实例\n    return new Promise(function(resolve, reject){\n      promiseArr.forEach(function (promise, index) {\n        promise.then(resolve,reject)\n      })\n    })\n  }\n\n\n  /**\n   * Promise.all\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n   */\n  Promise.all = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError('You must pass an array to all.');\n    }\n    // 返回 promise 实例\n    return new Promise(function (resolve, reject) {\n      let done = gen(promiseArr.length, resolve);\n      promiseArr.forEach(function (promise, index) {\n        promise.then(function (value) {\n          done(index, value)\n        },reject)\n      })\n    })\n\n    // 判断 promise 状态是否全部 resolve\n    function gen(length, resolve) {\n      let count = 0;\n      let result = [];\n      return function(i, value) {\n        result[i] = value;\n        if (++count === length) {\n          resolve(result);\n        }\n      }\n    }\n  }\n\n  Promise.resolve = function(arg){\n    return new Promise(function(resolve,reject){\n        resolve(arg)\n    })\n  }\n\n  Promise.reject = function(arg){\n    return Promise(function(resolve,reject){\n      reject(arg)\n    })\n  }\n\n  return Promise;\n}())\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript/promise","published":1,"updated":"2019-08-26T16:46:27.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7s001okuu6mixobtlu","content":"<p>本篇文章主要是实现 Promise 的原理, 具体 API 用法不在本文中做介绍。可以查看阮一峰老师的 <a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">ES6 Promise教程</a><br></p>\n<p>实现 Promise 首先要知道它的执行特点<br></p>\n<ol>\n<li>Promise 是一个构造函数，接受函数作为参数(resolve(),reject()) </li>\n<li>Promise 对象有三种状态 pending(进行中), fulfilled(成功), rejected(失败)</li>\n<li>Promise 从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve() </li>\n<li>Promise 从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()</li>\n<li>Promise 状态无法中途取消，一旦建立立即执行，会一直保持这个结果，这时也叫 resolved(已定型状态)</li>\n<li>Promise 状态改变时 then 方法支持多次链式调用 </li>\n<li>Promise 如果不设置回调函数内部会抛异常</li>\n</ol>\n<h3 id=\"定义构造函数\"><a href=\"#定义构造函数\" class=\"headerlink\" title=\"定义构造函数\"></a>定义构造函数</h3><p>构造函数 Promise 必须接受函数作为参数</p>\n<ol>\n<li>定义构造函数</li>\n<li>判断一个参数是否为函数</li>\n</ol>\n<pre><code>/**\n * 封装判断参数是够是函数\n */\nfunction isFunction(fn) {\n  return Object.prototype.toString.call(fn) === &#39;[object Function]&#39;;\n}\n\n/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  if (!isFunction(fn)) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n}</code></pre><h3 id=\"定义-resolve\"><a href=\"#定义-resolve\" class=\"headerlink\" title=\"定义 resolve\"></a>定义 resolve</h3><p>在内部定义 resolve 方法作为参数传到 fn 中，fn 调用成功后会调用 resolve 方法，之后在执行 then 中注册的回调函数</p>\n<pre><code>/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  // 判断是否是函数\n  var _isFunction = Object.prototype.toString.call(fn) === &#39;[object Function]&#39;;\n\n  // 如果不是函数抛出异常\n  if (!_isFunction) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n  // 定义回调状态\n  var __callback\n  this.then = function (status) {\n    __callback = status\n  }\n  // 定义 resolve 函数传入成功的数据\n  function resolve (data) {\n    __callback(data)\n  }\n  fn(resolve)\n}</code></pre><p>调用例子</p>\n<pre><code>function request () {\n  return new Promise(function(resolve){\n    if (true) {\n      setTimeout(function() {\n        resolve(&quot;renbo&quot;);\n      }, 0);\n    }\n  })\n}\n\nrequest().then(function(data){\n  console.log(data)\n  console.log(&#39;success&#39;)\n})\n\n// 输出\nrenbo\nsuccess</code></pre><p>上面的例子我们已经简单的实现了 promise 的基础回调，接下来我们完成链式语法调用以及then队列管理</p>\n<h3 id=\"链式语法及队列管理\"><a href=\"#链式语法及队列管理\" class=\"headerlink\" title=\"链式语法及队列管理\"></a>链式语法及队列管理</h3><pre><code>function Promise (fn) {\n\n  var _isFunction = Object.prototype.toString.call(fn) === &#39;[object Function]&#39;;\n\n  if (!_isFunction) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n  var _this = this,\n      _value = null;\n      _this._resolves = [];\n\n  this.then = function (status) {\n    _this._resolves.push(status);\n    return this;\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n      _this._resolves.forEach(function (callback) {\n        _value = val\n        callback(_value)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}</code></pre><h3 id=\"加入状态并串行Promise\"><a href=\"#加入状态并串行Promise\" class=\"headerlink\" title=\"加入状态并串行Promise\"></a>加入状态并串行Promise</h3><p>Promise 对象有三种状态 <br></p>\n<ol>\n<li>pending(进行中) 立即执行</li>\n<li>从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve(‘fulfilled’) </li>\n<li>从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject(‘rejected’)</li>\n</ol>\n<p><code>promsie状态 只能由 pending =&gt; fulfilled/rejected, 一旦修改就不能再变</code></p>\n<p>我们加入上面的状态并串行Promise</p>\n<pre><code>function Promise (fn) {\n\n  function _isFunction (func) {\n    return Object.prototype.toString.call(func) === &#39;[object Function]&#39;;\n  }\n  if (!_isFunction(fn)) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n  var _this = this,\n      _val = null;\n      _this._resolves = [];\n      _this._status = &#39;PENDING&#39;;\n\n  this.then = function (onFulfilled) {\n    return new Promise(function (resolve) {\n      // handle 函数对上一个 promise 的 then 中回调进行了处理，并且调用当前的 promise 中的 resolve 方法。\n      function handle(_val) {\n        var ret = _isFunction(onFulfilled) &amp;&amp; onFulfilled(_val) || _val\n        // 如果是⼀一个 promise 对象，就会调⽤ then 方法，形成一个嵌套\n        if (ret &amp;&amp; _isFunction(ret[&#39;then&#39;])) {\n          ret.then(function (value) {\n            resolve(value);\n          })\n        } else {\n          resolve(ret)\n        }\n      }\n      if (_this._status === &#39;PENDING&#39;) {\n       _this._resolves.push(handle);\n      } else if(promise._status === &#39;FULFILLED&#39;){\n        handle(value);\n      }       \n    })\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n       _this.status = &quot;FULFILLED&quot;;\n      _this._resolves.forEach(function (callback) {\n        _val = val\n        callback(_val)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}</code></pre><h3 id=\"错误处理reject\"><a href=\"#错误处理reject\" class=\"headerlink\" title=\"错误处理reject\"></a>错误处理reject</h3><p>在异步操作中，操作可能失败，执行失败的回调函数，上面已经说到从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()</p>\n<pre><code>function Promise(fn) {\n\n  /**\n   * 工具函数判断是否是 function\n   * @param {*} func \n   */\n  function _isFunction(func) {\n    return Object.prototype.toString.call(func) === &#39;[object Function]&#39;;\n  }\n  if (!_isFunction(fn)) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n\n  var _this = this;\n  _this._value;\n  _this._reason;\n  _this._resolves = [];\n  _this._rejects = [];\n  _this._status = &quot;PENDING&quot;;\n\n  /**\n   * promise then回调\n   * @onFulfilled 执行成功状态的处理函数\n   * @onRejected 执行失败状态处理函数\n   */\n  this.then = function (onFulfilled, onRejected) {\n    return new Promise(function (resolve, reject) {\n\n      /**\n       * 对上一个 promise 的 then 中回调进行了处理\n       * 并且调用当前的 promise 中的 resolve 方法\n       */\n      function handle(value) {\n        var ret = _isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value\n        if (ret &amp;&amp; _isFunction(ret[&#39;then&#39;])) {\n          ret.then(\n            function (value) {\n              resolve(value);\n            },\n            function (reason) {\n              reject(reason);\n            }\n          )\n        } else {\n          resolve(ret)\n        }\n      }\n\n      /**\n       * 错误处理回调函数\n       */\n      function errback(reason) {\n        reason = _isFunction(onRejected) &amp;&amp; onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      /**\n       * 根据当前异步状态执行操作\n       */\n      var config = {\n        &#39;PENDING&#39;: function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        &#39;FULFILLED&#39;: function () {\n          handle(value);\n        },\n        &#39;REJECTED&#39;: function () {\n          errback(_this._reason);\n        }\n      }\n\n      config[_this._status]()\n    })\n  }\n\n  /**\n   * 成功的回调函数\n   * setTimeout作用是将resolve \n   * 执行回调的逻辑放置到 JS 任务队列列末尾\n   * 防止then执行在resolve之前\n   * @FULFILLED 状态\n   * @param {*} value \n   */\n  function resolve(value) {\n    setTimeout(function () {\n      _this.status = &quot;FULFILLED&quot;\n      _this._resolves.forEach(function (callback) {\n       _this._value = callback(value)\n      })\n    }, 0)\n  }\n\n  /**\n   * 错误处理回调函数\n   * @REJECTED 状态\n   * @param {*} value \n   */\n  function reject(value) {\n    setTimeout(function () {\n      _this._status = &quot;REJECTED&quot;\n      _this._rejects.forEach(function (callback) {\n        _this._reason = callback(value);\n      })\n    }, 0)\n  }\n\n  fn(resolve, reject)\n}</code></pre><h3 id=\"实现Promise-all\"><a href=\"#实现Promise-all\" class=\"headerlink\" title=\"实现Promise.all\"></a>实现Promise.all</h3><p>实现Promise.all函数</p>\n<pre><code>/**\n * Promise.all\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n */\nPromise.all = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError(&#39;You must pass an array to all.&#39;);\n  }\n  // 返回 promise 实例\n  return new Promise(function (resolve, reject) {\n    let done = gen(promiseArr.length, resolve);\n    promiseArr.forEach(function (promise, index) {\n      promise.then(function (value) {\n        done(index, value)\n      },reject)\n    })\n  })\n}\n\nfunction gen(length, resolve) {\n  let count = 0;\n  let result = [];\n  return function(i, value) {\n    result[i] = value;\n    if (++count === length) {\n      resolve(result);\n    }\n  }\n}</code></pre><h3 id=\"实现Promise-race\"><a href=\"#实现Promise-race\" class=\"headerlink\" title=\"实现Promise.race\"></a>实现Promise.race</h3><p>实现Promise.race函数</p>\n<pre><code>/**\n * Promise.race\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n */\n\nPromise.race = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError(&#39;You must pass an array to all.&#39;);\n  }\n  // 返回 promise 实例\n  return new Promise(function(resolve, reject){\n    promiseArr.forEach(function (promise, index) {\n      promise.then(resolve,reject)\n    })\n  })\n}\n</code></pre><h3 id=\"实现-catch\"><a href=\"#实现-catch\" class=\"headerlink\" title=\"实现 catch \"></a>实现 catch <br></h3><p>实现 catch </p>\n<pre><code>/**\n * 链式写法中可以捕获前面then中发送的异常\n */\n\nfunction Promise () {\n  var _this = this\n  ...\n\n  this.catch = function (onRejected) {\n    return _this.then(null, onRejected);\n  }\n}\n</code></pre><h3 id=\"代码封装\"><a href=\"#代码封装\" class=\"headerlink\" title=\"代码封装\"></a>代码封装</h3><p>经过上面的几个步骤我们基本实现了 promise 的几个重要特性，下面我们将代码整理一下</p>\n<pre><code>/*\n * @Description: promise \n * @Author: renbo\n * @Date: 2019-08-12 15:13:40\n * @LastEditTime: 2019-08-15 10:34:44\n */\n\nvar Promise = /** @class */ (function () {\n\n  function Promise (fn) {\n\n    var _this = this;\n    _this._status = &#39;PENDING&#39;;\n    _this._value = undefined;\n    _this._reason = undefined;\n    //存储状态\n    _this._resolves = [];\n    _this._rejects = [];\n\n    // 异常处理\n    if (!(typeof fn === &#39;function&#39; )) {\n      throw new TypeError(&#39;Promise must accept a function as a parameter&#39;);\n    }\n    if(!(this instanceof Promise)) return new Promise(fn);\n\n\n   function resolve(value) {\n      //由於apply參數是數組\n      _this.final.apply(_this,[&#39;FULFILLED&#39;].concat([value]));\n    }\n\n    function reject(reason){\n      _this.final.apply(_this,[&#39;REJECTED&#39;].concat([reason]));\n    }\n\n    fn(resolve,reject);\n  }\n\n  /**\n   * 用于resolve 和 reject \n   * 异步调用，保证then是先执行的\n   * @param {*} status \n   * @param {*} value \n   */\n  Promise.prototype.final = function (status,value) {\n    var _this = this, fn, st;\n    if(_this._status !== &#39;PENDING&#39;) return;\n\n    setTimeout(function(){\n      _this._status = status;\n      st = _this._status === &#39;FULFILLED&#39;\n      queue = _this[st ? &#39;_resolves&#39; : &#39;_rejects&#39;];\n\n      while(fn = queue.shift()) {\n        value = fn.call(_this, value) || value;\n      }\n\n      _this[st ? &#39;_value&#39; : &#39;_reason&#39;] = value;\n      _this[&#39;_resolves&#39;] = _this[&#39;_rejects&#39;] = undefined;\n    });\n  }\n\n  /**\n   * then \n   * @params onFulfilled\n   * @params onRejected\n   */\n  Promise.prototype.then = function (onFulfilled,onRejected) {\n    var _this = this;\n    // 每次返回一个promise，保证是可thenable的\n    return new Promise(function(resolve,reject){\n\n      function handle(value) {\n        // 這一步很關鍵，只有這樣才可以將值傳遞給下一個resolve\n        var ret = typeof onFulfilled === &#39;function&#39; &amp;&amp; onFulfilled(value) || value;\n\n        //判断是不是promise 对象\n        if (ret &amp;&amp; typeof ret [&#39;then&#39;] == &#39;function&#39;) {\n            ret.then(function(value) {\n                resolve(value);\n            }, function(reason) {\n                reject(reason);\n            });\n        } else {\n          resolve(ret);\n        }\n      }\n\n      function errback(reason){\n        reason = typeof onRejected === &#39;function&#39; &amp;&amp; onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      // 根据当前异步状态执行操作\n      var config = {\n        &#39;PENDING&#39;: function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        &#39;FULFILLED&#39;: function () {\n          handle(value);\n        },\n        &#39;REJECTED&#39;: function () {\n          errback(_this._reason);\n        }\n      }\n\n      config[_this._status]()\n    });\n  }\n\n\n  /**\n   * 链式写法中可以捕获前面then中发送的异常\n   */\n  Promise.prototype.catch = function(onRejected){\n    return this.then(undefined, onRejected)\n  }\n\n\n  /**\n   * Promise.race\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n   */\n\n  Promise.race = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError(&#39;You must pass an array to all.&#39;);\n    }\n    // 返回 promise 实例\n    return new Promise(function(resolve, reject){\n      promiseArr.forEach(function (promise, index) {\n        promise.then(resolve,reject)\n      })\n    })\n  }\n\n\n  /**\n   * Promise.all\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n   */\n  Promise.all = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError(&#39;You must pass an array to all.&#39;);\n    }\n    // 返回 promise 实例\n    return new Promise(function (resolve, reject) {\n      let done = gen(promiseArr.length, resolve);\n      promiseArr.forEach(function (promise, index) {\n        promise.then(function (value) {\n          done(index, value)\n        },reject)\n      })\n    })\n\n    // 判断 promise 状态是否全部 resolve\n    function gen(length, resolve) {\n      let count = 0;\n      let result = [];\n      return function(i, value) {\n        result[i] = value;\n        if (++count === length) {\n          resolve(result);\n        }\n      }\n    }\n  }\n\n  Promise.resolve = function(arg){\n    return new Promise(function(resolve,reject){\n        resolve(arg)\n    })\n  }\n\n  Promise.reject = function(arg){\n    return Promise(function(resolve,reject){\n      reject(arg)\n    })\n  }\n\n  return Promise;\n}())</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>本篇文章主要是实现 Promise 的原理, 具体 API 用法不在本文中做介绍。可以查看阮一峰老师的 <a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">ES6 Promise教程</a><br></p>\n<p>实现 Promise 首先要知道它的执行特点<br></p>\n<ol>\n<li>Promise 是一个构造函数，接受函数作为参数(resolve(),reject()) </li>\n<li>Promise 对象有三种状态 pending(进行中), fulfilled(成功), rejected(失败)</li>\n<li>Promise 从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve() </li>\n<li>Promise 从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()</li>\n<li>Promise 状态无法中途取消，一旦建立立即执行，会一直保持这个结果，这时也叫 resolved(已定型状态)</li>\n<li>Promise 状态改变时 then 方法支持多次链式调用 </li>\n<li>Promise 如果不设置回调函数内部会抛异常</li>\n</ol>\n<h3 id=\"定义构造函数\"><a href=\"#定义构造函数\" class=\"headerlink\" title=\"定义构造函数\"></a>定义构造函数</h3><p>构造函数 Promise 必须接受函数作为参数</p>\n<ol>\n<li>定义构造函数</li>\n<li>判断一个参数是否为函数</li>\n</ol>\n<pre><code>/**\n * 封装判断参数是够是函数\n */\nfunction isFunction(fn) {\n  return Object.prototype.toString.call(fn) === &#39;[object Function]&#39;;\n}\n\n/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  if (!isFunction(fn)) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n}</code></pre><h3 id=\"定义-resolve\"><a href=\"#定义-resolve\" class=\"headerlink\" title=\"定义 resolve\"></a>定义 resolve</h3><p>在内部定义 resolve 方法作为参数传到 fn 中，fn 调用成功后会调用 resolve 方法，之后在执行 then 中注册的回调函数</p>\n<pre><code>/**\n * 定义构造函数\n * @param {*} fn \n */\nfunction Promise(fn) {\n  // 判断是否是函数\n  var _isFunction = Object.prototype.toString.call(fn) === &#39;[object Function]&#39;;\n\n  // 如果不是函数抛出异常\n  if (!_isFunction) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n  // 定义回调状态\n  var __callback\n  this.then = function (status) {\n    __callback = status\n  }\n  // 定义 resolve 函数传入成功的数据\n  function resolve (data) {\n    __callback(data)\n  }\n  fn(resolve)\n}</code></pre><p>调用例子</p>\n<pre><code>function request () {\n  return new Promise(function(resolve){\n    if (true) {\n      setTimeout(function() {\n        resolve(&quot;renbo&quot;);\n      }, 0);\n    }\n  })\n}\n\nrequest().then(function(data){\n  console.log(data)\n  console.log(&#39;success&#39;)\n})\n\n// 输出\nrenbo\nsuccess</code></pre><p>上面的例子我们已经简单的实现了 promise 的基础回调，接下来我们完成链式语法调用以及then队列管理</p>\n<h3 id=\"链式语法及队列管理\"><a href=\"#链式语法及队列管理\" class=\"headerlink\" title=\"链式语法及队列管理\"></a>链式语法及队列管理</h3><pre><code>function Promise (fn) {\n\n  var _isFunction = Object.prototype.toString.call(fn) === &#39;[object Function]&#39;;\n\n  if (!_isFunction) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n  var _this = this,\n      _value = null;\n      _this._resolves = [];\n\n  this.then = function (status) {\n    _this._resolves.push(status);\n    return this;\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n      _this._resolves.forEach(function (callback) {\n        _value = val\n        callback(_value)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}</code></pre><h3 id=\"加入状态并串行Promise\"><a href=\"#加入状态并串行Promise\" class=\"headerlink\" title=\"加入状态并串行Promise\"></a>加入状态并串行Promise</h3><p>Promise 对象有三种状态 <br></p>\n<ol>\n<li>pending(进行中) 立即执行</li>\n<li>从 pending 变为 fulfilled 过程是成功的过程可以执行回调函数 resolve(‘fulfilled’) </li>\n<li>从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject(‘rejected’)</li>\n</ol>\n<p><code>promsie状态 只能由 pending =&gt; fulfilled/rejected, 一旦修改就不能再变</code></p>\n<p>我们加入上面的状态并串行Promise</p>\n<pre><code>function Promise (fn) {\n\n  function _isFunction (func) {\n    return Object.prototype.toString.call(func) === &#39;[object Function]&#39;;\n  }\n  if (!_isFunction(fn)) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n  var _this = this,\n      _val = null;\n      _this._resolves = [];\n      _this._status = &#39;PENDING&#39;;\n\n  this.then = function (onFulfilled) {\n    return new Promise(function (resolve) {\n      // handle 函数对上一个 promise 的 then 中回调进行了处理，并且调用当前的 promise 中的 resolve 方法。\n      function handle(_val) {\n        var ret = _isFunction(onFulfilled) &amp;&amp; onFulfilled(_val) || _val\n        // 如果是⼀一个 promise 对象，就会调⽤ then 方法，形成一个嵌套\n        if (ret &amp;&amp; _isFunction(ret[&#39;then&#39;])) {\n          ret.then(function (value) {\n            resolve(value);\n          })\n        } else {\n          resolve(ret)\n        }\n      }\n      if (_this._status === &#39;PENDING&#39;) {\n       _this._resolves.push(handle);\n      } else if(promise._status === &#39;FULFILLED&#39;){\n        handle(value);\n      }       \n    })\n  }\n\n  // 将 resolve 中执行回调的逻辑放置到 JS 任务队列列末尾\n  function resolve (val) {\n     setTimeout(function() {\n       _this.status = &quot;FULFILLED&quot;;\n      _this._resolves.forEach(function (callback) {\n        _val = val\n        callback(_val)\n      })\n    },0);\n  }\n\n  fn (resolve)\n}</code></pre><h3 id=\"错误处理reject\"><a href=\"#错误处理reject\" class=\"headerlink\" title=\"错误处理reject\"></a>错误处理reject</h3><p>在异步操作中，操作可能失败，执行失败的回调函数，上面已经说到从 pending 变为 rejected 过程是失败的过程可以执行回调函数 reject()</p>\n<pre><code>function Promise(fn) {\n\n  /**\n   * 工具函数判断是否是 function\n   * @param {*} func \n   */\n  function _isFunction(func) {\n    return Object.prototype.toString.call(func) === &#39;[object Function]&#39;;\n  }\n  if (!_isFunction(fn)) {\n    throw new Error(&#39;Promise must accept a function as a parameter&#39;)\n  }\n\n\n  var _this = this;\n  _this._value;\n  _this._reason;\n  _this._resolves = [];\n  _this._rejects = [];\n  _this._status = &quot;PENDING&quot;;\n\n  /**\n   * promise then回调\n   * @onFulfilled 执行成功状态的处理函数\n   * @onRejected 执行失败状态处理函数\n   */\n  this.then = function (onFulfilled, onRejected) {\n    return new Promise(function (resolve, reject) {\n\n      /**\n       * 对上一个 promise 的 then 中回调进行了处理\n       * 并且调用当前的 promise 中的 resolve 方法\n       */\n      function handle(value) {\n        var ret = _isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value\n        if (ret &amp;&amp; _isFunction(ret[&#39;then&#39;])) {\n          ret.then(\n            function (value) {\n              resolve(value);\n            },\n            function (reason) {\n              reject(reason);\n            }\n          )\n        } else {\n          resolve(ret)\n        }\n      }\n\n      /**\n       * 错误处理回调函数\n       */\n      function errback(reason) {\n        reason = _isFunction(onRejected) &amp;&amp; onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      /**\n       * 根据当前异步状态执行操作\n       */\n      var config = {\n        &#39;PENDING&#39;: function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        &#39;FULFILLED&#39;: function () {\n          handle(value);\n        },\n        &#39;REJECTED&#39;: function () {\n          errback(_this._reason);\n        }\n      }\n\n      config[_this._status]()\n    })\n  }\n\n  /**\n   * 成功的回调函数\n   * setTimeout作用是将resolve \n   * 执行回调的逻辑放置到 JS 任务队列列末尾\n   * 防止then执行在resolve之前\n   * @FULFILLED 状态\n   * @param {*} value \n   */\n  function resolve(value) {\n    setTimeout(function () {\n      _this.status = &quot;FULFILLED&quot;\n      _this._resolves.forEach(function (callback) {\n       _this._value = callback(value)\n      })\n    }, 0)\n  }\n\n  /**\n   * 错误处理回调函数\n   * @REJECTED 状态\n   * @param {*} value \n   */\n  function reject(value) {\n    setTimeout(function () {\n      _this._status = &quot;REJECTED&quot;\n      _this._rejects.forEach(function (callback) {\n        _this._reason = callback(value);\n      })\n    }, 0)\n  }\n\n  fn(resolve, reject)\n}</code></pre><h3 id=\"实现Promise-all\"><a href=\"#实现Promise-all\" class=\"headerlink\" title=\"实现Promise.all\"></a>实现Promise.all</h3><p>实现Promise.all函数</p>\n<pre><code>/**\n * Promise.all\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n */\nPromise.all = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError(&#39;You must pass an array to all.&#39;);\n  }\n  // 返回 promise 实例\n  return new Promise(function (resolve, reject) {\n    let done = gen(promiseArr.length, resolve);\n    promiseArr.forEach(function (promise, index) {\n      promise.then(function (value) {\n        done(index, value)\n      },reject)\n    })\n  })\n}\n\nfunction gen(length, resolve) {\n  let count = 0;\n  let result = [];\n  return function(i, value) {\n    result[i] = value;\n    if (++count === length) {\n      resolve(result);\n    }\n  }\n}</code></pre><h3 id=\"实现Promise-race\"><a href=\"#实现Promise-race\" class=\"headerlink\" title=\"实现Promise.race\"></a>实现Promise.race</h3><p>实现Promise.race函数</p>\n<pre><code>/**\n * Promise.race\n * 接收一个元素为 Promise 对象的数组作为参数\n * 返回一个Promise实例\n * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n */\n\nPromise.race = function(promiseArr) {\n\n  if (!Array.isArray(promiseArr)) {\n    throw new TypeError(&#39;You must pass an array to all.&#39;);\n  }\n  // 返回 promise 实例\n  return new Promise(function(resolve, reject){\n    promiseArr.forEach(function (promise, index) {\n      promise.then(resolve,reject)\n    })\n  })\n}\n</code></pre><h3 id=\"实现-catch\"><a href=\"#实现-catch\" class=\"headerlink\" title=\"实现 catch \"></a>实现 catch <br></h3><p>实现 catch </p>\n<pre><code>/**\n * 链式写法中可以捕获前面then中发送的异常\n */\n\nfunction Promise () {\n  var _this = this\n  ...\n\n  this.catch = function (onRejected) {\n    return _this.then(null, onRejected);\n  }\n}\n</code></pre><h3 id=\"代码封装\"><a href=\"#代码封装\" class=\"headerlink\" title=\"代码封装\"></a>代码封装</h3><p>经过上面的几个步骤我们基本实现了 promise 的几个重要特性，下面我们将代码整理一下</p>\n<pre><code>/*\n * @Description: promise \n * @Author: renbo\n * @Date: 2019-08-12 15:13:40\n * @LastEditTime: 2019-08-15 10:34:44\n */\n\nvar Promise = /** @class */ (function () {\n\n  function Promise (fn) {\n\n    var _this = this;\n    _this._status = &#39;PENDING&#39;;\n    _this._value = undefined;\n    _this._reason = undefined;\n    //存储状态\n    _this._resolves = [];\n    _this._rejects = [];\n\n    // 异常处理\n    if (!(typeof fn === &#39;function&#39; )) {\n      throw new TypeError(&#39;Promise must accept a function as a parameter&#39;);\n    }\n    if(!(this instanceof Promise)) return new Promise(fn);\n\n\n   function resolve(value) {\n      //由於apply參數是數組\n      _this.final.apply(_this,[&#39;FULFILLED&#39;].concat([value]));\n    }\n\n    function reject(reason){\n      _this.final.apply(_this,[&#39;REJECTED&#39;].concat([reason]));\n    }\n\n    fn(resolve,reject);\n  }\n\n  /**\n   * 用于resolve 和 reject \n   * 异步调用，保证then是先执行的\n   * @param {*} status \n   * @param {*} value \n   */\n  Promise.prototype.final = function (status,value) {\n    var _this = this, fn, st;\n    if(_this._status !== &#39;PENDING&#39;) return;\n\n    setTimeout(function(){\n      _this._status = status;\n      st = _this._status === &#39;FULFILLED&#39;\n      queue = _this[st ? &#39;_resolves&#39; : &#39;_rejects&#39;];\n\n      while(fn = queue.shift()) {\n        value = fn.call(_this, value) || value;\n      }\n\n      _this[st ? &#39;_value&#39; : &#39;_reason&#39;] = value;\n      _this[&#39;_resolves&#39;] = _this[&#39;_rejects&#39;] = undefined;\n    });\n  }\n\n  /**\n   * then \n   * @params onFulfilled\n   * @params onRejected\n   */\n  Promise.prototype.then = function (onFulfilled,onRejected) {\n    var _this = this;\n    // 每次返回一个promise，保证是可thenable的\n    return new Promise(function(resolve,reject){\n\n      function handle(value) {\n        // 這一步很關鍵，只有這樣才可以將值傳遞給下一個resolve\n        var ret = typeof onFulfilled === &#39;function&#39; &amp;&amp; onFulfilled(value) || value;\n\n        //判断是不是promise 对象\n        if (ret &amp;&amp; typeof ret [&#39;then&#39;] == &#39;function&#39;) {\n            ret.then(function(value) {\n                resolve(value);\n            }, function(reason) {\n                reject(reason);\n            });\n        } else {\n          resolve(ret);\n        }\n      }\n\n      function errback(reason){\n        reason = typeof onRejected === &#39;function&#39; &amp;&amp; onRejected(reason) || reason;\n        reject(reason);\n      }\n\n      // 根据当前异步状态执行操作\n      var config = {\n        &#39;PENDING&#39;: function () {\n          _this._resolves.push(handle);\n          _this._rejects.push(errback);\n        },\n        &#39;FULFILLED&#39;: function () {\n          handle(value);\n        },\n        &#39;REJECTED&#39;: function () {\n          errback(_this._reason);\n        }\n      }\n\n      config[_this._status]()\n    });\n  }\n\n\n  /**\n   * 链式写法中可以捕获前面then中发送的异常\n   */\n  Promise.prototype.catch = function(onRejected){\n    return this.then(undefined, onRejected)\n  }\n\n\n  /**\n   * Promise.race\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 只要该数组中的任意一个 Promise 对象的状态发⽣变化(无论是 resolve 还是 reject)该⽅法都会返回\n   */\n\n  Promise.race = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError(&#39;You must pass an array to all.&#39;);\n    }\n    // 返回 promise 实例\n    return new Promise(function(resolve, reject){\n      promiseArr.forEach(function (promise, index) {\n        promise.then(resolve,reject)\n      })\n    })\n  }\n\n\n  /**\n   * Promise.all\n   * 接收一个元素为 Promise 对象的数组作为参数\n   * 返回一个Promise实例\n   * 当这个数组里的所有promise对象都变为resolve状态的时候，才会返回\n   */\n  Promise.all = function(promiseArr) {\n\n    if (!Array.isArray(promiseArr)) {\n      throw new TypeError(&#39;You must pass an array to all.&#39;);\n    }\n    // 返回 promise 实例\n    return new Promise(function (resolve, reject) {\n      let done = gen(promiseArr.length, resolve);\n      promiseArr.forEach(function (promise, index) {\n        promise.then(function (value) {\n          done(index, value)\n        },reject)\n      })\n    })\n\n    // 判断 promise 状态是否全部 resolve\n    function gen(length, resolve) {\n      let count = 0;\n      let result = [];\n      return function(i, value) {\n        result[i] = value;\n        if (++count === length) {\n          resolve(result);\n        }\n      }\n    }\n  }\n\n  Promise.resolve = function(arg){\n    return new Promise(function(resolve,reject){\n        resolve(arg)\n    })\n  }\n\n  Promise.reject = function(arg){\n    return Promise(function(resolve,reject){\n      reject(arg)\n    })\n  }\n\n  return Promise;\n}())</code></pre>"},{"title":"原型及原型链","date":"2019-03-10T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 普通对象和函数对象\n\n```\n  // 普通对象\n  var obj1 = {}; \n  var obj2 = new Object();\n  var obj3 = new person();\n  // 函数对象\n  function person(){}; \n  var person1 = function(){};\n  var person2 = new Function('aaa','console.warn(aaaa)');\n\n  console.log(typeof Object); //function \n  console.log(typeof Function); //function \n  \n  console.log(typeof person); //function \n  console.log(typeof person1); //function \n  console.log(typeof person2); //function  \n  console.log(person instanceof Function) // true \n\n  console.log(typeof obj1); //object \n  console.log(typeof obj2); //object \n  console.log(typeof obj3); //object\n  console.log(obj3 instanceof Object)  // true\n```\n\n通过以上实例我们知道 new Function 构建的都是函数对象(关于普通函数与new Function的区别请参考 <a href= \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">mozilla开发者</a>), 其余都是普通对象,关于Object与Function的区别会在这章节最后总结\n\n\n### 通过构造函数模式创建对象\n\n在js高程中我们知道创建对象有很多种模式如下\n\n- 工厂模式\n- 构造函数模式\n- 原型模式\n- 组合使用构造函数和原型模式\n- 动态原型模式\n- 寄生构造函数模式\n- 稳妥构造函数模式\n\n当然这几种模式在这里暂时不展开说明，后续继承的时候在分别用讨论，我们这里简单的回忆一下用构造函数创建对象\n\n```\n  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  Person.prototype.sayName = function () {\n    console.log(this.name)\n  }\n  var person1 = new Person('zhansan', 29);\n  var person2 = new Person('lisi', 29);\n```\n\n### __proto__,prototype,constructor\n\n- `__proto__`:在JavaScript权威指南中指出每个js对象一定对应一个原型对象，并从原型对象继承属性和方法。\n- `prototype`: 当创建函数对象时，js会自动为这个函数添加prototype属性（**这里明确一下只有函数对象才会有此属性**）\n- 每个原型都有一个 constructor 属性指向关联的构造函数。\n\n通过上述三点我们针对2中的代码解释为\n\n当创建`Person`函数时，js会自动为该函数创建`prototype`属性，这个属性指向函数的原型对象，函数的原型对象（`Person.prototype`）会自动获取一个`constructor`属性指向关联的Person。当我们通过new关键字调用时，js就会创建该构造函数的实例`person1`或`person2`，此时我们就可以通过`prototype`来存储要共享的属性和方法\n\n下面我们通过图例来说明我们上面的文字\n\n<image src='/images/Person.png'></image>\n\n这里我们注意虽然person1和person2这两个个实例都不包含属性和方法，但是我们可以通过查找对象属性来实现调用person1.sayName()\n\n此时我们来确定两个实例对象返回的原型指针是否一样(**Object.getPrototypeOf 此方法可以获取对象的原型**)\n\n```\nObject.getPrototypeOf(person1) === Person.prototype (true)\nObject.getPrototypeOf(person1) === Person.prototype (true)\n```\n\n通过如上输出结果得知他们内部都有一个指向Person.prototype的指针也就是\n\n```\nperson1.__proto__ === Person.prototype\nperson2.__proto__ === Person.prototype\n```\n\n经过上面解释这么多我们得出的结果就是如下 \n\n```\nperson1.__proto__ === Person.prototype\nPerson.prototype.constructor == Person\n```\n\n### Object\n\n- js几乎所有对象都是Object; 典型对象继承属性（包括方法）\n- 所有引用类型的原型链上必然存在Object的原型\n- new Object 出来的实例是普通对象我们前面说过只有函数对象才有prototype\n- Object 实际是function Object跟function Function 类似\n- Object.prototype是Object构造函数的属性。它也是原型链的终结\n\n```\nfunction Object (name,age) {\n  this.name = name;\n  this.age = age;\n}\nObject.prototype.sayName = function () {\n  console.log(this.name)\n}\nobject = new Object('zhangsan',20)\nobject.sayName()\n```\n\n我们通样以图例的形式来说明Object的__proto__,prototype,constructor\n\n<image src='/images/Object.png'></image>\n\n通过以上图例我们得出结论`Object.prototype.__proto__ === null`\n\n这里面扩展一下null和undefined区别\n\n- null === undefined为false，null == undefined为true 说明只是值相等\n- null是一个表示\"无\"的对象，转为数值时为0；undefined是一个表示\"无\"的原始值，转为数值时为NaN。\n- null表示变量未指向任何对象，undefined表示变量被声明但是没有被赋值\n\n### Function\n\n- 在js中每个函数实际上都是一个Function对象。\n- 使用Function构造器生成的Function对象是在函数创建时解析的,而其他函数方式是跟其他代码一起解析，所以较为低效\n- 全局的Function对象没有自己的属性和方法，通过Function.prototype上继承部分属性和方法。\n- 我们说js中万物皆对象，Function也也是对象，只不过是函数对象所以`Function.prototype.__proto__`指针指向`Object.prototype`\n- `Object.__proto__` 指针指向`Function.prototype`\n\n**Function创建的函数一般在全局作用域中被创建，但并不会像其他函数一样产生闭包，所以只能自己内部和全局的变量**\n       \n```\nfunction Function (name,age){\n  this.name  = name\n  this.age = age\n}\nFunction.prototype.sayName = function () {\n  console.log(this.name)\n}\nf = new Function('zhangsan', 20)\nf.sayName ()\n\n```\n\n我们同样以图例的形式来说明Function的__proto__,prototype,constructor\n\n<image src='/images/Function.png'></image>\n\n通过以上图例我们得出结论`Object.prototype === Function.prototype.__proto__`\n\n### 将Function，Object，Person链接起来\n\n此时我们同样通过图例的形式将上面整合起来。来看看整个链路是什么样子\n\n<image src='/images/prototype.png'></image>\n\n 通过以上图例我们可以观察到其实js原型链就是由相互关联的链条组成，查找属性或者方法的过程就是图中红色链条的过程，如果找到则终止否则直到返回null\n\n`person1` > `person1.__proto__` > `Person.prototype` > `Person.prototype.__proto__` > `Object.prototype` > `Object.prototype.__proto__` > `null`\n\n\n最后我们来看一下Object和Function的关系，上面已经提到`Object.prototype === Function.prototype.__proto__`\n\n- `Function.__proto__` > `Function.prototype` > `Function.prototype.__proto__` > `Object.prototype` --> `Object.prototype.__proto__` --> 'null';简写为`Function.__proto__.__proto__.__proto__` > `null`\n- `Object.__proto__` > `Funtion.prototype` > `Function.prototype.__proto__` > `Object.prototype` >`Object.prototype.__proto__` > `null`;简写为`Object.__proto__.__proto__.__proto__` > `null`\n\n通过上面我们可以得出结论\n\n- 只有函数对象才有 prototype，但是每个对象（普通对象和函数对象）都拥有__proto__属性\n- 原型对象都有一个 constructor 属性指向它们的构造函数（也就是自己）\n- 原生对象既是对象，也是构造函数\n- 实例对象的隐式原型始终指向构造函数的显式原型（`person1.__proto__` > `Person.prototype`）\n- 原型链的查找过程链接依赖 __proto__ 指针逐级向上，并且原型链的尽头始终为null\n","source":"_posts/javascript/prototype.md","raw":"---\ntitle: 原型及原型链\ndate: 2019-3-10 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n### 普通对象和函数对象\n\n```\n  // 普通对象\n  var obj1 = {}; \n  var obj2 = new Object();\n  var obj3 = new person();\n  // 函数对象\n  function person(){}; \n  var person1 = function(){};\n  var person2 = new Function('aaa','console.warn(aaaa)');\n\n  console.log(typeof Object); //function \n  console.log(typeof Function); //function \n  \n  console.log(typeof person); //function \n  console.log(typeof person1); //function \n  console.log(typeof person2); //function  \n  console.log(person instanceof Function) // true \n\n  console.log(typeof obj1); //object \n  console.log(typeof obj2); //object \n  console.log(typeof obj3); //object\n  console.log(obj3 instanceof Object)  // true\n```\n\n通过以上实例我们知道 new Function 构建的都是函数对象(关于普通函数与new Function的区别请参考 <a href= \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">mozilla开发者</a>), 其余都是普通对象,关于Object与Function的区别会在这章节最后总结\n\n\n### 通过构造函数模式创建对象\n\n在js高程中我们知道创建对象有很多种模式如下\n\n- 工厂模式\n- 构造函数模式\n- 原型模式\n- 组合使用构造函数和原型模式\n- 动态原型模式\n- 寄生构造函数模式\n- 稳妥构造函数模式\n\n当然这几种模式在这里暂时不展开说明，后续继承的时候在分别用讨论，我们这里简单的回忆一下用构造函数创建对象\n\n```\n  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  Person.prototype.sayName = function () {\n    console.log(this.name)\n  }\n  var person1 = new Person('zhansan', 29);\n  var person2 = new Person('lisi', 29);\n```\n\n### __proto__,prototype,constructor\n\n- `__proto__`:在JavaScript权威指南中指出每个js对象一定对应一个原型对象，并从原型对象继承属性和方法。\n- `prototype`: 当创建函数对象时，js会自动为这个函数添加prototype属性（**这里明确一下只有函数对象才会有此属性**）\n- 每个原型都有一个 constructor 属性指向关联的构造函数。\n\n通过上述三点我们针对2中的代码解释为\n\n当创建`Person`函数时，js会自动为该函数创建`prototype`属性，这个属性指向函数的原型对象，函数的原型对象（`Person.prototype`）会自动获取一个`constructor`属性指向关联的Person。当我们通过new关键字调用时，js就会创建该构造函数的实例`person1`或`person2`，此时我们就可以通过`prototype`来存储要共享的属性和方法\n\n下面我们通过图例来说明我们上面的文字\n\n<image src='/images/Person.png'></image>\n\n这里我们注意虽然person1和person2这两个个实例都不包含属性和方法，但是我们可以通过查找对象属性来实现调用person1.sayName()\n\n此时我们来确定两个实例对象返回的原型指针是否一样(**Object.getPrototypeOf 此方法可以获取对象的原型**)\n\n```\nObject.getPrototypeOf(person1) === Person.prototype (true)\nObject.getPrototypeOf(person1) === Person.prototype (true)\n```\n\n通过如上输出结果得知他们内部都有一个指向Person.prototype的指针也就是\n\n```\nperson1.__proto__ === Person.prototype\nperson2.__proto__ === Person.prototype\n```\n\n经过上面解释这么多我们得出的结果就是如下 \n\n```\nperson1.__proto__ === Person.prototype\nPerson.prototype.constructor == Person\n```\n\n### Object\n\n- js几乎所有对象都是Object; 典型对象继承属性（包括方法）\n- 所有引用类型的原型链上必然存在Object的原型\n- new Object 出来的实例是普通对象我们前面说过只有函数对象才有prototype\n- Object 实际是function Object跟function Function 类似\n- Object.prototype是Object构造函数的属性。它也是原型链的终结\n\n```\nfunction Object (name,age) {\n  this.name = name;\n  this.age = age;\n}\nObject.prototype.sayName = function () {\n  console.log(this.name)\n}\nobject = new Object('zhangsan',20)\nobject.sayName()\n```\n\n我们通样以图例的形式来说明Object的__proto__,prototype,constructor\n\n<image src='/images/Object.png'></image>\n\n通过以上图例我们得出结论`Object.prototype.__proto__ === null`\n\n这里面扩展一下null和undefined区别\n\n- null === undefined为false，null == undefined为true 说明只是值相等\n- null是一个表示\"无\"的对象，转为数值时为0；undefined是一个表示\"无\"的原始值，转为数值时为NaN。\n- null表示变量未指向任何对象，undefined表示变量被声明但是没有被赋值\n\n### Function\n\n- 在js中每个函数实际上都是一个Function对象。\n- 使用Function构造器生成的Function对象是在函数创建时解析的,而其他函数方式是跟其他代码一起解析，所以较为低效\n- 全局的Function对象没有自己的属性和方法，通过Function.prototype上继承部分属性和方法。\n- 我们说js中万物皆对象，Function也也是对象，只不过是函数对象所以`Function.prototype.__proto__`指针指向`Object.prototype`\n- `Object.__proto__` 指针指向`Function.prototype`\n\n**Function创建的函数一般在全局作用域中被创建，但并不会像其他函数一样产生闭包，所以只能自己内部和全局的变量**\n       \n```\nfunction Function (name,age){\n  this.name  = name\n  this.age = age\n}\nFunction.prototype.sayName = function () {\n  console.log(this.name)\n}\nf = new Function('zhangsan', 20)\nf.sayName ()\n\n```\n\n我们同样以图例的形式来说明Function的__proto__,prototype,constructor\n\n<image src='/images/Function.png'></image>\n\n通过以上图例我们得出结论`Object.prototype === Function.prototype.__proto__`\n\n### 将Function，Object，Person链接起来\n\n此时我们同样通过图例的形式将上面整合起来。来看看整个链路是什么样子\n\n<image src='/images/prototype.png'></image>\n\n 通过以上图例我们可以观察到其实js原型链就是由相互关联的链条组成，查找属性或者方法的过程就是图中红色链条的过程，如果找到则终止否则直到返回null\n\n`person1` > `person1.__proto__` > `Person.prototype` > `Person.prototype.__proto__` > `Object.prototype` > `Object.prototype.__proto__` > `null`\n\n\n最后我们来看一下Object和Function的关系，上面已经提到`Object.prototype === Function.prototype.__proto__`\n\n- `Function.__proto__` > `Function.prototype` > `Function.prototype.__proto__` > `Object.prototype` --> `Object.prototype.__proto__` --> 'null';简写为`Function.__proto__.__proto__.__proto__` > `null`\n- `Object.__proto__` > `Funtion.prototype` > `Function.prototype.__proto__` > `Object.prototype` >`Object.prototype.__proto__` > `null`;简写为`Object.__proto__.__proto__.__proto__` > `null`\n\n通过上面我们可以得出结论\n\n- 只有函数对象才有 prototype，但是每个对象（普通对象和函数对象）都拥有__proto__属性\n- 原型对象都有一个 constructor 属性指向它们的构造函数（也就是自己）\n- 原生对象既是对象，也是构造函数\n- 实例对象的隐式原型始终指向构造函数的显式原型（`person1.__proto__` > `Person.prototype`）\n- 原型链的查找过程链接依赖 __proto__ 指针逐级向上，并且原型链的尽头始终为null\n","slug":"javascript/prototype","published":1,"updated":"2019-08-26T16:46:27.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7t001rkuu653ufar2q","content":"<h3 id=\"普通对象和函数对象\"><a href=\"#普通对象和函数对象\" class=\"headerlink\" title=\"普通对象和函数对象\"></a>普通对象和函数对象</h3><pre><code>  // 普通对象\n  var obj1 = {}; \n  var obj2 = new Object();\n  var obj3 = new person();\n  // 函数对象\n  function person(){}; \n  var person1 = function(){};\n  var person2 = new Function(&#39;aaa&#39;,&#39;console.warn(aaaa)&#39;);\n\n  console.log(typeof Object); //function \n  console.log(typeof Function); //function \n\n  console.log(typeof person); //function \n  console.log(typeof person1); //function \n  console.log(typeof person2); //function  \n  console.log(person instanceof Function) // true \n\n  console.log(typeof obj1); //object \n  console.log(typeof obj2); //object \n  console.log(typeof obj3); //object\n  console.log(obj3 instanceof Object)  // true</code></pre><p>通过以上实例我们知道 new Function 构建的都是函数对象(关于普通函数与new Function的区别请参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" target=\"_blank\" rel=\"noopener\">mozilla开发者</a>), 其余都是普通对象,关于Object与Function的区别会在这章节最后总结</p>\n<h3 id=\"通过构造函数模式创建对象\"><a href=\"#通过构造函数模式创建对象\" class=\"headerlink\" title=\"通过构造函数模式创建对象\"></a>通过构造函数模式创建对象</h3><p>在js高程中我们知道创建对象有很多种模式如下</p>\n<ul>\n<li>工厂模式</li>\n<li>构造函数模式</li>\n<li>原型模式</li>\n<li>组合使用构造函数和原型模式</li>\n<li>动态原型模式</li>\n<li>寄生构造函数模式</li>\n<li>稳妥构造函数模式</li>\n</ul>\n<p>当然这几种模式在这里暂时不展开说明，后续继承的时候在分别用讨论，我们这里简单的回忆一下用构造函数创建对象</p>\n<pre><code>  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  Person.prototype.sayName = function () {\n    console.log(this.name)\n  }\n  var person1 = new Person(&#39;zhansan&#39;, 29);\n  var person2 = new Person(&#39;lisi&#39;, 29);</code></pre><h3 id=\"proto-prototype-constructor\"><a href=\"#proto-prototype-constructor\" class=\"headerlink\" title=\"proto,prototype,constructor\"></a><strong>proto</strong>,prototype,constructor</h3><ul>\n<li><code>__proto__</code>:在JavaScript权威指南中指出每个js对象一定对应一个原型对象，并从原型对象继承属性和方法。</li>\n<li><code>prototype</code>: 当创建函数对象时，js会自动为这个函数添加prototype属性（<strong>这里明确一下只有函数对象才会有此属性</strong>）</li>\n<li>每个原型都有一个 constructor 属性指向关联的构造函数。</li>\n</ul>\n<p>通过上述三点我们针对2中的代码解释为</p>\n<p>当创建<code>Person</code>函数时，js会自动为该函数创建<code>prototype</code>属性，这个属性指向函数的原型对象，函数的原型对象（<code>Person.prototype</code>）会自动获取一个<code>constructor</code>属性指向关联的Person。当我们通过new关键字调用时，js就会创建该构造函数的实例<code>person1</code>或<code>person2</code>，此时我们就可以通过<code>prototype</code>来存储要共享的属性和方法</p>\n<p>下面我们通过图例来说明我们上面的文字</p>\n<p><image src=\"/images/Person.png\"></image></p>\n<p>这里我们注意虽然person1和person2这两个个实例都不包含属性和方法，但是我们可以通过查找对象属性来实现调用person1.sayName()</p>\n<p>此时我们来确定两个实例对象返回的原型指针是否一样(<strong>Object.getPrototypeOf 此方法可以获取对象的原型</strong>)</p>\n<pre><code>Object.getPrototypeOf(person1) === Person.prototype (true)\nObject.getPrototypeOf(person1) === Person.prototype (true)</code></pre><p>通过如上输出结果得知他们内部都有一个指向Person.prototype的指针也就是</p>\n<pre><code>person1.__proto__ === Person.prototype\nperson2.__proto__ === Person.prototype</code></pre><p>经过上面解释这么多我们得出的结果就是如下 </p>\n<pre><code>person1.__proto__ === Person.prototype\nPerson.prototype.constructor == Person</code></pre><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><ul>\n<li>js几乎所有对象都是Object; 典型对象继承属性（包括方法）</li>\n<li>所有引用类型的原型链上必然存在Object的原型</li>\n<li>new Object 出来的实例是普通对象我们前面说过只有函数对象才有prototype</li>\n<li>Object 实际是function Object跟function Function 类似</li>\n<li>Object.prototype是Object构造函数的属性。它也是原型链的终结</li>\n</ul>\n<pre><code>function Object (name,age) {\n  this.name = name;\n  this.age = age;\n}\nObject.prototype.sayName = function () {\n  console.log(this.name)\n}\nobject = new Object(&#39;zhangsan&#39;,20)\nobject.sayName()</code></pre><p>我们通样以图例的形式来说明Object的<strong>proto</strong>,prototype,constructor</p>\n<p><image src=\"/images/Object.png\"></image></p>\n<p>通过以上图例我们得出结论<code>Object.prototype.__proto__ === null</code></p>\n<p>这里面扩展一下null和undefined区别</p>\n<ul>\n<li>null === undefined为false，null == undefined为true 说明只是值相等</li>\n<li>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</li>\n<li>null表示变量未指向任何对象，undefined表示变量被声明但是没有被赋值</li>\n</ul>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><ul>\n<li>在js中每个函数实际上都是一个Function对象。</li>\n<li>使用Function构造器生成的Function对象是在函数创建时解析的,而其他函数方式是跟其他代码一起解析，所以较为低效</li>\n<li>全局的Function对象没有自己的属性和方法，通过Function.prototype上继承部分属性和方法。</li>\n<li>我们说js中万物皆对象，Function也也是对象，只不过是函数对象所以<code>Function.prototype.__proto__</code>指针指向<code>Object.prototype</code></li>\n<li><code>Object.__proto__</code> 指针指向<code>Function.prototype</code></li>\n</ul>\n<p><strong>Function创建的函数一般在全局作用域中被创建，但并不会像其他函数一样产生闭包，所以只能自己内部和全局的变量</strong></p>\n<pre><code>function Function (name,age){\n  this.name  = name\n  this.age = age\n}\nFunction.prototype.sayName = function () {\n  console.log(this.name)\n}\nf = new Function(&#39;zhangsan&#39;, 20)\nf.sayName ()\n</code></pre><p>我们同样以图例的形式来说明Function的<strong>proto</strong>,prototype,constructor</p>\n<p><image src=\"/images/Function.png\"></image></p>\n<p>通过以上图例我们得出结论<code>Object.prototype === Function.prototype.__proto__</code></p>\n<h3 id=\"将Function，Object，Person链接起来\"><a href=\"#将Function，Object，Person链接起来\" class=\"headerlink\" title=\"将Function，Object，Person链接起来\"></a>将Function，Object，Person链接起来</h3><p>此时我们同样通过图例的形式将上面整合起来。来看看整个链路是什么样子</p>\n<p><image src=\"/images/prototype.png\"></image></p>\n<p> 通过以上图例我们可以观察到其实js原型链就是由相互关联的链条组成，查找属性或者方法的过程就是图中红色链条的过程，如果找到则终止否则直到返回null</p>\n<p><code>person1</code> &gt; <code>person1.__proto__</code> &gt; <code>Person.prototype</code> &gt; <code>Person.prototype.__proto__</code> &gt; <code>Object.prototype</code> &gt; <code>Object.prototype.__proto__</code> &gt; <code>null</code></p>\n<p>最后我们来看一下Object和Function的关系，上面已经提到<code>Object.prototype === Function.prototype.__proto__</code></p>\n<ul>\n<li><code>Function.__proto__</code> &gt; <code>Function.prototype</code> &gt; <code>Function.prototype.__proto__</code> &gt; <code>Object.prototype</code> –&gt; <code>Object.prototype.__proto__</code> –&gt; ‘null’;简写为<code>Function.__proto__.__proto__.__proto__</code> &gt; <code>null</code></li>\n<li><code>Object.__proto__</code> &gt; <code>Funtion.prototype</code> &gt; <code>Function.prototype.__proto__</code> &gt; <code>Object.prototype</code> &gt;<code>Object.prototype.__proto__</code> &gt; <code>null</code>;简写为<code>Object.__proto__.__proto__.__proto__</code> &gt; <code>null</code></li>\n</ul>\n<p>通过上面我们可以得出结论</p>\n<ul>\n<li>只有函数对象才有 prototype，但是每个对象（普通对象和函数对象）都拥有<strong>proto</strong>属性</li>\n<li>原型对象都有一个 constructor 属性指向它们的构造函数（也就是自己）</li>\n<li>原生对象既是对象，也是构造函数</li>\n<li>实例对象的隐式原型始终指向构造函数的显式原型（<code>person1.__proto__</code> &gt; <code>Person.prototype</code>）</li>\n<li>原型链的查找过程链接依赖 <strong>proto</strong> 指针逐级向上，并且原型链的尽头始终为null</li>\n</ul>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"普通对象和函数对象\"><a href=\"#普通对象和函数对象\" class=\"headerlink\" title=\"普通对象和函数对象\"></a>普通对象和函数对象</h3><pre><code>  // 普通对象\n  var obj1 = {}; \n  var obj2 = new Object();\n  var obj3 = new person();\n  // 函数对象\n  function person(){}; \n  var person1 = function(){};\n  var person2 = new Function(&#39;aaa&#39;,&#39;console.warn(aaaa)&#39;);\n\n  console.log(typeof Object); //function \n  console.log(typeof Function); //function \n\n  console.log(typeof person); //function \n  console.log(typeof person1); //function \n  console.log(typeof person2); //function  \n  console.log(person instanceof Function) // true \n\n  console.log(typeof obj1); //object \n  console.log(typeof obj2); //object \n  console.log(typeof obj3); //object\n  console.log(obj3 instanceof Object)  // true</code></pre><p>通过以上实例我们知道 new Function 构建的都是函数对象(关于普通函数与new Function的区别请参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" target=\"_blank\" rel=\"noopener\">mozilla开发者</a>), 其余都是普通对象,关于Object与Function的区别会在这章节最后总结</p>\n<h3 id=\"通过构造函数模式创建对象\"><a href=\"#通过构造函数模式创建对象\" class=\"headerlink\" title=\"通过构造函数模式创建对象\"></a>通过构造函数模式创建对象</h3><p>在js高程中我们知道创建对象有很多种模式如下</p>\n<ul>\n<li>工厂模式</li>\n<li>构造函数模式</li>\n<li>原型模式</li>\n<li>组合使用构造函数和原型模式</li>\n<li>动态原型模式</li>\n<li>寄生构造函数模式</li>\n<li>稳妥构造函数模式</li>\n</ul>\n<p>当然这几种模式在这里暂时不展开说明，后续继承的时候在分别用讨论，我们这里简单的回忆一下用构造函数创建对象</p>\n<pre><code>  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  Person.prototype.sayName = function () {\n    console.log(this.name)\n  }\n  var person1 = new Person(&#39;zhansan&#39;, 29);\n  var person2 = new Person(&#39;lisi&#39;, 29);</code></pre><h3 id=\"proto-prototype-constructor\"><a href=\"#proto-prototype-constructor\" class=\"headerlink\" title=\"proto,prototype,constructor\"></a><strong>proto</strong>,prototype,constructor</h3><ul>\n<li><code>__proto__</code>:在JavaScript权威指南中指出每个js对象一定对应一个原型对象，并从原型对象继承属性和方法。</li>\n<li><code>prototype</code>: 当创建函数对象时，js会自动为这个函数添加prototype属性（<strong>这里明确一下只有函数对象才会有此属性</strong>）</li>\n<li>每个原型都有一个 constructor 属性指向关联的构造函数。</li>\n</ul>\n<p>通过上述三点我们针对2中的代码解释为</p>\n<p>当创建<code>Person</code>函数时，js会自动为该函数创建<code>prototype</code>属性，这个属性指向函数的原型对象，函数的原型对象（<code>Person.prototype</code>）会自动获取一个<code>constructor</code>属性指向关联的Person。当我们通过new关键字调用时，js就会创建该构造函数的实例<code>person1</code>或<code>person2</code>，此时我们就可以通过<code>prototype</code>来存储要共享的属性和方法</p>\n<p>下面我们通过图例来说明我们上面的文字</p>\n<p><image src=\"/images/Person.png\"></image></p>\n<p>这里我们注意虽然person1和person2这两个个实例都不包含属性和方法，但是我们可以通过查找对象属性来实现调用person1.sayName()</p>\n<p>此时我们来确定两个实例对象返回的原型指针是否一样(<strong>Object.getPrototypeOf 此方法可以获取对象的原型</strong>)</p>\n<pre><code>Object.getPrototypeOf(person1) === Person.prototype (true)\nObject.getPrototypeOf(person1) === Person.prototype (true)</code></pre><p>通过如上输出结果得知他们内部都有一个指向Person.prototype的指针也就是</p>\n<pre><code>person1.__proto__ === Person.prototype\nperson2.__proto__ === Person.prototype</code></pre><p>经过上面解释这么多我们得出的结果就是如下 </p>\n<pre><code>person1.__proto__ === Person.prototype\nPerson.prototype.constructor == Person</code></pre><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><ul>\n<li>js几乎所有对象都是Object; 典型对象继承属性（包括方法）</li>\n<li>所有引用类型的原型链上必然存在Object的原型</li>\n<li>new Object 出来的实例是普通对象我们前面说过只有函数对象才有prototype</li>\n<li>Object 实际是function Object跟function Function 类似</li>\n<li>Object.prototype是Object构造函数的属性。它也是原型链的终结</li>\n</ul>\n<pre><code>function Object (name,age) {\n  this.name = name;\n  this.age = age;\n}\nObject.prototype.sayName = function () {\n  console.log(this.name)\n}\nobject = new Object(&#39;zhangsan&#39;,20)\nobject.sayName()</code></pre><p>我们通样以图例的形式来说明Object的<strong>proto</strong>,prototype,constructor</p>\n<p><image src=\"/images/Object.png\"></image></p>\n<p>通过以上图例我们得出结论<code>Object.prototype.__proto__ === null</code></p>\n<p>这里面扩展一下null和undefined区别</p>\n<ul>\n<li>null === undefined为false，null == undefined为true 说明只是值相等</li>\n<li>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</li>\n<li>null表示变量未指向任何对象，undefined表示变量被声明但是没有被赋值</li>\n</ul>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><ul>\n<li>在js中每个函数实际上都是一个Function对象。</li>\n<li>使用Function构造器生成的Function对象是在函数创建时解析的,而其他函数方式是跟其他代码一起解析，所以较为低效</li>\n<li>全局的Function对象没有自己的属性和方法，通过Function.prototype上继承部分属性和方法。</li>\n<li>我们说js中万物皆对象，Function也也是对象，只不过是函数对象所以<code>Function.prototype.__proto__</code>指针指向<code>Object.prototype</code></li>\n<li><code>Object.__proto__</code> 指针指向<code>Function.prototype</code></li>\n</ul>\n<p><strong>Function创建的函数一般在全局作用域中被创建，但并不会像其他函数一样产生闭包，所以只能自己内部和全局的变量</strong></p>\n<pre><code>function Function (name,age){\n  this.name  = name\n  this.age = age\n}\nFunction.prototype.sayName = function () {\n  console.log(this.name)\n}\nf = new Function(&#39;zhangsan&#39;, 20)\nf.sayName ()\n</code></pre><p>我们同样以图例的形式来说明Function的<strong>proto</strong>,prototype,constructor</p>\n<p><image src=\"/images/Function.png\"></image></p>\n<p>通过以上图例我们得出结论<code>Object.prototype === Function.prototype.__proto__</code></p>\n<h3 id=\"将Function，Object，Person链接起来\"><a href=\"#将Function，Object，Person链接起来\" class=\"headerlink\" title=\"将Function，Object，Person链接起来\"></a>将Function，Object，Person链接起来</h3><p>此时我们同样通过图例的形式将上面整合起来。来看看整个链路是什么样子</p>\n<p><image src=\"/images/prototype.png\"></image></p>\n<p> 通过以上图例我们可以观察到其实js原型链就是由相互关联的链条组成，查找属性或者方法的过程就是图中红色链条的过程，如果找到则终止否则直到返回null</p>\n<p><code>person1</code> &gt; <code>person1.__proto__</code> &gt; <code>Person.prototype</code> &gt; <code>Person.prototype.__proto__</code> &gt; <code>Object.prototype</code> &gt; <code>Object.prototype.__proto__</code> &gt; <code>null</code></p>\n<p>最后我们来看一下Object和Function的关系，上面已经提到<code>Object.prototype === Function.prototype.__proto__</code></p>\n<ul>\n<li><code>Function.__proto__</code> &gt; <code>Function.prototype</code> &gt; <code>Function.prototype.__proto__</code> &gt; <code>Object.prototype</code> –&gt; <code>Object.prototype.__proto__</code> –&gt; ‘null’;简写为<code>Function.__proto__.__proto__.__proto__</code> &gt; <code>null</code></li>\n<li><code>Object.__proto__</code> &gt; <code>Funtion.prototype</code> &gt; <code>Function.prototype.__proto__</code> &gt; <code>Object.prototype</code> &gt;<code>Object.prototype.__proto__</code> &gt; <code>null</code>;简写为<code>Object.__proto__.__proto__.__proto__</code> &gt; <code>null</code></li>\n</ul>\n<p>通过上面我们可以得出结论</p>\n<ul>\n<li>只有函数对象才有 prototype，但是每个对象（普通对象和函数对象）都拥有<strong>proto</strong>属性</li>\n<li>原型对象都有一个 constructor 属性指向它们的构造函数（也就是自己）</li>\n<li>原生对象既是对象，也是构造函数</li>\n<li>实例对象的隐式原型始终指向构造函数的显式原型（<code>person1.__proto__</code> &gt; <code>Person.prototype</code>）</li>\n<li>原型链的查找过程链接依赖 <strong>proto</strong> 指针逐级向上，并且原型链的尽头始终为null</li>\n</ul>\n"},{"title":"this","date":"2019-03-05T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 概念\njs的关键字，在执行上下文环境时被绑定\n\n### 绑定规则\n默认绑定、隐式绑定、apply,call、new绑定。优先级从低到高\n\n### 默认绑定\n\n```\nconsole.log(this); //window\nfunction fun() {\nconsole.log(this.a) // 非严格模式下1 ，严格模式下undefined\n}\nvar a = 1;\nfun(); \n```\n\n### 隐式调用\n作为对象方法调用，this 指代上下文对象\n\n```\nfunction fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj = { \n  a: 2,\n  fun: fun \n};\nobj.fun(); // 2\nvar c = obj.fun;\nconsole.log(c()); // 1\n```\n\n### apply,call\n改变对象的prototype关联对象来改变this,对于null，undefined绑定会失效\n\n```\nfunction fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj1 = { \n  a: 2,\n};\nvar obj2 = { \n  a: 3,\n};\nfun.call( obj1 ); // 2\nfun.call( obj2 ); // 3\nfun.call( null ); // 1\nfun.call( undefined ); // 1\n```\n\n### 作为构造函数调用\n\nthis 指代new 出的对象\n使用new来调用函数，会自动执行如下操作：\n- 创建一个全新的对象。\n- 这个新对象会被执行[[原型]]连接。\n- 这个新对象会绑定到函数调用的this。\n- 如果函数没有返回其他对象,那么new表达式中的函数调用会自动返回这个新对象。\n  ```\n  function fun(a) { \n    this.a = a;\n  }\n  var a = 1;\n  var obj = new fun(3);\n  console.log(obj.a); // 3\n  var obj1 = new fun(4);\n  console.log(obj1.a); // 4\n  ```\n\n### es6中箭头函数this指向\n  取决于外层（函数或全局）作用域。\n","source":"_posts/javascript/this.md","raw":"---\ntitle: this\ndate: 2019-3-5 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n### 概念\njs的关键字，在执行上下文环境时被绑定\n\n### 绑定规则\n默认绑定、隐式绑定、apply,call、new绑定。优先级从低到高\n\n### 默认绑定\n\n```\nconsole.log(this); //window\nfunction fun() {\nconsole.log(this.a) // 非严格模式下1 ，严格模式下undefined\n}\nvar a = 1;\nfun(); \n```\n\n### 隐式调用\n作为对象方法调用，this 指代上下文对象\n\n```\nfunction fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj = { \n  a: 2,\n  fun: fun \n};\nobj.fun(); // 2\nvar c = obj.fun;\nconsole.log(c()); // 1\n```\n\n### apply,call\n改变对象的prototype关联对象来改变this,对于null，undefined绑定会失效\n\n```\nfunction fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj1 = { \n  a: 2,\n};\nvar obj2 = { \n  a: 3,\n};\nfun.call( obj1 ); // 2\nfun.call( obj2 ); // 3\nfun.call( null ); // 1\nfun.call( undefined ); // 1\n```\n\n### 作为构造函数调用\n\nthis 指代new 出的对象\n使用new来调用函数，会自动执行如下操作：\n- 创建一个全新的对象。\n- 这个新对象会被执行[[原型]]连接。\n- 这个新对象会绑定到函数调用的this。\n- 如果函数没有返回其他对象,那么new表达式中的函数调用会自动返回这个新对象。\n  ```\n  function fun(a) { \n    this.a = a;\n  }\n  var a = 1;\n  var obj = new fun(3);\n  console.log(obj.a); // 3\n  var obj1 = new fun(4);\n  console.log(obj1.a); // 4\n  ```\n\n### es6中箭头函数this指向\n  取决于外层（函数或全局）作用域。\n","slug":"javascript/this","published":1,"updated":"2019-08-26T16:46:27.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7w001wkuu6c70ge0df","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>js的关键字，在执行上下文环境时被绑定</p>\n<h3 id=\"绑定规则\"><a href=\"#绑定规则\" class=\"headerlink\" title=\"绑定规则\"></a>绑定规则</h3><p>默认绑定、隐式绑定、apply,call、new绑定。优先级从低到高</p>\n<h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><pre><code>console.log(this); //window\nfunction fun() {\nconsole.log(this.a) // 非严格模式下1 ，严格模式下undefined\n}\nvar a = 1;\nfun(); </code></pre><h3 id=\"隐式调用\"><a href=\"#隐式调用\" class=\"headerlink\" title=\"隐式调用\"></a>隐式调用</h3><p>作为对象方法调用，this 指代上下文对象</p>\n<pre><code>function fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj = { \n  a: 2,\n  fun: fun \n};\nobj.fun(); // 2\nvar c = obj.fun;\nconsole.log(c()); // 1</code></pre><h3 id=\"apply-call\"><a href=\"#apply-call\" class=\"headerlink\" title=\"apply,call\"></a>apply,call</h3><p>改变对象的prototype关联对象来改变this,对于null，undefined绑定会失效</p>\n<pre><code>function fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj1 = { \n  a: 2,\n};\nvar obj2 = { \n  a: 3,\n};\nfun.call( obj1 ); // 2\nfun.call( obj2 ); // 3\nfun.call( null ); // 1\nfun.call( undefined ); // 1</code></pre><h3 id=\"作为构造函数调用\"><a href=\"#作为构造函数调用\" class=\"headerlink\" title=\"作为构造函数调用\"></a>作为构造函数调用</h3><p>this 指代new 出的对象<br>使用new来调用函数，会自动执行如下操作：</p>\n<ul>\n<li>创建一个全新的对象。</li>\n<li>这个新对象会被执行[[原型]]连接。</li>\n<li>这个新对象会绑定到函数调用的this。</li>\n<li>如果函数没有返回其他对象,那么new表达式中的函数调用会自动返回这个新对象。<pre><code>function fun(a) { \n  this.a = a;\n}\nvar a = 1;\nvar obj = new fun(3);\nconsole.log(obj.a); // 3\nvar obj1 = new fun(4);\nconsole.log(obj1.a); // 4</code></pre></li>\n</ul>\n<h3 id=\"es6中箭头函数this指向\"><a href=\"#es6中箭头函数this指向\" class=\"headerlink\" title=\"es6中箭头函数this指向\"></a>es6中箭头函数this指向</h3><p>  取决于外层（函数或全局）作用域。</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>js的关键字，在执行上下文环境时被绑定</p>\n<h3 id=\"绑定规则\"><a href=\"#绑定规则\" class=\"headerlink\" title=\"绑定规则\"></a>绑定规则</h3><p>默认绑定、隐式绑定、apply,call、new绑定。优先级从低到高</p>\n<h3 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h3><pre><code>console.log(this); //window\nfunction fun() {\nconsole.log(this.a) // 非严格模式下1 ，严格模式下undefined\n}\nvar a = 1;\nfun(); </code></pre><h3 id=\"隐式调用\"><a href=\"#隐式调用\" class=\"headerlink\" title=\"隐式调用\"></a>隐式调用</h3><p>作为对象方法调用，this 指代上下文对象</p>\n<pre><code>function fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj = { \n  a: 2,\n  fun: fun \n};\nobj.fun(); // 2\nvar c = obj.fun;\nconsole.log(c()); // 1</code></pre><h3 id=\"apply-call\"><a href=\"#apply-call\" class=\"headerlink\" title=\"apply,call\"></a>apply,call</h3><p>改变对象的prototype关联对象来改变this,对于null，undefined绑定会失效</p>\n<pre><code>function fun() { \n  console.log( this.a );\n}\nvar a = 1;\nvar obj1 = { \n  a: 2,\n};\nvar obj2 = { \n  a: 3,\n};\nfun.call( obj1 ); // 2\nfun.call( obj2 ); // 3\nfun.call( null ); // 1\nfun.call( undefined ); // 1</code></pre><h3 id=\"作为构造函数调用\"><a href=\"#作为构造函数调用\" class=\"headerlink\" title=\"作为构造函数调用\"></a>作为构造函数调用</h3><p>this 指代new 出的对象<br>使用new来调用函数，会自动执行如下操作：</p>\n<ul>\n<li>创建一个全新的对象。</li>\n<li>这个新对象会被执行[[原型]]连接。</li>\n<li>这个新对象会绑定到函数调用的this。</li>\n<li>如果函数没有返回其他对象,那么new表达式中的函数调用会自动返回这个新对象。<pre><code>function fun(a) { \n  this.a = a;\n}\nvar a = 1;\nvar obj = new fun(3);\nconsole.log(obj.a); // 3\nvar obj1 = new fun(4);\nconsole.log(obj1.a); // 4</code></pre></li>\n</ul>\n<h3 id=\"es6中箭头函数this指向\"><a href=\"#es6中箭头函数this指向\" class=\"headerlink\" title=\"es6中箭头函数this指向\"></a>es6中箭头函数this指向</h3><p>  取决于外层（函数或全局）作用域。</p>\n"},{"title":"数据类型","date":"2019-02-12T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n## 基本数据类型\n\n  ### 概念\n  基本数据类型是按值进行进行访问，变量是放在栈（stack）内存里\n\n  ### 种类\n  Undefined、Null、Boolean、String、Number、Symbol（es6）\n\n  基本数据类型的值是不可变的\n\n    ```\n    var str = \"renbo\";\n    str.toUpperCase(); // RENBO\n    console.log(str); // renbo\n    ```\n\n  按值进行比较\n\n    ```\n    var a = 1;\n    var b = true;\n    console.log(a == b); // true\n    console.log(a === b); // false\n    ```\n  虽然数据类型不相同（true为bool,1为Number)但在比较之前js自动进行了数据类型的隐式转换\n\n  == 是进行值比较所以为true\n\n  === 不仅比较值还要比较数据类型所以为false\n\n  栈内存中保存了变量的标识符和变量的值\n\n    ```\n    var a,b;\n    a = 1;\n    b = a;\n    console.log(a); // 1\n    console.log(b); // 1\n    a = 2;\n    console.log(a); // 2\n    console.log(b); // 1\n    ```\n    <image src='/images/javascript-stack.png'></image>\n\n## 引用数据类型\n\n  ### 概念\n  引用类型的值是保存在堆内存（Heap）中的对象（Object）\n\n  ### 种类\n  统称为Object，细分有：Object，Array，Function，Data，RegExp等\n\n  引用类型的值式可变化的\n\n    ```\n    var obj = {name:'renbo'};\n    obj.name = 'zhangsan';\n    obj.age = 28;\n    obj.say = function () {\n      return 'My name is' + this.name + 'I‘m' + this.age+ 'years old';\n    }\n    obj.say(); //My name is zhangsan I‘m 28 years old\n    ```\n\n  按引用地址比较\n\n    ```\n    var obj = {};\n    var obj1 = {};\n    console.log(obj == obj1); // false\n    console.log(obj === obj1) // false\n    ```\n  栈内存中保存了变量标识符和指向堆内存中该对象的指针\n\n  堆内存中保存了对象的内容\n\n  ```\n  var a = {name: 'renbo'};\n  var b = a;\n  a.name = 'zhangsan';\n  console.log(b.name); // zhangsan\n  b.age = 28;\n  console.log(b.age) // 28\n  b.say = function () {\n    return 'My name is' + this.name + 'I‘m' + this.age+ 'years old';\n  }\n  console.log(a.say()); //My name is zhangsan I‘m 28 years old\n  var c = {\n    name:'zhangsan',\n    age:28\n  }\n  ```\n  \n  <image src='/images/javascript-stack1.png'></image>\n\n## 类型检测\n  ### typeof\n  \n  经常检查变量是不是基本数据类型\n\n    ```\n    var a;\n\n    a = \"hello\";\n    typeof a; // string\n\n    a = true;\n    typeof a; // boolean\n\n    a = 1;\n    typeof a; // number \n\n    a = null;\n    typeof a; // object\n\n    typeof a; // undefined\n    \n    a = Symbol();\n    typeof a; // symbol\n\n    a = function(){}\n    typeof a; // function\n\n    a = [];\n    typeof a; // object\n\n    a = {};\n    typeof a; // object\n\n    a = /renbo/g;\n    typeof a; // object   \n    ```\n  ### instanceof\n  \n  经常用来判断引用类型的变量具体是某种类型\n\n    ```\n    var a;\n    a = function(){}\n    a instanceof Function; // true\n\n    a = [];\n    a instanceof Array; // true\n\n    a = {};\n    a instanceof Object; // true\n\n    a = /renbo/g;\n    a instanceof RegExp ; // true    \n    ```\n\n","source":"_posts/javascript/type.md","raw":"---\ntitle: 数据类型\ndate: 2019-2-12 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n## 基本数据类型\n\n  ### 概念\n  基本数据类型是按值进行进行访问，变量是放在栈（stack）内存里\n\n  ### 种类\n  Undefined、Null、Boolean、String、Number、Symbol（es6）\n\n  基本数据类型的值是不可变的\n\n    ```\n    var str = \"renbo\";\n    str.toUpperCase(); // RENBO\n    console.log(str); // renbo\n    ```\n\n  按值进行比较\n\n    ```\n    var a = 1;\n    var b = true;\n    console.log(a == b); // true\n    console.log(a === b); // false\n    ```\n  虽然数据类型不相同（true为bool,1为Number)但在比较之前js自动进行了数据类型的隐式转换\n\n  == 是进行值比较所以为true\n\n  === 不仅比较值还要比较数据类型所以为false\n\n  栈内存中保存了变量的标识符和变量的值\n\n    ```\n    var a,b;\n    a = 1;\n    b = a;\n    console.log(a); // 1\n    console.log(b); // 1\n    a = 2;\n    console.log(a); // 2\n    console.log(b); // 1\n    ```\n    <image src='/images/javascript-stack.png'></image>\n\n## 引用数据类型\n\n  ### 概念\n  引用类型的值是保存在堆内存（Heap）中的对象（Object）\n\n  ### 种类\n  统称为Object，细分有：Object，Array，Function，Data，RegExp等\n\n  引用类型的值式可变化的\n\n    ```\n    var obj = {name:'renbo'};\n    obj.name = 'zhangsan';\n    obj.age = 28;\n    obj.say = function () {\n      return 'My name is' + this.name + 'I‘m' + this.age+ 'years old';\n    }\n    obj.say(); //My name is zhangsan I‘m 28 years old\n    ```\n\n  按引用地址比较\n\n    ```\n    var obj = {};\n    var obj1 = {};\n    console.log(obj == obj1); // false\n    console.log(obj === obj1) // false\n    ```\n  栈内存中保存了变量标识符和指向堆内存中该对象的指针\n\n  堆内存中保存了对象的内容\n\n  ```\n  var a = {name: 'renbo'};\n  var b = a;\n  a.name = 'zhangsan';\n  console.log(b.name); // zhangsan\n  b.age = 28;\n  console.log(b.age) // 28\n  b.say = function () {\n    return 'My name is' + this.name + 'I‘m' + this.age+ 'years old';\n  }\n  console.log(a.say()); //My name is zhangsan I‘m 28 years old\n  var c = {\n    name:'zhangsan',\n    age:28\n  }\n  ```\n  \n  <image src='/images/javascript-stack1.png'></image>\n\n## 类型检测\n  ### typeof\n  \n  经常检查变量是不是基本数据类型\n\n    ```\n    var a;\n\n    a = \"hello\";\n    typeof a; // string\n\n    a = true;\n    typeof a; // boolean\n\n    a = 1;\n    typeof a; // number \n\n    a = null;\n    typeof a; // object\n\n    typeof a; // undefined\n    \n    a = Symbol();\n    typeof a; // symbol\n\n    a = function(){}\n    typeof a; // function\n\n    a = [];\n    typeof a; // object\n\n    a = {};\n    typeof a; // object\n\n    a = /renbo/g;\n    typeof a; // object   \n    ```\n  ### instanceof\n  \n  经常用来判断引用类型的变量具体是某种类型\n\n    ```\n    var a;\n    a = function(){}\n    a instanceof Function; // true\n\n    a = [];\n    a instanceof Array; // true\n\n    a = {};\n    a instanceof Object; // true\n\n    a = /renbo/g;\n    a instanceof RegExp ; // true    \n    ```\n\n","slug":"javascript/type","published":1,"updated":"2019-08-26T16:46:27.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n7y001zkuu6kia655m1","content":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>  基本数据类型是按值进行进行访问，变量是放在栈（stack）内存里</p>\n<h3 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h3><p>  Undefined、Null、Boolean、String、Number、Symbol（es6）</p>\n<p>  基本数据类型的值是不可变的</p>\n<pre><code>```\nvar str = &quot;renbo&quot;;\nstr.toUpperCase(); // RENBO\nconsole.log(str); // renbo\n```</code></pre><p>  按值进行比较</p>\n<pre><code>```\nvar a = 1;\nvar b = true;\nconsole.log(a == b); // true\nconsole.log(a === b); // false\n```</code></pre><p>  虽然数据类型不相同（true为bool,1为Number)但在比较之前js自动进行了数据类型的隐式转换</p>\n<p>  == 是进行值比较所以为true</p>\n<p>  === 不仅比较值还要比较数据类型所以为false</p>\n<p>  栈内存中保存了变量的标识符和变量的值</p>\n<pre><code>```\nvar a,b;\na = 1;\nb = a;\nconsole.log(a); // 1\nconsole.log(b); // 1\na = 2;\nconsole.log(a); // 2\nconsole.log(b); // 1\n```\n&lt;image src=&#39;/images/javascript-stack.png&#39;&gt;&lt;/image&gt;</code></pre><h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>  引用类型的值是保存在堆内存（Heap）中的对象（Object）</p>\n<h3 id=\"种类-1\"><a href=\"#种类-1\" class=\"headerlink\" title=\"种类\"></a>种类</h3><p>  统称为Object，细分有：Object，Array，Function，Data，RegExp等</p>\n<p>  引用类型的值式可变化的</p>\n<pre><code>```\nvar obj = {name:&#39;renbo&#39;};\nobj.name = &#39;zhangsan&#39;;\nobj.age = 28;\nobj.say = function () {\n  return &#39;My name is&#39; + this.name + &#39;I‘m&#39; + this.age+ &#39;years old&#39;;\n}\nobj.say(); //My name is zhangsan I‘m 28 years old\n```</code></pre><p>  按引用地址比较</p>\n<pre><code>```\nvar obj = {};\nvar obj1 = {};\nconsole.log(obj == obj1); // false\nconsole.log(obj === obj1) // false\n```</code></pre><p>  栈内存中保存了变量标识符和指向堆内存中该对象的指针</p>\n<p>  堆内存中保存了对象的内容</p>\n<pre><code>  var a = {name: &#39;renbo&#39;};\n  var b = a;\n  a.name = &#39;zhangsan&#39;;\n  console.log(b.name); // zhangsan\n  b.age = 28;\n  console.log(b.age) // 28\n  b.say = function () {\n    return &#39;My name is&#39; + this.name + &#39;I‘m&#39; + this.age+ &#39;years old&#39;;\n  }\n  console.log(a.say()); //My name is zhangsan I‘m 28 years old\n  var c = {\n    name:&#39;zhangsan&#39;,\n    age:28\n  }</code></pre><p>  <image src=\"/images/javascript-stack1.png\"></image></p>\n<h2 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>  经常检查变量是不是基本数据类型</p>\n<pre><code>```\nvar a;\n\na = &quot;hello&quot;;\ntypeof a; // string\n\na = true;\ntypeof a; // boolean\n\na = 1;\ntypeof a; // number \n\na = null;\ntypeof a; // object\n\ntypeof a; // undefined\n\na = Symbol();\ntypeof a; // symbol\n\na = function(){}\ntypeof a; // function\n\na = [];\ntypeof a; // object\n\na = {};\ntypeof a; // object\n\na = /renbo/g;\ntypeof a; // object   \n```</code></pre><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>  经常用来判断引用类型的变量具体是某种类型</p>\n<pre><code>```\nvar a;\na = function(){}\na instanceof Function; // true\n\na = [];\na instanceof Array; // true\n\na = {};\na instanceof Object; // true\n\na = /renbo/g;\na instanceof RegExp ; // true    \n```</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>  基本数据类型是按值进行进行访问，变量是放在栈（stack）内存里</p>\n<h3 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h3><p>  Undefined、Null、Boolean、String、Number、Symbol（es6）</p>\n<p>  基本数据类型的值是不可变的</p>\n<pre><code>```\nvar str = &quot;renbo&quot;;\nstr.toUpperCase(); // RENBO\nconsole.log(str); // renbo\n```</code></pre><p>  按值进行比较</p>\n<pre><code>```\nvar a = 1;\nvar b = true;\nconsole.log(a == b); // true\nconsole.log(a === b); // false\n```</code></pre><p>  虽然数据类型不相同（true为bool,1为Number)但在比较之前js自动进行了数据类型的隐式转换</p>\n<p>  == 是进行值比较所以为true</p>\n<p>  === 不仅比较值还要比较数据类型所以为false</p>\n<p>  栈内存中保存了变量的标识符和变量的值</p>\n<pre><code>```\nvar a,b;\na = 1;\nb = a;\nconsole.log(a); // 1\nconsole.log(b); // 1\na = 2;\nconsole.log(a); // 2\nconsole.log(b); // 1\n```\n&lt;image src=&#39;/images/javascript-stack.png&#39;&gt;&lt;/image&gt;</code></pre><h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>  引用类型的值是保存在堆内存（Heap）中的对象（Object）</p>\n<h3 id=\"种类-1\"><a href=\"#种类-1\" class=\"headerlink\" title=\"种类\"></a>种类</h3><p>  统称为Object，细分有：Object，Array，Function，Data，RegExp等</p>\n<p>  引用类型的值式可变化的</p>\n<pre><code>```\nvar obj = {name:&#39;renbo&#39;};\nobj.name = &#39;zhangsan&#39;;\nobj.age = 28;\nobj.say = function () {\n  return &#39;My name is&#39; + this.name + &#39;I‘m&#39; + this.age+ &#39;years old&#39;;\n}\nobj.say(); //My name is zhangsan I‘m 28 years old\n```</code></pre><p>  按引用地址比较</p>\n<pre><code>```\nvar obj = {};\nvar obj1 = {};\nconsole.log(obj == obj1); // false\nconsole.log(obj === obj1) // false\n```</code></pre><p>  栈内存中保存了变量标识符和指向堆内存中该对象的指针</p>\n<p>  堆内存中保存了对象的内容</p>\n<pre><code>  var a = {name: &#39;renbo&#39;};\n  var b = a;\n  a.name = &#39;zhangsan&#39;;\n  console.log(b.name); // zhangsan\n  b.age = 28;\n  console.log(b.age) // 28\n  b.say = function () {\n    return &#39;My name is&#39; + this.name + &#39;I‘m&#39; + this.age+ &#39;years old&#39;;\n  }\n  console.log(a.say()); //My name is zhangsan I‘m 28 years old\n  var c = {\n    name:&#39;zhangsan&#39;,\n    age:28\n  }</code></pre><p>  <image src=\"/images/javascript-stack1.png\"></image></p>\n<h2 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>  经常检查变量是不是基本数据类型</p>\n<pre><code>```\nvar a;\n\na = &quot;hello&quot;;\ntypeof a; // string\n\na = true;\ntypeof a; // boolean\n\na = 1;\ntypeof a; // number \n\na = null;\ntypeof a; // object\n\ntypeof a; // undefined\n\na = Symbol();\ntypeof a; // symbol\n\na = function(){}\ntypeof a; // function\n\na = [];\ntypeof a; // object\n\na = {};\ntypeof a; // object\n\na = /renbo/g;\ntypeof a; // object   \n```</code></pre><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>  经常用来判断引用类型的变量具体是某种类型</p>\n<pre><code>```\nvar a;\na = function(){}\na instanceof Function; // true\n\na = [];\na instanceof Array; // true\n\na = {};\na instanceof Object; // true\n\na = /renbo/g;\na instanceof RegExp ; // true    \n```</code></pre>"},{"title":"Vo Ao","date":"2019-02-20T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n## 变量提升\n\n### 执行步骤\njs代码虽然是逐行向下执行的，但执行的时候分为两个步骤**\n- 编译阶段（词法解释/预解释）\n- 执行\n\n### 编译阶段\n函数声明和变量声明总是会被解释器(编译阶段)悄悄地被“提升”到最顶部，最后执行\n\n### 解析顺序\n- this和arguments（语言内置）\n- 函数的形式参数\n- 函数声明\n- 变量声明\n\n### 优先级\n函数的声明比变量的声明的优先级要高\n\n### es6中let关键字及块及作用域\n\n  demo1\n\n     ```\n     a = 'renbo';\n     var a;\n     console.log( a ); // renbo\n\n     // 编译后的代码\n     var a;\n     a = 'renbo';\n     console.log(a); \n     ```\n  demo2\n\n      ```\n      function demo() {\n        a = 'renbo';\n        console.log(a);\n        console.log(window.a);\n        var a = 'zhangsan';\n        console.log(a);\n      }\n      demo(); \n\n      // 编译后的代码\n      function demo() {\n        var a;\n        a = 'renbo';\n        console.log(a);\n        console.log(window.a);\n        a = 'zhangsan';\n        console.log(a);\n      }\n      demo(); // renbo undefined zhangsan\n      ``` \n ## 函数提升\n  \n   ```\n   // 两种函数的书写方式\n   var fn = function fn(){} //函数表达式\n   function fn(){} //函数声明方式 \n   ```\n\n   只有声明方式的函数才会有函数提升\n   \n   ```\n    test();\n    function test(){\n      console.log( a );\n      var a = 'renbo';\n    }\n\n    // 编译后\n    function test () {\n      var a; // 在函数作用域内，被提升最前面\n      console.log(a); // undefined\n      a = renbo; \n    }\n    test();\n   ```\n","source":"_posts/javascript/voao.md","raw":"---\ntitle: Vo Ao\ndate: 2019-2-20 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- JavaScript\ncategories:\n- JavaScript\n---\n\n## 变量提升\n\n### 执行步骤\njs代码虽然是逐行向下执行的，但执行的时候分为两个步骤**\n- 编译阶段（词法解释/预解释）\n- 执行\n\n### 编译阶段\n函数声明和变量声明总是会被解释器(编译阶段)悄悄地被“提升”到最顶部，最后执行\n\n### 解析顺序\n- this和arguments（语言内置）\n- 函数的形式参数\n- 函数声明\n- 变量声明\n\n### 优先级\n函数的声明比变量的声明的优先级要高\n\n### es6中let关键字及块及作用域\n\n  demo1\n\n     ```\n     a = 'renbo';\n     var a;\n     console.log( a ); // renbo\n\n     // 编译后的代码\n     var a;\n     a = 'renbo';\n     console.log(a); \n     ```\n  demo2\n\n      ```\n      function demo() {\n        a = 'renbo';\n        console.log(a);\n        console.log(window.a);\n        var a = 'zhangsan';\n        console.log(a);\n      }\n      demo(); \n\n      // 编译后的代码\n      function demo() {\n        var a;\n        a = 'renbo';\n        console.log(a);\n        console.log(window.a);\n        a = 'zhangsan';\n        console.log(a);\n      }\n      demo(); // renbo undefined zhangsan\n      ``` \n ## 函数提升\n  \n   ```\n   // 两种函数的书写方式\n   var fn = function fn(){} //函数表达式\n   function fn(){} //函数声明方式 \n   ```\n\n   只有声明方式的函数才会有函数提升\n   \n   ```\n    test();\n    function test(){\n      console.log( a );\n      var a = 'renbo';\n    }\n\n    // 编译后\n    function test () {\n      var a; // 在函数作用域内，被提升最前面\n      console.log(a); // undefined\n      a = renbo; \n    }\n    test();\n   ```\n","slug":"javascript/voao","published":1,"updated":"2019-08-26T16:46:27.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n800024kuu6k8efhcaw","content":"<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><h3 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h3><p>js代码虽然是逐行向下执行的，但执行的时候分为两个步骤**</p>\n<ul>\n<li>编译阶段（词法解释/预解释）</li>\n<li>执行</li>\n</ul>\n<h3 id=\"编译阶段\"><a href=\"#编译阶段\" class=\"headerlink\" title=\"编译阶段\"></a>编译阶段</h3><p>函数声明和变量声明总是会被解释器(编译阶段)悄悄地被“提升”到最顶部，最后执行</p>\n<h3 id=\"解析顺序\"><a href=\"#解析顺序\" class=\"headerlink\" title=\"解析顺序\"></a>解析顺序</h3><ul>\n<li>this和arguments（语言内置）</li>\n<li>函数的形式参数</li>\n<li>函数声明</li>\n<li>变量声明</li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>函数的声明比变量的声明的优先级要高</p>\n<h3 id=\"es6中let关键字及块及作用域\"><a href=\"#es6中let关键字及块及作用域\" class=\"headerlink\" title=\"es6中let关键字及块及作用域\"></a>es6中let关键字及块及作用域</h3><p>  demo1</p>\n<pre><code> ```\n a = &#39;renbo&#39;;\n var a;\n console.log( a ); // renbo\n\n // 编译后的代码\n var a;\n a = &#39;renbo&#39;;\n console.log(a); \n ```</code></pre><p>  demo2</p>\n<pre><code>  ```\n  function demo() {\n    a = &#39;renbo&#39;;\n    console.log(a);\n    console.log(window.a);\n    var a = &#39;zhangsan&#39;;\n    console.log(a);\n  }\n  demo(); \n\n  // 编译后的代码\n  function demo() {\n    var a;\n    a = &#39;renbo&#39;;\n    console.log(a);\n    console.log(window.a);\n    a = &#39;zhangsan&#39;;\n    console.log(a);\n  }\n  demo(); // renbo undefined zhangsan\n  ``` </code></pre><h2 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h2><pre><code>   // 两种函数的书写方式\n   var fn = function fn(){} //函数表达式\n   function fn(){} //函数声明方式 </code></pre><p>   只有声明方式的函数才会有函数提升</p>\n<pre><code>    test();\n    function test(){\n      console.log( a );\n      var a = &#39;renbo&#39;;\n    }\n\n    // 编译后\n    function test () {\n      var a; // 在函数作用域内，被提升最前面\n      console.log(a); // undefined\n      a = renbo; \n    }\n    test();</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><h3 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h3><p>js代码虽然是逐行向下执行的，但执行的时候分为两个步骤**</p>\n<ul>\n<li>编译阶段（词法解释/预解释）</li>\n<li>执行</li>\n</ul>\n<h3 id=\"编译阶段\"><a href=\"#编译阶段\" class=\"headerlink\" title=\"编译阶段\"></a>编译阶段</h3><p>函数声明和变量声明总是会被解释器(编译阶段)悄悄地被“提升”到最顶部，最后执行</p>\n<h3 id=\"解析顺序\"><a href=\"#解析顺序\" class=\"headerlink\" title=\"解析顺序\"></a>解析顺序</h3><ul>\n<li>this和arguments（语言内置）</li>\n<li>函数的形式参数</li>\n<li>函数声明</li>\n<li>变量声明</li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>函数的声明比变量的声明的优先级要高</p>\n<h3 id=\"es6中let关键字及块及作用域\"><a href=\"#es6中let关键字及块及作用域\" class=\"headerlink\" title=\"es6中let关键字及块及作用域\"></a>es6中let关键字及块及作用域</h3><p>  demo1</p>\n<pre><code> ```\n a = &#39;renbo&#39;;\n var a;\n console.log( a ); // renbo\n\n // 编译后的代码\n var a;\n a = &#39;renbo&#39;;\n console.log(a); \n ```</code></pre><p>  demo2</p>\n<pre><code>  ```\n  function demo() {\n    a = &#39;renbo&#39;;\n    console.log(a);\n    console.log(window.a);\n    var a = &#39;zhangsan&#39;;\n    console.log(a);\n  }\n  demo(); \n\n  // 编译后的代码\n  function demo() {\n    var a;\n    a = &#39;renbo&#39;;\n    console.log(a);\n    console.log(window.a);\n    a = &#39;zhangsan&#39;;\n    console.log(a);\n  }\n  demo(); // renbo undefined zhangsan\n  ``` </code></pre><h2 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h2><pre><code>   // 两种函数的书写方式\n   var fn = function fn(){} //函数表达式\n   function fn(){} //函数声明方式 </code></pre><p>   只有声明方式的函数才会有函数提升</p>\n<pre><code>    test();\n    function test(){\n      console.log( a );\n      var a = &#39;renbo&#39;;\n    }\n\n    // 编译后\n    function test () {\n      var a; // 在函数作用域内，被提升最前面\n      console.log(a); // undefined\n      a = renbo; \n    }\n    test();</code></pre>"},{"title":"Linux打包压缩相关指令","date":"2018-07-10T12:48:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### bzip2(选项)(参数)\n\n命令用于创建和管理（包括解压缩）\n\n  ```\n  -c或——stdout：将压缩与解压缩的结果送到标准输出；\n  -d或——decompress：执行解压缩；\n  -f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；\n  -h或——help：在线帮助；\n  -k或——keep：bzip2在压缩或解压缩后，会删除原始文件。若要保留原始文件，请使用此参数；\n  -s或——small：降低程序执行时内存的使用量；\n  -t或——test：测试.bz2压缩文件的完整性；\n  -v或——verbose：压缩或解压缩文件时，显示详细的信息；\n  -z或——compress：强制执行压缩；\n  -V或——version：显示版本信息；\n  --repetitive-best：若文件中有重复出现的资料时，可利用此参数提高压缩效果；\n  --repetitive-fast：若文件中有重复出现的资料时，可利用此参数加快执行效果。\n  ```\n\n### gunzip(选项)(参数)\n\n命令用来解压缩文件\n\n  ```\n  -a或——ascii：使用ASCII文字模式；\n  -c或--stdout或--to-stdout：把解压后的文件输出到标准输出设备；\n  -f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理；\n  -N或——name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或<压缩字尾字符串>或----suffix<压缩字尾字符串>：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；\n  ```\n\n### gzip(选项)(参数)\n\n命令用来压缩文件\n\n  ```\n  -a或——ascii：使用ASCII文字模式；\n  -d或--decompress或----uncompress：解开压缩文件；\n  -f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；\n  -N或——name：压缩文件时，保存原来的文件名称及时间戳记；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或<压缩字尾字符串>或----suffix<压缩字尾字符串>：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；\n  -<压缩效率>：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；\n  --best：此参数的效果和指定“-9”参数相同；\n  --fast：此参数的效果和指定“-1”参数相同。\n  ```\n\n### tar(选项)(参数)\n\n命令用来解压压缩文件\n\n  ```\n  -A或--catenate：新增文件到以存在的备份文件；\n  -B：设置区块大小；\n  -c或--create：建立新的备份文件；\n  -C <目录>：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。\n  -d：记录文件的差别；\n  -x或--extract或--get：从备份文件中还原文件；\n  -t或--list：列出备份文件的内容；\n  -z或--gzip或--ungzip：通过gzip指令处理备份文件；\n  -Z或--compress或--uncompress：通过compress指令处理备份文件；\n  -f<备份文件>或--file=<备份文件>：指定备份文件；\n  -v或--verbose：显示指令执行过程；\n  -r：添加文件到已经压缩的文件；\n  -u：添加改变了和现有的文件到已经存在的压缩文件；\n  -j：支持bzip2解压文件；\n  -v：显示操作过程；\n  -l：文件系统边界设置；\n  -k：保留原有文件不覆盖；\n  -m：保留文件不被覆盖；\n  -w：确认压缩文件的正确性；\n  -p或--same-permissions：用原来的文件权限还原文件；\n  -P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；\n  -N <日期格式> 或 --newer=<日期时间>：只将较指定日期更新的文件保存到备份文件里；\n  --exclude=<范本样式>：排除符合范本样式的文件。\n  ```\n  实例<br/>\n  ```\n  tar -cvf log.tar log2012.log    仅打包，不压缩！ \n  tar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n  tar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n  ```\n\n### zip(选项)(参数)\n\n命令可以用来解压缩文件\n\n  ```\n  -A：调整可执行的自动解压缩文件；\n  -b<工作目录>：指定暂时存放文件的目录；\n  -c：替每个被压缩的文件加上注释；\n  -d：从压缩文件内删除指定的文件；\n  -D：压缩文件内不建立目录名称；\n  -f：此参数的效果和指定“-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中；\n  -F：尝试修复已损坏的压缩文件；\n  -g：将文件压缩后附加在已有的压缩文件之后，而非另行建立新的压缩文件；\n  -h：在线帮助；\n  -i<范本样式>：只压缩符合条件的文件；\n  -j：只保存文件名称及其内容，而不存放任何目录名称；\n  -J：删除压缩文件前面不必要的数据；\n  -k：使用MS-DOS兼容格式的文件名称；\n  -l：压缩文件时，把LF字符置换成LF+CR字符；\n  -ll：压缩文件时，把LF+cp字符置换成LF字符；\n  -L：显示版权信息；\n  -m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中；\n  -n<字尾字符串>：不压缩具有特定字尾字符串的文件；\n  -o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同；\n  -q：不显示指令执行过程；\n  -r：递归处理，将指定目录下的所有文件和子目录一并处理；\n  -S：包含系统和隐藏文件；\n  -t<日期时间>：把压缩文件的日期设成指定的日期；\n  -T：检查备份文件内的每个文件是否正确无误；\n  -u：更换较新的文件到压缩文件内；\n  -v：显示指令执行过程或显示版本信息；\n  -V：保存VMS操作系统的文件属性；\n  -w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效；\n  -x<范本样式>：压缩时排除符合条件的文件；\n  -X：不保存额外的文件属性；\n  -y：直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\n  -z：替压缩文件加上注释；\n  -$：保存第一个被压缩文件所在磁盘的卷册名称；\n  -<压缩效率>：压缩效率是一个介于1~9的数值。\n  ```\n  实例<br/>\n  ```\n  zip file1.zip file1 创建一个zip格式的压缩包 \n  zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 \n  unzip file1.zip 解压一个zip格式压缩包 \n  ```\n\n\n\n","source":"_posts/linux/compression.md","raw":"---\ntitle: Linux打包压缩相关指令\ndate: 2018-7-10 20:48:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n\n### bzip2(选项)(参数)\n\n命令用于创建和管理（包括解压缩）\n\n  ```\n  -c或——stdout：将压缩与解压缩的结果送到标准输出；\n  -d或——decompress：执行解压缩；\n  -f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；\n  -h或——help：在线帮助；\n  -k或——keep：bzip2在压缩或解压缩后，会删除原始文件。若要保留原始文件，请使用此参数；\n  -s或——small：降低程序执行时内存的使用量；\n  -t或——test：测试.bz2压缩文件的完整性；\n  -v或——verbose：压缩或解压缩文件时，显示详细的信息；\n  -z或——compress：强制执行压缩；\n  -V或——version：显示版本信息；\n  --repetitive-best：若文件中有重复出现的资料时，可利用此参数提高压缩效果；\n  --repetitive-fast：若文件中有重复出现的资料时，可利用此参数加快执行效果。\n  ```\n\n### gunzip(选项)(参数)\n\n命令用来解压缩文件\n\n  ```\n  -a或——ascii：使用ASCII文字模式；\n  -c或--stdout或--to-stdout：把解压后的文件输出到标准输出设备；\n  -f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理；\n  -N或——name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或<压缩字尾字符串>或----suffix<压缩字尾字符串>：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；\n  ```\n\n### gzip(选项)(参数)\n\n命令用来压缩文件\n\n  ```\n  -a或——ascii：使用ASCII文字模式；\n  -d或--decompress或----uncompress：解开压缩文件；\n  -f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；\n  -N或——name：压缩文件时，保存原来的文件名称及时间戳记；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或<压缩字尾字符串>或----suffix<压缩字尾字符串>：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；\n  -<压缩效率>：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；\n  --best：此参数的效果和指定“-9”参数相同；\n  --fast：此参数的效果和指定“-1”参数相同。\n  ```\n\n### tar(选项)(参数)\n\n命令用来解压压缩文件\n\n  ```\n  -A或--catenate：新增文件到以存在的备份文件；\n  -B：设置区块大小；\n  -c或--create：建立新的备份文件；\n  -C <目录>：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。\n  -d：记录文件的差别；\n  -x或--extract或--get：从备份文件中还原文件；\n  -t或--list：列出备份文件的内容；\n  -z或--gzip或--ungzip：通过gzip指令处理备份文件；\n  -Z或--compress或--uncompress：通过compress指令处理备份文件；\n  -f<备份文件>或--file=<备份文件>：指定备份文件；\n  -v或--verbose：显示指令执行过程；\n  -r：添加文件到已经压缩的文件；\n  -u：添加改变了和现有的文件到已经存在的压缩文件；\n  -j：支持bzip2解压文件；\n  -v：显示操作过程；\n  -l：文件系统边界设置；\n  -k：保留原有文件不覆盖；\n  -m：保留文件不被覆盖；\n  -w：确认压缩文件的正确性；\n  -p或--same-permissions：用原来的文件权限还原文件；\n  -P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；\n  -N <日期格式> 或 --newer=<日期时间>：只将较指定日期更新的文件保存到备份文件里；\n  --exclude=<范本样式>：排除符合范本样式的文件。\n  ```\n  实例<br/>\n  ```\n  tar -cvf log.tar log2012.log    仅打包，不压缩！ \n  tar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n  tar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n  ```\n\n### zip(选项)(参数)\n\n命令可以用来解压缩文件\n\n  ```\n  -A：调整可执行的自动解压缩文件；\n  -b<工作目录>：指定暂时存放文件的目录；\n  -c：替每个被压缩的文件加上注释；\n  -d：从压缩文件内删除指定的文件；\n  -D：压缩文件内不建立目录名称；\n  -f：此参数的效果和指定“-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中；\n  -F：尝试修复已损坏的压缩文件；\n  -g：将文件压缩后附加在已有的压缩文件之后，而非另行建立新的压缩文件；\n  -h：在线帮助；\n  -i<范本样式>：只压缩符合条件的文件；\n  -j：只保存文件名称及其内容，而不存放任何目录名称；\n  -J：删除压缩文件前面不必要的数据；\n  -k：使用MS-DOS兼容格式的文件名称；\n  -l：压缩文件时，把LF字符置换成LF+CR字符；\n  -ll：压缩文件时，把LF+cp字符置换成LF字符；\n  -L：显示版权信息；\n  -m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中；\n  -n<字尾字符串>：不压缩具有特定字尾字符串的文件；\n  -o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同；\n  -q：不显示指令执行过程；\n  -r：递归处理，将指定目录下的所有文件和子目录一并处理；\n  -S：包含系统和隐藏文件；\n  -t<日期时间>：把压缩文件的日期设成指定的日期；\n  -T：检查备份文件内的每个文件是否正确无误；\n  -u：更换较新的文件到压缩文件内；\n  -v：显示指令执行过程或显示版本信息；\n  -V：保存VMS操作系统的文件属性；\n  -w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效；\n  -x<范本样式>：压缩时排除符合条件的文件；\n  -X：不保存额外的文件属性；\n  -y：直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\n  -z：替压缩文件加上注释；\n  -$：保存第一个被压缩文件所在磁盘的卷册名称；\n  -<压缩效率>：压缩效率是一个介于1~9的数值。\n  ```\n  实例<br/>\n  ```\n  zip file1.zip file1 创建一个zip格式的压缩包 \n  zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 \n  unzip file1.zip 解压一个zip格式压缩包 \n  ```\n\n\n\n","slug":"linux/compression","published":1,"updated":"2019-08-26T16:46:27.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n840027kuu6yw9kooyt","content":"<h3 id=\"bzip2-选项-参数\"><a href=\"#bzip2-选项-参数\" class=\"headerlink\" title=\"bzip2(选项)(参数)\"></a>bzip2(选项)(参数)</h3><p>命令用于创建和管理（包括解压缩）</p>\n<pre><code>  -c或——stdout：将压缩与解压缩的结果送到标准输出；\n  -d或——decompress：执行解压缩；\n  -f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；\n  -h或——help：在线帮助；\n  -k或——keep：bzip2在压缩或解压缩后，会删除原始文件。若要保留原始文件，请使用此参数；\n  -s或——small：降低程序执行时内存的使用量；\n  -t或——test：测试.bz2压缩文件的完整性；\n  -v或——verbose：压缩或解压缩文件时，显示详细的信息；\n  -z或——compress：强制执行压缩；\n  -V或——version：显示版本信息；\n  --repetitive-best：若文件中有重复出现的资料时，可利用此参数提高压缩效果；\n  --repetitive-fast：若文件中有重复出现的资料时，可利用此参数加快执行效果。</code></pre><h3 id=\"gunzip-选项-参数\"><a href=\"#gunzip-选项-参数\" class=\"headerlink\" title=\"gunzip(选项)(参数)\"></a>gunzip(选项)(参数)</h3><p>命令用来解压缩文件</p>\n<pre><code>  -a或——ascii：使用ASCII文字模式；\n  -c或--stdout或--to-stdout：把解压后的文件输出到标准输出设备；\n  -f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理；\n  -N或——name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；</code></pre><h3 id=\"gzip-选项-参数\"><a href=\"#gzip-选项-参数\" class=\"headerlink\" title=\"gzip(选项)(参数)\"></a>gzip(选项)(参数)</h3><p>命令用来压缩文件</p>\n<pre><code>  -a或——ascii：使用ASCII文字模式；\n  -d或--decompress或----uncompress：解开压缩文件；\n  -f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；\n  -N或——name：压缩文件时，保存原来的文件名称及时间戳记；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；\n  -&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；\n  --best：此参数的效果和指定“-9”参数相同；\n  --fast：此参数的效果和指定“-1”参数相同。</code></pre><h3 id=\"tar-选项-参数\"><a href=\"#tar-选项-参数\" class=\"headerlink\" title=\"tar(选项)(参数)\"></a>tar(选项)(参数)</h3><p>命令用来解压压缩文件</p>\n<pre><code>  -A或--catenate：新增文件到以存在的备份文件；\n  -B：设置区块大小；\n  -c或--create：建立新的备份文件；\n  -C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。\n  -d：记录文件的差别；\n  -x或--extract或--get：从备份文件中还原文件；\n  -t或--list：列出备份文件的内容；\n  -z或--gzip或--ungzip：通过gzip指令处理备份文件；\n  -Z或--compress或--uncompress：通过compress指令处理备份文件；\n  -f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；\n  -v或--verbose：显示指令执行过程；\n  -r：添加文件到已经压缩的文件；\n  -u：添加改变了和现有的文件到已经存在的压缩文件；\n  -j：支持bzip2解压文件；\n  -v：显示操作过程；\n  -l：文件系统边界设置；\n  -k：保留原有文件不覆盖；\n  -m：保留文件不被覆盖；\n  -w：确认压缩文件的正确性；\n  -p或--same-permissions：用原来的文件权限还原文件；\n  -P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；\n  -N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；\n  --exclude=&lt;范本样式&gt;：排除符合范本样式的文件。</code></pre><p>  实例<br></p>\n<pre><code>  tar -cvf log.tar log2012.log    仅打包，不压缩！ \n  tar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n  tar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 </code></pre><h3 id=\"zip-选项-参数\"><a href=\"#zip-选项-参数\" class=\"headerlink\" title=\"zip(选项)(参数)\"></a>zip(选项)(参数)</h3><p>命令可以用来解压缩文件</p>\n<pre><code>  -A：调整可执行的自动解压缩文件；\n  -b&lt;工作目录&gt;：指定暂时存放文件的目录；\n  -c：替每个被压缩的文件加上注释；\n  -d：从压缩文件内删除指定的文件；\n  -D：压缩文件内不建立目录名称；\n  -f：此参数的效果和指定“-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中；\n  -F：尝试修复已损坏的压缩文件；\n  -g：将文件压缩后附加在已有的压缩文件之后，而非另行建立新的压缩文件；\n  -h：在线帮助；\n  -i&lt;范本样式&gt;：只压缩符合条件的文件；\n  -j：只保存文件名称及其内容，而不存放任何目录名称；\n  -J：删除压缩文件前面不必要的数据；\n  -k：使用MS-DOS兼容格式的文件名称；\n  -l：压缩文件时，把LF字符置换成LF+CR字符；\n  -ll：压缩文件时，把LF+cp字符置换成LF字符；\n  -L：显示版权信息；\n  -m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中；\n  -n&lt;字尾字符串&gt;：不压缩具有特定字尾字符串的文件；\n  -o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同；\n  -q：不显示指令执行过程；\n  -r：递归处理，将指定目录下的所有文件和子目录一并处理；\n  -S：包含系统和隐藏文件；\n  -t&lt;日期时间&gt;：把压缩文件的日期设成指定的日期；\n  -T：检查备份文件内的每个文件是否正确无误；\n  -u：更换较新的文件到压缩文件内；\n  -v：显示指令执行过程或显示版本信息；\n  -V：保存VMS操作系统的文件属性；\n  -w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效；\n  -x&lt;范本样式&gt;：压缩时排除符合条件的文件；\n  -X：不保存额外的文件属性；\n  -y：直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\n  -z：替压缩文件加上注释；\n  -$：保存第一个被压缩文件所在磁盘的卷册名称；\n  -&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值。</code></pre><p>  实例<br></p>\n<pre><code>  zip file1.zip file1 创建一个zip格式的压缩包 \n  zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 \n  unzip file1.zip 解压一个zip格式压缩包 </code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"bzip2-选项-参数\"><a href=\"#bzip2-选项-参数\" class=\"headerlink\" title=\"bzip2(选项)(参数)\"></a>bzip2(选项)(参数)</h3><p>命令用于创建和管理（包括解压缩）</p>\n<pre><code>  -c或——stdout：将压缩与解压缩的结果送到标准输出；\n  -d或——decompress：执行解压缩；\n  -f或-force：bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖。请使用此参数；\n  -h或——help：在线帮助；\n  -k或——keep：bzip2在压缩或解压缩后，会删除原始文件。若要保留原始文件，请使用此参数；\n  -s或——small：降低程序执行时内存的使用量；\n  -t或——test：测试.bz2压缩文件的完整性；\n  -v或——verbose：压缩或解压缩文件时，显示详细的信息；\n  -z或——compress：强制执行压缩；\n  -V或——version：显示版本信息；\n  --repetitive-best：若文件中有重复出现的资料时，可利用此参数提高压缩效果；\n  --repetitive-fast：若文件中有重复出现的资料时，可利用此参数加快执行效果。</code></pre><h3 id=\"gunzip-选项-参数\"><a href=\"#gunzip-选项-参数\" class=\"headerlink\" title=\"gunzip(选项)(参数)\"></a>gunzip(选项)(参数)</h3><p>命令用来解压缩文件</p>\n<pre><code>  -a或——ascii：使用ASCII文字模式；\n  -c或--stdout或--to-stdout：把解压后的文件输出到标准输出设备；\n  -f或-force：强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其忽略不予处理；\n  -N或——name：解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；</code></pre><h3 id=\"gzip-选项-参数\"><a href=\"#gzip-选项-参数\" class=\"headerlink\" title=\"gzip(选项)(参数)\"></a>gzip(选项)(参数)</h3><p>命令用来压缩文件</p>\n<pre><code>  -a或——ascii：使用ASCII文字模式；\n  -d或--decompress或----uncompress：解开压缩文件；\n  -f或——force：强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接；\n  -h或——help：在线帮助；\n  -l或——list：列出压缩文件的相关信息；\n  -L或——license：显示版本与版权信息；\n  -n或--no-name：压缩文件时，不保存原来的文件名称及时间戳记；\n  -N或——name：压缩文件时，保存原来的文件名称及时间戳记；\n  -q或——quiet：不显示警告信息；\n  -r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；\n  -S或&lt;压缩字尾字符串&gt;或----suffix&lt;压缩字尾字符串&gt;：更改压缩字尾字符串；\n  -t或——test：测试压缩文件是否正确无误；\n  -v或——verbose：显示指令执行过程；\n  -V或——version：显示版本信息；\n  -&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值，预设值为“6”，指定愈大的数值，压缩效率就会愈高；\n  --best：此参数的效果和指定“-9”参数相同；\n  --fast：此参数的效果和指定“-1”参数相同。</code></pre><h3 id=\"tar-选项-参数\"><a href=\"#tar-选项-参数\" class=\"headerlink\" title=\"tar(选项)(参数)\"></a>tar(选项)(参数)</h3><p>命令用来解压压缩文件</p>\n<pre><code>  -A或--catenate：新增文件到以存在的备份文件；\n  -B：设置区块大小；\n  -c或--create：建立新的备份文件；\n  -C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。\n  -d：记录文件的差别；\n  -x或--extract或--get：从备份文件中还原文件；\n  -t或--list：列出备份文件的内容；\n  -z或--gzip或--ungzip：通过gzip指令处理备份文件；\n  -Z或--compress或--uncompress：通过compress指令处理备份文件；\n  -f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；\n  -v或--verbose：显示指令执行过程；\n  -r：添加文件到已经压缩的文件；\n  -u：添加改变了和现有的文件到已经存在的压缩文件；\n  -j：支持bzip2解压文件；\n  -v：显示操作过程；\n  -l：文件系统边界设置；\n  -k：保留原有文件不覆盖；\n  -m：保留文件不被覆盖；\n  -w：确认压缩文件的正确性；\n  -p或--same-permissions：用原来的文件权限还原文件；\n  -P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；\n  -N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；\n  --exclude=&lt;范本样式&gt;：排除符合范本样式的文件。</code></pre><p>  实例<br></p>\n<pre><code>  tar -cvf log.tar log2012.log    仅打包，不压缩！ \n  tar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n  tar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 </code></pre><h3 id=\"zip-选项-参数\"><a href=\"#zip-选项-参数\" class=\"headerlink\" title=\"zip(选项)(参数)\"></a>zip(选项)(参数)</h3><p>命令可以用来解压缩文件</p>\n<pre><code>  -A：调整可执行的自动解压缩文件；\n  -b&lt;工作目录&gt;：指定暂时存放文件的目录；\n  -c：替每个被压缩的文件加上注释；\n  -d：从压缩文件内删除指定的文件；\n  -D：压缩文件内不建立目录名称；\n  -f：此参数的效果和指定“-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中；\n  -F：尝试修复已损坏的压缩文件；\n  -g：将文件压缩后附加在已有的压缩文件之后，而非另行建立新的压缩文件；\n  -h：在线帮助；\n  -i&lt;范本样式&gt;：只压缩符合条件的文件；\n  -j：只保存文件名称及其内容，而不存放任何目录名称；\n  -J：删除压缩文件前面不必要的数据；\n  -k：使用MS-DOS兼容格式的文件名称；\n  -l：压缩文件时，把LF字符置换成LF+CR字符；\n  -ll：压缩文件时，把LF+cp字符置换成LF字符；\n  -L：显示版权信息；\n  -m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中；\n  -n&lt;字尾字符串&gt;：不压缩具有特定字尾字符串的文件；\n  -o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同；\n  -q：不显示指令执行过程；\n  -r：递归处理，将指定目录下的所有文件和子目录一并处理；\n  -S：包含系统和隐藏文件；\n  -t&lt;日期时间&gt;：把压缩文件的日期设成指定的日期；\n  -T：检查备份文件内的每个文件是否正确无误；\n  -u：更换较新的文件到压缩文件内；\n  -v：显示指令执行过程或显示版本信息；\n  -V：保存VMS操作系统的文件属性；\n  -w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效；\n  -x&lt;范本样式&gt;：压缩时排除符合条件的文件；\n  -X：不保存额外的文件属性；\n  -y：直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\n  -z：替压缩文件加上注释；\n  -$：保存第一个被压缩文件所在磁盘的卷册名称；\n  -&lt;压缩效率&gt;：压缩效率是一个介于1~9的数值。</code></pre><p>  实例<br></p>\n<pre><code>  zip file1.zip file1 创建一个zip格式的压缩包 \n  zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 \n  unzip file1.zip 解压一个zip格式压缩包 </code></pre>"},{"title":"文件权限","date":"2018-07-25T14:05:25.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### 三种基本权限\n\n```\nR  读  数值表示为4\nW  写  数值表示为2\nX  可执行  数值表示为1\n```\n\n1.执行ls -al命令行会出现<br/>\n```\ndrwxr-xr-x  19 renbo  staff   608B Mar 27 11:31 -notes-summary\ndrwxr-xr-x  41 renbo  staff   1.3K Mar 12 17:05 ant-design-pro\ndrwxr-xr-x   7 renbo  staff   224B May 18  2018 canvas\ndrwxr-xr-x   8 renbo  staff   256B Sep 11  2017 doT-demo\ndrwxr-xr-x  19 renbo  staff   608B May 24  2018 egg-example\ndrwxr-xr-x   4 renbo  staff   128B Nov 21 13:52 express\ndrwxr-xr-x   3 renbo  staff    96B Aug 13  2018 flutter\n```\n2.解释：\n```\nd ：第一位表示文件类型，d是目录文件、l是链接文件、-是普通文件、p是管道\n\nrwx ：第2-4位表示这个文件的属主拥有的权限。r是读、w是写、x是执行\n\nr-x ：第5-7位表示和这个文件属主所在同一个组的用户所具有的权限\n\nr-x ：第8-10位表示其他用户所具有的权限\n\nr:read就是读权限     --数字4表示\n\nw:write就是写权限    --数字2表示\n\nx:excute就是执行权限 --数字1表示\n```\n\n### 更改权限\n\n```\nsudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 \n\n例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为\"-rwxrw-r-x\"，用数值表示为765\n\nsudo chmod u+x g+w o+r  filename\n\n上面的例子可以用数值表示\n\nsudo chmod 765 filename\n\n一般超级权限为sudo chmod 777 filename\n```\n\n","source":"_posts/linux/fileauth.md","raw":"---\ntitle: 文件权限\ndate: 2018-7-25 22:05:25\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n\n### 三种基本权限\n\n```\nR  读  数值表示为4\nW  写  数值表示为2\nX  可执行  数值表示为1\n```\n\n1.执行ls -al命令行会出现<br/>\n```\ndrwxr-xr-x  19 renbo  staff   608B Mar 27 11:31 -notes-summary\ndrwxr-xr-x  41 renbo  staff   1.3K Mar 12 17:05 ant-design-pro\ndrwxr-xr-x   7 renbo  staff   224B May 18  2018 canvas\ndrwxr-xr-x   8 renbo  staff   256B Sep 11  2017 doT-demo\ndrwxr-xr-x  19 renbo  staff   608B May 24  2018 egg-example\ndrwxr-xr-x   4 renbo  staff   128B Nov 21 13:52 express\ndrwxr-xr-x   3 renbo  staff    96B Aug 13  2018 flutter\n```\n2.解释：\n```\nd ：第一位表示文件类型，d是目录文件、l是链接文件、-是普通文件、p是管道\n\nrwx ：第2-4位表示这个文件的属主拥有的权限。r是读、w是写、x是执行\n\nr-x ：第5-7位表示和这个文件属主所在同一个组的用户所具有的权限\n\nr-x ：第8-10位表示其他用户所具有的权限\n\nr:read就是读权限     --数字4表示\n\nw:write就是写权限    --数字2表示\n\nx:excute就是执行权限 --数字1表示\n```\n\n### 更改权限\n\n```\nsudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 \n\n例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为\"-rwxrw-r-x\"，用数值表示为765\n\nsudo chmod u+x g+w o+r  filename\n\n上面的例子可以用数值表示\n\nsudo chmod 765 filename\n\n一般超级权限为sudo chmod 777 filename\n```\n\n","slug":"linux/fileauth","published":1,"updated":"2019-08-26T16:46:27.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n85002ckuu686ui742x","content":"<h3 id=\"三种基本权限\"><a href=\"#三种基本权限\" class=\"headerlink\" title=\"三种基本权限\"></a>三种基本权限</h3><pre><code>R  读  数值表示为4\nW  写  数值表示为2\nX  可执行  数值表示为1</code></pre><p>1.执行ls -al命令行会出现<br></p>\n<pre><code>drwxr-xr-x  19 renbo  staff   608B Mar 27 11:31 -notes-summary\ndrwxr-xr-x  41 renbo  staff   1.3K Mar 12 17:05 ant-design-pro\ndrwxr-xr-x   7 renbo  staff   224B May 18  2018 canvas\ndrwxr-xr-x   8 renbo  staff   256B Sep 11  2017 doT-demo\ndrwxr-xr-x  19 renbo  staff   608B May 24  2018 egg-example\ndrwxr-xr-x   4 renbo  staff   128B Nov 21 13:52 express\ndrwxr-xr-x   3 renbo  staff    96B Aug 13  2018 flutter</code></pre><p>2.解释：</p>\n<pre><code>d ：第一位表示文件类型，d是目录文件、l是链接文件、-是普通文件、p是管道\n\nrwx ：第2-4位表示这个文件的属主拥有的权限。r是读、w是写、x是执行\n\nr-x ：第5-7位表示和这个文件属主所在同一个组的用户所具有的权限\n\nr-x ：第8-10位表示其他用户所具有的权限\n\nr:read就是读权限     --数字4表示\n\nw:write就是写权限    --数字2表示\n\nx:excute就是执行权限 --数字1表示</code></pre><h3 id=\"更改权限\"><a href=\"#更改权限\" class=\"headerlink\" title=\"更改权限\"></a>更改权限</h3><pre><code>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 \n\n例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为&quot;-rwxrw-r-x&quot;，用数值表示为765\n\nsudo chmod u+x g+w o+r  filename\n\n上面的例子可以用数值表示\n\nsudo chmod 765 filename\n\n一般超级权限为sudo chmod 777 filename</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"三种基本权限\"><a href=\"#三种基本权限\" class=\"headerlink\" title=\"三种基本权限\"></a>三种基本权限</h3><pre><code>R  读  数值表示为4\nW  写  数值表示为2\nX  可执行  数值表示为1</code></pre><p>1.执行ls -al命令行会出现<br></p>\n<pre><code>drwxr-xr-x  19 renbo  staff   608B Mar 27 11:31 -notes-summary\ndrwxr-xr-x  41 renbo  staff   1.3K Mar 12 17:05 ant-design-pro\ndrwxr-xr-x   7 renbo  staff   224B May 18  2018 canvas\ndrwxr-xr-x   8 renbo  staff   256B Sep 11  2017 doT-demo\ndrwxr-xr-x  19 renbo  staff   608B May 24  2018 egg-example\ndrwxr-xr-x   4 renbo  staff   128B Nov 21 13:52 express\ndrwxr-xr-x   3 renbo  staff    96B Aug 13  2018 flutter</code></pre><p>2.解释：</p>\n<pre><code>d ：第一位表示文件类型，d是目录文件、l是链接文件、-是普通文件、p是管道\n\nrwx ：第2-4位表示这个文件的属主拥有的权限。r是读、w是写、x是执行\n\nr-x ：第5-7位表示和这个文件属主所在同一个组的用户所具有的权限\n\nr-x ：第8-10位表示其他用户所具有的权限\n\nr:read就是读权限     --数字4表示\n\nw:write就是写权限    --数字2表示\n\nx:excute就是执行权限 --数字1表示</code></pre><h3 id=\"更改权限\"><a href=\"#更改权限\" class=\"headerlink\" title=\"更改权限\"></a>更改权限</h3><pre><code>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 \n\n例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为&quot;-rwxrw-r-x&quot;，用数值表示为765\n\nsudo chmod u+x g+w o+r  filename\n\n上面的例子可以用数值表示\n\nsudo chmod 765 filename\n\n一般超级权限为sudo chmod 777 filename</code></pre>"},{"title":"Linux备份操作","date":"2018-07-15T15:05:38.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### tar\n\n```\ntar -cvf log.tar log2012.log    仅打包，不压缩！ \n\ntar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n\ntar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n\ntar -zxvf /opt/soft/test/log.tar.gz 解压缩\n```\n\n### dump\n\n```\ndump -0aj -f /tmp/home0.bak /home  制作一个 '/home' 目录的完整备份\n\ndump -1aj -f /tmp/home0.bak /home  制作一个 '/home' 目录的交互式备份\n```\n\n### restore\n\n```\nrestore -if /tmp/home0.bak  还原备份\n```\n\n### rsync\n\n```\nrsync -rogpav --delete /home /tmp  同步两边的目录 \n\nrsync -rogpav -e ssh --delete /home ip_address:/tmp  通过SSH通道rsync \n\nrsync -az -e ssh --delete ip_addr:/home/public /home/local  通过ssh和压缩将一个远程目录同步到本地目录 \n\nrsync -az -e ssh --delete /home/local ip_addr:/home/public  通过ssh和压缩将本地目录同步到远程目录 \n```\n\n\n\n","source":"_posts/linux/backup.md","raw":"---\ntitle: Linux备份操作\ndate: 2018-7-15 23:05:38\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n### tar\n\n```\ntar -cvf log.tar log2012.log    仅打包，不压缩！ \n\ntar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n\ntar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n\ntar -zxvf /opt/soft/test/log.tar.gz 解压缩\n```\n\n### dump\n\n```\ndump -0aj -f /tmp/home0.bak /home  制作一个 '/home' 目录的完整备份\n\ndump -1aj -f /tmp/home0.bak /home  制作一个 '/home' 目录的交互式备份\n```\n\n### restore\n\n```\nrestore -if /tmp/home0.bak  还原备份\n```\n\n### rsync\n\n```\nrsync -rogpav --delete /home /tmp  同步两边的目录 \n\nrsync -rogpav -e ssh --delete /home ip_address:/tmp  通过SSH通道rsync \n\nrsync -az -e ssh --delete ip_addr:/home/public /home/local  通过ssh和压缩将一个远程目录同步到本地目录 \n\nrsync -az -e ssh --delete /home/local ip_addr:/home/public  通过ssh和压缩将本地目录同步到远程目录 \n```\n\n\n\n","slug":"linux/backup","published":1,"updated":"2019-08-26T16:46:27.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n86002fkuu6l1cmzpbs","content":"<h3 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h3><pre><code>tar -cvf log.tar log2012.log    仅打包，不压缩！ \n\ntar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n\ntar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n\ntar -zxvf /opt/soft/test/log.tar.gz 解压缩</code></pre><h3 id=\"dump\"><a href=\"#dump\" class=\"headerlink\" title=\"dump\"></a>dump</h3><pre><code>dump -0aj -f /tmp/home0.bak /home  制作一个 &#39;/home&#39; 目录的完整备份\n\ndump -1aj -f /tmp/home0.bak /home  制作一个 &#39;/home&#39; 目录的交互式备份</code></pre><h3 id=\"restore\"><a href=\"#restore\" class=\"headerlink\" title=\"restore\"></a>restore</h3><pre><code>restore -if /tmp/home0.bak  还原备份</code></pre><h3 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h3><pre><code>rsync -rogpav --delete /home /tmp  同步两边的目录 \n\nrsync -rogpav -e ssh --delete /home ip_address:/tmp  通过SSH通道rsync \n\nrsync -az -e ssh --delete ip_addr:/home/public /home/local  通过ssh和压缩将一个远程目录同步到本地目录 \n\nrsync -az -e ssh --delete /home/local ip_addr:/home/public  通过ssh和压缩将本地目录同步到远程目录 </code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h3><pre><code>tar -cvf log.tar log2012.log    仅打包，不压缩！ \n\ntar -zcvf log.tar.gz log2012.log   打包后，以 gzip 压缩 \n\ntar -jcvf log.tar.bz2 log2012.log  打包后，以 bzip2 压缩 \n\ntar -zxvf /opt/soft/test/log.tar.gz 解压缩</code></pre><h3 id=\"dump\"><a href=\"#dump\" class=\"headerlink\" title=\"dump\"></a>dump</h3><pre><code>dump -0aj -f /tmp/home0.bak /home  制作一个 &#39;/home&#39; 目录的完整备份\n\ndump -1aj -f /tmp/home0.bak /home  制作一个 &#39;/home&#39; 目录的交互式备份</code></pre><h3 id=\"restore\"><a href=\"#restore\" class=\"headerlink\" title=\"restore\"></a>restore</h3><pre><code>restore -if /tmp/home0.bak  还原备份</code></pre><h3 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h3><pre><code>rsync -rogpav --delete /home /tmp  同步两边的目录 \n\nrsync -rogpav -e ssh --delete /home ip_address:/tmp  通过SSH通道rsync \n\nrsync -az -e ssh --delete ip_addr:/home/public /home/local  通过ssh和压缩将一个远程目录同步到本地目录 \n\nrsync -az -e ssh --delete /home/local ip_addr:/home/public  通过ssh和压缩将本地目录同步到远程目录 </code></pre>"},{"title":"在mac中配置多个github账号ssh密钥","date":"2018-08-10T15:28:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 概述\n很多时候我们本地生成的只有一个自己的ssh，但是多个ssh配置的场景也是蛮多的，所以想要commit，push等操作需要配置私钥ssh或者http，才能连接远程git仓库\n\n### 步骤\n我们假设原来在~/.ssh目录下已经生成了一对密钥,此密钥文件名字是默认生成\n\n```\nid_rsa\nid_rsa.pub\n```\n\n生成第二个ssh key\n\n```\nssh-keygen -t rsa -C \"yourmail@gmail.com\"\n```\n\n这里面不要一路回车，第一步需要我们手动填写保存文件的名字和路径\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/renbo/.ssh/id_rsa): /Users/renbo/.ssh/id_rsa_github\n<剩下两个直接回车>\n```\n\n这里我们用id_rsa_github来区别原有密钥对，避免被覆盖。\n完成之后，我们可以看到~/.ssh目录下多了两个文件，变成：\n\n```\nid_rsa\nid_ras.pub\nid_rsa_github\nid_rsa_github.pub\nknown_hosts\n```\n\n打开ssh-agent(关于ssh-agent后续介绍)\n\n这里如果你用的github官方的bash，用：\n\n```\nssh-agent -s\n```\n\n如果是其他的，比如msysgit，用：\n\n```\neval $(ssh-agent -s)\n```\n\n略过这一步的话，下一步会提示这样的错误：Could not open a connection to your authentication agent.\n  \n### 添加私钥\n\n```\nssh-add ~/.ssh/id_rsa\nssh-add ~/.ssh/id_rsa_github\n```\n### 创建config文件\n在~/.ssh目录下创建名为config的文件。mkdir config\n\n打开文件sudo vim config添加一下内容：\n\n```\n# gitlab\n  Host gitlab.com\n  HostName gitlab.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_gitlab\n\n# github\n  Host github.com\n  HostName github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github\n```\n\n其中，Host和HostName填写git服务器的域名。\n\nIdentityFile指定私钥的路径。\n\n如果在Linux系统下提示错误：Bad owner or permissions on /home/gary/.ssh/config\n\n说明config权限过大，chmod命令调整：\n\n```\nchmod 644 ~/.ssh/config\n```\n\n然后在github和gitlab上添加公钥即可。githua 在右上角的头像的设置中\n\n### 测试\n然后用ssh命令分别测试：\n\n```\nssh -T git@github.com\n```\n\n### 调试\n  如果到这里你没有成功的话，别急，教你解决问题的终极办法--debug\n\n  比如测试github：\n\n  ```\n  ssh -vT git@github.com\n  ```\n\n  -v 是输出编译信息，然后根据编译信息自己去解决问题吧。\n\n### 关于https用户名\n\n  如果之前有设置全局用户名和邮箱的话，需要unset一下\n\n  ```\n  git config --global --unset user.name\n  git config --global --unset user.email\n  ```\n\n  然后在不同的仓库下设置局部的用户名和邮箱\n\n  比如在公司的repository下\n\n  ```\n  git config user.name \"yourname\" \n  git config user.email \"youremail\"\n  ```\n\n  在自己的github的仓库在执行刚刚的命令一遍即可。\n  \n  这样就可以在不同的仓库，已不同的账号登录。\n\n\n\n\n\n","source":"_posts/linux/git.md","raw":"---\ntitle: 在mac中配置多个github账号ssh密钥\ndate: 2018-8-10 23:28:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n### 概述\n很多时候我们本地生成的只有一个自己的ssh，但是多个ssh配置的场景也是蛮多的，所以想要commit，push等操作需要配置私钥ssh或者http，才能连接远程git仓库\n\n### 步骤\n我们假设原来在~/.ssh目录下已经生成了一对密钥,此密钥文件名字是默认生成\n\n```\nid_rsa\nid_rsa.pub\n```\n\n生成第二个ssh key\n\n```\nssh-keygen -t rsa -C \"yourmail@gmail.com\"\n```\n\n这里面不要一路回车，第一步需要我们手动填写保存文件的名字和路径\n\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/renbo/.ssh/id_rsa): /Users/renbo/.ssh/id_rsa_github\n<剩下两个直接回车>\n```\n\n这里我们用id_rsa_github来区别原有密钥对，避免被覆盖。\n完成之后，我们可以看到~/.ssh目录下多了两个文件，变成：\n\n```\nid_rsa\nid_ras.pub\nid_rsa_github\nid_rsa_github.pub\nknown_hosts\n```\n\n打开ssh-agent(关于ssh-agent后续介绍)\n\n这里如果你用的github官方的bash，用：\n\n```\nssh-agent -s\n```\n\n如果是其他的，比如msysgit，用：\n\n```\neval $(ssh-agent -s)\n```\n\n略过这一步的话，下一步会提示这样的错误：Could not open a connection to your authentication agent.\n  \n### 添加私钥\n\n```\nssh-add ~/.ssh/id_rsa\nssh-add ~/.ssh/id_rsa_github\n```\n### 创建config文件\n在~/.ssh目录下创建名为config的文件。mkdir config\n\n打开文件sudo vim config添加一下内容：\n\n```\n# gitlab\n  Host gitlab.com\n  HostName gitlab.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_gitlab\n\n# github\n  Host github.com\n  HostName github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github\n```\n\n其中，Host和HostName填写git服务器的域名。\n\nIdentityFile指定私钥的路径。\n\n如果在Linux系统下提示错误：Bad owner or permissions on /home/gary/.ssh/config\n\n说明config权限过大，chmod命令调整：\n\n```\nchmod 644 ~/.ssh/config\n```\n\n然后在github和gitlab上添加公钥即可。githua 在右上角的头像的设置中\n\n### 测试\n然后用ssh命令分别测试：\n\n```\nssh -T git@github.com\n```\n\n### 调试\n  如果到这里你没有成功的话，别急，教你解决问题的终极办法--debug\n\n  比如测试github：\n\n  ```\n  ssh -vT git@github.com\n  ```\n\n  -v 是输出编译信息，然后根据编译信息自己去解决问题吧。\n\n### 关于https用户名\n\n  如果之前有设置全局用户名和邮箱的话，需要unset一下\n\n  ```\n  git config --global --unset user.name\n  git config --global --unset user.email\n  ```\n\n  然后在不同的仓库下设置局部的用户名和邮箱\n\n  比如在公司的repository下\n\n  ```\n  git config user.name \"yourname\" \n  git config user.email \"youremail\"\n  ```\n\n  在自己的github的仓库在执行刚刚的命令一遍即可。\n  \n  这样就可以在不同的仓库，已不同的账号登录。\n\n\n\n\n\n","slug":"linux/git","published":1,"updated":"2019-08-26T16:46:27.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n88002kkuu6pul4r4qq","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>很多时候我们本地生成的只有一个自己的ssh，但是多个ssh配置的场景也是蛮多的，所以想要commit，push等操作需要配置私钥ssh或者http，才能连接远程git仓库</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>我们假设原来在~/.ssh目录下已经生成了一对密钥,此密钥文件名字是默认生成</p>\n<pre><code>id_rsa\nid_rsa.pub</code></pre><p>生成第二个ssh key</p>\n<pre><code>ssh-keygen -t rsa -C &quot;yourmail@gmail.com&quot;</code></pre><p>这里面不要一路回车，第一步需要我们手动填写保存文件的名字和路径</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/renbo/.ssh/id_rsa): /Users/renbo/.ssh/id_rsa_github\n&lt;剩下两个直接回车&gt;</code></pre><p>这里我们用id_rsa_github来区别原有密钥对，避免被覆盖。<br>完成之后，我们可以看到~/.ssh目录下多了两个文件，变成：</p>\n<pre><code>id_rsa\nid_ras.pub\nid_rsa_github\nid_rsa_github.pub\nknown_hosts</code></pre><p>打开ssh-agent(关于ssh-agent后续介绍)</p>\n<p>这里如果你用的github官方的bash，用：</p>\n<pre><code>ssh-agent -s</code></pre><p>如果是其他的，比如msysgit，用：</p>\n<pre><code>eval $(ssh-agent -s)</code></pre><p>略过这一步的话，下一步会提示这样的错误：Could not open a connection to your authentication agent.</p>\n<h3 id=\"添加私钥\"><a href=\"#添加私钥\" class=\"headerlink\" title=\"添加私钥\"></a>添加私钥</h3><pre><code>ssh-add ~/.ssh/id_rsa\nssh-add ~/.ssh/id_rsa_github</code></pre><h3 id=\"创建config文件\"><a href=\"#创建config文件\" class=\"headerlink\" title=\"创建config文件\"></a>创建config文件</h3><p>在~/.ssh目录下创建名为config的文件。mkdir config</p>\n<p>打开文件sudo vim config添加一下内容：</p>\n<pre><code># gitlab\n  Host gitlab.com\n  HostName gitlab.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_gitlab\n\n# github\n  Host github.com\n  HostName github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github</code></pre><p>其中，Host和HostName填写git服务器的域名。</p>\n<p>IdentityFile指定私钥的路径。</p>\n<p>如果在Linux系统下提示错误：Bad owner or permissions on /home/gary/.ssh/config</p>\n<p>说明config权限过大，chmod命令调整：</p>\n<pre><code>chmod 644 ~/.ssh/config</code></pre><p>然后在github和gitlab上添加公钥即可。githua 在右上角的头像的设置中</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>然后用ssh命令分别测试：</p>\n<pre><code>ssh -T git@github.com</code></pre><h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>  如果到这里你没有成功的话，别急，教你解决问题的终极办法–debug</p>\n<p>  比如测试github：</p>\n<pre><code>  ssh -vT git@github.com</code></pre><p>  -v 是输出编译信息，然后根据编译信息自己去解决问题吧。</p>\n<h3 id=\"关于https用户名\"><a href=\"#关于https用户名\" class=\"headerlink\" title=\"关于https用户名\"></a>关于https用户名</h3><p>  如果之前有设置全局用户名和邮箱的话，需要unset一下</p>\n<pre><code>  git config --global --unset user.name\n  git config --global --unset user.email</code></pre><p>  然后在不同的仓库下设置局部的用户名和邮箱</p>\n<p>  比如在公司的repository下</p>\n<pre><code>  git config user.name &quot;yourname&quot; \n  git config user.email &quot;youremail&quot;</code></pre><p>  在自己的github的仓库在执行刚刚的命令一遍即可。</p>\n<p>  这样就可以在不同的仓库，已不同的账号登录。</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>很多时候我们本地生成的只有一个自己的ssh，但是多个ssh配置的场景也是蛮多的，所以想要commit，push等操作需要配置私钥ssh或者http，才能连接远程git仓库</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>我们假设原来在~/.ssh目录下已经生成了一对密钥,此密钥文件名字是默认生成</p>\n<pre><code>id_rsa\nid_rsa.pub</code></pre><p>生成第二个ssh key</p>\n<pre><code>ssh-keygen -t rsa -C &quot;yourmail@gmail.com&quot;</code></pre><p>这里面不要一路回车，第一步需要我们手动填写保存文件的名字和路径</p>\n<pre><code>Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/renbo/.ssh/id_rsa): /Users/renbo/.ssh/id_rsa_github\n&lt;剩下两个直接回车&gt;</code></pre><p>这里我们用id_rsa_github来区别原有密钥对，避免被覆盖。<br>完成之后，我们可以看到~/.ssh目录下多了两个文件，变成：</p>\n<pre><code>id_rsa\nid_ras.pub\nid_rsa_github\nid_rsa_github.pub\nknown_hosts</code></pre><p>打开ssh-agent(关于ssh-agent后续介绍)</p>\n<p>这里如果你用的github官方的bash，用：</p>\n<pre><code>ssh-agent -s</code></pre><p>如果是其他的，比如msysgit，用：</p>\n<pre><code>eval $(ssh-agent -s)</code></pre><p>略过这一步的话，下一步会提示这样的错误：Could not open a connection to your authentication agent.</p>\n<h3 id=\"添加私钥\"><a href=\"#添加私钥\" class=\"headerlink\" title=\"添加私钥\"></a>添加私钥</h3><pre><code>ssh-add ~/.ssh/id_rsa\nssh-add ~/.ssh/id_rsa_github</code></pre><h3 id=\"创建config文件\"><a href=\"#创建config文件\" class=\"headerlink\" title=\"创建config文件\"></a>创建config文件</h3><p>在~/.ssh目录下创建名为config的文件。mkdir config</p>\n<p>打开文件sudo vim config添加一下内容：</p>\n<pre><code># gitlab\n  Host gitlab.com\n  HostName gitlab.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_gitlab\n\n# github\n  Host github.com\n  HostName github.com\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/id_rsa_github</code></pre><p>其中，Host和HostName填写git服务器的域名。</p>\n<p>IdentityFile指定私钥的路径。</p>\n<p>如果在Linux系统下提示错误：Bad owner or permissions on /home/gary/.ssh/config</p>\n<p>说明config权限过大，chmod命令调整：</p>\n<pre><code>chmod 644 ~/.ssh/config</code></pre><p>然后在github和gitlab上添加公钥即可。githua 在右上角的头像的设置中</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>然后用ssh命令分别测试：</p>\n<pre><code>ssh -T git@github.com</code></pre><h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>  如果到这里你没有成功的话，别急，教你解决问题的终极办法–debug</p>\n<p>  比如测试github：</p>\n<pre><code>  ssh -vT git@github.com</code></pre><p>  -v 是输出编译信息，然后根据编译信息自己去解决问题吧。</p>\n<h3 id=\"关于https用户名\"><a href=\"#关于https用户名\" class=\"headerlink\" title=\"关于https用户名\"></a>关于https用户名</h3><p>  如果之前有设置全局用户名和邮箱的话，需要unset一下</p>\n<pre><code>  git config --global --unset user.name\n  git config --global --unset user.email</code></pre><p>  然后在不同的仓库下设置局部的用户名和邮箱</p>\n<p>  比如在公司的repository下</p>\n<pre><code>  git config user.name &quot;yourname&quot; \n  git config user.email &quot;youremail&quot;</code></pre><p>  在自己的github的仓库在执行刚刚的命令一遍即可。</p>\n<p>  这样就可以在不同的仓库，已不同的账号登录。</p>\n"},{"title":"常用指令","date":"2018-06-23T08:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### ls\n\n显示文件或目录\n\n```\nls -F  //显示文件或目录\nls -l  //列出文件详细信息l(list)\nls -a  //列出当前目录下所有文件及目录，包括隐藏的a(all)\n```\n\n### mkdir\n\n创建目录\n\n```\nmkdir dir  //创建一个dir的目录\n```\nmkdir -p 创建目录，若无父目录，则创建p(parent) <br/>\n```\nmkdir -p /study/dir1/dir2  //创建一个的目录树\n```\n\n### cd\n\n切换目录\n\n```\ncd ..  //返回上级目录\ncd /home  //进入指定目录\ncd - //返回上次所在的目录 \n```\n\n### touch\n\n修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件\n\n```\ntouch temp  //创建名为temp的空文件\ntouch temp  //如果temp存在则是修改文件的时间属性 可通过ls -l temp 查看文件属性\n```\n\n### echo\n\n命令行输出内容\n\n```\necho 'zhangsan' >> temp //创建名为temp带有zhangsan内容的文件\n```\n\n### cat\n\n查看文件内容\n\n```\ncat temp  //查看temp文件中的内容\ncat -n temp  //标示文件的行数\n```\n\n### cp\n\n拷贝\n\n```\ncp temp newtemp  //复制temp文件\ncp temp/* .  //复制temp目录下的所有文件到当前工作目录 \ncp -a /temp/dir1 . //复制/temp/dir1目录到当前工作目录 \ncp -a temp newtemp //复制temp目录 \n```\n\n### mv\n\n移动或重命名\n\n```\nmv temp newtemp //重命名/移动一个目录 \n```\n\n### rm\n删除文件\n\n```\nrm -f file  //删除file文件' \nrmdir dir1  //删除dir1的目录' \nrm -rf dir1 //递归删除dir1目录所有的内容\nrm -rf dir1 dir2 //同时删除两个目录及它们的内容 \n```\n\n### find\n\n在文件系统中查找某文件\n\n```\nfind / -name file1  //从根文件系统查找文件和目录 \nfind / -user renbo  //查找属于用户 'renbo' 的文件和目录 \nfind /home/renbo -name \\*.bin  // 查找带home/renbo目录中有.bin结尾的文件 \nfind / -name \\*.rpm -exec chmod 755 '{}' \\ //查找以.rpm结尾的文件并定义其权限 \nfind / -xdev -name \\*.rpm  //查找所有以.rpm结尾的文件\n```\n\n### wc\n\n统计文本中行数、字数、字符数\n\n```\nwc gitcommit.sh  //3   13  73 gitcommit.sh\n```\n\n### grep\n\n在文本文件中查找某个字符串\n\n```\ngrep Aug /var/log/messages  //在文件 '/var/log/messages'中查找关键词\"Aug\" \ngrep ^Aug /var/log/messages  //在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇 \ngrep [0-9] /var/log/messages //选择 '/var/log/messages' 文件中所有包含数字的行 \ngrep Aug -R /var/log/*  //在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\" \n```\n\n### tree\n\n树形结构显示目录，需要安装tree包\n\n```\ntree  //显示文件和目录由根目录开始的树形结构 \n```\n\n### pwd\n\n显示当前目录\n\n```\npwd 显示当前路径\n```\n\n### ln \n\n创建链接文件\n\n```\nln -s file1 lnk1  //创建一个指向文件或目录的软链接 \nln file1 lnk1  //创建一个指向文件或目录的物理链接 \n```\n\n### more、less  \n\n分页显示文本文件内容\n\n```\nmore file1  //查看一个长文件的内容 \nless file1  //类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作 \n```\n\n### head、tail\n\n```\nhead -2 file1 //查看一个文件的前两行 \ntail -2 file1 //查看一个文件的最后两行 \ntail -f /var/log/messages //实时查看被添加到一个文件中的内容 \n```\n\n\n\n\n\n\n\n","source":"_posts/linux/instructions.md","raw":"---\ntitle: 常用指令\ndate: 2018-6-23 16:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n\n### ls\n\n显示文件或目录\n\n```\nls -F  //显示文件或目录\nls -l  //列出文件详细信息l(list)\nls -a  //列出当前目录下所有文件及目录，包括隐藏的a(all)\n```\n\n### mkdir\n\n创建目录\n\n```\nmkdir dir  //创建一个dir的目录\n```\nmkdir -p 创建目录，若无父目录，则创建p(parent) <br/>\n```\nmkdir -p /study/dir1/dir2  //创建一个的目录树\n```\n\n### cd\n\n切换目录\n\n```\ncd ..  //返回上级目录\ncd /home  //进入指定目录\ncd - //返回上次所在的目录 \n```\n\n### touch\n\n修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件\n\n```\ntouch temp  //创建名为temp的空文件\ntouch temp  //如果temp存在则是修改文件的时间属性 可通过ls -l temp 查看文件属性\n```\n\n### echo\n\n命令行输出内容\n\n```\necho 'zhangsan' >> temp //创建名为temp带有zhangsan内容的文件\n```\n\n### cat\n\n查看文件内容\n\n```\ncat temp  //查看temp文件中的内容\ncat -n temp  //标示文件的行数\n```\n\n### cp\n\n拷贝\n\n```\ncp temp newtemp  //复制temp文件\ncp temp/* .  //复制temp目录下的所有文件到当前工作目录 \ncp -a /temp/dir1 . //复制/temp/dir1目录到当前工作目录 \ncp -a temp newtemp //复制temp目录 \n```\n\n### mv\n\n移动或重命名\n\n```\nmv temp newtemp //重命名/移动一个目录 \n```\n\n### rm\n删除文件\n\n```\nrm -f file  //删除file文件' \nrmdir dir1  //删除dir1的目录' \nrm -rf dir1 //递归删除dir1目录所有的内容\nrm -rf dir1 dir2 //同时删除两个目录及它们的内容 \n```\n\n### find\n\n在文件系统中查找某文件\n\n```\nfind / -name file1  //从根文件系统查找文件和目录 \nfind / -user renbo  //查找属于用户 'renbo' 的文件和目录 \nfind /home/renbo -name \\*.bin  // 查找带home/renbo目录中有.bin结尾的文件 \nfind / -name \\*.rpm -exec chmod 755 '{}' \\ //查找以.rpm结尾的文件并定义其权限 \nfind / -xdev -name \\*.rpm  //查找所有以.rpm结尾的文件\n```\n\n### wc\n\n统计文本中行数、字数、字符数\n\n```\nwc gitcommit.sh  //3   13  73 gitcommit.sh\n```\n\n### grep\n\n在文本文件中查找某个字符串\n\n```\ngrep Aug /var/log/messages  //在文件 '/var/log/messages'中查找关键词\"Aug\" \ngrep ^Aug /var/log/messages  //在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇 \ngrep [0-9] /var/log/messages //选择 '/var/log/messages' 文件中所有包含数字的行 \ngrep Aug -R /var/log/*  //在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\" \n```\n\n### tree\n\n树形结构显示目录，需要安装tree包\n\n```\ntree  //显示文件和目录由根目录开始的树形结构 \n```\n\n### pwd\n\n显示当前目录\n\n```\npwd 显示当前路径\n```\n\n### ln \n\n创建链接文件\n\n```\nln -s file1 lnk1  //创建一个指向文件或目录的软链接 \nln file1 lnk1  //创建一个指向文件或目录的物理链接 \n```\n\n### more、less  \n\n分页显示文本文件内容\n\n```\nmore file1  //查看一个长文件的内容 \nless file1  //类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作 \n```\n\n### head、tail\n\n```\nhead -2 file1 //查看一个文件的前两行 \ntail -2 file1 //查看一个文件的最后两行 \ntail -f /var/log/messages //实时查看被添加到一个文件中的内容 \n```\n\n\n\n\n\n\n\n","slug":"linux/instructions","published":1,"updated":"2019-08-26T16:46:27.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8a002nkuu6kwlqc3kz","content":"<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>显示文件或目录</p>\n<pre><code>ls -F  //显示文件或目录\nls -l  //列出文件详细信息l(list)\nls -a  //列出当前目录下所有文件及目录，包括隐藏的a(all)</code></pre><h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><p>创建目录</p>\n<pre><code>mkdir dir  //创建一个dir的目录</code></pre><p>mkdir -p 创建目录，若无父目录，则创建p(parent) <br></p>\n<pre><code>mkdir -p /study/dir1/dir2  //创建一个的目录树</code></pre><h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p>切换目录</p>\n<pre><code>cd ..  //返回上级目录\ncd /home  //进入指定目录\ncd - //返回上次所在的目录 </code></pre><h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><p>修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</p>\n<pre><code>touch temp  //创建名为temp的空文件\ntouch temp  //如果temp存在则是修改文件的时间属性 可通过ls -l temp 查看文件属性</code></pre><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><p>命令行输出内容</p>\n<pre><code>echo &#39;zhangsan&#39; &gt;&gt; temp //创建名为temp带有zhangsan内容的文件</code></pre><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p>查看文件内容</p>\n<pre><code>cat temp  //查看temp文件中的内容\ncat -n temp  //标示文件的行数</code></pre><h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><p>拷贝</p>\n<pre><code>cp temp newtemp  //复制temp文件\ncp temp/* .  //复制temp目录下的所有文件到当前工作目录 \ncp -a /temp/dir1 . //复制/temp/dir1目录到当前工作目录 \ncp -a temp newtemp //复制temp目录 </code></pre><h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><p>移动或重命名</p>\n<pre><code>mv temp newtemp //重命名/移动一个目录 </code></pre><h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><p>删除文件</p>\n<pre><code>rm -f file  //删除file文件&#39; \nrmdir dir1  //删除dir1的目录&#39; \nrm -rf dir1 //递归删除dir1目录所有的内容\nrm -rf dir1 dir2 //同时删除两个目录及它们的内容 </code></pre><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>在文件系统中查找某文件</p>\n<pre><code>find / -name file1  //从根文件系统查找文件和目录 \nfind / -user renbo  //查找属于用户 &#39;renbo&#39; 的文件和目录 \nfind /home/renbo -name \\*.bin  // 查找带home/renbo目录中有.bin结尾的文件 \nfind / -name \\*.rpm -exec chmod 755 &#39;{}&#39; \\ //查找以.rpm结尾的文件并定义其权限 \nfind / -xdev -name \\*.rpm  //查找所有以.rpm结尾的文件</code></pre><h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><p>统计文本中行数、字数、字符数</p>\n<pre><code>wc gitcommit.sh  //3   13  73 gitcommit.sh</code></pre><h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><p>在文本文件中查找某个字符串</p>\n<pre><code>grep Aug /var/log/messages  //在文件 &#39;/var/log/messages&#39;中查找关键词&quot;Aug&quot; \ngrep ^Aug /var/log/messages  //在文件 &#39;/var/log/messages&#39;中查找以&quot;Aug&quot;开始的词汇 \ngrep [0-9] /var/log/messages //选择 &#39;/var/log/messages&#39; 文件中所有包含数字的行 \ngrep Aug -R /var/log/*  //在目录 &#39;/var/log&#39; 及随后的目录中搜索字符串&quot;Aug&quot; </code></pre><h3 id=\"tree\"><a href=\"#tree\" class=\"headerlink\" title=\"tree\"></a>tree</h3><p>树形结构显示目录，需要安装tree包</p>\n<pre><code>tree  //显示文件和目录由根目录开始的树形结构 </code></pre><h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><p>显示当前目录</p>\n<pre><code>pwd 显示当前路径</code></pre><h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>创建链接文件</p>\n<pre><code>ln -s file1 lnk1  //创建一个指向文件或目录的软链接 \nln file1 lnk1  //创建一个指向文件或目录的物理链接 </code></pre><h3 id=\"more、less\"><a href=\"#more、less\" class=\"headerlink\" title=\"more、less\"></a>more、less</h3><p>分页显示文本文件内容</p>\n<pre><code>more file1  //查看一个长文件的内容 \nless file1  //类似于 &#39;more&#39; 命令，但是它允许在文件中和正向操作一样的反向操作 </code></pre><h3 id=\"head、tail\"><a href=\"#head、tail\" class=\"headerlink\" title=\"head、tail\"></a>head、tail</h3><pre><code>head -2 file1 //查看一个文件的前两行 \ntail -2 file1 //查看一个文件的最后两行 \ntail -f /var/log/messages //实时查看被添加到一个文件中的内容 </code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>显示文件或目录</p>\n<pre><code>ls -F  //显示文件或目录\nls -l  //列出文件详细信息l(list)\nls -a  //列出当前目录下所有文件及目录，包括隐藏的a(all)</code></pre><h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><p>创建目录</p>\n<pre><code>mkdir dir  //创建一个dir的目录</code></pre><p>mkdir -p 创建目录，若无父目录，则创建p(parent) <br></p>\n<pre><code>mkdir -p /study/dir1/dir2  //创建一个的目录树</code></pre><h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p>切换目录</p>\n<pre><code>cd ..  //返回上级目录\ncd /home  //进入指定目录\ncd - //返回上次所在的目录 </code></pre><h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><p>修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</p>\n<pre><code>touch temp  //创建名为temp的空文件\ntouch temp  //如果temp存在则是修改文件的时间属性 可通过ls -l temp 查看文件属性</code></pre><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h3><p>命令行输出内容</p>\n<pre><code>echo &#39;zhangsan&#39; &gt;&gt; temp //创建名为temp带有zhangsan内容的文件</code></pre><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p>查看文件内容</p>\n<pre><code>cat temp  //查看temp文件中的内容\ncat -n temp  //标示文件的行数</code></pre><h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><p>拷贝</p>\n<pre><code>cp temp newtemp  //复制temp文件\ncp temp/* .  //复制temp目录下的所有文件到当前工作目录 \ncp -a /temp/dir1 . //复制/temp/dir1目录到当前工作目录 \ncp -a temp newtemp //复制temp目录 </code></pre><h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><p>移动或重命名</p>\n<pre><code>mv temp newtemp //重命名/移动一个目录 </code></pre><h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><p>删除文件</p>\n<pre><code>rm -f file  //删除file文件&#39; \nrmdir dir1  //删除dir1的目录&#39; \nrm -rf dir1 //递归删除dir1目录所有的内容\nrm -rf dir1 dir2 //同时删除两个目录及它们的内容 </code></pre><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>在文件系统中查找某文件</p>\n<pre><code>find / -name file1  //从根文件系统查找文件和目录 \nfind / -user renbo  //查找属于用户 &#39;renbo&#39; 的文件和目录 \nfind /home/renbo -name \\*.bin  // 查找带home/renbo目录中有.bin结尾的文件 \nfind / -name \\*.rpm -exec chmod 755 &#39;{}&#39; \\ //查找以.rpm结尾的文件并定义其权限 \nfind / -xdev -name \\*.rpm  //查找所有以.rpm结尾的文件</code></pre><h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><p>统计文本中行数、字数、字符数</p>\n<pre><code>wc gitcommit.sh  //3   13  73 gitcommit.sh</code></pre><h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><p>在文本文件中查找某个字符串</p>\n<pre><code>grep Aug /var/log/messages  //在文件 &#39;/var/log/messages&#39;中查找关键词&quot;Aug&quot; \ngrep ^Aug /var/log/messages  //在文件 &#39;/var/log/messages&#39;中查找以&quot;Aug&quot;开始的词汇 \ngrep [0-9] /var/log/messages //选择 &#39;/var/log/messages&#39; 文件中所有包含数字的行 \ngrep Aug -R /var/log/*  //在目录 &#39;/var/log&#39; 及随后的目录中搜索字符串&quot;Aug&quot; </code></pre><h3 id=\"tree\"><a href=\"#tree\" class=\"headerlink\" title=\"tree\"></a>tree</h3><p>树形结构显示目录，需要安装tree包</p>\n<pre><code>tree  //显示文件和目录由根目录开始的树形结构 </code></pre><h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><p>显示当前目录</p>\n<pre><code>pwd 显示当前路径</code></pre><h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>创建链接文件</p>\n<pre><code>ln -s file1 lnk1  //创建一个指向文件或目录的软链接 \nln file1 lnk1  //创建一个指向文件或目录的物理链接 </code></pre><h3 id=\"more、less\"><a href=\"#more、less\" class=\"headerlink\" title=\"more、less\"></a>more、less</h3><p>分页显示文本文件内容</p>\n<pre><code>more file1  //查看一个长文件的内容 \nless file1  //类似于 &#39;more&#39; 命令，但是它允许在文件中和正向操作一样的反向操作 </code></pre><h3 id=\"head、tail\"><a href=\"#head、tail\" class=\"headerlink\" title=\"head、tail\"></a>head、tail</h3><pre><code>head -2 file1 //查看一个文件的前两行 \ntail -2 file1 //查看一个文件的最后两行 \ntail -f /var/log/messages //实时查看被添加到一个文件中的内容 </code></pre>"},{"title":"关机重启操作","date":"2018-07-16T10:02:45.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### shutdown\n\n```\nshutdown -r  关机重启\nshutdown -h  关机不重启\nshutdown now  立刻关机\n\n```\n\n### halt\n关机\n\n### reboot\n重启\n\n\n\n\n\n          \n\n","source":"_posts/linux/shutdown.md","raw":"---\ntitle: 关机重启操作\ndate: 2018-7-16 18:02:45\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n\n### shutdown\n\n```\nshutdown -r  关机重启\nshutdown -h  关机不重启\nshutdown now  立刻关机\n\n```\n\n### halt\n关机\n\n### reboot\n重启\n\n\n\n\n\n          \n\n","slug":"linux/shutdown","published":1,"updated":"2019-08-26T16:46:27.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8b002skuu61excidfa","content":"<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><pre><code>shutdown -r  关机重启\nshutdown -h  关机不重启\nshutdown now  立刻关机\n</code></pre><h3 id=\"halt\"><a href=\"#halt\" class=\"headerlink\" title=\"halt\"></a>halt</h3><p>关机</p>\n<h3 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h3><p>重启</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><pre><code>shutdown -r  关机重启\nshutdown -h  关机不重启\nshutdown now  立刻关机\n</code></pre><h3 id=\"halt\"><a href=\"#halt\" class=\"headerlink\" title=\"halt\"></a>halt</h3><p>关机</p>\n<h3 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h3><p>重启</p>\n"},{"title":"Linux软件包管理","date":"2018-07-12T14:28:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### dpkg \n\n(Debian Package)管理工具，软件包名以.deb后缀\n\n```\nsudo dpkg -i package.deb 安装/更新 deb 包 \n\nsudo dpkg -r package 删除 deb 包 \n\nsudo dpkg -l 获取所有已经安装的 deb 包 \n\nsudo dpkg -s package 获得已经安装的包的信息\n```\n\n### APT\n\n（Advanced Packaging Tool）\n\n```\nsudo apt-get install package 安装package包\n\nsudo apt-get remove package 卸载package包\n\nsudo apt-get upgrade 更新所有package包  \n\nsudo apt-get update 更新package包                             \n```    \n\n \n### YUM 软件包升级器\n\n```\nyum install package 下载并安装rpm包 \n\nyum update package 更新rpm包 \n\nyum remove package 删除rpm包 \n\nyum list 列出当前系统中安装的所有包\n\nyum search package 在rpm仓库中搜寻软件包 \n\nyum clean packages 清理rpm缓存删除下载的包 \n\nyum clean headers 删除所有头文件\n\nyum clean all 删除所有缓存的包和头文件 \n```\n\n \n### RPM包\n\n```\nrpm -ivh package.rpm 安装rpm包 \nrpm -ivh --nodeeps package.rpm 安装rpm包而忽略依赖关系警告 \nrpm -U package.rpm 更新rpm包但不改变其配置文件 \nrpm -F package.rpm 更新确定已经安装的rpm包 \nrpm -e package.rpm 删除rpm包 \nrpm -qa 显示系统中所有已经安装的rpm包 \n```\n\n### 注意\n\nrpm文件是Redhat支持的软件包格式，而.deb是Debian上支持软件包的扩展名\n\n由于ubuntu是对Debian的扩展，在ubuntu下不能直接使.rpm文件的，需要将.rmp转换成.deb\n\n解决方法\n\n1.安装alien，执行`sudo apt-get install alien`\n\n2.使用alien，执行`sudo alien abc.rpm`\n\n3.执行完成后，目录下会生成一个abc.deb文件\n\n4.安装并使用dpkg\n","source":"_posts/linux/package.md","raw":"---\ntitle: Linux软件包管理\ndate: 2018-7-12 22:28:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n\n### dpkg \n\n(Debian Package)管理工具，软件包名以.deb后缀\n\n```\nsudo dpkg -i package.deb 安装/更新 deb 包 \n\nsudo dpkg -r package 删除 deb 包 \n\nsudo dpkg -l 获取所有已经安装的 deb 包 \n\nsudo dpkg -s package 获得已经安装的包的信息\n```\n\n### APT\n\n（Advanced Packaging Tool）\n\n```\nsudo apt-get install package 安装package包\n\nsudo apt-get remove package 卸载package包\n\nsudo apt-get upgrade 更新所有package包  \n\nsudo apt-get update 更新package包                             \n```    \n\n \n### YUM 软件包升级器\n\n```\nyum install package 下载并安装rpm包 \n\nyum update package 更新rpm包 \n\nyum remove package 删除rpm包 \n\nyum list 列出当前系统中安装的所有包\n\nyum search package 在rpm仓库中搜寻软件包 \n\nyum clean packages 清理rpm缓存删除下载的包 \n\nyum clean headers 删除所有头文件\n\nyum clean all 删除所有缓存的包和头文件 \n```\n\n \n### RPM包\n\n```\nrpm -ivh package.rpm 安装rpm包 \nrpm -ivh --nodeeps package.rpm 安装rpm包而忽略依赖关系警告 \nrpm -U package.rpm 更新rpm包但不改变其配置文件 \nrpm -F package.rpm 更新确定已经安装的rpm包 \nrpm -e package.rpm 删除rpm包 \nrpm -qa 显示系统中所有已经安装的rpm包 \n```\n\n### 注意\n\nrpm文件是Redhat支持的软件包格式，而.deb是Debian上支持软件包的扩展名\n\n由于ubuntu是对Debian的扩展，在ubuntu下不能直接使.rpm文件的，需要将.rmp转换成.deb\n\n解决方法\n\n1.安装alien，执行`sudo apt-get install alien`\n\n2.使用alien，执行`sudo alien abc.rpm`\n\n3.执行完成后，目录下会生成一个abc.deb文件\n\n4.安装并使用dpkg\n","slug":"linux/package","published":1,"updated":"2019-08-26T16:46:27.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8d002vkuu6bd44892s","content":"<h3 id=\"dpkg\"><a href=\"#dpkg\" class=\"headerlink\" title=\"dpkg\"></a>dpkg</h3><p>(Debian Package)管理工具，软件包名以.deb后缀</p>\n<pre><code>sudo dpkg -i package.deb 安装/更新 deb 包 \n\nsudo dpkg -r package 删除 deb 包 \n\nsudo dpkg -l 获取所有已经安装的 deb 包 \n\nsudo dpkg -s package 获得已经安装的包的信息</code></pre><h3 id=\"APT\"><a href=\"#APT\" class=\"headerlink\" title=\"APT\"></a>APT</h3><p>（Advanced Packaging Tool）</p>\n<pre><code>sudo apt-get install package 安装package包\n\nsudo apt-get remove package 卸载package包\n\nsudo apt-get upgrade 更新所有package包  \n\nsudo apt-get update 更新package包                             </code></pre><h3 id=\"YUM-软件包升级器\"><a href=\"#YUM-软件包升级器\" class=\"headerlink\" title=\"YUM 软件包升级器\"></a>YUM 软件包升级器</h3><pre><code>yum install package 下载并安装rpm包 \n\nyum update package 更新rpm包 \n\nyum remove package 删除rpm包 \n\nyum list 列出当前系统中安装的所有包\n\nyum search package 在rpm仓库中搜寻软件包 \n\nyum clean packages 清理rpm缓存删除下载的包 \n\nyum clean headers 删除所有头文件\n\nyum clean all 删除所有缓存的包和头文件 </code></pre><h3 id=\"RPM包\"><a href=\"#RPM包\" class=\"headerlink\" title=\"RPM包\"></a>RPM包</h3><pre><code>rpm -ivh package.rpm 安装rpm包 \nrpm -ivh --nodeeps package.rpm 安装rpm包而忽略依赖关系警告 \nrpm -U package.rpm 更新rpm包但不改变其配置文件 \nrpm -F package.rpm 更新确定已经安装的rpm包 \nrpm -e package.rpm 删除rpm包 \nrpm -qa 显示系统中所有已经安装的rpm包 </code></pre><h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>rpm文件是Redhat支持的软件包格式，而.deb是Debian上支持软件包的扩展名</p>\n<p>由于ubuntu是对Debian的扩展，在ubuntu下不能直接使.rpm文件的，需要将.rmp转换成.deb</p>\n<p>解决方法</p>\n<p>1.安装alien，执行<code>sudo apt-get install alien</code></p>\n<p>2.使用alien，执行<code>sudo alien abc.rpm</code></p>\n<p>3.执行完成后，目录下会生成一个abc.deb文件</p>\n<p>4.安装并使用dpkg</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"dpkg\"><a href=\"#dpkg\" class=\"headerlink\" title=\"dpkg\"></a>dpkg</h3><p>(Debian Package)管理工具，软件包名以.deb后缀</p>\n<pre><code>sudo dpkg -i package.deb 安装/更新 deb 包 \n\nsudo dpkg -r package 删除 deb 包 \n\nsudo dpkg -l 获取所有已经安装的 deb 包 \n\nsudo dpkg -s package 获得已经安装的包的信息</code></pre><h3 id=\"APT\"><a href=\"#APT\" class=\"headerlink\" title=\"APT\"></a>APT</h3><p>（Advanced Packaging Tool）</p>\n<pre><code>sudo apt-get install package 安装package包\n\nsudo apt-get remove package 卸载package包\n\nsudo apt-get upgrade 更新所有package包  \n\nsudo apt-get update 更新package包                             </code></pre><h3 id=\"YUM-软件包升级器\"><a href=\"#YUM-软件包升级器\" class=\"headerlink\" title=\"YUM 软件包升级器\"></a>YUM 软件包升级器</h3><pre><code>yum install package 下载并安装rpm包 \n\nyum update package 更新rpm包 \n\nyum remove package 删除rpm包 \n\nyum list 列出当前系统中安装的所有包\n\nyum search package 在rpm仓库中搜寻软件包 \n\nyum clean packages 清理rpm缓存删除下载的包 \n\nyum clean headers 删除所有头文件\n\nyum clean all 删除所有缓存的包和头文件 </code></pre><h3 id=\"RPM包\"><a href=\"#RPM包\" class=\"headerlink\" title=\"RPM包\"></a>RPM包</h3><pre><code>rpm -ivh package.rpm 安装rpm包 \nrpm -ivh --nodeeps package.rpm 安装rpm包而忽略依赖关系警告 \nrpm -U package.rpm 更新rpm包但不改变其配置文件 \nrpm -F package.rpm 更新确定已经安装的rpm包 \nrpm -e package.rpm 删除rpm包 \nrpm -qa 显示系统中所有已经安装的rpm包 </code></pre><h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>rpm文件是Redhat支持的软件包格式，而.deb是Debian上支持软件包的扩展名</p>\n<p>由于ubuntu是对Debian的扩展，在ubuntu下不能直接使.rpm文件的，需要将.rmp转换成.deb</p>\n<p>解决方法</p>\n<p>1.安装alien，执行<code>sudo apt-get install alien</code></p>\n<p>2.使用alien，执行<code>sudo alien abc.rpm</code></p>\n<p>3.执行完成后，目录下会生成一个abc.deb文件</p>\n<p>4.安装并使用dpkg</p>\n"},{"title":"系统管理指令","date":"2018-07-02T05:28:25.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n### stat  \n显示指定文件的详细信息\n\n### who\n显示在线登陆用户\n\n### whoami\n显示当前操作用户\n\n### hostname\n显示主机名\n\n### uname\n显示系统信息\n\n### top  \n动态显示当前耗费资源最多进程信息\n\n### ps  \n查看进程状态 \n\n```\nps -aux\n\n-A ：所有的进程均显示出来，与 -e 具有同样的效用\n-a ：显示现行终端机下的所有进程，包括其他用户的进程\n-u ：以用户为主的进程状态\nx ：通常与 a 这个参数一起使用，可列出较完整信息\n\n```\n\n### du  \n查看目录大小 `du -h /home`带有单位显示目录信息\n\n### df\n查看磁盘大小 `df -h `带有单位显示磁盘信息\n\n### ifconfig  \n查看网络情况\n\n### ping\n测试网络连通\n\n### netstat \n显示网络状态信息\n\n### man  \n命令帮助文档如：`man ls`\n\n### clear\n清屏\n\n### alias\n对命令重命名\n\n```\nalias l=\"ls\" \n``` \n\n### kill   \n杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。\n","source":"_posts/linux/system.md","raw":"---\ntitle: 系统管理指令\ndate: 2018-7-2 13:28:25\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n\n### stat  \n显示指定文件的详细信息\n\n### who\n显示在线登陆用户\n\n### whoami\n显示当前操作用户\n\n### hostname\n显示主机名\n\n### uname\n显示系统信息\n\n### top  \n动态显示当前耗费资源最多进程信息\n\n### ps  \n查看进程状态 \n\n```\nps -aux\n\n-A ：所有的进程均显示出来，与 -e 具有同样的效用\n-a ：显示现行终端机下的所有进程，包括其他用户的进程\n-u ：以用户为主的进程状态\nx ：通常与 a 这个参数一起使用，可列出较完整信息\n\n```\n\n### du  \n查看目录大小 `du -h /home`带有单位显示目录信息\n\n### df\n查看磁盘大小 `df -h `带有单位显示磁盘信息\n\n### ifconfig  \n查看网络情况\n\n### ping\n测试网络连通\n\n### netstat \n显示网络状态信息\n\n### man  \n命令帮助文档如：`man ls`\n\n### clear\n清屏\n\n### alias\n对命令重命名\n\n```\nalias l=\"ls\" \n``` \n\n### kill   \n杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。\n","slug":"linux/system","published":1,"updated":"2019-08-26T16:46:27.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8e0030kuu6a3501240","content":"<h3 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h3><p>显示指定文件的详细信息</p>\n<h3 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h3><p>显示在线登陆用户</p>\n<h3 id=\"whoami\"><a href=\"#whoami\" class=\"headerlink\" title=\"whoami\"></a>whoami</h3><p>显示当前操作用户</p>\n<h3 id=\"hostname\"><a href=\"#hostname\" class=\"headerlink\" title=\"hostname\"></a>hostname</h3><p>显示主机名</p>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a>uname</h3><p>显示系统信息</p>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><p>动态显示当前耗费资源最多进程信息</p>\n<h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><p>查看进程状态 </p>\n<pre><code>ps -aux\n\n-A ：所有的进程均显示出来，与 -e 具有同样的效用\n-a ：显示现行终端机下的所有进程，包括其他用户的进程\n-u ：以用户为主的进程状态\nx ：通常与 a 这个参数一起使用，可列出较完整信息\n</code></pre><h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><p>查看目录大小 <code>du -h /home</code>带有单位显示目录信息</p>\n<h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><p>查看磁盘大小 <code>df -h</code>带有单位显示磁盘信息</p>\n<h3 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h3><p>查看网络情况</p>\n<h3 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h3><p>测试网络连通</p>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p>显示网络状态信息</p>\n<h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><p>命令帮助文档如：<code>man ls</code></p>\n<h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h3><p>清屏</p>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>对命令重命名</p>\n<pre><code>alias l=&quot;ls&quot; </code></pre><h3 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h3><p>杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h3><p>显示指定文件的详细信息</p>\n<h3 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h3><p>显示在线登陆用户</p>\n<h3 id=\"whoami\"><a href=\"#whoami\" class=\"headerlink\" title=\"whoami\"></a>whoami</h3><p>显示当前操作用户</p>\n<h3 id=\"hostname\"><a href=\"#hostname\" class=\"headerlink\" title=\"hostname\"></a>hostname</h3><p>显示主机名</p>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a>uname</h3><p>显示系统信息</p>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><p>动态显示当前耗费资源最多进程信息</p>\n<h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><p>查看进程状态 </p>\n<pre><code>ps -aux\n\n-A ：所有的进程均显示出来，与 -e 具有同样的效用\n-a ：显示现行终端机下的所有进程，包括其他用户的进程\n-u ：以用户为主的进程状态\nx ：通常与 a 这个参数一起使用，可列出较完整信息\n</code></pre><h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><p>查看目录大小 <code>du -h /home</code>带有单位显示目录信息</p>\n<h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><p>查看磁盘大小 <code>df -h</code>带有单位显示磁盘信息</p>\n<h3 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h3><p>查看网络情况</p>\n<h3 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h3><p>测试网络连通</p>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p>显示网络状态信息</p>\n<h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a>man</h3><p>命令帮助文档如：<code>man ls</code></p>\n<h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h3><p>清屏</p>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>对命令重命名</p>\n<pre><code>alias l=&quot;ls&quot; </code></pre><h3 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h3><p>杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</p>\n"},{"title":"用户及用户组管理","date":"2018-07-22T10:02:45.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 查看存储用户账号\n\n```\ncat /etc/passwd\n\n输出的结构\n用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell\n```\n\n### 查看存储组账号\n\n```\ncat /etc/group  \n```\n\n### 查看存储用户账号的密码\n\n```\ncat /etc/shadow   \n\n输出结构\n登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志\n```\n  \n### 查看存储用户组账号的密码\n\n```\ncat /etc/gshadow  \n```\n\n\n### 建立用户帐号\n\n```\n参数\n-c comment 指定一段注释性描述。\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n-g 用户组 指定用户所属的用户组。\n-G 用户组，用户组 指定用户所属的附加组。\n-s Shell文件 指定用户的登录Shell。\n-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\nuseradd renbo  添加一般用户\n\nuseradd -g root renbo  为添加用户指定用户组\n\nuseradd -r renbo  创建系统用户\n\nuseradd -d /home renbo  为新添加的用户指定home目录\n\nuseradd caojh -u 544  建立用户且制定ID\n```\n\n### 删除用户帐号\n\n```\nuserdel  同建立账号用法相同 \n```\n\n### 新建组\n\n```\ngroupadd 组名\n```\n\n### 删除组\n\n```\ngroupdel 组名\n```\n\n### 修改账号\n\n```\nusermod 选项 用户名和useradd用法相同\n```\n\n### 指定口令\n\n用户口令管理给root设置密码(用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令)\n\n```\npasswd root \n\n-l 锁定口令，即禁用账号。\n-u 口令解锁。\n-d 使账号无口令。\n-f 强迫用户下次登录时修改口令。\n```\n\n### 切换用户\n\n```\nsu root \n\nsu - root   切换到root用户改变环境变量\n\nsu user   切换用户，加载配置文件.bashrc\n\nsu - user 切换用户，加载配置文件/etc/profile ，加载bash_profile\n```\n\n\n### 系统环境变量文件\n\n```\ncat /etc/profile 查看\n\nvim /etc/profile 编辑\n```\n\n### 用户环境变量文件\n\n```\ncat /etc/bash_profile 查看\n\nvim /etc/bash_profile 编辑\n\ncat .bashrc\n```\n\n\n### 更改文件的用户及用户组\n\n```\nsudo chown [-R] owner[:group] {File|Directory}\n\n例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop\n\n```\n\n### 切换此文件所属的用户及组\n\n```\nsudo chown root:root jdk-7u21-linux-i586.tar.gz\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/linux/user.md","raw":"---\ntitle: 用户及用户组管理\ndate: 2018-7-22 18:02:45\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n### 查看存储用户账号\n\n```\ncat /etc/passwd\n\n输出的结构\n用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell\n```\n\n### 查看存储组账号\n\n```\ncat /etc/group  \n```\n\n### 查看存储用户账号的密码\n\n```\ncat /etc/shadow   \n\n输出结构\n登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志\n```\n  \n### 查看存储用户组账号的密码\n\n```\ncat /etc/gshadow  \n```\n\n\n### 建立用户帐号\n\n```\n参数\n-c comment 指定一段注释性描述。\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n-g 用户组 指定用户所属的用户组。\n-G 用户组，用户组 指定用户所属的附加组。\n-s Shell文件 指定用户的登录Shell。\n-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\nuseradd renbo  添加一般用户\n\nuseradd -g root renbo  为添加用户指定用户组\n\nuseradd -r renbo  创建系统用户\n\nuseradd -d /home renbo  为新添加的用户指定home目录\n\nuseradd caojh -u 544  建立用户且制定ID\n```\n\n### 删除用户帐号\n\n```\nuserdel  同建立账号用法相同 \n```\n\n### 新建组\n\n```\ngroupadd 组名\n```\n\n### 删除组\n\n```\ngroupdel 组名\n```\n\n### 修改账号\n\n```\nusermod 选项 用户名和useradd用法相同\n```\n\n### 指定口令\n\n用户口令管理给root设置密码(用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令)\n\n```\npasswd root \n\n-l 锁定口令，即禁用账号。\n-u 口令解锁。\n-d 使账号无口令。\n-f 强迫用户下次登录时修改口令。\n```\n\n### 切换用户\n\n```\nsu root \n\nsu - root   切换到root用户改变环境变量\n\nsu user   切换用户，加载配置文件.bashrc\n\nsu - user 切换用户，加载配置文件/etc/profile ，加载bash_profile\n```\n\n\n### 系统环境变量文件\n\n```\ncat /etc/profile 查看\n\nvim /etc/profile 编辑\n```\n\n### 用户环境变量文件\n\n```\ncat /etc/bash_profile 查看\n\nvim /etc/bash_profile 编辑\n\ncat .bashrc\n```\n\n\n### 更改文件的用户及用户组\n\n```\nsudo chown [-R] owner[:group] {File|Directory}\n\n例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop\n\n```\n\n### 切换此文件所属的用户及组\n\n```\nsudo chown root:root jdk-7u21-linux-i586.tar.gz\n```\n\n\n\n\n\n\n\n\n\n","slug":"linux/user","published":1,"updated":"2019-08-26T16:46:27.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8g0033kuu6stcipna6","content":"<h3 id=\"查看存储用户账号\"><a href=\"#查看存储用户账号\" class=\"headerlink\" title=\"查看存储用户账号\"></a>查看存储用户账号</h3><pre><code>cat /etc/passwd\n\n输出的结构\n用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></pre><h3 id=\"查看存储组账号\"><a href=\"#查看存储组账号\" class=\"headerlink\" title=\"查看存储组账号\"></a>查看存储组账号</h3><pre><code>cat /etc/group  </code></pre><h3 id=\"查看存储用户账号的密码\"><a href=\"#查看存储用户账号的密码\" class=\"headerlink\" title=\"查看存储用户账号的密码\"></a>查看存储用户账号的密码</h3><pre><code>cat /etc/shadow   \n\n输出结构\n登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></pre><h3 id=\"查看存储用户组账号的密码\"><a href=\"#查看存储用户组账号的密码\" class=\"headerlink\" title=\"查看存储用户组账号的密码\"></a>查看存储用户组账号的密码</h3><pre><code>cat /etc/gshadow  </code></pre><h3 id=\"建立用户帐号\"><a href=\"#建立用户帐号\" class=\"headerlink\" title=\"建立用户帐号\"></a>建立用户帐号</h3><pre><code>参数\n-c comment 指定一段注释性描述。\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n-g 用户组 指定用户所属的用户组。\n-G 用户组，用户组 指定用户所属的附加组。\n-s Shell文件 指定用户的登录Shell。\n-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\nuseradd renbo  添加一般用户\n\nuseradd -g root renbo  为添加用户指定用户组\n\nuseradd -r renbo  创建系统用户\n\nuseradd -d /home renbo  为新添加的用户指定home目录\n\nuseradd caojh -u 544  建立用户且制定ID</code></pre><h3 id=\"删除用户帐号\"><a href=\"#删除用户帐号\" class=\"headerlink\" title=\"删除用户帐号\"></a>删除用户帐号</h3><pre><code>userdel  同建立账号用法相同 </code></pre><h3 id=\"新建组\"><a href=\"#新建组\" class=\"headerlink\" title=\"新建组\"></a>新建组</h3><pre><code>groupadd 组名</code></pre><h3 id=\"删除组\"><a href=\"#删除组\" class=\"headerlink\" title=\"删除组\"></a>删除组</h3><pre><code>groupdel 组名</code></pre><h3 id=\"修改账号\"><a href=\"#修改账号\" class=\"headerlink\" title=\"修改账号\"></a>修改账号</h3><pre><code>usermod 选项 用户名和useradd用法相同</code></pre><h3 id=\"指定口令\"><a href=\"#指定口令\" class=\"headerlink\" title=\"指定口令\"></a>指定口令</h3><p>用户口令管理给root设置密码(用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令)</p>\n<pre><code>passwd root \n\n-l 锁定口令，即禁用账号。\n-u 口令解锁。\n-d 使账号无口令。\n-f 强迫用户下次登录时修改口令。</code></pre><h3 id=\"切换用户\"><a href=\"#切换用户\" class=\"headerlink\" title=\"切换用户\"></a>切换用户</h3><pre><code>su root \n\nsu - root   切换到root用户改变环境变量\n\nsu user   切换用户，加载配置文件.bashrc\n\nsu - user 切换用户，加载配置文件/etc/profile ，加载bash_profile</code></pre><h3 id=\"系统环境变量文件\"><a href=\"#系统环境变量文件\" class=\"headerlink\" title=\"系统环境变量文件\"></a>系统环境变量文件</h3><pre><code>cat /etc/profile 查看\n\nvim /etc/profile 编辑</code></pre><h3 id=\"用户环境变量文件\"><a href=\"#用户环境变量文件\" class=\"headerlink\" title=\"用户环境变量文件\"></a>用户环境变量文件</h3><pre><code>cat /etc/bash_profile 查看\n\nvim /etc/bash_profile 编辑\n\ncat .bashrc</code></pre><h3 id=\"更改文件的用户及用户组\"><a href=\"#更改文件的用户及用户组\" class=\"headerlink\" title=\"更改文件的用户及用户组\"></a>更改文件的用户及用户组</h3><pre><code>sudo chown [-R] owner[:group] {File|Directory}\n\n例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop\n</code></pre><h3 id=\"切换此文件所属的用户及组\"><a href=\"#切换此文件所属的用户及组\" class=\"headerlink\" title=\"切换此文件所属的用户及组\"></a>切换此文件所属的用户及组</h3><pre><code>sudo chown root:root jdk-7u21-linux-i586.tar.gz</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"查看存储用户账号\"><a href=\"#查看存储用户账号\" class=\"headerlink\" title=\"查看存储用户账号\"></a>查看存储用户账号</h3><pre><code>cat /etc/passwd\n\n输出的结构\n用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></pre><h3 id=\"查看存储组账号\"><a href=\"#查看存储组账号\" class=\"headerlink\" title=\"查看存储组账号\"></a>查看存储组账号</h3><pre><code>cat /etc/group  </code></pre><h3 id=\"查看存储用户账号的密码\"><a href=\"#查看存储用户账号的密码\" class=\"headerlink\" title=\"查看存储用户账号的密码\"></a>查看存储用户账号的密码</h3><pre><code>cat /etc/shadow   \n\n输出结构\n登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></pre><h3 id=\"查看存储用户组账号的密码\"><a href=\"#查看存储用户组账号的密码\" class=\"headerlink\" title=\"查看存储用户组账号的密码\"></a>查看存储用户组账号的密码</h3><pre><code>cat /etc/gshadow  </code></pre><h3 id=\"建立用户帐号\"><a href=\"#建立用户帐号\" class=\"headerlink\" title=\"建立用户帐号\"></a>建立用户帐号</h3><pre><code>参数\n-c comment 指定一段注释性描述。\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n-g 用户组 指定用户所属的用户组。\n-G 用户组，用户组 指定用户所属的附加组。\n-s Shell文件 指定用户的登录Shell。\n-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。\n\nuseradd renbo  添加一般用户\n\nuseradd -g root renbo  为添加用户指定用户组\n\nuseradd -r renbo  创建系统用户\n\nuseradd -d /home renbo  为新添加的用户指定home目录\n\nuseradd caojh -u 544  建立用户且制定ID</code></pre><h3 id=\"删除用户帐号\"><a href=\"#删除用户帐号\" class=\"headerlink\" title=\"删除用户帐号\"></a>删除用户帐号</h3><pre><code>userdel  同建立账号用法相同 </code></pre><h3 id=\"新建组\"><a href=\"#新建组\" class=\"headerlink\" title=\"新建组\"></a>新建组</h3><pre><code>groupadd 组名</code></pre><h3 id=\"删除组\"><a href=\"#删除组\" class=\"headerlink\" title=\"删除组\"></a>删除组</h3><pre><code>groupdel 组名</code></pre><h3 id=\"修改账号\"><a href=\"#修改账号\" class=\"headerlink\" title=\"修改账号\"></a>修改账号</h3><pre><code>usermod 选项 用户名和useradd用法相同</code></pre><h3 id=\"指定口令\"><a href=\"#指定口令\" class=\"headerlink\" title=\"指定口令\"></a>指定口令</h3><p>用户口令管理给root设置密码(用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令)</p>\n<pre><code>passwd root \n\n-l 锁定口令，即禁用账号。\n-u 口令解锁。\n-d 使账号无口令。\n-f 强迫用户下次登录时修改口令。</code></pre><h3 id=\"切换用户\"><a href=\"#切换用户\" class=\"headerlink\" title=\"切换用户\"></a>切换用户</h3><pre><code>su root \n\nsu - root   切换到root用户改变环境变量\n\nsu user   切换用户，加载配置文件.bashrc\n\nsu - user 切换用户，加载配置文件/etc/profile ，加载bash_profile</code></pre><h3 id=\"系统环境变量文件\"><a href=\"#系统环境变量文件\" class=\"headerlink\" title=\"系统环境变量文件\"></a>系统环境变量文件</h3><pre><code>cat /etc/profile 查看\n\nvim /etc/profile 编辑</code></pre><h3 id=\"用户环境变量文件\"><a href=\"#用户环境变量文件\" class=\"headerlink\" title=\"用户环境变量文件\"></a>用户环境变量文件</h3><pre><code>cat /etc/bash_profile 查看\n\nvim /etc/bash_profile 编辑\n\ncat .bashrc</code></pre><h3 id=\"更改文件的用户及用户组\"><a href=\"#更改文件的用户及用户组\" class=\"headerlink\" title=\"更改文件的用户及用户组\"></a>更改文件的用户及用户组</h3><pre><code>sudo chown [-R] owner[:group] {File|Directory}\n\n例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop\n</code></pre><h3 id=\"切换此文件所属的用户及组\"><a href=\"#切换此文件所属的用户及组\" class=\"headerlink\" title=\"切换此文件所属的用户及组\"></a>切换此文件所属的用户及组</h3><pre><code>sudo chown root:root jdk-7u21-linux-i586.tar.gz</code></pre>"},{"title":"Error 异常模块","date":"2019-04-14T15:05:11.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n错误处理是所有应用程序的重要组成部分。要抛出异常，请使用 JavaScript 的 throw  关键字。在 JavaScript 中，通常使用 Error 对象和消息来表示错误<br/>\n\n**捕获异常try/catch**<br/>\n```\n  function fun () {\n    throw new Error(\"error!\");\n  }\n  try {\n    fun();\n  } catch (e) {\n    console.log(e.message);\n  }\n```\n\n**finally关键字**<br/>\n\ncatch部分只有在抛出错误时才执行。finally部分仍然执行，尽管在try部分中抛出了任何错误<br/>\n\n```\ntry { \n  throw new Error(\"throw error\"); \n} catch (e) { \n  console.log(e.message); \n} finally { \n  console.log(\"不论抛出什么错误，我依然会执行\"); \n} \n```\n\n\n\n\n","source":"_posts/node/error.md","raw":"---\ntitle: Error 异常模块\ndate:  2019-04-14 23:05:11\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\n错误处理是所有应用程序的重要组成部分。要抛出异常，请使用 JavaScript 的 throw  关键字。在 JavaScript 中，通常使用 Error 对象和消息来表示错误<br/>\n\n**捕获异常try/catch**<br/>\n```\n  function fun () {\n    throw new Error(\"error!\");\n  }\n  try {\n    fun();\n  } catch (e) {\n    console.log(e.message);\n  }\n```\n\n**finally关键字**<br/>\n\ncatch部分只有在抛出错误时才执行。finally部分仍然执行，尽管在try部分中抛出了任何错误<br/>\n\n```\ntry { \n  throw new Error(\"throw error\"); \n} catch (e) { \n  console.log(e.message); \n} finally { \n  console.log(\"不论抛出什么错误，我依然会执行\"); \n} \n```\n\n\n\n\n","slug":"node/error","published":1,"updated":"2019-08-26T16:46:27.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8h0037kuu6xe75cq10","content":"<p>错误处理是所有应用程序的重要组成部分。要抛出异常，请使用 JavaScript 的 throw  关键字。在 JavaScript 中，通常使用 Error 对象和消息来表示错误<br></p>\n<p><strong>捕获异常try/catch</strong><br></p>\n<pre><code>  function fun () {\n    throw new Error(&quot;error!&quot;);\n  }\n  try {\n    fun();\n  } catch (e) {\n    console.log(e.message);\n  }</code></pre><p><strong>finally关键字</strong><br></p>\n<p>catch部分只有在抛出错误时才执行。finally部分仍然执行，尽管在try部分中抛出了任何错误<br></p>\n<pre><code>try { \n  throw new Error(&quot;throw error&quot;); \n} catch (e) { \n  console.log(e.message); \n} finally { \n  console.log(&quot;不论抛出什么错误，我依然会执行&quot;); \n} </code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>错误处理是所有应用程序的重要组成部分。要抛出异常，请使用 JavaScript 的 throw  关键字。在 JavaScript 中，通常使用 Error 对象和消息来表示错误<br></p>\n<p><strong>捕获异常try/catch</strong><br></p>\n<pre><code>  function fun () {\n    throw new Error(&quot;error!&quot;);\n  }\n  try {\n    fun();\n  } catch (e) {\n    console.log(e.message);\n  }</code></pre><p><strong>finally关键字</strong><br></p>\n<p>catch部分只有在抛出错误时才执行。finally部分仍然执行，尽管在try部分中抛出了任何错误<br></p>\n<pre><code>try { \n  throw new Error(&quot;throw error&quot;); \n} catch (e) { \n  console.log(e.message); \n} finally { \n  console.log(&quot;不论抛出什么错误，我依然会执行&quot;); \n} </code></pre>"},{"title":"crypto 加密模块","date":"2019-04-08T13:12:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\ncrypto 模块也是核心模块之一，提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。上文中提到过核心 C/C++ 模块运行速度比其他模块要快。<br/>\n\n**MD5和SHA1**<br/>\nMD5是一种常用的哈希算法，用于给任意数据一个“签名”。这个签名通常用一个十六进制的字符串表示：<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n\n// 创建 Hash 实例\nconst hash = crypto.createHash('md5');\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhash.update('Hello, nodejs!');\n\n// encoding 值可以是 'hex', 'latin1' 或者 'base64'. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hash.digest('hex'));\n\nHash 对象在 hash.digest() 方法调用之后不能再次被使用。多次的调用会引发错误并抛出\n\n```\n\n**Hmac**<br/>\nHmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥：<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n\n// 创建 hmac 实例\nconst hmac = crypto.createHmac('sha256', 'secret-key');\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhmac.update('Hello, nodejs!');\n\n// encoding 值可以是 'hex', 'latin1' 或者 'base64'. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hmac.digest('hex'));\n\n只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，可以把Hmac理解为用随机数“增强”的哈希算法\n```\n\n**AES**<br/>\nAES是一种常用的对称加密算法，加解密都用同一个密钥。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n// 加密函数\nfunction aesEncrypt(data, key) {\n  const cipher = crypto.createCipher('aes192', key);\n  let crypted = cipher.update(data, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return crypted;\n}\n// 解密函数\nfunction aesDecrypt(encrypted, key) {\n  const decipher = crypto.createDecipher('aes192', key);\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\nlet data = 'Hello, this is a secret message!';\nlet key = 'Password!';\nlet encrypted = aesEncrypt(data, key);\nlet decrypted = aesDecrypt(encrypted, key);\n\nconsole.log('Plain text: ' + data);\nconsole.log('Encrypted text: ' + encrypted);\nconsole.log('Decrypted text: ' + decrypted);\n```\n运行结果如下：<br/>\n```\nPlain text: Hello, this is a secret message!\nEncrypted text: 8a944d97bdabc157a5b7a40cb180e7...\nDecrypted text: Hello, this is a secret message!\n```\n\n**Diffie-Hellman**<br/>\n\nDH算法是一种密钥交换协议，它可以让双方在不泄漏密钥的情况下协商出一个密钥来。DH算法基于离散对数数学原理<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n\n// 进行加密交换 crypto_a\nlet crypto_a = crypto.createDiffieHellman(512);\nlet crypto_a_keys = crypto_a.generateKeys();\n\n\nlet prime = crypto_a.getPrime();\nlet generator = crypto_a.getGenerator();\n\nconsole.log('Prime: ' + prime.toString('hex'));\nconsole.log('Generator: ' + generator.toString('hex'));\n\n\n// 进行加密交换 crypto_b\nlet crypto_b = crypto.createDiffieHellman(prime, generator);\nlet crypto_b_keys = crypto_b.generateKeys();\n\n\n// 交换生成密钥\nlet a_secret = crypto_a.computeSecret(crypto_b_keys);\nlet b_secret = crypto_b.computeSecret(crypto_a_keys);\n\n```\n\n**RSA**\n\nRSA算法是一种非对称加密算法，即由一个私钥和一个公钥构成的密钥对，通过私钥加密，公钥解密，或者通过公钥加密，私钥解密。其中，公钥可以公开，私钥必须保密<br/>\n\n1、生成一个RSA密钥对：<br/>\n```\nopenssl genrsa -aes256 -out rsa-key.pem 2048\n```\n2、通过上面的rsa-key.pem加密文件，导出原始的私钥<br/>\n```\nopenssl rsa -in rsa-key.pem -outform PEM -out rsa-prv.pem\n```\n3、命令导出原始的公钥<br/>\n```\nopenssl rsa -in rsa-key.pem -outform PEM -pubout -out rsa-pub.pem\n这样，我们就准备好了原始私钥文件rsa-prv.pem和原始公钥文件rsa-pub.pem，编码格式均为PEM\n```\n\n\n使用crypto模块提供的方法，即可实现非对称加解密<br/>\n\n```\nconst fs = require('fs');\nconst crypto = require('crypto');\n\n// 从文件加载key:\nfunction loadKey(file) {\n  // key实际上就是PEM编码的字符串:\n  return fs.readFileSync(file, 'utf8');\n}\n\nlet prvKey = loadKey('./rsa-prv.pem');\nlet pubKey = loadKey('./rsa-pub.pem');\nlet message = 'Hello, world!';\n\n// 使用私钥加密:\nlet enc_by_prv = crypto.privateEncrypt(prvKey, Buffer.from(message, 'utf8'));\nconsole.log('encrypted by private key: ' + enc_by_prv.toString('hex'));\n\n\nlet dec_by_pub = crypto.publicDecrypt(pubKey, enc_by_prv);\nconsole.log('decrypted by public key: ' + dec_by_pub.toString('utf8'));\n\n\n执行后，可以得到解密后的消息，与原始消息相同。\n\n接下来我们使用公钥加密，私钥解密：\n\n// 使用公钥加密:\nlet enc_by_pub = crypto.publicEncrypt(pubKey, Buffer.from(message, 'utf8'));\nconsole.log('encrypted by public key: ' + enc_by_pub.toString('hex'));\n\n// 使用私钥解密:\nlet dec_by_prv = crypto.privateDecrypt(prvKey, enc_by_pub);\nconsole.log('decrypted by private key: ' + dec_by_prv.toString('utf8'));\n执行得到的解密后的消息仍与原始消息相同。\n\n```\n\n**证书**\ncrypto模块也可以处理数字证书。数字证书通常用在SSL连接，也就是Web的https连接。一般情况下，https连接只需要处理服务器端的单向认证，如无特殊需求（例如自己作为Root给客户发认证证书），建议用反向代理服务器如Nginx等Web服务器去处理证书。<br/>\n\n\n## 更多参考<br/>\n<a href='https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501504929883d11d84a1541c6907eefd792c0da51000'>廖雪峰老师的Crypto</a>\n\n<a href='http://nodejs.cn/api/crypto.html'>Node Api crypto 加密模块 </a>\n","source":"_posts/node/crypto.md","raw":"---\ntitle: crypto 加密模块\ndate:  2019-04-08 21:12:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\ncrypto 模块也是核心模块之一，提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。上文中提到过核心 C/C++ 模块运行速度比其他模块要快。<br/>\n\n**MD5和SHA1**<br/>\nMD5是一种常用的哈希算法，用于给任意数据一个“签名”。这个签名通常用一个十六进制的字符串表示：<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n\n// 创建 Hash 实例\nconst hash = crypto.createHash('md5');\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhash.update('Hello, nodejs!');\n\n// encoding 值可以是 'hex', 'latin1' 或者 'base64'. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hash.digest('hex'));\n\nHash 对象在 hash.digest() 方法调用之后不能再次被使用。多次的调用会引发错误并抛出\n\n```\n\n**Hmac**<br/>\nHmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥：<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n\n// 创建 hmac 实例\nconst hmac = crypto.createHmac('sha256', 'secret-key');\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhmac.update('Hello, nodejs!');\n\n// encoding 值可以是 'hex', 'latin1' 或者 'base64'. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hmac.digest('hex'));\n\n只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，可以把Hmac理解为用随机数“增强”的哈希算法\n```\n\n**AES**<br/>\nAES是一种常用的对称加密算法，加解密都用同一个密钥。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n// 加密函数\nfunction aesEncrypt(data, key) {\n  const cipher = crypto.createCipher('aes192', key);\n  let crypted = cipher.update(data, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return crypted;\n}\n// 解密函数\nfunction aesDecrypt(encrypted, key) {\n  const decipher = crypto.createDecipher('aes192', key);\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\nlet data = 'Hello, this is a secret message!';\nlet key = 'Password!';\nlet encrypted = aesEncrypt(data, key);\nlet decrypted = aesDecrypt(encrypted, key);\n\nconsole.log('Plain text: ' + data);\nconsole.log('Encrypted text: ' + encrypted);\nconsole.log('Decrypted text: ' + decrypted);\n```\n运行结果如下：<br/>\n```\nPlain text: Hello, this is a secret message!\nEncrypted text: 8a944d97bdabc157a5b7a40cb180e7...\nDecrypted text: Hello, this is a secret message!\n```\n\n**Diffie-Hellman**<br/>\n\nDH算法是一种密钥交换协议，它可以让双方在不泄漏密钥的情况下协商出一个密钥来。DH算法基于离散对数数学原理<br/>\n\n```\n// 引入加密模块\nconst crypto = require('crypto');\n\n// 进行加密交换 crypto_a\nlet crypto_a = crypto.createDiffieHellman(512);\nlet crypto_a_keys = crypto_a.generateKeys();\n\n\nlet prime = crypto_a.getPrime();\nlet generator = crypto_a.getGenerator();\n\nconsole.log('Prime: ' + prime.toString('hex'));\nconsole.log('Generator: ' + generator.toString('hex'));\n\n\n// 进行加密交换 crypto_b\nlet crypto_b = crypto.createDiffieHellman(prime, generator);\nlet crypto_b_keys = crypto_b.generateKeys();\n\n\n// 交换生成密钥\nlet a_secret = crypto_a.computeSecret(crypto_b_keys);\nlet b_secret = crypto_b.computeSecret(crypto_a_keys);\n\n```\n\n**RSA**\n\nRSA算法是一种非对称加密算法，即由一个私钥和一个公钥构成的密钥对，通过私钥加密，公钥解密，或者通过公钥加密，私钥解密。其中，公钥可以公开，私钥必须保密<br/>\n\n1、生成一个RSA密钥对：<br/>\n```\nopenssl genrsa -aes256 -out rsa-key.pem 2048\n```\n2、通过上面的rsa-key.pem加密文件，导出原始的私钥<br/>\n```\nopenssl rsa -in rsa-key.pem -outform PEM -out rsa-prv.pem\n```\n3、命令导出原始的公钥<br/>\n```\nopenssl rsa -in rsa-key.pem -outform PEM -pubout -out rsa-pub.pem\n这样，我们就准备好了原始私钥文件rsa-prv.pem和原始公钥文件rsa-pub.pem，编码格式均为PEM\n```\n\n\n使用crypto模块提供的方法，即可实现非对称加解密<br/>\n\n```\nconst fs = require('fs');\nconst crypto = require('crypto');\n\n// 从文件加载key:\nfunction loadKey(file) {\n  // key实际上就是PEM编码的字符串:\n  return fs.readFileSync(file, 'utf8');\n}\n\nlet prvKey = loadKey('./rsa-prv.pem');\nlet pubKey = loadKey('./rsa-pub.pem');\nlet message = 'Hello, world!';\n\n// 使用私钥加密:\nlet enc_by_prv = crypto.privateEncrypt(prvKey, Buffer.from(message, 'utf8'));\nconsole.log('encrypted by private key: ' + enc_by_prv.toString('hex'));\n\n\nlet dec_by_pub = crypto.publicDecrypt(pubKey, enc_by_prv);\nconsole.log('decrypted by public key: ' + dec_by_pub.toString('utf8'));\n\n\n执行后，可以得到解密后的消息，与原始消息相同。\n\n接下来我们使用公钥加密，私钥解密：\n\n// 使用公钥加密:\nlet enc_by_pub = crypto.publicEncrypt(pubKey, Buffer.from(message, 'utf8'));\nconsole.log('encrypted by public key: ' + enc_by_pub.toString('hex'));\n\n// 使用私钥解密:\nlet dec_by_prv = crypto.privateDecrypt(prvKey, enc_by_pub);\nconsole.log('decrypted by private key: ' + dec_by_prv.toString('utf8'));\n执行得到的解密后的消息仍与原始消息相同。\n\n```\n\n**证书**\ncrypto模块也可以处理数字证书。数字证书通常用在SSL连接，也就是Web的https连接。一般情况下，https连接只需要处理服务器端的单向认证，如无特殊需求（例如自己作为Root给客户发认证证书），建议用反向代理服务器如Nginx等Web服务器去处理证书。<br/>\n\n\n## 更多参考<br/>\n<a href='https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501504929883d11d84a1541c6907eefd792c0da51000'>廖雪峰老师的Crypto</a>\n\n<a href='http://nodejs.cn/api/crypto.html'>Node Api crypto 加密模块 </a>\n","slug":"node/crypto","published":1,"updated":"2019-08-26T16:46:27.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8j0039kuu6ob0iaop1","content":"<p>crypto 模块也是核心模块之一，提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。上文中提到过核心 C/C++ 模块运行速度比其他模块要快。<br></p>\n<p><strong>MD5和SHA1</strong><br><br>MD5是一种常用的哈希算法，用于给任意数据一个“签名”。这个签名通常用一个十六进制的字符串表示：<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n\n// 创建 Hash 实例\nconst hash = crypto.createHash(&#39;md5&#39;);\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhash.update(&#39;Hello, nodejs!&#39;);\n\n// encoding 值可以是 &#39;hex&#39;, &#39;latin1&#39; 或者 &#39;base64&#39;. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hash.digest(&#39;hex&#39;));\n\nHash 对象在 hash.digest() 方法调用之后不能再次被使用。多次的调用会引发错误并抛出\n</code></pre><p><strong>Hmac</strong><br><br>Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥：<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n\n// 创建 hmac 实例\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;secret-key&#39;);\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhmac.update(&#39;Hello, nodejs!&#39;);\n\n// encoding 值可以是 &#39;hex&#39;, &#39;latin1&#39; 或者 &#39;base64&#39;. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hmac.digest(&#39;hex&#39;));\n\n只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，可以把Hmac理解为用随机数“增强”的哈希算法</code></pre><p><strong>AES</strong><br><br>AES是一种常用的对称加密算法，加解密都用同一个密钥。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n// 加密函数\nfunction aesEncrypt(data, key) {\n  const cipher = crypto.createCipher(&#39;aes192&#39;, key);\n  let crypted = cipher.update(data, &#39;utf8&#39;, &#39;hex&#39;);\n  crypted += cipher.final(&#39;hex&#39;);\n  return crypted;\n}\n// 解密函数\nfunction aesDecrypt(encrypted, key) {\n  const decipher = crypto.createDecipher(&#39;aes192&#39;, key);\n  let decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\n  decrypted += decipher.final(&#39;utf8&#39;);\n  return decrypted;\n}\n\nlet data = &#39;Hello, this is a secret message!&#39;;\nlet key = &#39;Password!&#39;;\nlet encrypted = aesEncrypt(data, key);\nlet decrypted = aesDecrypt(encrypted, key);\n\nconsole.log(&#39;Plain text: &#39; + data);\nconsole.log(&#39;Encrypted text: &#39; + encrypted);\nconsole.log(&#39;Decrypted text: &#39; + decrypted);</code></pre><p>运行结果如下：<br></p>\n<pre><code>Plain text: Hello, this is a secret message!\nEncrypted text: 8a944d97bdabc157a5b7a40cb180e7...\nDecrypted text: Hello, this is a secret message!</code></pre><p><strong>Diffie-Hellman</strong><br></p>\n<p>DH算法是一种密钥交换协议，它可以让双方在不泄漏密钥的情况下协商出一个密钥来。DH算法基于离散对数数学原理<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n\n// 进行加密交换 crypto_a\nlet crypto_a = crypto.createDiffieHellman(512);\nlet crypto_a_keys = crypto_a.generateKeys();\n\n\nlet prime = crypto_a.getPrime();\nlet generator = crypto_a.getGenerator();\n\nconsole.log(&#39;Prime: &#39; + prime.toString(&#39;hex&#39;));\nconsole.log(&#39;Generator: &#39; + generator.toString(&#39;hex&#39;));\n\n\n// 进行加密交换 crypto_b\nlet crypto_b = crypto.createDiffieHellman(prime, generator);\nlet crypto_b_keys = crypto_b.generateKeys();\n\n\n// 交换生成密钥\nlet a_secret = crypto_a.computeSecret(crypto_b_keys);\nlet b_secret = crypto_b.computeSecret(crypto_a_keys);\n</code></pre><p><strong>RSA</strong></p>\n<p>RSA算法是一种非对称加密算法，即由一个私钥和一个公钥构成的密钥对，通过私钥加密，公钥解密，或者通过公钥加密，私钥解密。其中，公钥可以公开，私钥必须保密<br></p>\n<p>1、生成一个RSA密钥对：<br></p>\n<pre><code>openssl genrsa -aes256 -out rsa-key.pem 2048</code></pre><p>2、通过上面的rsa-key.pem加密文件，导出原始的私钥<br></p>\n<pre><code>openssl rsa -in rsa-key.pem -outform PEM -out rsa-prv.pem</code></pre><p>3、命令导出原始的公钥<br></p>\n<pre><code>openssl rsa -in rsa-key.pem -outform PEM -pubout -out rsa-pub.pem\n这样，我们就准备好了原始私钥文件rsa-prv.pem和原始公钥文件rsa-pub.pem，编码格式均为PEM</code></pre><p>使用crypto模块提供的方法，即可实现非对称加解密<br></p>\n<pre><code>const fs = require(&#39;fs&#39;);\nconst crypto = require(&#39;crypto&#39;);\n\n// 从文件加载key:\nfunction loadKey(file) {\n  // key实际上就是PEM编码的字符串:\n  return fs.readFileSync(file, &#39;utf8&#39;);\n}\n\nlet prvKey = loadKey(&#39;./rsa-prv.pem&#39;);\nlet pubKey = loadKey(&#39;./rsa-pub.pem&#39;);\nlet message = &#39;Hello, world!&#39;;\n\n// 使用私钥加密:\nlet enc_by_prv = crypto.privateEncrypt(prvKey, Buffer.from(message, &#39;utf8&#39;));\nconsole.log(&#39;encrypted by private key: &#39; + enc_by_prv.toString(&#39;hex&#39;));\n\n\nlet dec_by_pub = crypto.publicDecrypt(pubKey, enc_by_prv);\nconsole.log(&#39;decrypted by public key: &#39; + dec_by_pub.toString(&#39;utf8&#39;));\n\n\n执行后，可以得到解密后的消息，与原始消息相同。\n\n接下来我们使用公钥加密，私钥解密：\n\n// 使用公钥加密:\nlet enc_by_pub = crypto.publicEncrypt(pubKey, Buffer.from(message, &#39;utf8&#39;));\nconsole.log(&#39;encrypted by public key: &#39; + enc_by_pub.toString(&#39;hex&#39;));\n\n// 使用私钥解密:\nlet dec_by_prv = crypto.privateDecrypt(prvKey, enc_by_pub);\nconsole.log(&#39;decrypted by private key: &#39; + dec_by_prv.toString(&#39;utf8&#39;));\n执行得到的解密后的消息仍与原始消息相同。\n</code></pre><p><strong>证书</strong><br>crypto模块也可以处理数字证书。数字证书通常用在SSL连接，也就是Web的https连接。一般情况下，https连接只需要处理服务器端的单向认证，如无特殊需求（例如自己作为Root给客户发认证证书），建议用反向代理服务器如Nginx等Web服务器去处理证书。<br></p>\n<h2 id=\"更多参考\"><a href=\"#更多参考\" class=\"headerlink\" title=\"更多参考\"></a>更多参考<br></h2><p><a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501504929883d11d84a1541c6907eefd792c0da51000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的Crypto</a></p>\n<p><a href=\"http://nodejs.cn/api/crypto.html\" target=\"_blank\" rel=\"noopener\">Node Api crypto 加密模块 </a></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>crypto 模块也是核心模块之一，提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。上文中提到过核心 C/C++ 模块运行速度比其他模块要快。<br></p>\n<p><strong>MD5和SHA1</strong><br><br>MD5是一种常用的哈希算法，用于给任意数据一个“签名”。这个签名通常用一个十六进制的字符串表示：<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n\n// 创建 Hash 实例\nconst hash = crypto.createHash(&#39;md5&#39;);\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhash.update(&#39;Hello, nodejs!&#39;);\n\n// encoding 值可以是 &#39;hex&#39;, &#39;latin1&#39; 或者 &#39;base64&#39;. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hash.digest(&#39;hex&#39;));\n\nHash 对象在 hash.digest() 方法调用之后不能再次被使用。多次的调用会引发错误并抛出\n</code></pre><p><strong>Hmac</strong><br><br>Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥：<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n\n// 创建 hmac 实例\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;secret-key&#39;);\n\n// 计算后的HMAC摘要 update() 方法默认字符串编码为UTF-8，也可以传入Buffer\nhmac.update(&#39;Hello, nodejs!&#39;);\n\n// encoding 值可以是 &#39;hex&#39;, &#39;latin1&#39; 或者 &#39;base64&#39;. \n  如果encoding 是字符串会被直接返回，其它情况会返回一个 a Buffer.\nconsole.log(hmac.digest(&#39;hex&#39;));\n\n只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，可以把Hmac理解为用随机数“增强”的哈希算法</code></pre><p><strong>AES</strong><br><br>AES是一种常用的对称加密算法，加解密都用同一个密钥。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n// 加密函数\nfunction aesEncrypt(data, key) {\n  const cipher = crypto.createCipher(&#39;aes192&#39;, key);\n  let crypted = cipher.update(data, &#39;utf8&#39;, &#39;hex&#39;);\n  crypted += cipher.final(&#39;hex&#39;);\n  return crypted;\n}\n// 解密函数\nfunction aesDecrypt(encrypted, key) {\n  const decipher = crypto.createDecipher(&#39;aes192&#39;, key);\n  let decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\n  decrypted += decipher.final(&#39;utf8&#39;);\n  return decrypted;\n}\n\nlet data = &#39;Hello, this is a secret message!&#39;;\nlet key = &#39;Password!&#39;;\nlet encrypted = aesEncrypt(data, key);\nlet decrypted = aesDecrypt(encrypted, key);\n\nconsole.log(&#39;Plain text: &#39; + data);\nconsole.log(&#39;Encrypted text: &#39; + encrypted);\nconsole.log(&#39;Decrypted text: &#39; + decrypted);</code></pre><p>运行结果如下：<br></p>\n<pre><code>Plain text: Hello, this is a secret message!\nEncrypted text: 8a944d97bdabc157a5b7a40cb180e7...\nDecrypted text: Hello, this is a secret message!</code></pre><p><strong>Diffie-Hellman</strong><br></p>\n<p>DH算法是一种密钥交换协议，它可以让双方在不泄漏密钥的情况下协商出一个密钥来。DH算法基于离散对数数学原理<br></p>\n<pre><code>// 引入加密模块\nconst crypto = require(&#39;crypto&#39;);\n\n// 进行加密交换 crypto_a\nlet crypto_a = crypto.createDiffieHellman(512);\nlet crypto_a_keys = crypto_a.generateKeys();\n\n\nlet prime = crypto_a.getPrime();\nlet generator = crypto_a.getGenerator();\n\nconsole.log(&#39;Prime: &#39; + prime.toString(&#39;hex&#39;));\nconsole.log(&#39;Generator: &#39; + generator.toString(&#39;hex&#39;));\n\n\n// 进行加密交换 crypto_b\nlet crypto_b = crypto.createDiffieHellman(prime, generator);\nlet crypto_b_keys = crypto_b.generateKeys();\n\n\n// 交换生成密钥\nlet a_secret = crypto_a.computeSecret(crypto_b_keys);\nlet b_secret = crypto_b.computeSecret(crypto_a_keys);\n</code></pre><p><strong>RSA</strong></p>\n<p>RSA算法是一种非对称加密算法，即由一个私钥和一个公钥构成的密钥对，通过私钥加密，公钥解密，或者通过公钥加密，私钥解密。其中，公钥可以公开，私钥必须保密<br></p>\n<p>1、生成一个RSA密钥对：<br></p>\n<pre><code>openssl genrsa -aes256 -out rsa-key.pem 2048</code></pre><p>2、通过上面的rsa-key.pem加密文件，导出原始的私钥<br></p>\n<pre><code>openssl rsa -in rsa-key.pem -outform PEM -out rsa-prv.pem</code></pre><p>3、命令导出原始的公钥<br></p>\n<pre><code>openssl rsa -in rsa-key.pem -outform PEM -pubout -out rsa-pub.pem\n这样，我们就准备好了原始私钥文件rsa-prv.pem和原始公钥文件rsa-pub.pem，编码格式均为PEM</code></pre><p>使用crypto模块提供的方法，即可实现非对称加解密<br></p>\n<pre><code>const fs = require(&#39;fs&#39;);\nconst crypto = require(&#39;crypto&#39;);\n\n// 从文件加载key:\nfunction loadKey(file) {\n  // key实际上就是PEM编码的字符串:\n  return fs.readFileSync(file, &#39;utf8&#39;);\n}\n\nlet prvKey = loadKey(&#39;./rsa-prv.pem&#39;);\nlet pubKey = loadKey(&#39;./rsa-pub.pem&#39;);\nlet message = &#39;Hello, world!&#39;;\n\n// 使用私钥加密:\nlet enc_by_prv = crypto.privateEncrypt(prvKey, Buffer.from(message, &#39;utf8&#39;));\nconsole.log(&#39;encrypted by private key: &#39; + enc_by_prv.toString(&#39;hex&#39;));\n\n\nlet dec_by_pub = crypto.publicDecrypt(pubKey, enc_by_prv);\nconsole.log(&#39;decrypted by public key: &#39; + dec_by_pub.toString(&#39;utf8&#39;));\n\n\n执行后，可以得到解密后的消息，与原始消息相同。\n\n接下来我们使用公钥加密，私钥解密：\n\n// 使用公钥加密:\nlet enc_by_pub = crypto.publicEncrypt(pubKey, Buffer.from(message, &#39;utf8&#39;));\nconsole.log(&#39;encrypted by public key: &#39; + enc_by_pub.toString(&#39;hex&#39;));\n\n// 使用私钥解密:\nlet dec_by_prv = crypto.privateDecrypt(prvKey, enc_by_pub);\nconsole.log(&#39;decrypted by private key: &#39; + dec_by_prv.toString(&#39;utf8&#39;));\n执行得到的解密后的消息仍与原始消息相同。\n</code></pre><p><strong>证书</strong><br>crypto模块也可以处理数字证书。数字证书通常用在SSL连接，也就是Web的https连接。一般情况下，https连接只需要处理服务器端的单向认证，如无特殊需求（例如自己作为Root给客户发认证证书），建议用反向代理服务器如Nginx等Web服务器去处理证书。<br></p>\n<h2 id=\"更多参考\"><a href=\"#更多参考\" class=\"headerlink\" title=\"更多参考\"></a>更多参考<br></h2><p><a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501504929883d11d84a1541c6907eefd792c0da51000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的Crypto</a></p>\n<p><a href=\"http://nodejs.cn/api/crypto.html\" target=\"_blank\" rel=\"noopener\">Node Api crypto 加密模块 </a></p>\n"},{"title":"Linux vim使用","date":"2018-07-28T09:30:45.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### vim三种模式\n命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式\n\n\n### 基本命令\n\n```\n:q  退出\n\n:q! 强制退出\n\n:wq 保存并退出\n\n:set number  显示行号\n\n:set nonumber  隐藏行号\n\n/host  在文档中查找host 按n跳到查找下一个，shift+n查找上一个\n\nyyp  复制光标所在行，并粘贴\n\nh(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)\n```\n\n\n\n","source":"_posts/linux/vim.md","raw":"---\ntitle: Linux vim使用\ndate: 2018-7-28 17:30:45\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Linux\ncategories:\n- Linux\n---\n\n### vim三种模式\n命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式\n\n\n### 基本命令\n\n```\n:q  退出\n\n:q! 强制退出\n\n:wq 保存并退出\n\n:set number  显示行号\n\n:set nonumber  隐藏行号\n\n/host  在文档中查找host 按n跳到查找下一个，shift+n查找上一个\n\nyyp  复制光标所在行，并粘贴\n\nh(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)\n```\n\n\n\n","slug":"linux/vim","published":1,"updated":"2019-08-26T16:46:27.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8k003dkuu6vsvw35ur","content":"<h3 id=\"vim三种模式\"><a href=\"#vim三种模式\" class=\"headerlink\" title=\"vim三种模式\"></a>vim三种模式</h3><p>命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><pre><code>:q  退出\n\n:q! 强制退出\n\n:wq 保存并退出\n\n:set number  显示行号\n\n:set nonumber  隐藏行号\n\n/host  在文档中查找host 按n跳到查找下一个，shift+n查找上一个\n\nyyp  复制光标所在行，并粘贴\n\nh(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"vim三种模式\"><a href=\"#vim三种模式\" class=\"headerlink\" title=\"vim三种模式\"></a>vim三种模式</h3><p>命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式</p>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><pre><code>:q  退出\n\n:q! 强制退出\n\n:wq 保存并退出\n\n:set number  显示行号\n\n:set nonumber  隐藏行号\n\n/host  在文档中查找host 按n跳到查找下一个，shift+n查找上一个\n\nyyp  复制光标所在行，并粘贴\n\nh(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</code></pre>"},{"title":"event 事件驱动模型","date":"2019-04-10T10:11:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n说起node的事件驱动模型首先我们来搞清楚几个概念CPU，线程、进程、调度、事件驱动<br/>\n\n**CPU**<br/>\n\n1、CPU 是中央处理器，是计算机的核心<br/>\n2、CPU 通过和寄存器，高速缓存，以及内存交互来执行程序<br/>\n3、32位 CPU 最多寻址4g内存，而64位 CPU 目前来说没有上限<br/>\n\n\n**进程（Process）**<br/>\n\n1、进程是资源分配最小单位，对于操作系统而言打开一个浏览器就是启动一个浏览器进程，打开 QQ 就是一个 QQ 进程<br/>\n2、操作系统为进程开辟一段内存空间，每个进程占用一个进程表项，包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、帐号和调度信息等，cpu根据这些信息配合寄存器进行函数调用和程序执行<br/>\n\n3、 CPU利用率=1－pⁿ<br/>\n  - 一个进程等待I/O操作的时间与其停留在内存中的时间比为p<br/>\n  - 内存中同时有n个进程<br/>\n\n**线程（Thread）**<br/>\n\n线程是程序执行的最小单位，比如打开一个 QQ 进程在里面可以打字，发表情同时和很多人聊天。同时运行多个子任务，这样的子任务就可以成为线程，每一个进程中至少有一个线程。<br/>\n\n**调度**<br/>\n\n1、 *调度程序（scheduler）*-多进程同时竞争CPU时，超过两个的进程处于就绪态，那么单CPU必须选择下一个要运行的进程，完成选择工作的程序称为调度程序（另称CPU调度器）<br/>\n2、 *CPU分配器（Dispatcher*- 决定了将CPU分配给谁，然后分配器将CPU控制权交给该进程<br/>\n3、 *进程行为* - 一般分为I/O和计算（CPU），根据占用时间不同，分为I/O密集型（I/O burst）进程和CPU密集型（CPU burst）进程<br/>\n4、 当然调度是一个复杂的操作会有调度算法具体请参考<a href=\"https://yq.aliyun.com/articles/278727\">阿里云社区博客</a>\n\n\n**计算密集型和IO密集型**<br/>\n\n1、计算密集型任务的特点是要进行大量的计算，消耗CPU资源，计算密集型任务同时进行的数量应当等于CPU的核心数<br/>\n\n2、IO密集型特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用<br/>\n\n\n**多进程-多线程**<br/>\n\n1、多进程模式最大的优点就是稳定性高，因为子进程崩溃，不会影响主进程和其他子进程。著名的Apache最早就是采用多进程模式，多进程模式的缺点是创建进程的代价大<br/>\n\n2、多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存，但创建线程相对于进程开销较小，，所以运行速度较比多进程快，并且线程之间可以共享数据。可以有效解决多进程内存浪费问题。但由于每个线程都拥有自己独立的堆栈，需要占用一定的内存空间，而且操作系统内核在切换线程时也要切换线程上下文。所以在大并发量时，多线程结构无法做到强大的伸缩性<br/>\n\n**异步I/O**<br/>\n\n1、一个任务在执行的过程中大部分时间都在等待 I/O 操作，单进程单线程模型会导致别的任务无法并行执行<br/>\n2、充分利用操作系统提供的异步 I/O 支持，就可以用单进程单线程模型来执行多任务，这种模型称为事件驱动模型<br/>\n3、在单核CPU上采用单进程模型可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效<br/>\n\n\n**事件驱动模型**<br/>\n\n1、事件驱动模型是为了解决高并发（如Node，Nginx)<br/>\n2、操作系统在调度时较少的切换上下文，没有线程同步等问题<br/>\n3、所有处理都在单线程上进行，所以影响性能的点都在 CPU 的计算能力上，由于不受多进程或多线程模式中资源上线的影响，可伸缩性较强<br/>\n\n**Node事件驱动模型**\n\n1、每一个 I/O 工作被添加到事件队列中，线程循环地处理队列上的工作任务，当执行过程中遇到来堵塞(读取文件、查询数据库)时，线程不会停下来等待结果，而是留下一个处理结果的回调函数，转而继续执行队列中的下一个任务。这个传递到队列中的回调函数在堵塞任务运行结束后才被线程调用<br/>\n\n<img src=\"/images/event.png\"><br/>\n\n2、Node 在启动进程中会创建一个循环，每次循环运行就是一个Tick周期，每个Tick周期中会从事件队列查看是否有事件需要处理，直到事件队列全部执行完毕，node应用就会终<br/>\n3、Node 对于堵塞 I/O 使用线程池来在操作，通过取其中一个子线程线程来执行复杂任务，而不占用主循环线程。当堵塞任务执行完毕通过添加到事件队列中的回调函数来处理接下来的工作，这样就防止堵塞 I/O 占用空闲资源，这就是所谓的非阻塞式 I/O<br/>\n\n<img src=\"/images/event-loop.png\"><br/>\n\n**事件队列调度（通过回调函数将任务添加事件队列中）**<br/>\n1、内置的事件和事件监听器（http、server的一些事件）<br/>\n2、异步堵塞 I/O 库(db处理、fs处理等)<br/>\n3、定时器setTimeout、setInterval<br/>\n4、全局对象process的.nextTick()API<br/>\n5、自定义的事件和监听器<br/>\n\n\n**内置事件(举例)**<br/>\n```\n// 引入 events 模块\nlet events = require('events');\n\n// 创建事件对象\nlet eventEmitter = new events.EventEmitter();\n\n// 创建事件处理程序\nlet connectHandler = function connected() {\n   // 开始触发事件 \n   eventEmitter.emit('start');\n}\n\n// 绑定事件处理程序\neventEmitter.on('connection', connectHandler);\neventEmitter.on('start', function(){});\n\n// 触发事件处理程序\neventEmitter.emit('connection');\n\nconsole.log(\"程序执行完毕。\");\n```\n\n\n以上是Node 事件驱动模型的基本概念。在下篇进程文章中会介绍在 Node 中怎样创建多进程架构，也会在**node高级系列-v8与异步I/O**中详细介绍 Node的异步 I/O <br/>\n\n\n\n## 更多方法参考<br/>\n<a href='http://nodejs.cn/api/events.html'>Node Api events 事件模块 </a>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node/event.md","raw":"---\ntitle: event 事件驱动模型\ndate:  2019-04-10 18:11:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\n\n说起node的事件驱动模型首先我们来搞清楚几个概念CPU，线程、进程、调度、事件驱动<br/>\n\n**CPU**<br/>\n\n1、CPU 是中央处理器，是计算机的核心<br/>\n2、CPU 通过和寄存器，高速缓存，以及内存交互来执行程序<br/>\n3、32位 CPU 最多寻址4g内存，而64位 CPU 目前来说没有上限<br/>\n\n\n**进程（Process）**<br/>\n\n1、进程是资源分配最小单位，对于操作系统而言打开一个浏览器就是启动一个浏览器进程，打开 QQ 就是一个 QQ 进程<br/>\n2、操作系统为进程开辟一段内存空间，每个进程占用一个进程表项，包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、帐号和调度信息等，cpu根据这些信息配合寄存器进行函数调用和程序执行<br/>\n\n3、 CPU利用率=1－pⁿ<br/>\n  - 一个进程等待I/O操作的时间与其停留在内存中的时间比为p<br/>\n  - 内存中同时有n个进程<br/>\n\n**线程（Thread）**<br/>\n\n线程是程序执行的最小单位，比如打开一个 QQ 进程在里面可以打字，发表情同时和很多人聊天。同时运行多个子任务，这样的子任务就可以成为线程，每一个进程中至少有一个线程。<br/>\n\n**调度**<br/>\n\n1、 *调度程序（scheduler）*-多进程同时竞争CPU时，超过两个的进程处于就绪态，那么单CPU必须选择下一个要运行的进程，完成选择工作的程序称为调度程序（另称CPU调度器）<br/>\n2、 *CPU分配器（Dispatcher*- 决定了将CPU分配给谁，然后分配器将CPU控制权交给该进程<br/>\n3、 *进程行为* - 一般分为I/O和计算（CPU），根据占用时间不同，分为I/O密集型（I/O burst）进程和CPU密集型（CPU burst）进程<br/>\n4、 当然调度是一个复杂的操作会有调度算法具体请参考<a href=\"https://yq.aliyun.com/articles/278727\">阿里云社区博客</a>\n\n\n**计算密集型和IO密集型**<br/>\n\n1、计算密集型任务的特点是要进行大量的计算，消耗CPU资源，计算密集型任务同时进行的数量应当等于CPU的核心数<br/>\n\n2、IO密集型特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用<br/>\n\n\n**多进程-多线程**<br/>\n\n1、多进程模式最大的优点就是稳定性高，因为子进程崩溃，不会影响主进程和其他子进程。著名的Apache最早就是采用多进程模式，多进程模式的缺点是创建进程的代价大<br/>\n\n2、多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存，但创建线程相对于进程开销较小，，所以运行速度较比多进程快，并且线程之间可以共享数据。可以有效解决多进程内存浪费问题。但由于每个线程都拥有自己独立的堆栈，需要占用一定的内存空间，而且操作系统内核在切换线程时也要切换线程上下文。所以在大并发量时，多线程结构无法做到强大的伸缩性<br/>\n\n**异步I/O**<br/>\n\n1、一个任务在执行的过程中大部分时间都在等待 I/O 操作，单进程单线程模型会导致别的任务无法并行执行<br/>\n2、充分利用操作系统提供的异步 I/O 支持，就可以用单进程单线程模型来执行多任务，这种模型称为事件驱动模型<br/>\n3、在单核CPU上采用单进程模型可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效<br/>\n\n\n**事件驱动模型**<br/>\n\n1、事件驱动模型是为了解决高并发（如Node，Nginx)<br/>\n2、操作系统在调度时较少的切换上下文，没有线程同步等问题<br/>\n3、所有处理都在单线程上进行，所以影响性能的点都在 CPU 的计算能力上，由于不受多进程或多线程模式中资源上线的影响，可伸缩性较强<br/>\n\n**Node事件驱动模型**\n\n1、每一个 I/O 工作被添加到事件队列中，线程循环地处理队列上的工作任务，当执行过程中遇到来堵塞(读取文件、查询数据库)时，线程不会停下来等待结果，而是留下一个处理结果的回调函数，转而继续执行队列中的下一个任务。这个传递到队列中的回调函数在堵塞任务运行结束后才被线程调用<br/>\n\n<img src=\"/images/event.png\"><br/>\n\n2、Node 在启动进程中会创建一个循环，每次循环运行就是一个Tick周期，每个Tick周期中会从事件队列查看是否有事件需要处理，直到事件队列全部执行完毕，node应用就会终<br/>\n3、Node 对于堵塞 I/O 使用线程池来在操作，通过取其中一个子线程线程来执行复杂任务，而不占用主循环线程。当堵塞任务执行完毕通过添加到事件队列中的回调函数来处理接下来的工作，这样就防止堵塞 I/O 占用空闲资源，这就是所谓的非阻塞式 I/O<br/>\n\n<img src=\"/images/event-loop.png\"><br/>\n\n**事件队列调度（通过回调函数将任务添加事件队列中）**<br/>\n1、内置的事件和事件监听器（http、server的一些事件）<br/>\n2、异步堵塞 I/O 库(db处理、fs处理等)<br/>\n3、定时器setTimeout、setInterval<br/>\n4、全局对象process的.nextTick()API<br/>\n5、自定义的事件和监听器<br/>\n\n\n**内置事件(举例)**<br/>\n```\n// 引入 events 模块\nlet events = require('events');\n\n// 创建事件对象\nlet eventEmitter = new events.EventEmitter();\n\n// 创建事件处理程序\nlet connectHandler = function connected() {\n   // 开始触发事件 \n   eventEmitter.emit('start');\n}\n\n// 绑定事件处理程序\neventEmitter.on('connection', connectHandler);\neventEmitter.on('start', function(){});\n\n// 触发事件处理程序\neventEmitter.emit('connection');\n\nconsole.log(\"程序执行完毕。\");\n```\n\n\n以上是Node 事件驱动模型的基本概念。在下篇进程文章中会介绍在 Node 中怎样创建多进程架构，也会在**node高级系列-v8与异步I/O**中详细介绍 Node的异步 I/O <br/>\n\n\n\n## 更多方法参考<br/>\n<a href='http://nodejs.cn/api/events.html'>Node Api events 事件模块 </a>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node/event","published":1,"updated":"2019-08-28T12:31:58.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8m003fkuu6jlw9l8ph","content":"<p>说起node的事件驱动模型首先我们来搞清楚几个概念CPU，线程、进程、调度、事件驱动<br></p>\n<p><strong>CPU</strong><br></p>\n<p>1、CPU 是中央处理器，是计算机的核心<br><br>2、CPU 通过和寄存器，高速缓存，以及内存交互来执行程序<br><br>3、32位 CPU 最多寻址4g内存，而64位 CPU 目前来说没有上限<br></p>\n<p><strong>进程（Process）</strong><br></p>\n<p>1、进程是资源分配最小单位，对于操作系统而言打开一个浏览器就是启动一个浏览器进程，打开 QQ 就是一个 QQ 进程<br><br>2、操作系统为进程开辟一段内存空间，每个进程占用一个进程表项，包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、帐号和调度信息等，cpu根据这些信息配合寄存器进行函数调用和程序执行<br></p>\n<p>3、 CPU利用率=1－pⁿ<br></p>\n<ul>\n<li>一个进程等待I/O操作的时间与其停留在内存中的时间比为p<br></li>\n<li>内存中同时有n个进程<br></li>\n</ul>\n<p><strong>线程（Thread）</strong><br></p>\n<p>线程是程序执行的最小单位，比如打开一个 QQ 进程在里面可以打字，发表情同时和很多人聊天。同时运行多个子任务，这样的子任务就可以成为线程，每一个进程中至少有一个线程。<br></p>\n<p><strong>调度</strong><br></p>\n<p>1、 <em>调度程序（scheduler）</em>-多进程同时竞争CPU时，超过两个的进程处于就绪态，那么单CPU必须选择下一个要运行的进程，完成选择工作的程序称为调度程序（另称CPU调度器）<br><br>2、 <em>CPU分配器（Dispatcher</em>- 决定了将CPU分配给谁，然后分配器将CPU控制权交给该进程<br><br>3、 <em>进程行为</em> - 一般分为I/O和计算（CPU），根据占用时间不同，分为I/O密集型（I/O burst）进程和CPU密集型（CPU burst）进程<br><br>4、 当然调度是一个复杂的操作会有调度算法具体请参考<a href=\"https://yq.aliyun.com/articles/278727\" target=\"_blank\" rel=\"noopener\">阿里云社区博客</a></p>\n<p><strong>计算密集型和IO密集型</strong><br></p>\n<p>1、计算密集型任务的特点是要进行大量的计算，消耗CPU资源，计算密集型任务同时进行的数量应当等于CPU的核心数<br></p>\n<p>2、IO密集型特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用<br></p>\n<p><strong>多进程-多线程</strong><br></p>\n<p>1、多进程模式最大的优点就是稳定性高，因为子进程崩溃，不会影响主进程和其他子进程。著名的Apache最早就是采用多进程模式，多进程模式的缺点是创建进程的代价大<br></p>\n<p>2、多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存，但创建线程相对于进程开销较小，，所以运行速度较比多进程快，并且线程之间可以共享数据。可以有效解决多进程内存浪费问题。但由于每个线程都拥有自己独立的堆栈，需要占用一定的内存空间，而且操作系统内核在切换线程时也要切换线程上下文。所以在大并发量时，多线程结构无法做到强大的伸缩性<br></p>\n<p><strong>异步I/O</strong><br></p>\n<p>1、一个任务在执行的过程中大部分时间都在等待 I/O 操作，单进程单线程模型会导致别的任务无法并行执行<br><br>2、充分利用操作系统提供的异步 I/O 支持，就可以用单进程单线程模型来执行多任务，这种模型称为事件驱动模型<br><br>3、在单核CPU上采用单进程模型可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效<br></p>\n<p><strong>事件驱动模型</strong><br></p>\n<p>1、事件驱动模型是为了解决高并发（如Node，Nginx)<br><br>2、操作系统在调度时较少的切换上下文，没有线程同步等问题<br><br>3、所有处理都在单线程上进行，所以影响性能的点都在 CPU 的计算能力上，由于不受多进程或多线程模式中资源上线的影响，可伸缩性较强<br></p>\n<p><strong>Node事件驱动模型</strong></p>\n<p>1、每一个 I/O 工作被添加到事件队列中，线程循环地处理队列上的工作任务，当执行过程中遇到来堵塞(读取文件、查询数据库)时，线程不会停下来等待结果，而是留下一个处理结果的回调函数，转而继续执行队列中的下一个任务。这个传递到队列中的回调函数在堵塞任务运行结束后才被线程调用<br></p>\n<p><img src=\"/images/event.png\"><br></p>\n<p>2、Node 在启动进程中会创建一个循环，每次循环运行就是一个Tick周期，每个Tick周期中会从事件队列查看是否有事件需要处理，直到事件队列全部执行完毕，node应用就会终<br><br>3、Node 对于堵塞 I/O 使用线程池来在操作，通过取其中一个子线程线程来执行复杂任务，而不占用主循环线程。当堵塞任务执行完毕通过添加到事件队列中的回调函数来处理接下来的工作，这样就防止堵塞 I/O 占用空闲资源，这就是所谓的非阻塞式 I/O<br></p>\n<p><img src=\"/images/event-loop.png\"><br></p>\n<p><strong>事件队列调度（通过回调函数将任务添加事件队列中）</strong><br><br>1、内置的事件和事件监听器（http、server的一些事件）<br><br>2、异步堵塞 I/O 库(db处理、fs处理等)<br><br>3、定时器setTimeout、setInterval<br><br>4、全局对象process的.nextTick()API<br><br>5、自定义的事件和监听器<br></p>\n<p><strong>内置事件(举例)</strong><br></p>\n<pre><code>// 引入 events 模块\nlet events = require(&#39;events&#39;);\n\n// 创建事件对象\nlet eventEmitter = new events.EventEmitter();\n\n// 创建事件处理程序\nlet connectHandler = function connected() {\n   // 开始触发事件 \n   eventEmitter.emit(&#39;start&#39;);\n}\n\n// 绑定事件处理程序\neventEmitter.on(&#39;connection&#39;, connectHandler);\neventEmitter.on(&#39;start&#39;, function(){});\n\n// 触发事件处理程序\neventEmitter.emit(&#39;connection&#39;);\n\nconsole.log(&quot;程序执行完毕。&quot;);</code></pre><p>以上是Node 事件驱动模型的基本概念。在下篇进程文章中会介绍在 Node 中怎样创建多进程架构，也会在<strong>node高级系列-v8与异步I/O</strong>中详细介绍 Node的异步 I/O <br></p>\n<h2 id=\"更多方法参考\"><a href=\"#更多方法参考\" class=\"headerlink\" title=\"更多方法参考\"></a>更多方法参考<br></h2><p><a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener\">Node Api events 事件模块 </a></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>说起node的事件驱动模型首先我们来搞清楚几个概念CPU，线程、进程、调度、事件驱动<br></p>\n<p><strong>CPU</strong><br></p>\n<p>1、CPU 是中央处理器，是计算机的核心<br><br>2、CPU 通过和寄存器，高速缓存，以及内存交互来执行程序<br><br>3、32位 CPU 最多寻址4g内存，而64位 CPU 目前来说没有上限<br></p>\n<p><strong>进程（Process）</strong><br></p>\n<p>1、进程是资源分配最小单位，对于操作系统而言打开一个浏览器就是启动一个浏览器进程，打开 QQ 就是一个 QQ 进程<br><br>2、操作系统为进程开辟一段内存空间，每个进程占用一个进程表项，包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、帐号和调度信息等，cpu根据这些信息配合寄存器进行函数调用和程序执行<br></p>\n<p>3、 CPU利用率=1－pⁿ<br></p>\n<ul>\n<li>一个进程等待I/O操作的时间与其停留在内存中的时间比为p<br></li>\n<li>内存中同时有n个进程<br></li>\n</ul>\n<p><strong>线程（Thread）</strong><br></p>\n<p>线程是程序执行的最小单位，比如打开一个 QQ 进程在里面可以打字，发表情同时和很多人聊天。同时运行多个子任务，这样的子任务就可以成为线程，每一个进程中至少有一个线程。<br></p>\n<p><strong>调度</strong><br></p>\n<p>1、 <em>调度程序（scheduler）</em>-多进程同时竞争CPU时，超过两个的进程处于就绪态，那么单CPU必须选择下一个要运行的进程，完成选择工作的程序称为调度程序（另称CPU调度器）<br><br>2、 <em>CPU分配器（Dispatcher</em>- 决定了将CPU分配给谁，然后分配器将CPU控制权交给该进程<br><br>3、 <em>进程行为</em> - 一般分为I/O和计算（CPU），根据占用时间不同，分为I/O密集型（I/O burst）进程和CPU密集型（CPU burst）进程<br><br>4、 当然调度是一个复杂的操作会有调度算法具体请参考<a href=\"https://yq.aliyun.com/articles/278727\" target=\"_blank\" rel=\"noopener\">阿里云社区博客</a></p>\n<p><strong>计算密集型和IO密集型</strong><br></p>\n<p>1、计算密集型任务的特点是要进行大量的计算，消耗CPU资源，计算密集型任务同时进行的数量应当等于CPU的核心数<br></p>\n<p>2、IO密集型特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用<br></p>\n<p><strong>多进程-多线程</strong><br></p>\n<p>1、多进程模式最大的优点就是稳定性高，因为子进程崩溃，不会影响主进程和其他子进程。著名的Apache最早就是采用多进程模式，多进程模式的缺点是创建进程的代价大<br></p>\n<p>2、多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存，但创建线程相对于进程开销较小，，所以运行速度较比多进程快，并且线程之间可以共享数据。可以有效解决多进程内存浪费问题。但由于每个线程都拥有自己独立的堆栈，需要占用一定的内存空间，而且操作系统内核在切换线程时也要切换线程上下文。所以在大并发量时，多线程结构无法做到强大的伸缩性<br></p>\n<p><strong>异步I/O</strong><br></p>\n<p>1、一个任务在执行的过程中大部分时间都在等待 I/O 操作，单进程单线程模型会导致别的任务无法并行执行<br><br>2、充分利用操作系统提供的异步 I/O 支持，就可以用单进程单线程模型来执行多任务，这种模型称为事件驱动模型<br><br>3、在单核CPU上采用单进程模型可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效<br></p>\n<p><strong>事件驱动模型</strong><br></p>\n<p>1、事件驱动模型是为了解决高并发（如Node，Nginx)<br><br>2、操作系统在调度时较少的切换上下文，没有线程同步等问题<br><br>3、所有处理都在单线程上进行，所以影响性能的点都在 CPU 的计算能力上，由于不受多进程或多线程模式中资源上线的影响，可伸缩性较强<br></p>\n<p><strong>Node事件驱动模型</strong></p>\n<p>1、每一个 I/O 工作被添加到事件队列中，线程循环地处理队列上的工作任务，当执行过程中遇到来堵塞(读取文件、查询数据库)时，线程不会停下来等待结果，而是留下一个处理结果的回调函数，转而继续执行队列中的下一个任务。这个传递到队列中的回调函数在堵塞任务运行结束后才被线程调用<br></p>\n<p><img src=\"/images/event.png\"><br></p>\n<p>2、Node 在启动进程中会创建一个循环，每次循环运行就是一个Tick周期，每个Tick周期中会从事件队列查看是否有事件需要处理，直到事件队列全部执行完毕，node应用就会终<br><br>3、Node 对于堵塞 I/O 使用线程池来在操作，通过取其中一个子线程线程来执行复杂任务，而不占用主循环线程。当堵塞任务执行完毕通过添加到事件队列中的回调函数来处理接下来的工作，这样就防止堵塞 I/O 占用空闲资源，这就是所谓的非阻塞式 I/O<br></p>\n<p><img src=\"/images/event-loop.png\"><br></p>\n<p><strong>事件队列调度（通过回调函数将任务添加事件队列中）</strong><br><br>1、内置的事件和事件监听器（http、server的一些事件）<br><br>2、异步堵塞 I/O 库(db处理、fs处理等)<br><br>3、定时器setTimeout、setInterval<br><br>4、全局对象process的.nextTick()API<br><br>5、自定义的事件和监听器<br></p>\n<p><strong>内置事件(举例)</strong><br></p>\n<pre><code>// 引入 events 模块\nlet events = require(&#39;events&#39;);\n\n// 创建事件对象\nlet eventEmitter = new events.EventEmitter();\n\n// 创建事件处理程序\nlet connectHandler = function connected() {\n   // 开始触发事件 \n   eventEmitter.emit(&#39;start&#39;);\n}\n\n// 绑定事件处理程序\neventEmitter.on(&#39;connection&#39;, connectHandler);\neventEmitter.on(&#39;start&#39;, function(){});\n\n// 触发事件处理程序\neventEmitter.emit(&#39;connection&#39;);\n\nconsole.log(&quot;程序执行完毕。&quot;);</code></pre><p>以上是Node 事件驱动模型的基本概念。在下篇进程文章中会介绍在 Node 中怎样创建多进程架构，也会在<strong>node高级系列-v8与异步I/O</strong>中详细介绍 Node的异步 I/O <br></p>\n<h2 id=\"更多方法参考\"><a href=\"#更多方法参考\" class=\"headerlink\" title=\"更多方法参考\"></a>更多方法参考<br></h2><p><a href=\"http://nodejs.cn/api/events.html\" target=\"_blank\" rel=\"noopener\">Node Api events 事件模块 </a></p>\n"},{"title":"fs 文件操作","date":"2019-04-01T12:16:15.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n在 node 中文件交互是非常重要的，例如文件的打开、读取、写入文件、以及与其交互等等，这其中围绕着异步模式和同步模式读取的话题。下面就 node 的 fs 文件操作模举例说明<br/>\n\n### fs使用特点\n1、同步的版本将阻塞整个进程，直到它们完成（停止所有连接）<br/>\n2、异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回，但是无法保证操作的的正确性和有效的顺序<br/>\n\n### 文件写入<br/>\n\n1. 异步文件写入<br/>\n\n```\n// 引入 fs 模块\nconst fs = require('fs');\n\n/**\n * @description\n * 异步打开文件操作 fs.open\n * 异步写入文件操作 fs.writeFile\n * 异步关闭文件操作 fs.close\n */\nfs.open('file.txt', 'a', (err, fd)=>{\n  if (err) throw err;\n  fs.writeFile(fd, \"node是很有意思的语言！\", (err)=>{\n    if (err) throw err;\n    console.log('写入文件成功')\n    fs.close(fd, (err)=>{\n      if (err) throw err;\n      console.log('文件以保存并关闭')\n    })\n  })\n})\n```\n2. 同步写入方式<br/>\n```\n// 引入模块 \nconst fs = require('fs');\n\n// 打开文件 同步\nvar fd=fs.openSync('file.txt', 'w');\n\n// 写入内容\nfs.writeFileSync(fd,\"node是很有意思的语言!\"); \n\n// 保存并关闭\nfs.closeSync(fd);\n```\n\n\n### 读写操作<br/>\n\n1. 文件读写操作<br/>\n\n```\n// 引入模块\nconst fs = require('fs');\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n */\nfs.readFile('source/file.txt','utf8',(err,data)=>{\n  if (err) throw err;\n  console.log(data); //data 默认读取的是二进制 使用toString() 方法转换成\n})\n```\n\n2. 图片读写操作<br/>\n\n```\n// 引入模块\nconst fs = require('fs');\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n */\nfs.readFile(\"source/a.jpg\",(err,data) => {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile('b.jpg', data, (err) => {\n    if (err) throw err;\n    console.log('写入成功！')\n  })\n});\n```\n\n3. 视频读写操作<br/>\n\n```\n// 引入模块\nlet fs= require('fs');\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n * 创建文件读取流 fs.createReadStream\n * 创建文件写入流 fs.createWriteStream\n * 创建管道 fileStream.pipe\n * fs.readFile() 函数会缓冲整个文件。 \n * 为了最小化内存成本，尽可能通过 fs.createReadStream() 进行流式传输。\n */\n\n// 方式一\nfs.readFile('source/a.mp4', (err, data) => {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile('b.mp4', data, (err) => {\n    if (err) throw err;\n    console.log('写入成功！');\n  });\n});\n\n// 方式二\nlet rs = fs.createReadStream('source/a.mp4');\nlet ws = fs.createWriteStream('new.mp4');\nre.pipe(ws);\n```\n\n4. 使用同步文件流写入操作<br/>\n```\n// 引入模块\nlet fs= require('fs');\n\n// 建立通道\nlet ws = fs.createWriteStream('file.txt')\n\n// 打开通道\nws.once('open', () => {\n    console.log('通道打开');\n})\n\nws.once('close', () => {\n    console.log('通道关闭');\n})\n\n// 写入内容\nws.write('node开始');\nws.write('node1');\nws.write('node2');\nws.write('node结束');\n```\n\n<a href=\"https://nodejs.org/docs/latest-v9.x/api/fs.html\">其他方法请参考 Node Api </a><br/>\n\n\n","source":"_posts/node/fs.md","raw":"---\ntitle: fs 文件操作\ndate: 2019-04-1 20:16:15\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\n\n在 node 中文件交互是非常重要的，例如文件的打开、读取、写入文件、以及与其交互等等，这其中围绕着异步模式和同步模式读取的话题。下面就 node 的 fs 文件操作模举例说明<br/>\n\n### fs使用特点\n1、同步的版本将阻塞整个进程，直到它们完成（停止所有连接）<br/>\n2、异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回，但是无法保证操作的的正确性和有效的顺序<br/>\n\n### 文件写入<br/>\n\n1. 异步文件写入<br/>\n\n```\n// 引入 fs 模块\nconst fs = require('fs');\n\n/**\n * @description\n * 异步打开文件操作 fs.open\n * 异步写入文件操作 fs.writeFile\n * 异步关闭文件操作 fs.close\n */\nfs.open('file.txt', 'a', (err, fd)=>{\n  if (err) throw err;\n  fs.writeFile(fd, \"node是很有意思的语言！\", (err)=>{\n    if (err) throw err;\n    console.log('写入文件成功')\n    fs.close(fd, (err)=>{\n      if (err) throw err;\n      console.log('文件以保存并关闭')\n    })\n  })\n})\n```\n2. 同步写入方式<br/>\n```\n// 引入模块 \nconst fs = require('fs');\n\n// 打开文件 同步\nvar fd=fs.openSync('file.txt', 'w');\n\n// 写入内容\nfs.writeFileSync(fd,\"node是很有意思的语言!\"); \n\n// 保存并关闭\nfs.closeSync(fd);\n```\n\n\n### 读写操作<br/>\n\n1. 文件读写操作<br/>\n\n```\n// 引入模块\nconst fs = require('fs');\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n */\nfs.readFile('source/file.txt','utf8',(err,data)=>{\n  if (err) throw err;\n  console.log(data); //data 默认读取的是二进制 使用toString() 方法转换成\n})\n```\n\n2. 图片读写操作<br/>\n\n```\n// 引入模块\nconst fs = require('fs');\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n */\nfs.readFile(\"source/a.jpg\",(err,data) => {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile('b.jpg', data, (err) => {\n    if (err) throw err;\n    console.log('写入成功！')\n  })\n});\n```\n\n3. 视频读写操作<br/>\n\n```\n// 引入模块\nlet fs= require('fs');\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n * 创建文件读取流 fs.createReadStream\n * 创建文件写入流 fs.createWriteStream\n * 创建管道 fileStream.pipe\n * fs.readFile() 函数会缓冲整个文件。 \n * 为了最小化内存成本，尽可能通过 fs.createReadStream() 进行流式传输。\n */\n\n// 方式一\nfs.readFile('source/a.mp4', (err, data) => {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile('b.mp4', data, (err) => {\n    if (err) throw err;\n    console.log('写入成功！');\n  });\n});\n\n// 方式二\nlet rs = fs.createReadStream('source/a.mp4');\nlet ws = fs.createWriteStream('new.mp4');\nre.pipe(ws);\n```\n\n4. 使用同步文件流写入操作<br/>\n```\n// 引入模块\nlet fs= require('fs');\n\n// 建立通道\nlet ws = fs.createWriteStream('file.txt')\n\n// 打开通道\nws.once('open', () => {\n    console.log('通道打开');\n})\n\nws.once('close', () => {\n    console.log('通道关闭');\n})\n\n// 写入内容\nws.write('node开始');\nws.write('node1');\nws.write('node2');\nws.write('node结束');\n```\n\n<a href=\"https://nodejs.org/docs/latest-v9.x/api/fs.html\">其他方法请参考 Node Api </a><br/>\n\n\n","slug":"node/fs","published":1,"updated":"2019-08-26T16:46:27.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8n003hkuu6052nu0sk","content":"<p>在 node 中文件交互是非常重要的，例如文件的打开、读取、写入文件、以及与其交互等等，这其中围绕着异步模式和同步模式读取的话题。下面就 node 的 fs 文件操作模举例说明<br></p>\n<h3 id=\"fs使用特点\"><a href=\"#fs使用特点\" class=\"headerlink\" title=\"fs使用特点\"></a>fs使用特点</h3><p>1、同步的版本将阻塞整个进程，直到它们完成（停止所有连接）<br><br>2、异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回，但是无法保证操作的的正确性和有效的顺序<br></p>\n<h3 id=\"文件写入\"><a href=\"#文件写入\" class=\"headerlink\" title=\"文件写入\"></a>文件写入<br></h3><ol>\n<li>异步文件写入<br></li>\n</ol>\n<pre><code>// 引入 fs 模块\nconst fs = require(&#39;fs&#39;);\n\n/**\n * @description\n * 异步打开文件操作 fs.open\n * 异步写入文件操作 fs.writeFile\n * 异步关闭文件操作 fs.close\n */\nfs.open(&#39;file.txt&#39;, &#39;a&#39;, (err, fd)=&gt;{\n  if (err) throw err;\n  fs.writeFile(fd, &quot;node是很有意思的语言！&quot;, (err)=&gt;{\n    if (err) throw err;\n    console.log(&#39;写入文件成功&#39;)\n    fs.close(fd, (err)=&gt;{\n      if (err) throw err;\n      console.log(&#39;文件以保存并关闭&#39;)\n    })\n  })\n})</code></pre><ol start=\"2\">\n<li>同步写入方式<br><pre><code>// 引入模块 \nconst fs = require(&#39;fs&#39;);\n</code></pre></li>\n</ol>\n<p>// 打开文件 同步<br>var fd=fs.openSync(‘file.txt’, ‘w’);</p>\n<p>// 写入内容<br>fs.writeFileSync(fd,”node是很有意思的语言!”); </p>\n<p>// 保存并关闭<br>fs.closeSync(fd);</p>\n<pre><code>\n\n### 读写操作&lt;br/&gt;\n\n1. 文件读写操作&lt;br/&gt;\n</code></pre><p>// 引入模块<br>const fs = require(‘fs’);</p>\n<p>/**</p>\n<ul>\n<li>@description</li>\n<li>异步读取文件 fs.readFile</li>\n<li>/<br>fs.readFile(‘source/file.txt’,’utf8’,(err,data)=&gt;{<br>if (err) throw err;<br>console.log(data); //data 默认读取的是二进制 使用toString() 方法转换成<br>})<pre><code></code></pre></li>\n</ul>\n<ol start=\"2\">\n<li>图片读写操作<br></li>\n</ol>\n<pre><code>// 引入模块\nconst fs = require(&#39;fs&#39;);\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n */\nfs.readFile(&quot;source/a.jpg&quot;,(err,data) =&gt; {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile(&#39;b.jpg&#39;, data, (err) =&gt; {\n    if (err) throw err;\n    console.log(&#39;写入成功！&#39;)\n  })\n});</code></pre><ol start=\"3\">\n<li>视频读写操作<br></li>\n</ol>\n<pre><code>// 引入模块\nlet fs= require(&#39;fs&#39;);\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n * 创建文件读取流 fs.createReadStream\n * 创建文件写入流 fs.createWriteStream\n * 创建管道 fileStream.pipe\n * fs.readFile() 函数会缓冲整个文件。 \n * 为了最小化内存成本，尽可能通过 fs.createReadStream() 进行流式传输。\n */\n\n// 方式一\nfs.readFile(&#39;source/a.mp4&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile(&#39;b.mp4&#39;, data, (err) =&gt; {\n    if (err) throw err;\n    console.log(&#39;写入成功！&#39;);\n  });\n});\n\n// 方式二\nlet rs = fs.createReadStream(&#39;source/a.mp4&#39;);\nlet ws = fs.createWriteStream(&#39;new.mp4&#39;);\nre.pipe(ws);</code></pre><ol start=\"4\">\n<li>使用同步文件流写入操作<br><pre><code>// 引入模块\nlet fs= require(&#39;fs&#39;);\n</code></pre></li>\n</ol>\n<p>// 建立通道<br>let ws = fs.createWriteStream(‘file.txt’)</p>\n<p>// 打开通道<br>ws.once(‘open’, () =&gt; {<br>    console.log(‘通道打开’);<br>})</p>\n<p>ws.once(‘close’, () =&gt; {<br>    console.log(‘通道关闭’);<br>})</p>\n<p>// 写入内容<br>ws.write(‘node开始’);<br>ws.write(‘node1’);<br>ws.write(‘node2’);<br>ws.write(‘node结束’);</p>\n<pre><code>\n&lt;a href=&quot;https://nodejs.org/docs/latest-v9.x/api/fs.html&quot;&gt;其他方法请参考 Node Api &lt;/a&gt;&lt;br/&gt;\n\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>在 node 中文件交互是非常重要的，例如文件的打开、读取、写入文件、以及与其交互等等，这其中围绕着异步模式和同步模式读取的话题。下面就 node 的 fs 文件操作模举例说明<br></p>\n<h3 id=\"fs使用特点\"><a href=\"#fs使用特点\" class=\"headerlink\" title=\"fs使用特点\"></a>fs使用特点</h3><p>1、同步的版本将阻塞整个进程，直到它们完成（停止所有连接）<br><br>2、异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回，但是无法保证操作的的正确性和有效的顺序<br></p>\n<h3 id=\"文件写入\"><a href=\"#文件写入\" class=\"headerlink\" title=\"文件写入\"></a>文件写入<br></h3><ol>\n<li>异步文件写入<br></li>\n</ol>\n<pre><code>// 引入 fs 模块\nconst fs = require(&#39;fs&#39;);\n\n/**\n * @description\n * 异步打开文件操作 fs.open\n * 异步写入文件操作 fs.writeFile\n * 异步关闭文件操作 fs.close\n */\nfs.open(&#39;file.txt&#39;, &#39;a&#39;, (err, fd)=&gt;{\n  if (err) throw err;\n  fs.writeFile(fd, &quot;node是很有意思的语言！&quot;, (err)=&gt;{\n    if (err) throw err;\n    console.log(&#39;写入文件成功&#39;)\n    fs.close(fd, (err)=&gt;{\n      if (err) throw err;\n      console.log(&#39;文件以保存并关闭&#39;)\n    })\n  })\n})</code></pre><ol start=\"2\">\n<li>同步写入方式<br><pre><code>// 引入模块 \nconst fs = require(&#39;fs&#39;);\n</code></pre></li>\n</ol>\n<p>// 打开文件 同步<br>var fd=fs.openSync(‘file.txt’, ‘w’);</p>\n<p>// 写入内容<br>fs.writeFileSync(fd,”node是很有意思的语言!”); </p>\n<p>// 保存并关闭<br>fs.closeSync(fd);</p>\n<pre><code>\n\n### 读写操作&lt;br/&gt;\n\n1. 文件读写操作&lt;br/&gt;\n</code></pre><p>// 引入模块<br>const fs = require(‘fs’);</p>\n<p>/**</p>\n<ul>\n<li>@description</li>\n<li>异步读取文件 fs.readFile</li>\n<li>/<br>fs.readFile(‘source/file.txt’,’utf8’,(err,data)=&gt;{<br>if (err) throw err;<br>console.log(data); //data 默认读取的是二进制 使用toString() 方法转换成<br>})<pre><code></code></pre></li>\n</ul>\n<ol start=\"2\">\n<li>图片读写操作<br></li>\n</ol>\n<pre><code>// 引入模块\nconst fs = require(&#39;fs&#39;);\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n */\nfs.readFile(&quot;source/a.jpg&quot;,(err,data) =&gt; {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile(&#39;b.jpg&#39;, data, (err) =&gt; {\n    if (err) throw err;\n    console.log(&#39;写入成功！&#39;)\n  })\n});</code></pre><ol start=\"3\">\n<li>视频读写操作<br></li>\n</ol>\n<pre><code>// 引入模块\nlet fs= require(&#39;fs&#39;);\n\n/**\n * @description\n * 异步读取文件 fs.readFile\n * 异步写入文件 fs.writeFile\n * 创建文件读取流 fs.createReadStream\n * 创建文件写入流 fs.createWriteStream\n * 创建管道 fileStream.pipe\n * fs.readFile() 函数会缓冲整个文件。 \n * 为了最小化内存成本，尽可能通过 fs.createReadStream() 进行流式传输。\n */\n\n// 方式一\nfs.readFile(&#39;source/a.mp4&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  // 文件写入\n  fs.writeFile(&#39;b.mp4&#39;, data, (err) =&gt; {\n    if (err) throw err;\n    console.log(&#39;写入成功！&#39;);\n  });\n});\n\n// 方式二\nlet rs = fs.createReadStream(&#39;source/a.mp4&#39;);\nlet ws = fs.createWriteStream(&#39;new.mp4&#39;);\nre.pipe(ws);</code></pre><ol start=\"4\">\n<li>使用同步文件流写入操作<br><pre><code>// 引入模块\nlet fs= require(&#39;fs&#39;);\n</code></pre></li>\n</ol>\n<p>// 建立通道<br>let ws = fs.createWriteStream(‘file.txt’)</p>\n<p>// 打开通道<br>ws.once(‘open’, () =&gt; {<br>    console.log(‘通道打开’);<br>})</p>\n<p>ws.once(‘close’, () =&gt; {<br>    console.log(‘通道关闭’);<br>})</p>\n<p>// 写入内容<br>ws.write(‘node开始’);<br>ws.write(‘node1’);<br>ws.write(‘node2’);<br>ws.write(‘node结束’);</p>\n<pre><code>\n&lt;a href=&quot;https://nodejs.org/docs/latest-v9.x/api/fs.html&quot;&gt;其他方法请参考 Node Api &lt;/a&gt;&lt;br/&gt;\n\n</code></pre>"},{"title":"tcp udp http","date":"2019-03-23T14:33:25.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 构建TCP服务<br/>\n tcp全名为传输控制协议，在OSI模型中属于传输层协议如下图<br/>\n <image src=/images/tcp.png' width=\"300px\"></image><br/>\n\n tcp是面向连接的协议，特点是在传输之前需要3次握手形成会话如下图<br/>\n <image src=/images/ack.png' width=\"300px\"></image><br/>\n\n  第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认<br/>\n  第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态<br/>\n  第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手<br/>\n\n  当然tcp也会有四次挥手，在这里就不具体说明了<br/>\n\n### 创建TCP服务端<br/>\n1、创建TCP服务端接受网络请求<br/>\n1.1服务器事件<br/>\n\n```\nvar net = require('net');\nvar server = net.createServer(function(socket) {\n  // 开始新连接\n  socket.on('data', function(data) {\n    socket.write('hello');\n  })\n\n  // 断开连接\n  socket.on('end', function() {\n    console.log('断开连接');\n  }) \n})\n\nserver.listen(8124, function() {\n  console.log('server start listen port 8124 !');\n});\n```\n通过上面代码创建为服务器事件，它是一个**EventEmitter**实例，自定义事件有一下几种<br/>\n- listening 绑定的端口\n- connection 连接到服务器时出发此事件\n- close 服务器关闭时触发\n- error 服务器发生异常时触发<br/>\n\n1.2连接事件<br/>\n\n```\nvar net = require('net');\nvar client = net.connect({ port: 8124 }, function () {\n  console.log('client connected !');\n  client.write('hello');\n})\n\nclient.on('data', function (data) {\n  conosle.log(data);\n  client.end();\n})\n\nclient.on('end', function () {\n  console.log('此连接结束');\n})\n```\n通过上面代码创建连接事件，服务器可以同时与多个客户端保持连接，对于每个连接其实都是**Stream**对象，它用于服务器端和客户端之间的通讯，自定义事件如下<br/>\n- data 当一端调用write()发送数据时，另一端会触发data，事件传递的数据是write()发送的数据\n- end 当连接中的任意一端发送**FIN** 数据时，触发此事件\n- drain 当一端调用write()发送数据时，触发此事件\n- close 当所有连接完全关闭时触发\n- error 服务器发生异常时触发\n- timeout 连接超时时触发\n\n**node中 TCP默认开启Nagle算法（优化网络数据包）此算法由于要求缓冲数据达到一定数量或一定时间后才发送，所以可能会造成延迟发送**\n\n### 构建UDP服务<br/>\nUDP用户数据包协议，和TCP一样属于网络传输层<br/>\n\n### 创建UDP服务端<br/>\n```\nvar dgram = require('dgram');\n// 创建server对象\nvar server  = dgram.createSocket('udp4');\n// 接到消息时，触发该事件，携带的数据为消息buffer和远程地址信息对象\nserver.on('message' function (msg, rinfo) {\n  console.log(msg)\n  console.log(rinfo)\n});\n// 绑定端口之后启动监听时间\nserver.on('listening', function () {\n  var address = server.address();\n  console.log(address);\n});\n// 绑定端口\nserver.bind(41234);\n\n```\n### 创建UDP客户端<br/>\n```\nvar dgram = require('dgram');\n\nvar message = new Buffer('hello');\nvar client = dgram.createSocket('udp4');\nclient.send(message, 0, message.length, 41234, 'localhost', function (err, bytes) {\n  client.close();\n})\n```\n\n### 构建HTTP服务<br/>\n\nHTTP是超文本传输协议，是构建在TCP之上的，属于应用层协议，在HTTP的两端是服务端和浏览器也就是B/S模式<br/>\n\n### HTTP报文<br/>\n我们可以在命令行利用curl -v http://localhost:8080/ 来模拟请求，产生如下报文信息<br/>\n\n第一部分其实就是标准的TCP3次握手过程<br/>\n```\n* About to connect() to localhost (127.0.0.1) port 8080 (#0)\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n```\n\n第二部分在握手完成之后，客户端向服务端发送的请求报文<br/>\n```\n> GET / HTTP/1.1\n> Host: 127.0.0.1:8080\n> User-Agent: curl/7.54.0\n> Accept: */*\n>\n```\n\n第三部分是服务端处理结束后，向客户端发送的响应内容包括响应头和响应体<br/>\n```\n< HTTP/1.1 200 OK\n< X-Powered-By: Express\n< Accept-Ranges: bytes\n< Content-Type: text/html; charset=UTF-8\n< Content-Length: 820\n< ETag: W/\"334-dKswJvgc24O5QPXd939SLJD+BhM\"\n< Date: Thu, 11 Apr 2019 10:33:03 GMT\n< Connection: keep-alive\n<\nhello\n```\n\n第四部分是结束此会话<br/>\n```\n* Connection #0 to host 127.0.0.1 left intact\n* Closing connection #0\n```\n\n通过上面的信息中我们可以看出虽然是基于 TCP，但是本身确实基于请求响应式的，一问一答模式并不是会话模式。<br/>\n\n### HTTP模块<br/>\n\nnode http 模块承继 tcp 服务器（ net 模块）它能够与多个客户端保持连接，采用事件驱动，不会为每个连接创建额外的线程或进程。占用内存低，所以能实现高并发，tcp 服务以connection进行服务，http以request进行服务。node http 模块将connection和request进行封装<br/>\n<image src=/images/request.png' width=\"400px\"></image><br/>\n\nhttp模块将所有读写抽象为ServerRequest和ServerResponse对象<br/>\n<image src=/images/http.png' width=\"400px\"></image><br/>\n```\nfunction (req, res) {\n  res.writeHead(200, {'Content-Type' : 'text/plain'});\n  res.end('Hello Word');\n}\n```\n\n### HTTP代理<br/>\n\nhttp 提供的 ClientRequest 是基于 tcp 层实现的，在keepalive情况下，一个底层会话能够连接多个请求。<br/>\nhttp 模块包含一个默认的客户端代理对象http.globalAgent<br/>\n通过 ClientRequest 对象对用一个服务器发起的 http 最多可以创建5个连接，实际上是一个连接池。如果 http 客户端同时对一个服务器发起超过5个请求，其实也只有5个处于并发状态。<br/>\n<image src=/images/http代理.png' width=\"400px\"></image><br/>\n```\n// 可以通过http.Agent修改连接数量，但连接数量过大会影响服务器性能\nvar agent = new http.Agent({\n  maxSockets: 10\n})\nvar option = {\n  hostname: '127.0.0.1',\n  port: 1334,\n  path: '/',\n  method: 'GET',\n  agent: agent\n}\n```\n\n### 构建 WebSocket 服务<br/>\nWebsocket 协议解决了服务器与客户端全双工通信的问题,也就是客户端和服务端之间的长连接<br/>\n\n### WebSocket协议解析<br/>\n\nWebSocket协议主要分为两个部分第一部分 http **握手**连接，第二部分协议升级为 WebSocket 进行**数据传输**<br/>\n<image src=/images/websocket.png' width=\"400px\"></image><br/>\n\n\n\n### TCP UDP HTTP WebSocket区别\n1. TCP UDP HTTP WebSocket都是协议，而TCP/IP是不同协议的组合 <br/>\n2. Socket的本质是API，只不过是对TCP/IP协议族的抽象或者说封装<br/>\n3. 从分层上来区分，HTTP，WebSocket是应用层协议，TCP，UDP是传输层协议，IP是网络层协议<br/>\n\n**1.TCP和UDP**<br/>\n\nTCP是面向连接的传输控制协议。TCP连接之后，客户端和服务器可以互相发送和接收消息，在客户端或者服务器没有主动断开之前，连接一直存在，故称为长连接。特点：连接有耗时，传输数据无大小限制，准确可靠，先发先至<br/>\nUDP是无连接的用户数据报协议，所谓的无连接就是在传输数据之前不需要交换信息，没有握手建立连接的过程，只需要直接将对应的数据发送到指定的地址和端口就行。故UDP的特点是不稳定，速度快，可广播，一般数据包限定64KB之内，先发未必先至<br/>\n\n**2.HTTP**<br/>\n\nHTTP是基于TCP协议的应用，请求时需建立TCP连接，而且请求包中需要包含请求方法，URI，协议版本等信息，请求结束后断开连接，完成一次请求/响应操作。故称为短连接。\n而HTTP/1.1中的keep-alive所保持的长连接则是为了优化每次HTTP请求中TCP连接三次握手的麻烦和资源开销，只建立一次TCP连接，多次的在这个通道上完成请求/响应操作<br/>\n\n**3.WebSocket**<br/>\n\nWebSocket也是一种协议，并且也是基于TCP协议的。具体流程是WebSocket通过HTTP先发送一个标记了 Upgrade 的请求，服务端解析后开始建立TCP连接，省去了HTTP每次请求都要上传header的冗余，可以理解为WebSocket是HTTP的优化<br/>\n\n\n**4.HTTP、WebSocket与TCP的关系**<br/>\n\nHTTP通信过程是客户端不发请求则服务器永远无法发送数据给客户端，而WebSocket则在进行第一次HTTP请求之后，其他全部采用TCP通道进行双向通讯<br/>\nHTTP和WebSocket虽都是基于TCP协议<br/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node/http.md","raw":"---\ntitle:  tcp udp http\ndate: 2019-03-23 22:33:25\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\n### 构建TCP服务<br/>\n tcp全名为传输控制协议，在OSI模型中属于传输层协议如下图<br/>\n <image src=/images/tcp.png' width=\"300px\"></image><br/>\n\n tcp是面向连接的协议，特点是在传输之前需要3次握手形成会话如下图<br/>\n <image src=/images/ack.png' width=\"300px\"></image><br/>\n\n  第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认<br/>\n  第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态<br/>\n  第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手<br/>\n\n  当然tcp也会有四次挥手，在这里就不具体说明了<br/>\n\n### 创建TCP服务端<br/>\n1、创建TCP服务端接受网络请求<br/>\n1.1服务器事件<br/>\n\n```\nvar net = require('net');\nvar server = net.createServer(function(socket) {\n  // 开始新连接\n  socket.on('data', function(data) {\n    socket.write('hello');\n  })\n\n  // 断开连接\n  socket.on('end', function() {\n    console.log('断开连接');\n  }) \n})\n\nserver.listen(8124, function() {\n  console.log('server start listen port 8124 !');\n});\n```\n通过上面代码创建为服务器事件，它是一个**EventEmitter**实例，自定义事件有一下几种<br/>\n- listening 绑定的端口\n- connection 连接到服务器时出发此事件\n- close 服务器关闭时触发\n- error 服务器发生异常时触发<br/>\n\n1.2连接事件<br/>\n\n```\nvar net = require('net');\nvar client = net.connect({ port: 8124 }, function () {\n  console.log('client connected !');\n  client.write('hello');\n})\n\nclient.on('data', function (data) {\n  conosle.log(data);\n  client.end();\n})\n\nclient.on('end', function () {\n  console.log('此连接结束');\n})\n```\n通过上面代码创建连接事件，服务器可以同时与多个客户端保持连接，对于每个连接其实都是**Stream**对象，它用于服务器端和客户端之间的通讯，自定义事件如下<br/>\n- data 当一端调用write()发送数据时，另一端会触发data，事件传递的数据是write()发送的数据\n- end 当连接中的任意一端发送**FIN** 数据时，触发此事件\n- drain 当一端调用write()发送数据时，触发此事件\n- close 当所有连接完全关闭时触发\n- error 服务器发生异常时触发\n- timeout 连接超时时触发\n\n**node中 TCP默认开启Nagle算法（优化网络数据包）此算法由于要求缓冲数据达到一定数量或一定时间后才发送，所以可能会造成延迟发送**\n\n### 构建UDP服务<br/>\nUDP用户数据包协议，和TCP一样属于网络传输层<br/>\n\n### 创建UDP服务端<br/>\n```\nvar dgram = require('dgram');\n// 创建server对象\nvar server  = dgram.createSocket('udp4');\n// 接到消息时，触发该事件，携带的数据为消息buffer和远程地址信息对象\nserver.on('message' function (msg, rinfo) {\n  console.log(msg)\n  console.log(rinfo)\n});\n// 绑定端口之后启动监听时间\nserver.on('listening', function () {\n  var address = server.address();\n  console.log(address);\n});\n// 绑定端口\nserver.bind(41234);\n\n```\n### 创建UDP客户端<br/>\n```\nvar dgram = require('dgram');\n\nvar message = new Buffer('hello');\nvar client = dgram.createSocket('udp4');\nclient.send(message, 0, message.length, 41234, 'localhost', function (err, bytes) {\n  client.close();\n})\n```\n\n### 构建HTTP服务<br/>\n\nHTTP是超文本传输协议，是构建在TCP之上的，属于应用层协议，在HTTP的两端是服务端和浏览器也就是B/S模式<br/>\n\n### HTTP报文<br/>\n我们可以在命令行利用curl -v http://localhost:8080/ 来模拟请求，产生如下报文信息<br/>\n\n第一部分其实就是标准的TCP3次握手过程<br/>\n```\n* About to connect() to localhost (127.0.0.1) port 8080 (#0)\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n```\n\n第二部分在握手完成之后，客户端向服务端发送的请求报文<br/>\n```\n> GET / HTTP/1.1\n> Host: 127.0.0.1:8080\n> User-Agent: curl/7.54.0\n> Accept: */*\n>\n```\n\n第三部分是服务端处理结束后，向客户端发送的响应内容包括响应头和响应体<br/>\n```\n< HTTP/1.1 200 OK\n< X-Powered-By: Express\n< Accept-Ranges: bytes\n< Content-Type: text/html; charset=UTF-8\n< Content-Length: 820\n< ETag: W/\"334-dKswJvgc24O5QPXd939SLJD+BhM\"\n< Date: Thu, 11 Apr 2019 10:33:03 GMT\n< Connection: keep-alive\n<\nhello\n```\n\n第四部分是结束此会话<br/>\n```\n* Connection #0 to host 127.0.0.1 left intact\n* Closing connection #0\n```\n\n通过上面的信息中我们可以看出虽然是基于 TCP，但是本身确实基于请求响应式的，一问一答模式并不是会话模式。<br/>\n\n### HTTP模块<br/>\n\nnode http 模块承继 tcp 服务器（ net 模块）它能够与多个客户端保持连接，采用事件驱动，不会为每个连接创建额外的线程或进程。占用内存低，所以能实现高并发，tcp 服务以connection进行服务，http以request进行服务。node http 模块将connection和request进行封装<br/>\n<image src=/images/request.png' width=\"400px\"></image><br/>\n\nhttp模块将所有读写抽象为ServerRequest和ServerResponse对象<br/>\n<image src=/images/http.png' width=\"400px\"></image><br/>\n```\nfunction (req, res) {\n  res.writeHead(200, {'Content-Type' : 'text/plain'});\n  res.end('Hello Word');\n}\n```\n\n### HTTP代理<br/>\n\nhttp 提供的 ClientRequest 是基于 tcp 层实现的，在keepalive情况下，一个底层会话能够连接多个请求。<br/>\nhttp 模块包含一个默认的客户端代理对象http.globalAgent<br/>\n通过 ClientRequest 对象对用一个服务器发起的 http 最多可以创建5个连接，实际上是一个连接池。如果 http 客户端同时对一个服务器发起超过5个请求，其实也只有5个处于并发状态。<br/>\n<image src=/images/http代理.png' width=\"400px\"></image><br/>\n```\n// 可以通过http.Agent修改连接数量，但连接数量过大会影响服务器性能\nvar agent = new http.Agent({\n  maxSockets: 10\n})\nvar option = {\n  hostname: '127.0.0.1',\n  port: 1334,\n  path: '/',\n  method: 'GET',\n  agent: agent\n}\n```\n\n### 构建 WebSocket 服务<br/>\nWebsocket 协议解决了服务器与客户端全双工通信的问题,也就是客户端和服务端之间的长连接<br/>\n\n### WebSocket协议解析<br/>\n\nWebSocket协议主要分为两个部分第一部分 http **握手**连接，第二部分协议升级为 WebSocket 进行**数据传输**<br/>\n<image src=/images/websocket.png' width=\"400px\"></image><br/>\n\n\n\n### TCP UDP HTTP WebSocket区别\n1. TCP UDP HTTP WebSocket都是协议，而TCP/IP是不同协议的组合 <br/>\n2. Socket的本质是API，只不过是对TCP/IP协议族的抽象或者说封装<br/>\n3. 从分层上来区分，HTTP，WebSocket是应用层协议，TCP，UDP是传输层协议，IP是网络层协议<br/>\n\n**1.TCP和UDP**<br/>\n\nTCP是面向连接的传输控制协议。TCP连接之后，客户端和服务器可以互相发送和接收消息，在客户端或者服务器没有主动断开之前，连接一直存在，故称为长连接。特点：连接有耗时，传输数据无大小限制，准确可靠，先发先至<br/>\nUDP是无连接的用户数据报协议，所谓的无连接就是在传输数据之前不需要交换信息，没有握手建立连接的过程，只需要直接将对应的数据发送到指定的地址和端口就行。故UDP的特点是不稳定，速度快，可广播，一般数据包限定64KB之内，先发未必先至<br/>\n\n**2.HTTP**<br/>\n\nHTTP是基于TCP协议的应用，请求时需建立TCP连接，而且请求包中需要包含请求方法，URI，协议版本等信息，请求结束后断开连接，完成一次请求/响应操作。故称为短连接。\n而HTTP/1.1中的keep-alive所保持的长连接则是为了优化每次HTTP请求中TCP连接三次握手的麻烦和资源开销，只建立一次TCP连接，多次的在这个通道上完成请求/响应操作<br/>\n\n**3.WebSocket**<br/>\n\nWebSocket也是一种协议，并且也是基于TCP协议的。具体流程是WebSocket通过HTTP先发送一个标记了 Upgrade 的请求，服务端解析后开始建立TCP连接，省去了HTTP每次请求都要上传header的冗余，可以理解为WebSocket是HTTP的优化<br/>\n\n\n**4.HTTP、WebSocket与TCP的关系**<br/>\n\nHTTP通信过程是客户端不发请求则服务器永远无法发送数据给客户端，而WebSocket则在进行第一次HTTP请求之后，其他全部采用TCP通道进行双向通讯<br/>\nHTTP和WebSocket虽都是基于TCP协议<br/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node/http","published":1,"updated":"2019-08-26T16:46:27.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8p003lkuu67mslrye1","content":"<h3 id=\"构建TCP服务\"><a href=\"#构建TCP服务\" class=\"headerlink\" title=\"构建TCP服务\"></a>构建TCP服务<br></h3><p> tcp全名为传输控制协议，在OSI模型中属于传输层协议如下图<br><br> &lt;image src=/images/tcp.png’ width=”300px”&gt;<br></p>\n<p> tcp是面向连接的协议，特点是在传输之前需要3次握手形成会话如下图<br><br> &lt;image src=/images/ack.png’ width=”300px”&gt;<br></p>\n<p>  第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认<br><br>  第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态<br><br>  第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手<br></p>\n<p>  当然tcp也会有四次挥手，在这里就不具体说明了<br></p>\n<h3 id=\"创建TCP服务端\"><a href=\"#创建TCP服务端\" class=\"headerlink\" title=\"创建TCP服务端\"></a>创建TCP服务端<br></h3><p>1、创建TCP服务端接受网络请求<br><br>1.1服务器事件<br></p>\n<pre><code>var net = require(&#39;net&#39;);\nvar server = net.createServer(function(socket) {\n  // 开始新连接\n  socket.on(&#39;data&#39;, function(data) {\n    socket.write(&#39;hello&#39;);\n  })\n\n  // 断开连接\n  socket.on(&#39;end&#39;, function() {\n    console.log(&#39;断开连接&#39;);\n  }) \n})\n\nserver.listen(8124, function() {\n  console.log(&#39;server start listen port 8124 !&#39;);\n});</code></pre><p>通过上面代码创建为服务器事件，它是一个<strong>EventEmitter</strong>实例，自定义事件有一下几种<br></p>\n<ul>\n<li>listening 绑定的端口</li>\n<li>connection 连接到服务器时出发此事件</li>\n<li>close 服务器关闭时触发</li>\n<li>error 服务器发生异常时触发<br></li>\n</ul>\n<p>1.2连接事件<br></p>\n<pre><code>var net = require(&#39;net&#39;);\nvar client = net.connect({ port: 8124 }, function () {\n  console.log(&#39;client connected !&#39;);\n  client.write(&#39;hello&#39;);\n})\n\nclient.on(&#39;data&#39;, function (data) {\n  conosle.log(data);\n  client.end();\n})\n\nclient.on(&#39;end&#39;, function () {\n  console.log(&#39;此连接结束&#39;);\n})</code></pre><p>通过上面代码创建连接事件，服务器可以同时与多个客户端保持连接，对于每个连接其实都是<strong>Stream</strong>对象，它用于服务器端和客户端之间的通讯，自定义事件如下<br></p>\n<ul>\n<li>data 当一端调用write()发送数据时，另一端会触发data，事件传递的数据是write()发送的数据</li>\n<li>end 当连接中的任意一端发送<strong>FIN</strong> 数据时，触发此事件</li>\n<li>drain 当一端调用write()发送数据时，触发此事件</li>\n<li>close 当所有连接完全关闭时触发</li>\n<li>error 服务器发生异常时触发</li>\n<li>timeout 连接超时时触发</li>\n</ul>\n<p><strong>node中 TCP默认开启Nagle算法（优化网络数据包）此算法由于要求缓冲数据达到一定数量或一定时间后才发送，所以可能会造成延迟发送</strong></p>\n<h3 id=\"构建UDP服务\"><a href=\"#构建UDP服务\" class=\"headerlink\" title=\"构建UDP服务\"></a>构建UDP服务<br></h3><p>UDP用户数据包协议，和TCP一样属于网络传输层<br></p>\n<h3 id=\"创建UDP服务端\"><a href=\"#创建UDP服务端\" class=\"headerlink\" title=\"创建UDP服务端\"></a>创建UDP服务端<br></h3><pre><code>var dgram = require(&#39;dgram&#39;);\n// 创建server对象\nvar server  = dgram.createSocket(&#39;udp4&#39;);\n// 接到消息时，触发该事件，携带的数据为消息buffer和远程地址信息对象\nserver.on(&#39;message&#39; function (msg, rinfo) {\n  console.log(msg)\n  console.log(rinfo)\n});\n// 绑定端口之后启动监听时间\nserver.on(&#39;listening&#39;, function () {\n  var address = server.address();\n  console.log(address);\n});\n// 绑定端口\nserver.bind(41234);\n</code></pre><h3 id=\"创建UDP客户端\"><a href=\"#创建UDP客户端\" class=\"headerlink\" title=\"创建UDP客户端\"></a>创建UDP客户端<br></h3><pre><code>var dgram = require(&#39;dgram&#39;);\n\nvar message = new Buffer(&#39;hello&#39;);\nvar client = dgram.createSocket(&#39;udp4&#39;);\nclient.send(message, 0, message.length, 41234, &#39;localhost&#39;, function (err, bytes) {\n  client.close();\n})</code></pre><h3 id=\"构建HTTP服务\"><a href=\"#构建HTTP服务\" class=\"headerlink\" title=\"构建HTTP服务\"></a>构建HTTP服务<br></h3><p>HTTP是超文本传输协议，是构建在TCP之上的，属于应用层协议，在HTTP的两端是服务端和浏览器也就是B/S模式<br></p>\n<h3 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文<br></h3><p>我们可以在命令行利用curl -v <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a> 来模拟请求，产生如下报文信息<br></p>\n<p>第一部分其实就是标准的TCP3次握手过程<br></p>\n<pre><code>* About to connect() to localhost (127.0.0.1) port 8080 (#0)\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)</code></pre><p>第二部分在握手完成之后，客户端向服务端发送的请求报文<br></p>\n<pre><code>&gt; GET / HTTP/1.1\n&gt; Host: 127.0.0.1:8080\n&gt; User-Agent: curl/7.54.0\n&gt; Accept: */*\n&gt;</code></pre><p>第三部分是服务端处理结束后，向客户端发送的响应内容包括响应头和响应体<br></p>\n<pre><code>&lt; HTTP/1.1 200 OK\n&lt; X-Powered-By: Express\n&lt; Accept-Ranges: bytes\n&lt; Content-Type: text/html; charset=UTF-8\n&lt; Content-Length: 820\n&lt; ETag: W/&quot;334-dKswJvgc24O5QPXd939SLJD+BhM&quot;\n&lt; Date: Thu, 11 Apr 2019 10:33:03 GMT\n&lt; Connection: keep-alive\n&lt;\nhello</code></pre><p>第四部分是结束此会话<br></p>\n<pre><code>* Connection #0 to host 127.0.0.1 left intact\n* Closing connection #0</code></pre><p>通过上面的信息中我们可以看出虽然是基于 TCP，但是本身确实基于请求响应式的，一问一答模式并不是会话模式。<br></p>\n<h3 id=\"HTTP模块\"><a href=\"#HTTP模块\" class=\"headerlink\" title=\"HTTP模块\"></a>HTTP模块<br></h3><p>node http 模块承继 tcp 服务器（ net 模块）它能够与多个客户端保持连接，采用事件驱动，不会为每个连接创建额外的线程或进程。占用内存低，所以能实现高并发，tcp 服务以connection进行服务，http以request进行服务。node http 模块将connection和request进行封装<br><br>&lt;image src=/images/request.png’ width=”400px”&gt;<br></p>\n<p>http模块将所有读写抽象为ServerRequest和ServerResponse对象<br><br>&lt;image src=/images/http.png’ width=”400px”&gt;<br></p>\n<pre><code>function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});\n  res.end(&#39;Hello Word&#39;);\n}</code></pre><h3 id=\"HTTP代理\"><a href=\"#HTTP代理\" class=\"headerlink\" title=\"HTTP代理\"></a>HTTP代理<br></h3><p>http 提供的 ClientRequest 是基于 tcp 层实现的，在keepalive情况下，一个底层会话能够连接多个请求。<br><br>http 模块包含一个默认的客户端代理对象http.globalAgent<br><br>通过 ClientRequest 对象对用一个服务器发起的 http 最多可以创建5个连接，实际上是一个连接池。如果 http 客户端同时对一个服务器发起超过5个请求，其实也只有5个处于并发状态。<br><br>&lt;image src=/images/http代理.png’ width=”400px”&gt;<br></p>\n<pre><code>// 可以通过http.Agent修改连接数量，但连接数量过大会影响服务器性能\nvar agent = new http.Agent({\n  maxSockets: 10\n})\nvar option = {\n  hostname: &#39;127.0.0.1&#39;,\n  port: 1334,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  agent: agent\n}</code></pre><h3 id=\"构建-WebSocket-服务\"><a href=\"#构建-WebSocket-服务\" class=\"headerlink\" title=\"构建 WebSocket 服务\"></a>构建 WebSocket 服务<br></h3><p>Websocket 协议解决了服务器与客户端全双工通信的问题,也就是客户端和服务端之间的长连接<br></p>\n<h3 id=\"WebSocket协议解析\"><a href=\"#WebSocket协议解析\" class=\"headerlink\" title=\"WebSocket协议解析\"></a>WebSocket协议解析<br></h3><p>WebSocket协议主要分为两个部分第一部分 http <strong>握手</strong>连接，第二部分协议升级为 WebSocket 进行<strong>数据传输</strong><br><br>&lt;image src=/images/websocket.png’ width=”400px”&gt;<br></p>\n<h3 id=\"TCP-UDP-HTTP-WebSocket区别\"><a href=\"#TCP-UDP-HTTP-WebSocket区别\" class=\"headerlink\" title=\"TCP UDP HTTP WebSocket区别\"></a>TCP UDP HTTP WebSocket区别</h3><ol>\n<li>TCP UDP HTTP WebSocket都是协议，而TCP/IP是不同协议的组合 <br></li>\n<li>Socket的本质是API，只不过是对TCP/IP协议族的抽象或者说封装<br></li>\n<li>从分层上来区分，HTTP，WebSocket是应用层协议，TCP，UDP是传输层协议，IP是网络层协议<br></li>\n</ol>\n<p><strong>1.TCP和UDP</strong><br></p>\n<p>TCP是面向连接的传输控制协议。TCP连接之后，客户端和服务器可以互相发送和接收消息，在客户端或者服务器没有主动断开之前，连接一直存在，故称为长连接。特点：连接有耗时，传输数据无大小限制，准确可靠，先发先至<br><br>UDP是无连接的用户数据报协议，所谓的无连接就是在传输数据之前不需要交换信息，没有握手建立连接的过程，只需要直接将对应的数据发送到指定的地址和端口就行。故UDP的特点是不稳定，速度快，可广播，一般数据包限定64KB之内，先发未必先至<br></p>\n<p><strong>2.HTTP</strong><br></p>\n<p>HTTP是基于TCP协议的应用，请求时需建立TCP连接，而且请求包中需要包含请求方法，URI，协议版本等信息，请求结束后断开连接，完成一次请求/响应操作。故称为短连接。<br>而HTTP/1.1中的keep-alive所保持的长连接则是为了优化每次HTTP请求中TCP连接三次握手的麻烦和资源开销，只建立一次TCP连接，多次的在这个通道上完成请求/响应操作<br></p>\n<p><strong>3.WebSocket</strong><br></p>\n<p>WebSocket也是一种协议，并且也是基于TCP协议的。具体流程是WebSocket通过HTTP先发送一个标记了 Upgrade 的请求，服务端解析后开始建立TCP连接，省去了HTTP每次请求都要上传header的冗余，可以理解为WebSocket是HTTP的优化<br></p>\n<p><strong>4.HTTP、WebSocket与TCP的关系</strong><br></p>\n<p>HTTP通信过程是客户端不发请求则服务器永远无法发送数据给客户端，而WebSocket则在进行第一次HTTP请求之后，其他全部采用TCP通道进行双向通讯<br><br>HTTP和WebSocket虽都是基于TCP协议<br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"构建TCP服务\"><a href=\"#构建TCP服务\" class=\"headerlink\" title=\"构建TCP服务\"></a>构建TCP服务<br></h3><p> tcp全名为传输控制协议，在OSI模型中属于传输层协议如下图<br><br> &lt;image src=/images/tcp.png’ width=”300px”&gt;<br></p>\n<p> tcp是面向连接的协议，特点是在传输之前需要3次握手形成会话如下图<br><br> &lt;image src=/images/ack.png’ width=”300px”&gt;<br></p>\n<p>  第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认<br><br>  第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态<br><br>  第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手<br></p>\n<p>  当然tcp也会有四次挥手，在这里就不具体说明了<br></p>\n<h3 id=\"创建TCP服务端\"><a href=\"#创建TCP服务端\" class=\"headerlink\" title=\"创建TCP服务端\"></a>创建TCP服务端<br></h3><p>1、创建TCP服务端接受网络请求<br><br>1.1服务器事件<br></p>\n<pre><code>var net = require(&#39;net&#39;);\nvar server = net.createServer(function(socket) {\n  // 开始新连接\n  socket.on(&#39;data&#39;, function(data) {\n    socket.write(&#39;hello&#39;);\n  })\n\n  // 断开连接\n  socket.on(&#39;end&#39;, function() {\n    console.log(&#39;断开连接&#39;);\n  }) \n})\n\nserver.listen(8124, function() {\n  console.log(&#39;server start listen port 8124 !&#39;);\n});</code></pre><p>通过上面代码创建为服务器事件，它是一个<strong>EventEmitter</strong>实例，自定义事件有一下几种<br></p>\n<ul>\n<li>listening 绑定的端口</li>\n<li>connection 连接到服务器时出发此事件</li>\n<li>close 服务器关闭时触发</li>\n<li>error 服务器发生异常时触发<br></li>\n</ul>\n<p>1.2连接事件<br></p>\n<pre><code>var net = require(&#39;net&#39;);\nvar client = net.connect({ port: 8124 }, function () {\n  console.log(&#39;client connected !&#39;);\n  client.write(&#39;hello&#39;);\n})\n\nclient.on(&#39;data&#39;, function (data) {\n  conosle.log(data);\n  client.end();\n})\n\nclient.on(&#39;end&#39;, function () {\n  console.log(&#39;此连接结束&#39;);\n})</code></pre><p>通过上面代码创建连接事件，服务器可以同时与多个客户端保持连接，对于每个连接其实都是<strong>Stream</strong>对象，它用于服务器端和客户端之间的通讯，自定义事件如下<br></p>\n<ul>\n<li>data 当一端调用write()发送数据时，另一端会触发data，事件传递的数据是write()发送的数据</li>\n<li>end 当连接中的任意一端发送<strong>FIN</strong> 数据时，触发此事件</li>\n<li>drain 当一端调用write()发送数据时，触发此事件</li>\n<li>close 当所有连接完全关闭时触发</li>\n<li>error 服务器发生异常时触发</li>\n<li>timeout 连接超时时触发</li>\n</ul>\n<p><strong>node中 TCP默认开启Nagle算法（优化网络数据包）此算法由于要求缓冲数据达到一定数量或一定时间后才发送，所以可能会造成延迟发送</strong></p>\n<h3 id=\"构建UDP服务\"><a href=\"#构建UDP服务\" class=\"headerlink\" title=\"构建UDP服务\"></a>构建UDP服务<br></h3><p>UDP用户数据包协议，和TCP一样属于网络传输层<br></p>\n<h3 id=\"创建UDP服务端\"><a href=\"#创建UDP服务端\" class=\"headerlink\" title=\"创建UDP服务端\"></a>创建UDP服务端<br></h3><pre><code>var dgram = require(&#39;dgram&#39;);\n// 创建server对象\nvar server  = dgram.createSocket(&#39;udp4&#39;);\n// 接到消息时，触发该事件，携带的数据为消息buffer和远程地址信息对象\nserver.on(&#39;message&#39; function (msg, rinfo) {\n  console.log(msg)\n  console.log(rinfo)\n});\n// 绑定端口之后启动监听时间\nserver.on(&#39;listening&#39;, function () {\n  var address = server.address();\n  console.log(address);\n});\n// 绑定端口\nserver.bind(41234);\n</code></pre><h3 id=\"创建UDP客户端\"><a href=\"#创建UDP客户端\" class=\"headerlink\" title=\"创建UDP客户端\"></a>创建UDP客户端<br></h3><pre><code>var dgram = require(&#39;dgram&#39;);\n\nvar message = new Buffer(&#39;hello&#39;);\nvar client = dgram.createSocket(&#39;udp4&#39;);\nclient.send(message, 0, message.length, 41234, &#39;localhost&#39;, function (err, bytes) {\n  client.close();\n})</code></pre><h3 id=\"构建HTTP服务\"><a href=\"#构建HTTP服务\" class=\"headerlink\" title=\"构建HTTP服务\"></a>构建HTTP服务<br></h3><p>HTTP是超文本传输协议，是构建在TCP之上的，属于应用层协议，在HTTP的两端是服务端和浏览器也就是B/S模式<br></p>\n<h3 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文<br></h3><p>我们可以在命令行利用curl -v <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/</a> 来模拟请求，产生如下报文信息<br></p>\n<p>第一部分其实就是标准的TCP3次握手过程<br></p>\n<pre><code>* About to connect() to localhost (127.0.0.1) port 8080 (#0)\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)</code></pre><p>第二部分在握手完成之后，客户端向服务端发送的请求报文<br></p>\n<pre><code>&gt; GET / HTTP/1.1\n&gt; Host: 127.0.0.1:8080\n&gt; User-Agent: curl/7.54.0\n&gt; Accept: */*\n&gt;</code></pre><p>第三部分是服务端处理结束后，向客户端发送的响应内容包括响应头和响应体<br></p>\n<pre><code>&lt; HTTP/1.1 200 OK\n&lt; X-Powered-By: Express\n&lt; Accept-Ranges: bytes\n&lt; Content-Type: text/html; charset=UTF-8\n&lt; Content-Length: 820\n&lt; ETag: W/&quot;334-dKswJvgc24O5QPXd939SLJD+BhM&quot;\n&lt; Date: Thu, 11 Apr 2019 10:33:03 GMT\n&lt; Connection: keep-alive\n&lt;\nhello</code></pre><p>第四部分是结束此会话<br></p>\n<pre><code>* Connection #0 to host 127.0.0.1 left intact\n* Closing connection #0</code></pre><p>通过上面的信息中我们可以看出虽然是基于 TCP，但是本身确实基于请求响应式的，一问一答模式并不是会话模式。<br></p>\n<h3 id=\"HTTP模块\"><a href=\"#HTTP模块\" class=\"headerlink\" title=\"HTTP模块\"></a>HTTP模块<br></h3><p>node http 模块承继 tcp 服务器（ net 模块）它能够与多个客户端保持连接，采用事件驱动，不会为每个连接创建额外的线程或进程。占用内存低，所以能实现高并发，tcp 服务以connection进行服务，http以request进行服务。node http 模块将connection和request进行封装<br><br>&lt;image src=/images/request.png’ width=”400px”&gt;<br></p>\n<p>http模块将所有读写抽象为ServerRequest和ServerResponse对象<br><br>&lt;image src=/images/http.png’ width=”400px”&gt;<br></p>\n<pre><code>function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});\n  res.end(&#39;Hello Word&#39;);\n}</code></pre><h3 id=\"HTTP代理\"><a href=\"#HTTP代理\" class=\"headerlink\" title=\"HTTP代理\"></a>HTTP代理<br></h3><p>http 提供的 ClientRequest 是基于 tcp 层实现的，在keepalive情况下，一个底层会话能够连接多个请求。<br><br>http 模块包含一个默认的客户端代理对象http.globalAgent<br><br>通过 ClientRequest 对象对用一个服务器发起的 http 最多可以创建5个连接，实际上是一个连接池。如果 http 客户端同时对一个服务器发起超过5个请求，其实也只有5个处于并发状态。<br><br>&lt;image src=/images/http代理.png’ width=”400px”&gt;<br></p>\n<pre><code>// 可以通过http.Agent修改连接数量，但连接数量过大会影响服务器性能\nvar agent = new http.Agent({\n  maxSockets: 10\n})\nvar option = {\n  hostname: &#39;127.0.0.1&#39;,\n  port: 1334,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  agent: agent\n}</code></pre><h3 id=\"构建-WebSocket-服务\"><a href=\"#构建-WebSocket-服务\" class=\"headerlink\" title=\"构建 WebSocket 服务\"></a>构建 WebSocket 服务<br></h3><p>Websocket 协议解决了服务器与客户端全双工通信的问题,也就是客户端和服务端之间的长连接<br></p>\n<h3 id=\"WebSocket协议解析\"><a href=\"#WebSocket协议解析\" class=\"headerlink\" title=\"WebSocket协议解析\"></a>WebSocket协议解析<br></h3><p>WebSocket协议主要分为两个部分第一部分 http <strong>握手</strong>连接，第二部分协议升级为 WebSocket 进行<strong>数据传输</strong><br><br>&lt;image src=/images/websocket.png’ width=”400px”&gt;<br></p>\n<h3 id=\"TCP-UDP-HTTP-WebSocket区别\"><a href=\"#TCP-UDP-HTTP-WebSocket区别\" class=\"headerlink\" title=\"TCP UDP HTTP WebSocket区别\"></a>TCP UDP HTTP WebSocket区别</h3><ol>\n<li>TCP UDP HTTP WebSocket都是协议，而TCP/IP是不同协议的组合 <br></li>\n<li>Socket的本质是API，只不过是对TCP/IP协议族的抽象或者说封装<br></li>\n<li>从分层上来区分，HTTP，WebSocket是应用层协议，TCP，UDP是传输层协议，IP是网络层协议<br></li>\n</ol>\n<p><strong>1.TCP和UDP</strong><br></p>\n<p>TCP是面向连接的传输控制协议。TCP连接之后，客户端和服务器可以互相发送和接收消息，在客户端或者服务器没有主动断开之前，连接一直存在，故称为长连接。特点：连接有耗时，传输数据无大小限制，准确可靠，先发先至<br><br>UDP是无连接的用户数据报协议，所谓的无连接就是在传输数据之前不需要交换信息，没有握手建立连接的过程，只需要直接将对应的数据发送到指定的地址和端口就行。故UDP的特点是不稳定，速度快，可广播，一般数据包限定64KB之内，先发未必先至<br></p>\n<p><strong>2.HTTP</strong><br></p>\n<p>HTTP是基于TCP协议的应用，请求时需建立TCP连接，而且请求包中需要包含请求方法，URI，协议版本等信息，请求结束后断开连接，完成一次请求/响应操作。故称为短连接。<br>而HTTP/1.1中的keep-alive所保持的长连接则是为了优化每次HTTP请求中TCP连接三次握手的麻烦和资源开销，只建立一次TCP连接，多次的在这个通道上完成请求/响应操作<br></p>\n<p><strong>3.WebSocket</strong><br></p>\n<p>WebSocket也是一种协议，并且也是基于TCP协议的。具体流程是WebSocket通过HTTP先发送一个标记了 Upgrade 的请求，服务端解析后开始建立TCP连接，省去了HTTP每次请求都要上传header的冗余，可以理解为WebSocket是HTTP的优化<br></p>\n<p><strong>4.HTTP、WebSocket与TCP的关系</strong><br></p>\n<p>HTTP通信过程是客户端不发请求则服务器永远无法发送数据给客户端，而WebSocket则在进行第一次HTTP请求之后，其他全部采用TCP通道进行双向通讯<br><br>HTTP和WebSocket虽都是基于TCP协议<br></p>\n"},{"title":"module 模块机制","date":"2019-04-05T11:16:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。前端模块化组件化也是在这几年逐渐的流行，在 web2.0 发展过程如下<br/>\n\n\n<image src=\"/images/module.png\" width=\"300\"></image><br/>\n\n### CommonJS 规范<br/>\n\nCommonJS（<a href=\"http://www.commonjs.org\">http://www.commonjs.org</a>）规范的出现解决了JavaScript 没有模块系统，标准库等等问题，而 Node.js 自身实现了 require 作为其引入模块的方法，同时 NPM 也基于 CommonJS 定义的包规范，实现了依赖管理和模块自动安装等功能。下图展现Node与浏览器以及W3C组织、CommonJS组织、ECMAScript之间的关系<br/>\n\n<image src=\"/images/commonjs.png\" width=\"550\"></image><br/>\n\n### CommonJS 模块\n1、模块引用 require 关键字 <br/>\n```\nconst math = require('math'); \n```\n2、模块定义导出 exports 关键字<br/>\n```\nexports.area = function (r) {\n    return Math.PI * r * r;\n};\n\n```\n3、模块标识<br/>\n模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者以.、..开头的相对路径，或者绝对路径，每个模块都有独立的空间。防止虑变量污染。<br/>\n\n### Node 模块实现<br/>\n\n1、引入模块三个步骤(分为核心模块和文件模块)<br/>\n```\n(1) 路径分析\n(2) 文件定位\n(3) 编译执行\n```\n核心模块和文件模块的区别在于加载的时机，核心模块在 Node 进程启动时被直接加载到内存中比文件模块省略了文件定位和编译执行过程<br/>\n\n\n### Node 模块载入策略<br/>\n\n1、不论是核心模块还是文件模块，require()方法对相同模块的二次加载都一律采用缓存优先，以减少二次引入时的开销<br/>\n2、模块引用的过程由于标识符不同在路径分析和文件定位中有一定的差异<br/>\n```\n// 路径分析\n核心模块，如http、fs、path等(加载最快)\n\n.或..开始的相对路径文件模块(慢于核心模块)\n\n以/开始的绝对路径文件模块(慢于核心模块)\n\n自定义模块（最慢-由于沿路径向上逐级递归，直到根目录下的node_modules目录，层级越多越耗时\n\n// 文件定位\n由于其扩展名不同 Node 会按 .js、.json、.node 的次序补、足扩展名，依次尝试\n\n调用fs模块同步阻塞式地判断文件是否存在\n\n如果文件不是 .js 可以在加载的时候写上文件的扩展名，可以加快文件定位速度，\n\n配合缓存，可以大幅度缓解 Node 单线程中阻塞式调用的缺陷\n```\n3、模块编译\n```\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent && parent.children) {\n    parent.children.push(this);\n  }\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n} \n\n对于不同的文件扩展名，其载入方法也有所不同\n\n.js 文件\n  通过fs模块同步读取文件后编译执行。在编译过程中进行了头尾包装。在头部添加了\n  (function (exports, require, module, __filename, __dirname) {\n    \\n，在尾部添加了\\n\n  });。\n  通过vm原生模块的runInThisContext()方法执行（类似eval，只是具有明确上下文，不污染全局），返回一个具体的\n  function对象。最后，将当前模块对象的exports属性、require()方法、module（模块对象自身），\n  以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n\n.node 文件。用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n  Node调用process.dlopen()方法进行加载和执行。在Node的架构下，dlopen()方法在Windows\n  和*nix平台下分别有不同的实现，通过libuv兼容层进行了封装\n\n.json 文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n\n\n其余扩展名文件。它们都被当做.js文件载入。\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。\n```\n\n\n### Node 核心模块的编译、引入、加载过程<br/>\n\n**模块调用栈**<br/>\n\n1、C/C++内建模块属于最底层的模块，它属于核心模块，主要提供API给JavaScript核心模块和第三方JavaScript文件模块调用。<br/>\n2、JavaScript核心模块主要扮演的职责有两类：一类是作为C/C++内建模块的封装层和桥接层，供文件模块调用；一类是纯粹的功能模块，它不需要跟底层打交道，但是又十分重要<br/>\n\n<image src=\"/images/module-p.png\" width=\"350\"></image><br/>\n\n\n**核心模块调用流程**<br/>\n\n1、 JavaScript 核心模块编译过程<br/>\n  - 转存为转存为C/C++代码（Node采用了V8附带的js2c.py工具，将所有内置的JavaScript代码（src/node.js和lib/*.js）转换成C++里的数组，生成node_natives.h头文件，以字符串的形式存储在 node 的命令空间中）<br/>\n  - 启动 node 进程 JavaScript 代码直接加载进内存中<br/>\n  - 编译 JavaScript 核心模块（lib目录下的所有模块文件也没有定义require、module、exports这些变量。上面说过在引入 JavaScript 核心模块过程进行头尾包装，才可以执行exports对象）<br/>\n\n  ```\n  // node_natives.h 头文件代码\n  namespace node {\n    const char node_native[] = { 47, 47, ..};\n    const char dgram_native[] = { 47, 47, ..};\n    const char console_native[] = { 47, 47, ..};\n    const char buffer_native[] = { 47, 47, ..};\n    const char querystring_native[] = { 47, 47, ..};\n    const char punycode_native[] = { 47, 42, ..};\n    ...\n    struct _native {\n      const char* name;\n      const char* source;\n      size_t source_len;\n    };\n    static const struct _native natives[] = {\n      { \"node\", node_native, sizeof(node_native)-1 },\n      { \"dgram\", dgram_native, sizeof(dgram_native)-1 },\n      ...\n    };\n  }\n\n  // JavaScript 核心模块通过process.binding('natives')取出，编译成功的模块缓存到 NativeModule._cache 对象上，文件模块则缓存到 Module._cache 对象上\n  function NativeModule(id) {\n    this.filename = id + '.js';\n    this.id = id;\n    this.exports = {};\n    this.loaded = false;\n  }\n  NativeModule._source = process.binding('natives');\n  NativeModule._cache = {}; \n  ```\n\n2、 C/C++核心模块的编译过程<br/>\n   - 定义内建模块内部结构\n   - 通过NODE_MODULE宏将模块定义到node命名空间中，模块的具体初始化方法挂载为结构的register_func成员<br/>\n   - node_extensions.h文件将这些散列的内建模块统一放进了一个叫node_module_list的数组中<br/>\n   - Node 通过 get_builtin_module() 方法从 node_module_list 数组中取出这些模块<br/>\n  ```\n  // 内建模块的内部结构定义\n  struct node_module_struct {\n    int version;\n    void *dso_handle;\n    const char *filename;\n    void (*register_func) (v8::Handle<v8::Object> target);\n    const char *modname;\n  };\n\n  // 挂载为结构的register_func成员\n  #define NODE_MODULE(modname, regfunc) \n    extern \"C\" { \n      NODE_MODULE_EXPORT node::node_module_struct modname ## _module = \n      { \n        NODE_STANDARD_MODULE_STUFF, \n        regfunc, \n        NODE_STRINGIFY(modname) \n      }; \n    } \n  ```\n\n3、核心模块的引入流程<br/>\n如 os 原生模块的引入流程<br/>\n<image src=\"/images/module-os.png\" width=\"350\"></image><br/>\n\n通过以上我们大致了解了 Node 中模块的编译、加载、引入流程。当然还有核心模块的编写，在这里就不过多的阐述了。更多请参考朴灵老师编著的《深入浅出 node》，相信会有更多的收获。<br/>\n\n","source":"_posts/node/module.md","raw":"---\ntitle:  module 模块机制\ndate: 2019-04-05 19:16:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\n模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。前端模块化组件化也是在这几年逐渐的流行，在 web2.0 发展过程如下<br/>\n\n\n<image src=\"/images/module.png\" width=\"300\"></image><br/>\n\n### CommonJS 规范<br/>\n\nCommonJS（<a href=\"http://www.commonjs.org\">http://www.commonjs.org</a>）规范的出现解决了JavaScript 没有模块系统，标准库等等问题，而 Node.js 自身实现了 require 作为其引入模块的方法，同时 NPM 也基于 CommonJS 定义的包规范，实现了依赖管理和模块自动安装等功能。下图展现Node与浏览器以及W3C组织、CommonJS组织、ECMAScript之间的关系<br/>\n\n<image src=\"/images/commonjs.png\" width=\"550\"></image><br/>\n\n### CommonJS 模块\n1、模块引用 require 关键字 <br/>\n```\nconst math = require('math'); \n```\n2、模块定义导出 exports 关键字<br/>\n```\nexports.area = function (r) {\n    return Math.PI * r * r;\n};\n\n```\n3、模块标识<br/>\n模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者以.、..开头的相对路径，或者绝对路径，每个模块都有独立的空间。防止虑变量污染。<br/>\n\n### Node 模块实现<br/>\n\n1、引入模块三个步骤(分为核心模块和文件模块)<br/>\n```\n(1) 路径分析\n(2) 文件定位\n(3) 编译执行\n```\n核心模块和文件模块的区别在于加载的时机，核心模块在 Node 进程启动时被直接加载到内存中比文件模块省略了文件定位和编译执行过程<br/>\n\n\n### Node 模块载入策略<br/>\n\n1、不论是核心模块还是文件模块，require()方法对相同模块的二次加载都一律采用缓存优先，以减少二次引入时的开销<br/>\n2、模块引用的过程由于标识符不同在路径分析和文件定位中有一定的差异<br/>\n```\n// 路径分析\n核心模块，如http、fs、path等(加载最快)\n\n.或..开始的相对路径文件模块(慢于核心模块)\n\n以/开始的绝对路径文件模块(慢于核心模块)\n\n自定义模块（最慢-由于沿路径向上逐级递归，直到根目录下的node_modules目录，层级越多越耗时\n\n// 文件定位\n由于其扩展名不同 Node 会按 .js、.json、.node 的次序补、足扩展名，依次尝试\n\n调用fs模块同步阻塞式地判断文件是否存在\n\n如果文件不是 .js 可以在加载的时候写上文件的扩展名，可以加快文件定位速度，\n\n配合缓存，可以大幅度缓解 Node 单线程中阻塞式调用的缺陷\n```\n3、模块编译\n```\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent && parent.children) {\n    parent.children.push(this);\n  }\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n} \n\n对于不同的文件扩展名，其载入方法也有所不同\n\n.js 文件\n  通过fs模块同步读取文件后编译执行。在编译过程中进行了头尾包装。在头部添加了\n  (function (exports, require, module, __filename, __dirname) {\n    \\n，在尾部添加了\\n\n  });。\n  通过vm原生模块的runInThisContext()方法执行（类似eval，只是具有明确上下文，不污染全局），返回一个具体的\n  function对象。最后，将当前模块对象的exports属性、require()方法、module（模块对象自身），\n  以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n\n.node 文件。用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n  Node调用process.dlopen()方法进行加载和执行。在Node的架构下，dlopen()方法在Windows\n  和*nix平台下分别有不同的实现，通过libuv兼容层进行了封装\n\n.json 文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n\n\n其余扩展名文件。它们都被当做.js文件载入。\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。\n```\n\n\n### Node 核心模块的编译、引入、加载过程<br/>\n\n**模块调用栈**<br/>\n\n1、C/C++内建模块属于最底层的模块，它属于核心模块，主要提供API给JavaScript核心模块和第三方JavaScript文件模块调用。<br/>\n2、JavaScript核心模块主要扮演的职责有两类：一类是作为C/C++内建模块的封装层和桥接层，供文件模块调用；一类是纯粹的功能模块，它不需要跟底层打交道，但是又十分重要<br/>\n\n<image src=\"/images/module-p.png\" width=\"350\"></image><br/>\n\n\n**核心模块调用流程**<br/>\n\n1、 JavaScript 核心模块编译过程<br/>\n  - 转存为转存为C/C++代码（Node采用了V8附带的js2c.py工具，将所有内置的JavaScript代码（src/node.js和lib/*.js）转换成C++里的数组，生成node_natives.h头文件，以字符串的形式存储在 node 的命令空间中）<br/>\n  - 启动 node 进程 JavaScript 代码直接加载进内存中<br/>\n  - 编译 JavaScript 核心模块（lib目录下的所有模块文件也没有定义require、module、exports这些变量。上面说过在引入 JavaScript 核心模块过程进行头尾包装，才可以执行exports对象）<br/>\n\n  ```\n  // node_natives.h 头文件代码\n  namespace node {\n    const char node_native[] = { 47, 47, ..};\n    const char dgram_native[] = { 47, 47, ..};\n    const char console_native[] = { 47, 47, ..};\n    const char buffer_native[] = { 47, 47, ..};\n    const char querystring_native[] = { 47, 47, ..};\n    const char punycode_native[] = { 47, 42, ..};\n    ...\n    struct _native {\n      const char* name;\n      const char* source;\n      size_t source_len;\n    };\n    static const struct _native natives[] = {\n      { \"node\", node_native, sizeof(node_native)-1 },\n      { \"dgram\", dgram_native, sizeof(dgram_native)-1 },\n      ...\n    };\n  }\n\n  // JavaScript 核心模块通过process.binding('natives')取出，编译成功的模块缓存到 NativeModule._cache 对象上，文件模块则缓存到 Module._cache 对象上\n  function NativeModule(id) {\n    this.filename = id + '.js';\n    this.id = id;\n    this.exports = {};\n    this.loaded = false;\n  }\n  NativeModule._source = process.binding('natives');\n  NativeModule._cache = {}; \n  ```\n\n2、 C/C++核心模块的编译过程<br/>\n   - 定义内建模块内部结构\n   - 通过NODE_MODULE宏将模块定义到node命名空间中，模块的具体初始化方法挂载为结构的register_func成员<br/>\n   - node_extensions.h文件将这些散列的内建模块统一放进了一个叫node_module_list的数组中<br/>\n   - Node 通过 get_builtin_module() 方法从 node_module_list 数组中取出这些模块<br/>\n  ```\n  // 内建模块的内部结构定义\n  struct node_module_struct {\n    int version;\n    void *dso_handle;\n    const char *filename;\n    void (*register_func) (v8::Handle<v8::Object> target);\n    const char *modname;\n  };\n\n  // 挂载为结构的register_func成员\n  #define NODE_MODULE(modname, regfunc) \n    extern \"C\" { \n      NODE_MODULE_EXPORT node::node_module_struct modname ## _module = \n      { \n        NODE_STANDARD_MODULE_STUFF, \n        regfunc, \n        NODE_STRINGIFY(modname) \n      }; \n    } \n  ```\n\n3、核心模块的引入流程<br/>\n如 os 原生模块的引入流程<br/>\n<image src=\"/images/module-os.png\" width=\"350\"></image><br/>\n\n通过以上我们大致了解了 Node 中模块的编译、加载、引入流程。当然还有核心模块的编写，在这里就不过多的阐述了。更多请参考朴灵老师编著的《深入浅出 node》，相信会有更多的收获。<br/>\n\n","slug":"node/module","published":1,"updated":"2019-08-28T12:32:09.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8r003mkuu67hh2rsx3","content":"<p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。前端模块化组件化也是在这几年逐渐的流行，在 web2.0 发展过程如下<br></p>\n<p><image src=\"/images/module.png\" width=\"300\"></image><br></p>\n<h3 id=\"CommonJS-规范\"><a href=\"#CommonJS-规范\" class=\"headerlink\" title=\"CommonJS 规范\"></a>CommonJS 规范<br></h3><p>CommonJS（<a href=\"http://www.commonjs.org\" target=\"_blank\" rel=\"noopener\">http://www.commonjs.org</a>）规范的出现解决了JavaScript 没有模块系统，标准库等等问题，而 Node.js 自身实现了 require 作为其引入模块的方法，同时 NPM 也基于 CommonJS 定义的包规范，实现了依赖管理和模块自动安装等功能。下图展现Node与浏览器以及W3C组织、CommonJS组织、ECMAScript之间的关系<br></p>\n<p><image src=\"/images/commonjs.png\" width=\"550\"></image><br></p>\n<h3 id=\"CommonJS-模块\"><a href=\"#CommonJS-模块\" class=\"headerlink\" title=\"CommonJS 模块\"></a>CommonJS 模块</h3><p>1、模块引用 require 关键字 <br></p>\n<pre><code>const math = require(&#39;math&#39;); </code></pre><p>2、模块定义导出 exports 关键字<br></p>\n<pre><code>exports.area = function (r) {\n    return Math.PI * r * r;\n};\n</code></pre><p>3、模块标识<br><br>模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者以.、..开头的相对路径，或者绝对路径，每个模块都有独立的空间。防止虑变量污染。<br></p>\n<h3 id=\"Node-模块实现\"><a href=\"#Node-模块实现\" class=\"headerlink\" title=\"Node 模块实现\"></a>Node 模块实现<br></h3><p>1、引入模块三个步骤(分为核心模块和文件模块)<br></p>\n<pre><code>(1) 路径分析\n(2) 文件定位\n(3) 编译执行</code></pre><p>核心模块和文件模块的区别在于加载的时机，核心模块在 Node 进程启动时被直接加载到内存中比文件模块省略了文件定位和编译执行过程<br></p>\n<h3 id=\"Node-模块载入策略\"><a href=\"#Node-模块载入策略\" class=\"headerlink\" title=\"Node 模块载入策略\"></a>Node 模块载入策略<br></h3><p>1、不论是核心模块还是文件模块，require()方法对相同模块的二次加载都一律采用缓存优先，以减少二次引入时的开销<br><br>2、模块引用的过程由于标识符不同在路径分析和文件定位中有一定的差异<br></p>\n<pre><code>// 路径分析\n核心模块，如http、fs、path等(加载最快)\n\n.或..开始的相对路径文件模块(慢于核心模块)\n\n以/开始的绝对路径文件模块(慢于核心模块)\n\n自定义模块（最慢-由于沿路径向上逐级递归，直到根目录下的node_modules目录，层级越多越耗时\n\n// 文件定位\n由于其扩展名不同 Node 会按 .js、.json、.node 的次序补、足扩展名，依次尝试\n\n调用fs模块同步阻塞式地判断文件是否存在\n\n如果文件不是 .js 可以在加载的时候写上文件的扩展名，可以加快文件定位速度，\n\n配合缓存，可以大幅度缓解 Node 单线程中阻塞式调用的缺陷</code></pre><p>3、模块编译</p>\n<pre><code>function Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent &amp;&amp; parent.children) {\n    parent.children.push(this);\n  }\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n} \n\n对于不同的文件扩展名，其载入方法也有所不同\n\n.js 文件\n  通过fs模块同步读取文件后编译执行。在编译过程中进行了头尾包装。在头部添加了\n  (function (exports, require, module, __filename, __dirname) {\n    \\n，在尾部添加了\\n\n  });。\n  通过vm原生模块的runInThisContext()方法执行（类似eval，只是具有明确上下文，不污染全局），返回一个具体的\n  function对象。最后，将当前模块对象的exports属性、require()方法、module（模块对象自身），\n  以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n\n.node 文件。用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n  Node调用process.dlopen()方法进行加载和执行。在Node的架构下，dlopen()方法在Windows\n  和*nix平台下分别有不同的实现，通过libuv兼容层进行了封装\n\n.json 文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n\n\n其余扩展名文件。它们都被当做.js文件载入。\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。</code></pre><h3 id=\"Node-核心模块的编译、引入、加载过程\"><a href=\"#Node-核心模块的编译、引入、加载过程\" class=\"headerlink\" title=\"Node 核心模块的编译、引入、加载过程\"></a>Node 核心模块的编译、引入、加载过程<br></h3><p><strong>模块调用栈</strong><br></p>\n<p>1、C/C++内建模块属于最底层的模块，它属于核心模块，主要提供API给JavaScript核心模块和第三方JavaScript文件模块调用。<br><br>2、JavaScript核心模块主要扮演的职责有两类：一类是作为C/C++内建模块的封装层和桥接层，供文件模块调用；一类是纯粹的功能模块，它不需要跟底层打交道，但是又十分重要<br></p>\n<p><image src=\"/images/module-p.png\" width=\"350\"></image><br></p>\n<p><strong>核心模块调用流程</strong><br></p>\n<p>1、 JavaScript 核心模块编译过程<br></p>\n<ul>\n<li><p>转存为转存为C/C++代码（Node采用了V8附带的js2c.py工具，将所有内置的JavaScript代码（src/node.js和lib/*.js）转换成C++里的数组，生成node_natives.h头文件，以字符串的形式存储在 node 的命令空间中）<br></p>\n</li>\n<li><p>启动 node 进程 JavaScript 代码直接加载进内存中<br></p>\n</li>\n<li><p>编译 JavaScript 核心模块（lib目录下的所有模块文件也没有定义require、module、exports这些变量。上面说过在引入 JavaScript 核心模块过程进行头尾包装，才可以执行exports对象）<br></p>\n<pre><code>// node_natives.h 头文件代码\nnamespace node {\nconst char node_native[] = { 47, 47, ..};\nconst char dgram_native[] = { 47, 47, ..};\nconst char console_native[] = { 47, 47, ..};\nconst char buffer_native[] = { 47, 47, ..};\nconst char querystring_native[] = { 47, 47, ..};\nconst char punycode_native[] = { 47, 42, ..};\n...\nstruct _native {\n  const char* name;\n  const char* source;\n  size_t source_len;\n};\nstatic const struct _native natives[] = {\n  { &quot;node&quot;, node_native, sizeof(node_native)-1 },\n  { &quot;dgram&quot;, dgram_native, sizeof(dgram_native)-1 },\n  ...\n};\n}\n\n// JavaScript 核心模块通过process.binding(&#39;natives&#39;)取出，编译成功的模块缓存到 NativeModule._cache 对象上，文件模块则缓存到 Module._cache 对象上\nfunction NativeModule(id) {\nthis.filename = id + &#39;.js&#39;;\nthis.id = id;\nthis.exports = {};\nthis.loaded = false;\n}\nNativeModule._source = process.binding(&#39;natives&#39;);\nNativeModule._cache = {}; </code></pre></li>\n</ul>\n<p>2、 C/C++核心模块的编译过程<br></p>\n<ul>\n<li><p>定义内建模块内部结构</p>\n</li>\n<li><p>通过NODE_MODULE宏将模块定义到node命名空间中，模块的具体初始化方法挂载为结构的register_func成员<br></p>\n</li>\n<li><p>node_extensions.h文件将这些散列的内建模块统一放进了一个叫node_module_list的数组中<br></p>\n</li>\n<li><p>Node 通过 get_builtin_module() 方法从 node_module_list 数组中取出这些模块<br></p>\n<pre><code>// 内建模块的内部结构定义\nstruct node_module_struct {\nint version;\nvoid *dso_handle;\nconst char *filename;\nvoid (*register_func) (v8::Handle&lt;v8::Object&gt; target);\nconst char *modname;\n};\n\n// 挂载为结构的register_func成员\n#define NODE_MODULE(modname, regfunc) \nextern &quot;C&quot; { \n NODE_MODULE_EXPORT node::node_module_struct modname ## _module = \n { \n   NODE_STANDARD_MODULE_STUFF, \n   regfunc, \n   NODE_STRINGIFY(modname) \n }; \n} </code></pre></li>\n</ul>\n<p>3、核心模块的引入流程<br><br>如 os 原生模块的引入流程<br><br><image src=\"/images/module-os.png\" width=\"350\"></image><br></p>\n<p>通过以上我们大致了解了 Node 中模块的编译、加载、引入流程。当然还有核心模块的编写，在这里就不过多的阐述了。更多请参考朴灵老师编著的《深入浅出 node》，相信会有更多的收获。<br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。前端模块化组件化也是在这几年逐渐的流行，在 web2.0 发展过程如下<br></p>\n<p><image src=\"/images/module.png\" width=\"300\"></image><br></p>\n<h3 id=\"CommonJS-规范\"><a href=\"#CommonJS-规范\" class=\"headerlink\" title=\"CommonJS 规范\"></a>CommonJS 规范<br></h3><p>CommonJS（<a href=\"http://www.commonjs.org\" target=\"_blank\" rel=\"noopener\">http://www.commonjs.org</a>）规范的出现解决了JavaScript 没有模块系统，标准库等等问题，而 Node.js 自身实现了 require 作为其引入模块的方法，同时 NPM 也基于 CommonJS 定义的包规范，实现了依赖管理和模块自动安装等功能。下图展现Node与浏览器以及W3C组织、CommonJS组织、ECMAScript之间的关系<br></p>\n<p><image src=\"/images/commonjs.png\" width=\"550\"></image><br></p>\n<h3 id=\"CommonJS-模块\"><a href=\"#CommonJS-模块\" class=\"headerlink\" title=\"CommonJS 模块\"></a>CommonJS 模块</h3><p>1、模块引用 require 关键字 <br></p>\n<pre><code>const math = require(&#39;math&#39;); </code></pre><p>2、模块定义导出 exports 关键字<br></p>\n<pre><code>exports.area = function (r) {\n    return Math.PI * r * r;\n};\n</code></pre><p>3、模块标识<br><br>模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者以.、..开头的相对路径，或者绝对路径，每个模块都有独立的空间。防止虑变量污染。<br></p>\n<h3 id=\"Node-模块实现\"><a href=\"#Node-模块实现\" class=\"headerlink\" title=\"Node 模块实现\"></a>Node 模块实现<br></h3><p>1、引入模块三个步骤(分为核心模块和文件模块)<br></p>\n<pre><code>(1) 路径分析\n(2) 文件定位\n(3) 编译执行</code></pre><p>核心模块和文件模块的区别在于加载的时机，核心模块在 Node 进程启动时被直接加载到内存中比文件模块省略了文件定位和编译执行过程<br></p>\n<h3 id=\"Node-模块载入策略\"><a href=\"#Node-模块载入策略\" class=\"headerlink\" title=\"Node 模块载入策略\"></a>Node 模块载入策略<br></h3><p>1、不论是核心模块还是文件模块，require()方法对相同模块的二次加载都一律采用缓存优先，以减少二次引入时的开销<br><br>2、模块引用的过程由于标识符不同在路径分析和文件定位中有一定的差异<br></p>\n<pre><code>// 路径分析\n核心模块，如http、fs、path等(加载最快)\n\n.或..开始的相对路径文件模块(慢于核心模块)\n\n以/开始的绝对路径文件模块(慢于核心模块)\n\n自定义模块（最慢-由于沿路径向上逐级递归，直到根目录下的node_modules目录，层级越多越耗时\n\n// 文件定位\n由于其扩展名不同 Node 会按 .js、.json、.node 的次序补、足扩展名，依次尝试\n\n调用fs模块同步阻塞式地判断文件是否存在\n\n如果文件不是 .js 可以在加载的时候写上文件的扩展名，可以加快文件定位速度，\n\n配合缓存，可以大幅度缓解 Node 单线程中阻塞式调用的缺陷</code></pre><p>3、模块编译</p>\n<pre><code>function Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent &amp;&amp; parent.children) {\n    parent.children.push(this);\n  }\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n} \n\n对于不同的文件扩展名，其载入方法也有所不同\n\n.js 文件\n  通过fs模块同步读取文件后编译执行。在编译过程中进行了头尾包装。在头部添加了\n  (function (exports, require, module, __filename, __dirname) {\n    \\n，在尾部添加了\\n\n  });。\n  通过vm原生模块的runInThisContext()方法执行（类似eval，只是具有明确上下文，不污染全局），返回一个具体的\n  function对象。最后，将当前模块对象的exports属性、require()方法、module（模块对象自身），\n  以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n\n.node 文件。用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n  Node调用process.dlopen()方法进行加载和执行。在Node的架构下，dlopen()方法在Windows\n  和*nix平台下分别有不同的实现，通过libuv兼容层进行了封装\n\n.json 文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n\n\n其余扩展名文件。它们都被当做.js文件载入。\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能。</code></pre><h3 id=\"Node-核心模块的编译、引入、加载过程\"><a href=\"#Node-核心模块的编译、引入、加载过程\" class=\"headerlink\" title=\"Node 核心模块的编译、引入、加载过程\"></a>Node 核心模块的编译、引入、加载过程<br></h3><p><strong>模块调用栈</strong><br></p>\n<p>1、C/C++内建模块属于最底层的模块，它属于核心模块，主要提供API给JavaScript核心模块和第三方JavaScript文件模块调用。<br><br>2、JavaScript核心模块主要扮演的职责有两类：一类是作为C/C++内建模块的封装层和桥接层，供文件模块调用；一类是纯粹的功能模块，它不需要跟底层打交道，但是又十分重要<br></p>\n<p><image src=\"/images/module-p.png\" width=\"350\"></image><br></p>\n<p><strong>核心模块调用流程</strong><br></p>\n<p>1、 JavaScript 核心模块编译过程<br></p>\n<ul>\n<li><p>转存为转存为C/C++代码（Node采用了V8附带的js2c.py工具，将所有内置的JavaScript代码（src/node.js和lib/*.js）转换成C++里的数组，生成node_natives.h头文件，以字符串的形式存储在 node 的命令空间中）<br></p>\n</li>\n<li><p>启动 node 进程 JavaScript 代码直接加载进内存中<br></p>\n</li>\n<li><p>编译 JavaScript 核心模块（lib目录下的所有模块文件也没有定义require、module、exports这些变量。上面说过在引入 JavaScript 核心模块过程进行头尾包装，才可以执行exports对象）<br></p>\n<pre><code>// node_natives.h 头文件代码\nnamespace node {\nconst char node_native[] = { 47, 47, ..};\nconst char dgram_native[] = { 47, 47, ..};\nconst char console_native[] = { 47, 47, ..};\nconst char buffer_native[] = { 47, 47, ..};\nconst char querystring_native[] = { 47, 47, ..};\nconst char punycode_native[] = { 47, 42, ..};\n...\nstruct _native {\n  const char* name;\n  const char* source;\n  size_t source_len;\n};\nstatic const struct _native natives[] = {\n  { &quot;node&quot;, node_native, sizeof(node_native)-1 },\n  { &quot;dgram&quot;, dgram_native, sizeof(dgram_native)-1 },\n  ...\n};\n}\n\n// JavaScript 核心模块通过process.binding(&#39;natives&#39;)取出，编译成功的模块缓存到 NativeModule._cache 对象上，文件模块则缓存到 Module._cache 对象上\nfunction NativeModule(id) {\nthis.filename = id + &#39;.js&#39;;\nthis.id = id;\nthis.exports = {};\nthis.loaded = false;\n}\nNativeModule._source = process.binding(&#39;natives&#39;);\nNativeModule._cache = {}; </code></pre></li>\n</ul>\n<p>2、 C/C++核心模块的编译过程<br></p>\n<ul>\n<li><p>定义内建模块内部结构</p>\n</li>\n<li><p>通过NODE_MODULE宏将模块定义到node命名空间中，模块的具体初始化方法挂载为结构的register_func成员<br></p>\n</li>\n<li><p>node_extensions.h文件将这些散列的内建模块统一放进了一个叫node_module_list的数组中<br></p>\n</li>\n<li><p>Node 通过 get_builtin_module() 方法从 node_module_list 数组中取出这些模块<br></p>\n<pre><code>// 内建模块的内部结构定义\nstruct node_module_struct {\nint version;\nvoid *dso_handle;\nconst char *filename;\nvoid (*register_func) (v8::Handle&lt;v8::Object&gt; target);\nconst char *modname;\n};\n\n// 挂载为结构的register_func成员\n#define NODE_MODULE(modname, regfunc) \nextern &quot;C&quot; { \n NODE_MODULE_EXPORT node::node_module_struct modname ## _module = \n { \n   NODE_STANDARD_MODULE_STUFF, \n   regfunc, \n   NODE_STRINGIFY(modname) \n }; \n} </code></pre></li>\n</ul>\n<p>3、核心模块的引入流程<br><br>如 os 原生模块的引入流程<br><br><image src=\"/images/module-os.png\" width=\"350\"></image><br></p>\n<p>通过以上我们大致了解了 Node 中模块的编译、加载、引入流程。当然还有核心模块的编写，在这里就不过多的阐述了。更多请参考朴灵老师编著的《深入浅出 node》，相信会有更多的收获。<br></p>\n"},{"title":"path 路径操作","date":"2019-04-02T12:16:15.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\npath 模块提供用于处理文件路径和目录路径的实用工具<br/>\n\n### path使用特点\n\npath 模块的默认操作因 Node.js 应用程序运行所在的操作系统而异。 具体来说，当在 Windows 操作系统上运行时， path 模块将假定正在使用 Windows 风格的路径。<br/>\n\n### 获取路径\tpath.dirname(p) <br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出 /demo/js/test.js\nconsole.log(path.dirname('/demo/js/test.js'));\n\n```\n\n### 获取文件名 path.basename(p) <br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n/ 输出：test.js\nconsole.log( path.basename('/demo/js/test.js') );\n\n// 输出：test\nconsole.log( path.basename('/demo/js/test/') );\n\n// 输出：test\nconsole.log( path.basename('/demo/js/test') );\n```\n\n### 获取文件扩展名 path.extname(p) <br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出 .js\nconsole.log(path.extname('/demo/js/test.js'));\n```\n\n### 拼接文件路径 path.join([...paths])<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// /demo/js/test.js\nconsole.log(path.join('/demo', 'js', 'test.js'));\n```\n\n### 获取的绝对路径/文件名 path.reslove([from ...], to)<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove(''));\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove('.'));\n\n// 输出 /foo/bar/baz\nconsole.log( path.resolve('/foo/bar', './baz') );\n\n// 输出 /baz/file\nconsole.log(path.resolve('/foo/bar', '/baz/file/');)\n```\n\n### 获取路径字符串的对象 path.parse(p)<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\npath.parse('/home/user/dir/file.txt');\n\n// 返回:\n// { root: '/',\n//   dir: '/home/user/dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n\n```\n\n### 获取规范化路径 path.normalize(p)<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出 '/foo/bar/baz/asdf'\npath.normalize('/foo/bar//baz/asdf/quux/..');\n```\n\n\n\n<a href=\"https://nodejs.org/docs/latest-v9.x/api/path.html\">其他方法请参考 Node Api </a><br/>\n\n\n","source":"_posts/node/path.md","raw":"---\ntitle: path 路径操作\ndate: 2019-04-2 20:16:15\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\npath 模块提供用于处理文件路径和目录路径的实用工具<br/>\n\n### path使用特点\n\npath 模块的默认操作因 Node.js 应用程序运行所在的操作系统而异。 具体来说，当在 Windows 操作系统上运行时， path 模块将假定正在使用 Windows 风格的路径。<br/>\n\n### 获取路径\tpath.dirname(p) <br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出 /demo/js/test.js\nconsole.log(path.dirname('/demo/js/test.js'));\n\n```\n\n### 获取文件名 path.basename(p) <br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n/ 输出：test.js\nconsole.log( path.basename('/demo/js/test.js') );\n\n// 输出：test\nconsole.log( path.basename('/demo/js/test/') );\n\n// 输出：test\nconsole.log( path.basename('/demo/js/test') );\n```\n\n### 获取文件扩展名 path.extname(p) <br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出 .js\nconsole.log(path.extname('/demo/js/test.js'));\n```\n\n### 拼接文件路径 path.join([...paths])<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// /demo/js/test.js\nconsole.log(path.join('/demo', 'js', 'test.js'));\n```\n\n### 获取的绝对路径/文件名 path.reslove([from ...], to)<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove(''));\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove('.'));\n\n// 输出 /foo/bar/baz\nconsole.log( path.resolve('/foo/bar', './baz') );\n\n// 输出 /baz/file\nconsole.log(path.resolve('/foo/bar', '/baz/file/');)\n```\n\n### 获取路径字符串的对象 path.parse(p)<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\npath.parse('/home/user/dir/file.txt');\n\n// 返回:\n// { root: '/',\n//   dir: '/home/user/dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n\n```\n\n### 获取规范化路径 path.normalize(p)<br/>\n```\n// 引入 path 模块\nconst path = require('path');\n\n// 输出 '/foo/bar/baz/asdf'\npath.normalize('/foo/bar//baz/asdf/quux/..');\n```\n\n\n\n<a href=\"https://nodejs.org/docs/latest-v9.x/api/path.html\">其他方法请参考 Node Api </a><br/>\n\n\n","slug":"node/path","published":1,"updated":"2019-08-26T16:46:27.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8t003rkuu6gysj9yle","content":"<p>path 模块提供用于处理文件路径和目录路径的实用工具<br></p>\n<h3 id=\"path使用特点\"><a href=\"#path使用特点\" class=\"headerlink\" title=\"path使用特点\"></a>path使用特点</h3><p>path 模块的默认操作因 Node.js 应用程序运行所在的操作系统而异。 具体来说，当在 Windows 操作系统上运行时， path 模块将假定正在使用 Windows 风格的路径。<br></p>\n<h3 id=\"获取路径-path-dirname-p\"><a href=\"#获取路径-path-dirname-p\" class=\"headerlink\" title=\"获取路径    path.dirname(p) \"></a>获取路径    path.dirname(p) <br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出 /demo/js/test.js\nconsole.log(path.dirname(&#39;/demo/js/test.js&#39;));\n</code></pre><h3 id=\"获取文件名-path-basename-p\"><a href=\"#获取文件名-path-basename-p\" class=\"headerlink\" title=\"获取文件名 path.basename(p) \"></a>获取文件名 path.basename(p) <br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n/ 输出：test.js\nconsole.log( path.basename(&#39;/demo/js/test.js&#39;) );\n\n// 输出：test\nconsole.log( path.basename(&#39;/demo/js/test/&#39;) );\n\n// 输出：test\nconsole.log( path.basename(&#39;/demo/js/test&#39;) );</code></pre><h3 id=\"获取文件扩展名-path-extname-p\"><a href=\"#获取文件扩展名-path-extname-p\" class=\"headerlink\" title=\"获取文件扩展名 path.extname(p) \"></a>获取文件扩展名 path.extname(p) <br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出 .js\nconsole.log(path.extname(&#39;/demo/js/test.js&#39;));</code></pre><h3 id=\"拼接文件路径-path-join-…paths\"><a href=\"#拼接文件路径-path-join-…paths\" class=\"headerlink\" title=\"拼接文件路径 path.join([…paths])\"></a>拼接文件路径 path.join([…paths])<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// /demo/js/test.js\nconsole.log(path.join(&#39;/demo&#39;, &#39;js&#39;, &#39;test.js&#39;));</code></pre><h3 id=\"获取的绝对路径-文件名-path-reslove-from-…-to\"><a href=\"#获取的绝对路径-文件名-path-reslove-from-…-to\" class=\"headerlink\" title=\"获取的绝对路径/文件名 path.reslove([from …], to)\"></a>获取的绝对路径/文件名 path.reslove([from …], to)<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove(&#39;&#39;));\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove(&#39;.&#39;));\n\n// 输出 /foo/bar/baz\nconsole.log( path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;) );\n\n// 输出 /baz/file\nconsole.log(path.resolve(&#39;/foo/bar&#39;, &#39;/baz/file/&#39;);)</code></pre><h3 id=\"获取路径字符串的对象-path-parse-p\"><a href=\"#获取路径字符串的对象-path-parse-p\" class=\"headerlink\" title=\"获取路径字符串的对象 path.parse(p)\"></a>获取路径字符串的对象 path.parse(p)<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\npath.parse(&#39;/home/user/dir/file.txt&#39;);\n\n// 返回:\n// { root: &#39;/&#39;,\n//   dir: &#39;/home/user/dir&#39;,\n//   base: &#39;file.txt&#39;,\n//   ext: &#39;.txt&#39;,\n//   name: &#39;file&#39; }\n</code></pre><h3 id=\"获取规范化路径-path-normalize-p\"><a href=\"#获取规范化路径-path-normalize-p\" class=\"headerlink\" title=\"获取规范化路径 path.normalize(p)\"></a>获取规范化路径 path.normalize(p)<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出 &#39;/foo/bar/baz/asdf&#39;\npath.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;);</code></pre><p><a href=\"https://nodejs.org/docs/latest-v9.x/api/path.html\" target=\"_blank\" rel=\"noopener\">其他方法请参考 Node Api </a><br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>path 模块提供用于处理文件路径和目录路径的实用工具<br></p>\n<h3 id=\"path使用特点\"><a href=\"#path使用特点\" class=\"headerlink\" title=\"path使用特点\"></a>path使用特点</h3><p>path 模块的默认操作因 Node.js 应用程序运行所在的操作系统而异。 具体来说，当在 Windows 操作系统上运行时， path 模块将假定正在使用 Windows 风格的路径。<br></p>\n<h3 id=\"获取路径-path-dirname-p\"><a href=\"#获取路径-path-dirname-p\" class=\"headerlink\" title=\"获取路径    path.dirname(p) \"></a>获取路径    path.dirname(p) <br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出 /demo/js/test.js\nconsole.log(path.dirname(&#39;/demo/js/test.js&#39;));\n</code></pre><h3 id=\"获取文件名-path-basename-p\"><a href=\"#获取文件名-path-basename-p\" class=\"headerlink\" title=\"获取文件名 path.basename(p) \"></a>获取文件名 path.basename(p) <br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n/ 输出：test.js\nconsole.log( path.basename(&#39;/demo/js/test.js&#39;) );\n\n// 输出：test\nconsole.log( path.basename(&#39;/demo/js/test/&#39;) );\n\n// 输出：test\nconsole.log( path.basename(&#39;/demo/js/test&#39;) );</code></pre><h3 id=\"获取文件扩展名-path-extname-p\"><a href=\"#获取文件扩展名-path-extname-p\" class=\"headerlink\" title=\"获取文件扩展名 path.extname(p) \"></a>获取文件扩展名 path.extname(p) <br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出 .js\nconsole.log(path.extname(&#39;/demo/js/test.js&#39;));</code></pre><h3 id=\"拼接文件路径-path-join-…paths\"><a href=\"#拼接文件路径-path-join-…paths\" class=\"headerlink\" title=\"拼接文件路径 path.join([…paths])\"></a>拼接文件路径 path.join([…paths])<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// /demo/js/test.js\nconsole.log(path.join(&#39;/demo&#39;, &#39;js&#39;, &#39;test.js&#39;));</code></pre><h3 id=\"获取的绝对路径-文件名-path-reslove-from-…-to\"><a href=\"#获取的绝对路径-文件名-path-reslove-from-…-to\" class=\"headerlink\" title=\"获取的绝对路径/文件名 path.reslove([from …], to)\"></a>获取的绝对路径/文件名 path.reslove([from …], to)<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove(&#39;&#39;));\n\n// 输出当前项目的绝对路径\nconsole.log(path.reslove(&#39;.&#39;));\n\n// 输出 /foo/bar/baz\nconsole.log( path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;) );\n\n// 输出 /baz/file\nconsole.log(path.resolve(&#39;/foo/bar&#39;, &#39;/baz/file/&#39;);)</code></pre><h3 id=\"获取路径字符串的对象-path-parse-p\"><a href=\"#获取路径字符串的对象-path-parse-p\" class=\"headerlink\" title=\"获取路径字符串的对象 path.parse(p)\"></a>获取路径字符串的对象 path.parse(p)<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\npath.parse(&#39;/home/user/dir/file.txt&#39;);\n\n// 返回:\n// { root: &#39;/&#39;,\n//   dir: &#39;/home/user/dir&#39;,\n//   base: &#39;file.txt&#39;,\n//   ext: &#39;.txt&#39;,\n//   name: &#39;file&#39; }\n</code></pre><h3 id=\"获取规范化路径-path-normalize-p\"><a href=\"#获取规范化路径-path-normalize-p\" class=\"headerlink\" title=\"获取规范化路径 path.normalize(p)\"></a>获取规范化路径 path.normalize(p)<br></h3><pre><code>// 引入 path 模块\nconst path = require(&#39;path&#39;);\n\n// 输出 &#39;/foo/bar/baz/asdf&#39;\npath.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;);</code></pre><p><a href=\"https://nodejs.org/docs/latest-v9.x/api/path.html\" target=\"_blank\" rel=\"noopener\">其他方法请参考 Node Api </a><br></p>\n"},{"title":"process进程","date":"2019-04-12T12:35:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\nprocess 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制。 作为一个全局变量，它始终可供 Node.js 应用程序使用，无需使用 require()<br/>\n\n上文中提到过事件队列调度可以通过process的.nextTick()来实现<br/>\n\n上述文章中说到过 Node 是单进程单线程架构，对多核使用不足，所以启动多进程。每个进程一个 CPU 以此实现多核 CPU 的利用<br/>\n\n**Master-Worker模式（主从模式）**\n\n主从模式主要用于在分布式架构中并行处理业务的模式，具备良好的可伸缩性和稳定性，主进程（master）负责和管理工作进程（worker），工作进程（worker）负责具体的业务逻辑<br/>\n\n<img src=\"/images/master-worker.png\"><br/>\n\n```\n/**\n * 创建工作进程\n * worker.js\n */\n\n// 引入核心模块http\nlet http = require('http');\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type' : 'text/plain'});\n  res.end('Hello World !')\n})\n\n// 指定域名\nlet domain = '127.0.0.1';\n\n// 随机创建端口\nlet port = Math.round((1 + Math.random()) * 1000);\n\n// 监听启动服务\nserver.listen(port, domain)\n```\n\n```\n/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require('child_process');\n\n引入核心模块os，得到cpu数量\nlet cpus = require('os').cpus();\n\n// 根据cpu数量取复制对应的 node 的进程数量\nfor (let i = 0; i < cpus.length; i++) {\n  childProcess.fork('./worker.js')\n}\n\n```\n\n\n**进程间通信**<br/>\n\n说起进程通信，其实我们都熟悉浏览器的 Javascript 主线程与 UI 渲染，共用一个线程。两个是互斥关系，当 UI 渲染时Js引擎线程暂时挂起。所以为了解决这个问题 HTML5 提出WebWork API 主线程与工作线程之间通过onmessage()和postMessage()进行通讯，使 JS 阻塞较为严重的计算不影响主线程上的UI渲染<br/>\n\n在 node 中为了实现父子进程通讯，父子之间将会创建IPC通道，通过IPC通道，父子进程才能通过message和send()传递函数<br/>\n\nIPC原理创建实现示意图<br/>\n\n<img src=\"/images/ipc.png\"><br/>\n\n\nIPC通道创建、连接<br/>\n\n1、父进程在实际创建子进程之前，首先创建IPC通道并监听，然后在创建子进程<br/>\n2、通过环境变量（NODE_CHAMMEL_FD）通知子进程 IPC 通道的文件描述符<br/>\n3、子进程启动过程中通过文件描述符连接已经存在的 IPC 通道<br/>\n4、建立连接后就可以在内核中完成双向通信，不经过网络层<br/>\n5、在 Node 中，IPC 被抽象成为 Stream 对象，调用 send（）发送数据，通过 message 事件接收数据<br/>\n\n<img src=\"/images/ipc-create.png\"><br/>\n\n```\n/**\n * 创建父线程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require('child_process');\n\n// 复制进程\nlet n = childProcess.fork(__dirname + '/worker.js');\n\n// 监听message\nn.on('messge', function (m) {\n  console.log(m)\n})\n\n// 发送数据\nn.send({hello: ''world});\n```\n\n```\n/**\n * 创建子线程\n * worker.js\n */\n\n// 监听message\nprocess.on('message', function (m) {\n  console.log(m)\n});\n// 发送数据\nprocess.send({foo: 'bar'});\n```\n\n**句柄传递**<br/>\n\n通过上述我们简单的了解到进程之间通信原理，但是我们想要通过监听一个端口，主进程将所有的请求交由子进程处理，上述通信远远不够的，所以可以通过 **Node句柄传递** 来实现<br/>\n\n主进程将请求发送给工作进程<br/>\n\n<img src=\"/images/process-send.png\"><br/>\n\n主进程发送完句柄并关闭监听<br/>\n\n<img src=\"/images/process-on.png\"><br/>\n\n```\n/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet cp = require('child_process');\n\n// 复制进程\nlet child1 = cp.fork(__dirname + '/worker.js');\nlet child2 = cp.fork(__dirname + '/worker.js');\n\n// 打开服务使用得服务对象发送数据\nlet server = require('net').createServer();\nserver.listen(1337 ,function () {\n  child1.send('server', server);\n  child2.send('server', server);\n  \n  // 主进程发送完成句柄关闭监听\n  server.close();\n});\n```\n\n```\n/**\n * 创建子进程\n * worker.js\n */\n \n// 引入核心模块http\nlet http = require('http');\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type' : 'text/plain'});\n  res.end('pid is' + process.pid)\n});\n\n// 子进程监听端口\nprocess.on('message', function (m, tcp) {\n  if (m === 'server') {\n    tcp.on('connection', function (socket) {\n      server.emit('connection', socket);\n    });\n  }\n}};\n\n```\n\n通过上述几个例子我们基本基本了解 Node 的进程。当然还有很多需要在事件中摸索例如集群的稳定，包括自动重启，负载均衡，状态共享等等。当然创建 Node 集群也可以用cluster模块，实现起来更轻松方便<br/>\n\n\n## 更多方法参考<br/>\n<a href='http://nodejs.cn/api/process.html'>Node Api process</a><br/>\n<a href='http://nodejs.cn/api/child_process.html'>Node Api child_process</a><br/>\n<a href='http://nodejs.cn/api/cluster.html'>Node Api cluster</a><br/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node/process.md","raw":"---\ntitle: process进程 \ndate: 2019-04-12 20:35:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\nprocess 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制。 作为一个全局变量，它始终可供 Node.js 应用程序使用，无需使用 require()<br/>\n\n上文中提到过事件队列调度可以通过process的.nextTick()来实现<br/>\n\n上述文章中说到过 Node 是单进程单线程架构，对多核使用不足，所以启动多进程。每个进程一个 CPU 以此实现多核 CPU 的利用<br/>\n\n**Master-Worker模式（主从模式）**\n\n主从模式主要用于在分布式架构中并行处理业务的模式，具备良好的可伸缩性和稳定性，主进程（master）负责和管理工作进程（worker），工作进程（worker）负责具体的业务逻辑<br/>\n\n<img src=\"/images/master-worker.png\"><br/>\n\n```\n/**\n * 创建工作进程\n * worker.js\n */\n\n// 引入核心模块http\nlet http = require('http');\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type' : 'text/plain'});\n  res.end('Hello World !')\n})\n\n// 指定域名\nlet domain = '127.0.0.1';\n\n// 随机创建端口\nlet port = Math.round((1 + Math.random()) * 1000);\n\n// 监听启动服务\nserver.listen(port, domain)\n```\n\n```\n/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require('child_process');\n\n引入核心模块os，得到cpu数量\nlet cpus = require('os').cpus();\n\n// 根据cpu数量取复制对应的 node 的进程数量\nfor (let i = 0; i < cpus.length; i++) {\n  childProcess.fork('./worker.js')\n}\n\n```\n\n\n**进程间通信**<br/>\n\n说起进程通信，其实我们都熟悉浏览器的 Javascript 主线程与 UI 渲染，共用一个线程。两个是互斥关系，当 UI 渲染时Js引擎线程暂时挂起。所以为了解决这个问题 HTML5 提出WebWork API 主线程与工作线程之间通过onmessage()和postMessage()进行通讯，使 JS 阻塞较为严重的计算不影响主线程上的UI渲染<br/>\n\n在 node 中为了实现父子进程通讯，父子之间将会创建IPC通道，通过IPC通道，父子进程才能通过message和send()传递函数<br/>\n\nIPC原理创建实现示意图<br/>\n\n<img src=\"/images/ipc.png\"><br/>\n\n\nIPC通道创建、连接<br/>\n\n1、父进程在实际创建子进程之前，首先创建IPC通道并监听，然后在创建子进程<br/>\n2、通过环境变量（NODE_CHAMMEL_FD）通知子进程 IPC 通道的文件描述符<br/>\n3、子进程启动过程中通过文件描述符连接已经存在的 IPC 通道<br/>\n4、建立连接后就可以在内核中完成双向通信，不经过网络层<br/>\n5、在 Node 中，IPC 被抽象成为 Stream 对象，调用 send（）发送数据，通过 message 事件接收数据<br/>\n\n<img src=\"/images/ipc-create.png\"><br/>\n\n```\n/**\n * 创建父线程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require('child_process');\n\n// 复制进程\nlet n = childProcess.fork(__dirname + '/worker.js');\n\n// 监听message\nn.on('messge', function (m) {\n  console.log(m)\n})\n\n// 发送数据\nn.send({hello: ''world});\n```\n\n```\n/**\n * 创建子线程\n * worker.js\n */\n\n// 监听message\nprocess.on('message', function (m) {\n  console.log(m)\n});\n// 发送数据\nprocess.send({foo: 'bar'});\n```\n\n**句柄传递**<br/>\n\n通过上述我们简单的了解到进程之间通信原理，但是我们想要通过监听一个端口，主进程将所有的请求交由子进程处理，上述通信远远不够的，所以可以通过 **Node句柄传递** 来实现<br/>\n\n主进程将请求发送给工作进程<br/>\n\n<img src=\"/images/process-send.png\"><br/>\n\n主进程发送完句柄并关闭监听<br/>\n\n<img src=\"/images/process-on.png\"><br/>\n\n```\n/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet cp = require('child_process');\n\n// 复制进程\nlet child1 = cp.fork(__dirname + '/worker.js');\nlet child2 = cp.fork(__dirname + '/worker.js');\n\n// 打开服务使用得服务对象发送数据\nlet server = require('net').createServer();\nserver.listen(1337 ,function () {\n  child1.send('server', server);\n  child2.send('server', server);\n  \n  // 主进程发送完成句柄关闭监听\n  server.close();\n});\n```\n\n```\n/**\n * 创建子进程\n * worker.js\n */\n \n// 引入核心模块http\nlet http = require('http');\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type' : 'text/plain'});\n  res.end('pid is' + process.pid)\n});\n\n// 子进程监听端口\nprocess.on('message', function (m, tcp) {\n  if (m === 'server') {\n    tcp.on('connection', function (socket) {\n      server.emit('connection', socket);\n    });\n  }\n}};\n\n```\n\n通过上述几个例子我们基本基本了解 Node 的进程。当然还有很多需要在事件中摸索例如集群的稳定，包括自动重启，负载均衡，状态共享等等。当然创建 Node 集群也可以用cluster模块，实现起来更轻松方便<br/>\n\n\n## 更多方法参考<br/>\n<a href='http://nodejs.cn/api/process.html'>Node Api process</a><br/>\n<a href='http://nodejs.cn/api/child_process.html'>Node Api child_process</a><br/>\n<a href='http://nodejs.cn/api/cluster.html'>Node Api cluster</a><br/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node/process","published":1,"updated":"2019-08-26T16:46:27.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8u003skuu6xo8xi7p8","content":"<p>process 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制。 作为一个全局变量，它始终可供 Node.js 应用程序使用，无需使用 require()<br></p>\n<p>上文中提到过事件队列调度可以通过process的.nextTick()来实现<br></p>\n<p>上述文章中说到过 Node 是单进程单线程架构，对多核使用不足，所以启动多进程。每个进程一个 CPU 以此实现多核 CPU 的利用<br></p>\n<p><strong>Master-Worker模式（主从模式）</strong></p>\n<p>主从模式主要用于在分布式架构中并行处理业务的模式，具备良好的可伸缩性和稳定性，主进程（master）负责和管理工作进程（worker），工作进程（worker）负责具体的业务逻辑<br></p>\n<p><img src=\"/images/master-worker.png\"><br></p>\n<pre><code>/**\n * 创建工作进程\n * worker.js\n */\n\n// 引入核心模块http\nlet http = require(&#39;http&#39;);\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});\n  res.end(&#39;Hello World !&#39;)\n})\n\n// 指定域名\nlet domain = &#39;127.0.0.1&#39;;\n\n// 随机创建端口\nlet port = Math.round((1 + Math.random()) * 1000);\n\n// 监听启动服务\nserver.listen(port, domain)</code></pre><pre><code>/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require(&#39;child_process&#39;);\n\n引入核心模块os，得到cpu数量\nlet cpus = require(&#39;os&#39;).cpus();\n\n// 根据cpu数量取复制对应的 node 的进程数量\nfor (let i = 0; i &lt; cpus.length; i++) {\n  childProcess.fork(&#39;./worker.js&#39;)\n}\n</code></pre><p><strong>进程间通信</strong><br></p>\n<p>说起进程通信，其实我们都熟悉浏览器的 Javascript 主线程与 UI 渲染，共用一个线程。两个是互斥关系，当 UI 渲染时Js引擎线程暂时挂起。所以为了解决这个问题 HTML5 提出WebWork API 主线程与工作线程之间通过onmessage()和postMessage()进行通讯，使 JS 阻塞较为严重的计算不影响主线程上的UI渲染<br></p>\n<p>在 node 中为了实现父子进程通讯，父子之间将会创建IPC通道，通过IPC通道，父子进程才能通过message和send()传递函数<br></p>\n<p>IPC原理创建实现示意图<br></p>\n<p><img src=\"/images/ipc.png\"><br></p>\n<p>IPC通道创建、连接<br></p>\n<p>1、父进程在实际创建子进程之前，首先创建IPC通道并监听，然后在创建子进程<br><br>2、通过环境变量（NODE_CHAMMEL_FD）通知子进程 IPC 通道的文件描述符<br><br>3、子进程启动过程中通过文件描述符连接已经存在的 IPC 通道<br><br>4、建立连接后就可以在内核中完成双向通信，不经过网络层<br><br>5、在 Node 中，IPC 被抽象成为 Stream 对象，调用 send（）发送数据，通过 message 事件接收数据<br></p>\n<p><img src=\"/images/ipc-create.png\"><br></p>\n<pre><code>/**\n * 创建父线程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require(&#39;child_process&#39;);\n\n// 复制进程\nlet n = childProcess.fork(__dirname + &#39;/worker.js&#39;);\n\n// 监听message\nn.on(&#39;messge&#39;, function (m) {\n  console.log(m)\n})\n\n// 发送数据\nn.send({hello: &#39;&#39;world});</code></pre><pre><code>/**\n * 创建子线程\n * worker.js\n */\n\n// 监听message\nprocess.on(&#39;message&#39;, function (m) {\n  console.log(m)\n});\n// 发送数据\nprocess.send({foo: &#39;bar&#39;});</code></pre><p><strong>句柄传递</strong><br></p>\n<p>通过上述我们简单的了解到进程之间通信原理，但是我们想要通过监听一个端口，主进程将所有的请求交由子进程处理，上述通信远远不够的，所以可以通过 <strong>Node句柄传递</strong> 来实现<br></p>\n<p>主进程将请求发送给工作进程<br></p>\n<p><img src=\"/images/process-send.png\"><br></p>\n<p>主进程发送完句柄并关闭监听<br></p>\n<p><img src=\"/images/process-on.png\"><br></p>\n<pre><code>/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet cp = require(&#39;child_process&#39;);\n\n// 复制进程\nlet child1 = cp.fork(__dirname + &#39;/worker.js&#39;);\nlet child2 = cp.fork(__dirname + &#39;/worker.js&#39;);\n\n// 打开服务使用得服务对象发送数据\nlet server = require(&#39;net&#39;).createServer();\nserver.listen(1337 ,function () {\n  child1.send(&#39;server&#39;, server);\n  child2.send(&#39;server&#39;, server);\n\n  // 主进程发送完成句柄关闭监听\n  server.close();\n});</code></pre><pre><code>/**\n * 创建子进程\n * worker.js\n */\n\n// 引入核心模块http\nlet http = require(&#39;http&#39;);\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});\n  res.end(&#39;pid is&#39; + process.pid)\n});\n\n// 子进程监听端口\nprocess.on(&#39;message&#39;, function (m, tcp) {\n  if (m === &#39;server&#39;) {\n    tcp.on(&#39;connection&#39;, function (socket) {\n      server.emit(&#39;connection&#39;, socket);\n    });\n  }\n}};\n</code></pre><p>通过上述几个例子我们基本基本了解 Node 的进程。当然还有很多需要在事件中摸索例如集群的稳定，包括自动重启，负载均衡，状态共享等等。当然创建 Node 集群也可以用cluster模块，实现起来更轻松方便<br></p>\n<h2 id=\"更多方法参考\"><a href=\"#更多方法参考\" class=\"headerlink\" title=\"更多方法参考\"></a>更多方法参考<br></h2><p><a href=\"http://nodejs.cn/api/process.html\" target=\"_blank\" rel=\"noopener\">Node Api process</a><br><br><a href=\"http://nodejs.cn/api/child_process.html\" target=\"_blank\" rel=\"noopener\">Node Api child_process</a><br><br><a href=\"http://nodejs.cn/api/cluster.html\" target=\"_blank\" rel=\"noopener\">Node Api cluster</a><br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>process 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制。 作为一个全局变量，它始终可供 Node.js 应用程序使用，无需使用 require()<br></p>\n<p>上文中提到过事件队列调度可以通过process的.nextTick()来实现<br></p>\n<p>上述文章中说到过 Node 是单进程单线程架构，对多核使用不足，所以启动多进程。每个进程一个 CPU 以此实现多核 CPU 的利用<br></p>\n<p><strong>Master-Worker模式（主从模式）</strong></p>\n<p>主从模式主要用于在分布式架构中并行处理业务的模式，具备良好的可伸缩性和稳定性，主进程（master）负责和管理工作进程（worker），工作进程（worker）负责具体的业务逻辑<br></p>\n<p><img src=\"/images/master-worker.png\"><br></p>\n<pre><code>/**\n * 创建工作进程\n * worker.js\n */\n\n// 引入核心模块http\nlet http = require(&#39;http&#39;);\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});\n  res.end(&#39;Hello World !&#39;)\n})\n\n// 指定域名\nlet domain = &#39;127.0.0.1&#39;;\n\n// 随机创建端口\nlet port = Math.round((1 + Math.random()) * 1000);\n\n// 监听启动服务\nserver.listen(port, domain)</code></pre><pre><code>/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require(&#39;child_process&#39;);\n\n引入核心模块os，得到cpu数量\nlet cpus = require(&#39;os&#39;).cpus();\n\n// 根据cpu数量取复制对应的 node 的进程数量\nfor (let i = 0; i &lt; cpus.length; i++) {\n  childProcess.fork(&#39;./worker.js&#39;)\n}\n</code></pre><p><strong>进程间通信</strong><br></p>\n<p>说起进程通信，其实我们都熟悉浏览器的 Javascript 主线程与 UI 渲染，共用一个线程。两个是互斥关系，当 UI 渲染时Js引擎线程暂时挂起。所以为了解决这个问题 HTML5 提出WebWork API 主线程与工作线程之间通过onmessage()和postMessage()进行通讯，使 JS 阻塞较为严重的计算不影响主线程上的UI渲染<br></p>\n<p>在 node 中为了实现父子进程通讯，父子之间将会创建IPC通道，通过IPC通道，父子进程才能通过message和send()传递函数<br></p>\n<p>IPC原理创建实现示意图<br></p>\n<p><img src=\"/images/ipc.png\"><br></p>\n<p>IPC通道创建、连接<br></p>\n<p>1、父进程在实际创建子进程之前，首先创建IPC通道并监听，然后在创建子进程<br><br>2、通过环境变量（NODE_CHAMMEL_FD）通知子进程 IPC 通道的文件描述符<br><br>3、子进程启动过程中通过文件描述符连接已经存在的 IPC 通道<br><br>4、建立连接后就可以在内核中完成双向通信，不经过网络层<br><br>5、在 Node 中，IPC 被抽象成为 Stream 对象，调用 send（）发送数据，通过 message 事件接收数据<br></p>\n<p><img src=\"/images/ipc-create.png\"><br></p>\n<pre><code>/**\n * 创建父线程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet childProcess = require(&#39;child_process&#39;);\n\n// 复制进程\nlet n = childProcess.fork(__dirname + &#39;/worker.js&#39;);\n\n// 监听message\nn.on(&#39;messge&#39;, function (m) {\n  console.log(m)\n})\n\n// 发送数据\nn.send({hello: &#39;&#39;world});</code></pre><pre><code>/**\n * 创建子线程\n * worker.js\n */\n\n// 监听message\nprocess.on(&#39;message&#39;, function (m) {\n  console.log(m)\n});\n// 发送数据\nprocess.send({foo: &#39;bar&#39;});</code></pre><p><strong>句柄传递</strong><br></p>\n<p>通过上述我们简单的了解到进程之间通信原理，但是我们想要通过监听一个端口，主进程将所有的请求交由子进程处理，上述通信远远不够的，所以可以通过 <strong>Node句柄传递</strong> 来实现<br></p>\n<p>主进程将请求发送给工作进程<br></p>\n<p><img src=\"/images/process-send.png\"><br></p>\n<p>主进程发送完句柄并关闭监听<br></p>\n<p><img src=\"/images/process-on.png\"><br></p>\n<pre><code>/**\n * 创建主进程\n * master.js\n */\n\n// 引入核心模块child_process 创建子进程\nlet cp = require(&#39;child_process&#39;);\n\n// 复制进程\nlet child1 = cp.fork(__dirname + &#39;/worker.js&#39;);\nlet child2 = cp.fork(__dirname + &#39;/worker.js&#39;);\n\n// 打开服务使用得服务对象发送数据\nlet server = require(&#39;net&#39;).createServer();\nserver.listen(1337 ,function () {\n  child1.send(&#39;server&#39;, server);\n  child2.send(&#39;server&#39;, server);\n\n  // 主进程发送完成句柄关闭监听\n  server.close();\n});</code></pre><pre><code>/**\n * 创建子进程\n * worker.js\n */\n\n// 引入核心模块http\nlet http = require(&#39;http&#39;);\n\n// 创建服务\nlet server = http.createServer(function (req, res) {\n  res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});\n  res.end(&#39;pid is&#39; + process.pid)\n});\n\n// 子进程监听端口\nprocess.on(&#39;message&#39;, function (m, tcp) {\n  if (m === &#39;server&#39;) {\n    tcp.on(&#39;connection&#39;, function (socket) {\n      server.emit(&#39;connection&#39;, socket);\n    });\n  }\n}};\n</code></pre><p>通过上述几个例子我们基本基本了解 Node 的进程。当然还有很多需要在事件中摸索例如集群的稳定，包括自动重启，负载均衡，状态共享等等。当然创建 Node 集群也可以用cluster模块，实现起来更轻松方便<br></p>\n<h2 id=\"更多方法参考\"><a href=\"#更多方法参考\" class=\"headerlink\" title=\"更多方法参考\"></a>更多方法参考<br></h2><p><a href=\"http://nodejs.cn/api/process.html\" target=\"_blank\" rel=\"noopener\">Node Api process</a><br><br><a href=\"http://nodejs.cn/api/child_process.html\" target=\"_blank\" rel=\"noopener\">Node Api child_process</a><br><br><a href=\"http://nodejs.cn/api/cluster.html\" target=\"_blank\" rel=\"noopener\">Node Api cluster</a><br></p>\n"},{"title":"querystring 路径操作","date":"2019-04-04T14:17:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\nquerystring 模块提供用于解析和格式化 URL 查询字符串<br/>\n\n### 解析 URL 字符串 querystring.parse(str[, sep[, eq[, options]]]) <br/>\n```\n// 引入模块\nconst querystring = require('querystring');\n\nquerystring.parse('foo=bar&abc=xyz&abc=123')\n\n输出为：\n{\n  foo: 'bar',\n  abc: ['xyz', '123']\n}\n```\n\n默认情况下，将假定查询字符串中的百分比编码字符使用 UTF-8 编码。 如果使用其他字符编码，则需要指定其他 decodeURIComponent 选项：<br/>\n\n```\n// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,{ decodeURIComponent: gbkDecodeURIComponent });\n```\n\n\n### 序列化 URL 字符串 querystring.stringify(obj[, sep[, eq[, options]]]) <br/>\n\n```\n// 引入模块\nconst querystring = require('querystring');\n\n// 输出为 'foo=bar&baz=qux&baz=quux&corge='\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\n\n// 输出为 'foo:bar;baz:qux'\nquerystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\n```\n\n默认情况下，查询字符串中需要百分比编码的字符将编码为 UTF-8。 如果需要其他编码，则需要指定其他 encodeURIComponent 选项：\n\n```\n// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.stringify({ w: '中文', foo: 'bar' }, null, null,{ encodeURIComponent: gbkEncodeURIComponent })\n```\n\n\n\n<a href=\"https://nodejs.org/docs/latest-v9.x/api/querystring.html\">其他方法请参考 Node Api </a><br/>\n\n","source":"_posts/node/querystring.md","raw":"---\ntitle: querystring 路径操作 \ndate: 2019-04-4 22:17:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\nquerystring 模块提供用于解析和格式化 URL 查询字符串<br/>\n\n### 解析 URL 字符串 querystring.parse(str[, sep[, eq[, options]]]) <br/>\n```\n// 引入模块\nconst querystring = require('querystring');\n\nquerystring.parse('foo=bar&abc=xyz&abc=123')\n\n输出为：\n{\n  foo: 'bar',\n  abc: ['xyz', '123']\n}\n```\n\n默认情况下，将假定查询字符串中的百分比编码字符使用 UTF-8 编码。 如果使用其他字符编码，则需要指定其他 decodeURIComponent 选项：<br/>\n\n```\n// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,{ decodeURIComponent: gbkDecodeURIComponent });\n```\n\n\n### 序列化 URL 字符串 querystring.stringify(obj[, sep[, eq[, options]]]) <br/>\n\n```\n// 引入模块\nconst querystring = require('querystring');\n\n// 输出为 'foo=bar&baz=qux&baz=quux&corge='\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\n\n// 输出为 'foo:bar;baz:qux'\nquerystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\n```\n\n默认情况下，查询字符串中需要百分比编码的字符将编码为 UTF-8。 如果需要其他编码，则需要指定其他 encodeURIComponent 选项：\n\n```\n// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.stringify({ w: '中文', foo: 'bar' }, null, null,{ encodeURIComponent: gbkEncodeURIComponent })\n```\n\n\n\n<a href=\"https://nodejs.org/docs/latest-v9.x/api/querystring.html\">其他方法请参考 Node Api </a><br/>\n\n","slug":"node/querystring","published":1,"updated":"2019-08-26T16:46:27.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8w003xkuu6abfc7yll","content":"<p>querystring 模块提供用于解析和格式化 URL 查询字符串<br></p>\n<h3 id=\"解析-URL-字符串-querystring-parse-str-sep-eq-options\"><a href=\"#解析-URL-字符串-querystring-parse-str-sep-eq-options\" class=\"headerlink\" title=\"解析 URL 字符串 querystring.parse(str[, sep[, eq[, options]]]) \"></a>解析 URL 字符串 querystring.parse(str[, sep[, eq[, options]]]) <br></h3><pre><code>// 引入模块\nconst querystring = require(&#39;querystring&#39;);\n\nquerystring.parse(&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;)\n\n输出为：\n{\n  foo: &#39;bar&#39;,\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\n}</code></pre><p>默认情况下，将假定查询字符串中的百分比编码字符使用 UTF-8 编码。 如果使用其他字符编码，则需要指定其他 decodeURIComponent 选项：<br></p>\n<pre><code>// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,{ decodeURIComponent: gbkDecodeURIComponent });</code></pre><h3 id=\"序列化-URL-字符串-querystring-stringify-obj-sep-eq-options\"><a href=\"#序列化-URL-字符串-querystring-stringify-obj-sep-eq-options\" class=\"headerlink\" title=\"序列化 URL 字符串 querystring.stringify(obj[, sep[, eq[, options]]]) \"></a>序列化 URL 字符串 querystring.stringify(obj[, sep[, eq[, options]]]) <br></h3><pre><code>// 引入模块\nconst querystring = require(&#39;querystring&#39;);\n\n// 输出为 &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\nquerystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; });\n\n// 输出为 &#39;foo:bar;baz:qux&#39;\nquerystring.stringify({ foo: &#39;bar&#39;, baz: &#39;qux&#39; }, &#39;;&#39;, &#39;:&#39;);</code></pre><p>默认情况下，查询字符串中需要百分比编码的字符将编码为 UTF-8。 如果需要其他编码，则需要指定其他 encodeURIComponent 选项：</p>\n<pre><code>// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.stringify({ w: &#39;中文&#39;, foo: &#39;bar&#39; }, null, null,{ encodeURIComponent: gbkEncodeURIComponent })</code></pre><p><a href=\"https://nodejs.org/docs/latest-v9.x/api/querystring.html\" target=\"_blank\" rel=\"noopener\">其他方法请参考 Node Api </a><br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>querystring 模块提供用于解析和格式化 URL 查询字符串<br></p>\n<h3 id=\"解析-URL-字符串-querystring-parse-str-sep-eq-options\"><a href=\"#解析-URL-字符串-querystring-parse-str-sep-eq-options\" class=\"headerlink\" title=\"解析 URL 字符串 querystring.parse(str[, sep[, eq[, options]]]) \"></a>解析 URL 字符串 querystring.parse(str[, sep[, eq[, options]]]) <br></h3><pre><code>// 引入模块\nconst querystring = require(&#39;querystring&#39;);\n\nquerystring.parse(&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;)\n\n输出为：\n{\n  foo: &#39;bar&#39;,\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\n}</code></pre><p>默认情况下，将假定查询字符串中的百分比编码字符使用 UTF-8 编码。 如果使用其他字符编码，则需要指定其他 decodeURIComponent 选项：<br></p>\n<pre><code>// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,{ decodeURIComponent: gbkDecodeURIComponent });</code></pre><h3 id=\"序列化-URL-字符串-querystring-stringify-obj-sep-eq-options\"><a href=\"#序列化-URL-字符串-querystring-stringify-obj-sep-eq-options\" class=\"headerlink\" title=\"序列化 URL 字符串 querystring.stringify(obj[, sep[, eq[, options]]]) \"></a>序列化 URL 字符串 querystring.stringify(obj[, sep[, eq[, options]]]) <br></h3><pre><code>// 引入模块\nconst querystring = require(&#39;querystring&#39;);\n\n// 输出为 &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\nquerystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; });\n\n// 输出为 &#39;foo:bar;baz:qux&#39;\nquerystring.stringify({ foo: &#39;bar&#39;, baz: &#39;qux&#39; }, &#39;;&#39;, &#39;:&#39;);</code></pre><p>默认情况下，查询字符串中需要百分比编码的字符将编码为 UTF-8。 如果需要其他编码，则需要指定其他 encodeURIComponent 选项：</p>\n<pre><code>// 假设 gbkEncodeURIComponent 函数已存在。\n\nquerystring.stringify({ w: &#39;中文&#39;, foo: &#39;bar&#39; }, null, null,{ encodeURIComponent: gbkEncodeURIComponent })</code></pre><p><a href=\"https://nodejs.org/docs/latest-v9.x/api/querystring.html\" target=\"_blank\" rel=\"noopener\">其他方法请参考 Node Api </a><br></p>\n"},{"title":"url","date":"2019-03-28T15:28:35.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\nurl模块提供用于URL解析和解析的实用程序<br/>\n\n```\nconst url = require('url');\n```\n\n获取并设置URL的片段部分**url.hash**<br/>\n```\nconst myURL = new URL('https://example.org/foo#bar');\nconsole.log(myURL.hash); //#bar\n\nmyURL.hash = 'baz';\nconsole.log(myURL.href); //https://example.org/foo#baz\n```\n\n获取并设置URL的主机部分**url.host**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.host);  //example.org:81\nconsole.log(myURL.hostname) //example.org\n```\n\n获取并设置序列化url**url.href**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.href);  //https://example.org:81/foo\n```\n\n获取并设置URL的路径部分**url.pathname**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.pathname);  // /foo/abc\n```\n\n获取并设置URL的端口部分**url.port  0到65535**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.port);  // 81\n```\n\n获取并设置URL的序列化查询部分**url.search**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.search);  // name=123\n```\n\n获取URLSearchParams表示URL的查询参数的对象**url.serchParams**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.searchParams);  // 123\n```\n\n<a href=\"https://nodejs.org/api/url.html\">更多方法请参考 Node Api </a><br/>\n\n\n\n","source":"_posts/node/url.md","raw":"---\ntitle: url \ndate: 2019-03-28 23:28:35\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- Node\ncategories:\n- Node\n---\n\nurl模块提供用于URL解析和解析的实用程序<br/>\n\n```\nconst url = require('url');\n```\n\n获取并设置URL的片段部分**url.hash**<br/>\n```\nconst myURL = new URL('https://example.org/foo#bar');\nconsole.log(myURL.hash); //#bar\n\nmyURL.hash = 'baz';\nconsole.log(myURL.href); //https://example.org/foo#baz\n```\n\n获取并设置URL的主机部分**url.host**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.host);  //example.org:81\nconsole.log(myURL.hostname) //example.org\n```\n\n获取并设置序列化url**url.href**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.href);  //https://example.org:81/foo\n```\n\n获取并设置URL的路径部分**url.pathname**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.pathname);  // /foo/abc\n```\n\n获取并设置URL的端口部分**url.port  0到65535**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.port);  // 81\n```\n\n获取并设置URL的序列化查询部分**url.search**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.search);  // name=123\n```\n\n获取URLSearchParams表示URL的查询参数的对象**url.serchParams**<br/>\n```\nconst myURL = new URL('https://example.org:81/foo/abc?name=123');\nconsole.log(myURL.searchParams);  // 123\n```\n\n<a href=\"https://nodejs.org/api/url.html\">更多方法请参考 Node Api </a><br/>\n\n\n\n","slug":"node/url","published":1,"updated":"2019-08-26T16:46:27.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n8y003ykuu6kfzwrjtm","content":"<p>url模块提供用于URL解析和解析的实用程序<br></p>\n<pre><code>const url = require(&#39;url&#39;);</code></pre><p>获取并设置URL的片段部分<strong>url.hash</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org/foo#bar&#39;);\nconsole.log(myURL.hash); //#bar\n\nmyURL.hash = &#39;baz&#39;;\nconsole.log(myURL.href); //https://example.org/foo#baz</code></pre><p>获取并设置URL的主机部分<strong>url.host</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo&#39;);\nconsole.log(myURL.host);  //example.org:81\nconsole.log(myURL.hostname) //example.org</code></pre><p>获取并设置序列化url<strong>url.href</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo&#39;);\nconsole.log(myURL.href);  //https://example.org:81/foo</code></pre><p>获取并设置URL的路径部分<strong>url.pathname</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.pathname);  // /foo/abc</code></pre><p>获取并设置URL的端口部分<strong>url.port  0到65535</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.port);  // 81</code></pre><p>获取并设置URL的序列化查询部分<strong>url.search</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.search);  // name=123</code></pre><p>获取URLSearchParams表示URL的查询参数的对象<strong>url.serchParams</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.searchParams);  // 123</code></pre><p><a href=\"https://nodejs.org/api/url.html\" target=\"_blank\" rel=\"noopener\">更多方法请参考 Node Api </a><br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>url模块提供用于URL解析和解析的实用程序<br></p>\n<pre><code>const url = require(&#39;url&#39;);</code></pre><p>获取并设置URL的片段部分<strong>url.hash</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org/foo#bar&#39;);\nconsole.log(myURL.hash); //#bar\n\nmyURL.hash = &#39;baz&#39;;\nconsole.log(myURL.href); //https://example.org/foo#baz</code></pre><p>获取并设置URL的主机部分<strong>url.host</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo&#39;);\nconsole.log(myURL.host);  //example.org:81\nconsole.log(myURL.hostname) //example.org</code></pre><p>获取并设置序列化url<strong>url.href</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo&#39;);\nconsole.log(myURL.href);  //https://example.org:81/foo</code></pre><p>获取并设置URL的路径部分<strong>url.pathname</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.pathname);  // /foo/abc</code></pre><p>获取并设置URL的端口部分<strong>url.port  0到65535</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.port);  // 81</code></pre><p>获取并设置URL的序列化查询部分<strong>url.search</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.search);  // name=123</code></pre><p>获取URLSearchParams表示URL的查询参数的对象<strong>url.serchParams</strong><br></p>\n<pre><code>const myURL = new URL(&#39;https://example.org:81/foo/abc?name=123&#39;);\nconsole.log(myURL.searchParams);  // 123</code></pre><p><a href=\"https://nodejs.org/api/url.html\" target=\"_blank\" rel=\"noopener\">更多方法请参考 Node Api </a><br></p>\n"},{"title":"语法、变量、数据类型","date":"2017-01-23T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n## 基础语法\n\n1. PHP 脚本以 `<?php 开始，以 ?> 结束`<br/>\n2. PHP 文件的默认文件扩展名是 \".php\"<br/>\n3. PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码<br/>\n4. PHP 中的每个代码行都必须以分号结束，否则输出错误<br/>\n```\n<!DOCTYPE html> \n<html> \n<body> \n\n<?php \n  echo \"Hello World!\"; \n?> \n\n</body> \n</html>\n```\n\n## 变量\n\n**PHP 变量规则：**<br/>\n1. 变量以 $ 符号开始，后面跟着变量的名称,$a<br/>\n2. 变量名必须以字母或者下划线字符开始<br/>\n3. 变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br/>\n4. 变量名不能包含空格<br/>\n5. 变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<br/>\n6. 由于PHP是弱类型语言所以变量不必声明类型和JS类似 <br/>\n\n**PHP 变量作用域**<br/>\n\n**四种不同的变量作用域**<br/>\n```\nlocal 局部\nglobal 全局\nstatic 局部-静态变量\nparameter 参数\n```\n\n**局部和全局作用域 local global**<br/>\n```\n<?php \n  $age = 20; //全局作用域\n  $name = 'zhangsan';\n  function people () {\n    $isJob  = 'yes'; //局部变量\n    global $name;   //访问全局作用域\n    var_dump($name);  // zhangsan \n  }\n  people()\n?>\n```\n解析：<br/>\n1. $age 是在函数外部定义的变量，拥有全局作用域，但是这里和 JS 的区别是 $age 在people函数中是不可访问的<br/>\n2. $isJob 是在函数内部声明的变量所以是局部变量，只能在函数内部访问<br/>\n3. $name global 是在函数内部**调用**函数外部定义的全局变量,正常情况在函数内部访问函数外部的变量则为NULL<br/>\n\n\n**Static 作用域**<br/>\n```\n<?php\n  function test() {\n    static $a = 0;\n    // static $a = 1 + 2; // 解析错误 参照解析2\n    echo $a;\n    $a++;\n  }\n  test (); //0\n  test (); //1\n  test (); //2\n?>\n```\n解析：<br/>\n1. 静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用<br/>\n2. 不能对静态变量用表达式的结果赋值，否则会导致解析错误<br/>\n3. static全局变量只初使化一次，下一次依据上一次结果值，上例子中调用三次执行的结果是累加的。<br/>\n4. 在内存的静态存储区中（静态存储区在整个程序运行期间都存在，其他局部变量存储在栈中。<br/>\n\n\n**parameter 参数作用域**<br/>\n\n```\n  function test($a) {\n    echo $a;\n  }\n  test (1); //1\n```\n\n**小结**\n\n1. 定义在函数外部的就是全局变量，它的作用域从定义处一直到文件结尾。\n2. 函数内定义的变量就是局部变量，它的作用域为函数定义范围内。\n3. 函数内访问全局变量需要 global 关键字,如果不使用，则会覆盖全局变量\n\n\n## 数据类型\n\n**php数据类型**\n\nString（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<br/>\n\n这里由于和 JS 类似所以不多做解释<br/>\n\n\n","source":"_posts/php/base.md","raw":"---\ntitle: 语法、变量、数据类型\ndate: 2017-01-23 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- PHP\ncategories:\n- PHP\n---\n\n## 基础语法\n\n1. PHP 脚本以 `<?php 开始，以 ?> 结束`<br/>\n2. PHP 文件的默认文件扩展名是 \".php\"<br/>\n3. PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码<br/>\n4. PHP 中的每个代码行都必须以分号结束，否则输出错误<br/>\n```\n<!DOCTYPE html> \n<html> \n<body> \n\n<?php \n  echo \"Hello World!\"; \n?> \n\n</body> \n</html>\n```\n\n## 变量\n\n**PHP 变量规则：**<br/>\n1. 变量以 $ 符号开始，后面跟着变量的名称,$a<br/>\n2. 变量名必须以字母或者下划线字符开始<br/>\n3. 变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br/>\n4. 变量名不能包含空格<br/>\n5. 变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<br/>\n6. 由于PHP是弱类型语言所以变量不必声明类型和JS类似 <br/>\n\n**PHP 变量作用域**<br/>\n\n**四种不同的变量作用域**<br/>\n```\nlocal 局部\nglobal 全局\nstatic 局部-静态变量\nparameter 参数\n```\n\n**局部和全局作用域 local global**<br/>\n```\n<?php \n  $age = 20; //全局作用域\n  $name = 'zhangsan';\n  function people () {\n    $isJob  = 'yes'; //局部变量\n    global $name;   //访问全局作用域\n    var_dump($name);  // zhangsan \n  }\n  people()\n?>\n```\n解析：<br/>\n1. $age 是在函数外部定义的变量，拥有全局作用域，但是这里和 JS 的区别是 $age 在people函数中是不可访问的<br/>\n2. $isJob 是在函数内部声明的变量所以是局部变量，只能在函数内部访问<br/>\n3. $name global 是在函数内部**调用**函数外部定义的全局变量,正常情况在函数内部访问函数外部的变量则为NULL<br/>\n\n\n**Static 作用域**<br/>\n```\n<?php\n  function test() {\n    static $a = 0;\n    // static $a = 1 + 2; // 解析错误 参照解析2\n    echo $a;\n    $a++;\n  }\n  test (); //0\n  test (); //1\n  test (); //2\n?>\n```\n解析：<br/>\n1. 静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用<br/>\n2. 不能对静态变量用表达式的结果赋值，否则会导致解析错误<br/>\n3. static全局变量只初使化一次，下一次依据上一次结果值，上例子中调用三次执行的结果是累加的。<br/>\n4. 在内存的静态存储区中（静态存储区在整个程序运行期间都存在，其他局部变量存储在栈中。<br/>\n\n\n**parameter 参数作用域**<br/>\n\n```\n  function test($a) {\n    echo $a;\n  }\n  test (1); //1\n```\n\n**小结**\n\n1. 定义在函数外部的就是全局变量，它的作用域从定义处一直到文件结尾。\n2. 函数内定义的变量就是局部变量，它的作用域为函数定义范围内。\n3. 函数内访问全局变量需要 global 关键字,如果不使用，则会覆盖全局变量\n\n\n## 数据类型\n\n**php数据类型**\n\nString（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<br/>\n\n这里由于和 JS 类似所以不多做解释<br/>\n\n\n","slug":"php/base","published":1,"updated":"2019-08-26T16:46:27.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n900043kuu68af4qqeu","content":"<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><ol>\n<li>PHP 脚本以 <code>&lt;?php 开始，以 ?&gt; 结束</code><br></li>\n<li>PHP 文件的默认文件扩展名是 “.php”<br></li>\n<li>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码<br></li>\n<li>PHP 中的每个代码行都必须以分号结束，否则输出错误<br><pre><code>&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n&lt;body&gt; \n</code></pre></li>\n</ol>\n<?php \n  echo \"Hello World!\"; \n?><p> </p>\n \n\n```\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><strong>PHP 变量规则：</strong><br></p>\n<ol>\n<li>变量以 $ 符号开始，后面跟着变量的名称,$a<br></li>\n<li>变量名必须以字母或者下划线字符开始<br></li>\n<li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br></li>\n<li>变量名不能包含空格<br></li>\n<li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<br></li>\n<li>由于PHP是弱类型语言所以变量不必声明类型和JS类似 <br></li>\n</ol>\n<p><strong>PHP 变量作用域</strong><br></p>\n<p><strong>四种不同的变量作用域</strong><br></p>\n<pre><code>local 局部\nglobal 全局\nstatic 局部-静态变量\nparameter 参数</code></pre><p><strong>局部和全局作用域 local global</strong><br></p>\n<pre><code>&lt;?php \n  $age = 20; //全局作用域\n  $name = &#39;zhangsan&#39;;\n  function people () {\n    $isJob  = &#39;yes&#39;; //局部变量\n    global $name;   //访问全局作用域\n    var_dump($name);  // zhangsan \n  }\n  people()\n?&gt;</code></pre><p>解析：<br></p>\n<ol>\n<li>$age 是在函数外部定义的变量，拥有全局作用域，但是这里和 JS 的区别是 $age 在people函数中是不可访问的<br></li>\n<li>$isJob 是在函数内部声明的变量所以是局部变量，只能在函数内部访问<br></li>\n<li>$name global 是在函数内部<strong>调用</strong>函数外部定义的全局变量,正常情况在函数内部访问函数外部的变量则为NULL<br></li>\n</ol>\n<p><strong>Static 作用域</strong><br></p>\n<pre><code>&lt;?php\n  function test() {\n    static $a = 0;\n    // static $a = 1 + 2; // 解析错误 参照解析2\n    echo $a;\n    $a++;\n  }\n  test (); //0\n  test (); //1\n  test (); //2\n?&gt;</code></pre><p>解析：<br></p>\n<ol>\n<li>静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用<br></li>\n<li>不能对静态变量用表达式的结果赋值，否则会导致解析错误<br></li>\n<li>static全局变量只初使化一次，下一次依据上一次结果值，上例子中调用三次执行的结果是累加的。<br></li>\n<li>在内存的静态存储区中（静态存储区在整个程序运行期间都存在，其他局部变量存储在栈中。<br></li>\n</ol>\n<p><strong>parameter 参数作用域</strong><br></p>\n<pre><code>  function test($a) {\n    echo $a;\n  }\n  test (1); //1</code></pre><p><strong>小结</strong></p>\n<ol>\n<li>定义在函数外部的就是全局变量，它的作用域从定义处一直到文件结尾。</li>\n<li>函数内定义的变量就是局部变量，它的作用域为函数定义范围内。</li>\n<li>函数内访问全局变量需要 global 关键字,如果不使用，则会覆盖全局变量</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>php数据类型</strong></p>\n<p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<br></p>\n<p>这里由于和 JS 类似所以不多做解释<br></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><ol>\n<li>PHP 脚本以 <code>&lt;?php 开始，以 ?&gt; 结束</code><br></li>\n<li>PHP 文件的默认文件扩展名是 “.php”<br></li>\n<li>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码<br></li>\n<li>PHP 中的每个代码行都必须以分号结束，否则输出错误<br><pre><code>&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n&lt;body&gt; \n</code></pre></li>\n</ol>\n<?php \n  echo \"Hello World!\"; \n?><p> </p>\n \n\n```\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><strong>PHP 变量规则：</strong><br></p>\n<ol>\n<li>变量以 $ 符号开始，后面跟着变量的名称,$a<br></li>\n<li>变量名必须以字母或者下划线字符开始<br></li>\n<li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br></li>\n<li>变量名不能包含空格<br></li>\n<li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<br></li>\n<li>由于PHP是弱类型语言所以变量不必声明类型和JS类似 <br></li>\n</ol>\n<p><strong>PHP 变量作用域</strong><br></p>\n<p><strong>四种不同的变量作用域</strong><br></p>\n<pre><code>local 局部\nglobal 全局\nstatic 局部-静态变量\nparameter 参数</code></pre><p><strong>局部和全局作用域 local global</strong><br></p>\n<pre><code>&lt;?php \n  $age = 20; //全局作用域\n  $name = &#39;zhangsan&#39;;\n  function people () {\n    $isJob  = &#39;yes&#39;; //局部变量\n    global $name;   //访问全局作用域\n    var_dump($name);  // zhangsan \n  }\n  people()\n?&gt;</code></pre><p>解析：<br></p>\n<ol>\n<li>$age 是在函数外部定义的变量，拥有全局作用域，但是这里和 JS 的区别是 $age 在people函数中是不可访问的<br></li>\n<li>$isJob 是在函数内部声明的变量所以是局部变量，只能在函数内部访问<br></li>\n<li>$name global 是在函数内部<strong>调用</strong>函数外部定义的全局变量,正常情况在函数内部访问函数外部的变量则为NULL<br></li>\n</ol>\n<p><strong>Static 作用域</strong><br></p>\n<pre><code>&lt;?php\n  function test() {\n    static $a = 0;\n    // static $a = 1 + 2; // 解析错误 参照解析2\n    echo $a;\n    $a++;\n  }\n  test (); //0\n  test (); //1\n  test (); //2\n?&gt;</code></pre><p>解析：<br></p>\n<ol>\n<li>静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用<br></li>\n<li>不能对静态变量用表达式的结果赋值，否则会导致解析错误<br></li>\n<li>static全局变量只初使化一次，下一次依据上一次结果值，上例子中调用三次执行的结果是累加的。<br></li>\n<li>在内存的静态存储区中（静态存储区在整个程序运行期间都存在，其他局部变量存储在栈中。<br></li>\n</ol>\n<p><strong>parameter 参数作用域</strong><br></p>\n<pre><code>  function test($a) {\n    echo $a;\n  }\n  test (1); //1</code></pre><p><strong>小结</strong></p>\n<ol>\n<li>定义在函数外部的就是全局变量，它的作用域从定义处一直到文件结尾。</li>\n<li>函数内定义的变量就是局部变量，它的作用域为函数定义范围内。</li>\n<li>函数内访问全局变量需要 global 关键字,如果不使用，则会覆盖全局变量</li>\n</ol>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>php数据类型</strong></p>\n<p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<br></p>\n<p>这里由于和 JS 类似所以不多做解释<br></p>\n"},{"title":"PHP 常用方法","date":"2017-01-23T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n此篇文章JS数组方法总结一样纯属是为了熟悉API，不得不承认PHP大法好比JS的原生方法多的很。这里只列出个人认为比较常用的。<br/>\n\n**数组内置函数**<br/>\n\n1. for、foreach循环输出数组元素<br/>\n```\n<?php \n  // for循环\n  for ($i = 0; $i <= 100; $i++) {\n    echo \"$i <br/>\";\n  } \n\n  // foreach 只适用于数组\n  $name = array('zhangsan', 'lisi', 'wangwu');  // 创建数组\n  foreach ($name as $value) {\n    echo \"$value <br/>\";\n  }\n?>\n```\n\n2. count() 获取数组元素的个数 <br/>\n```\n<?php\n  $nameLength = array('zhangsan', 'lisi', 'wangwu');\n  echo count($nameLength); // 3\n?>\n```\n\n3. 输出数组当前的元素的值，如果当前元素为空或者无值则返回FALSE <br/>\n``` \n<?php\n  $name = array('zhangsan', 'lisi', 'wangwu');\n\n  echo current($name); // 返回第一个元素zhangsan \n\n  echo end($name); // 返回最后一个元素wangwu\n\n  echo next($name); // 返回指定元素的下一个元素\n\n  echo prev($name); // 返回指定元素的上一个元素\n\n  echo reset($name); // 把内部指针移动到数组的首个元素zhangsan\n\n?>\n```\n\n4. 对当前数组进行排序<br/>\n```\n  $numbers = array(1, 2, 3, 3, 4, 5, 6, 2);\n\n  // 返回bool\n  sort($numbers);  //对数组进行升序成功则为true 失败则为false\n  rsort($numbers); //对数组进行降序成功则为true 失败则为false\n  array_reverse($array, $preserve); //对原数组按反序排序，返回排序后的数组(2, 6, 5, 4, 3, 3, 2, 1)\n```\n\n5. 合并数组<br/>\n```\n$arr = array(1, 2, 3, 3, 4, 5, 6, 2);\n$arr1 = array(10, 20, 30);\n\narray_merge($arr, $arr1 );\n```\n\n6. 压栈，出栈<br/>\n```\n$name = 'wang';\n$name1  = array('zhang', 'li');\n\narray_push($name1, $name); // 3 返回新数组的长度\n\narray_pop($name1); //li 返回被pop的值。栈为空，返回null\n\narray_shift($name1); //删除第一个元素并返回；\n\narray_unshift(array，val1，val2,...); //将参数按照顺序加入队列中\n```\n\n7. 统计数组中值为出现的次数<br/>\n\n```\n$val = array(1, 2, 3, 3, 4, 3, 3, 1, 1);\nprint_r(array_count_values($val));\n```\n\n8. 过滤数组的元素<br/>\n```\nfunction func ($var) {\n  return($var & 1);\n}\n\n$val = array('a', 'b', 2, 3, 4);\nprint_r(array_filter($val, 'func')); // 3\n```\n\n9. 检查索引是否在数组中<br/>\n```\n$people = array('name'=>'renbo', 'age'=>'28');\n\nif (array_key_exists('name', $people)) {\n  echo 'name存在';\n}\n```\n\n10. 检查数组中是否存在指定的值<br/>\n```\n$val = array('zhangsan', 'lisi', 'wangwu');\nif (in_array('zhangsan', $val)) {\n  echo '存在';\n}\n```\n\n11. 返回当前元素的Key<br/>\n```\n$people = array('name'=>'renbo', 'age'=>'28');\nkey($people); //name\n```\n\n12. 返回当前元素所有的key<br/>\n```\n$people = array('name'=>'renbo','age'=>'28');\nprint_r(array_keys($people)); // name age\n```\n\n**时间内置函数**<br/>\n```\ndate(format[,timestamp])\n\nmktime(hour,minute,second,month,day,year) //省略的参数将以本地日期和时间代替\n\ngetdate([timestamp]) \n``` \n\n**URL处理内置函数**<br/>\n```\nurlencode(str) 返回值字符串中所有的非字母和数字字符变成一个百分号(%) 和一个两位的十六进制数，空格被转换成+,-、_和.不做任何转换\n\nurldecode(str) \n```\n\n\n其实还有好多比如字符串的内置函数、文件操作的内置函数、数据库连接的内置函数等等。其实PHP方法还是比JS多用到的时候查看API即可...<br/>\n","source":"_posts/php/method.md","raw":"---\ntitle: PHP 常用方法\ndate: 2017-01-23 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- PHP\ncategories:\n- PHP\n---\n\n此篇文章JS数组方法总结一样纯属是为了熟悉API，不得不承认PHP大法好比JS的原生方法多的很。这里只列出个人认为比较常用的。<br/>\n\n**数组内置函数**<br/>\n\n1. for、foreach循环输出数组元素<br/>\n```\n<?php \n  // for循环\n  for ($i = 0; $i <= 100; $i++) {\n    echo \"$i <br/>\";\n  } \n\n  // foreach 只适用于数组\n  $name = array('zhangsan', 'lisi', 'wangwu');  // 创建数组\n  foreach ($name as $value) {\n    echo \"$value <br/>\";\n  }\n?>\n```\n\n2. count() 获取数组元素的个数 <br/>\n```\n<?php\n  $nameLength = array('zhangsan', 'lisi', 'wangwu');\n  echo count($nameLength); // 3\n?>\n```\n\n3. 输出数组当前的元素的值，如果当前元素为空或者无值则返回FALSE <br/>\n``` \n<?php\n  $name = array('zhangsan', 'lisi', 'wangwu');\n\n  echo current($name); // 返回第一个元素zhangsan \n\n  echo end($name); // 返回最后一个元素wangwu\n\n  echo next($name); // 返回指定元素的下一个元素\n\n  echo prev($name); // 返回指定元素的上一个元素\n\n  echo reset($name); // 把内部指针移动到数组的首个元素zhangsan\n\n?>\n```\n\n4. 对当前数组进行排序<br/>\n```\n  $numbers = array(1, 2, 3, 3, 4, 5, 6, 2);\n\n  // 返回bool\n  sort($numbers);  //对数组进行升序成功则为true 失败则为false\n  rsort($numbers); //对数组进行降序成功则为true 失败则为false\n  array_reverse($array, $preserve); //对原数组按反序排序，返回排序后的数组(2, 6, 5, 4, 3, 3, 2, 1)\n```\n\n5. 合并数组<br/>\n```\n$arr = array(1, 2, 3, 3, 4, 5, 6, 2);\n$arr1 = array(10, 20, 30);\n\narray_merge($arr, $arr1 );\n```\n\n6. 压栈，出栈<br/>\n```\n$name = 'wang';\n$name1  = array('zhang', 'li');\n\narray_push($name1, $name); // 3 返回新数组的长度\n\narray_pop($name1); //li 返回被pop的值。栈为空，返回null\n\narray_shift($name1); //删除第一个元素并返回；\n\narray_unshift(array，val1，val2,...); //将参数按照顺序加入队列中\n```\n\n7. 统计数组中值为出现的次数<br/>\n\n```\n$val = array(1, 2, 3, 3, 4, 3, 3, 1, 1);\nprint_r(array_count_values($val));\n```\n\n8. 过滤数组的元素<br/>\n```\nfunction func ($var) {\n  return($var & 1);\n}\n\n$val = array('a', 'b', 2, 3, 4);\nprint_r(array_filter($val, 'func')); // 3\n```\n\n9. 检查索引是否在数组中<br/>\n```\n$people = array('name'=>'renbo', 'age'=>'28');\n\nif (array_key_exists('name', $people)) {\n  echo 'name存在';\n}\n```\n\n10. 检查数组中是否存在指定的值<br/>\n```\n$val = array('zhangsan', 'lisi', 'wangwu');\nif (in_array('zhangsan', $val)) {\n  echo '存在';\n}\n```\n\n11. 返回当前元素的Key<br/>\n```\n$people = array('name'=>'renbo', 'age'=>'28');\nkey($people); //name\n```\n\n12. 返回当前元素所有的key<br/>\n```\n$people = array('name'=>'renbo','age'=>'28');\nprint_r(array_keys($people)); // name age\n```\n\n**时间内置函数**<br/>\n```\ndate(format[,timestamp])\n\nmktime(hour,minute,second,month,day,year) //省略的参数将以本地日期和时间代替\n\ngetdate([timestamp]) \n``` \n\n**URL处理内置函数**<br/>\n```\nurlencode(str) 返回值字符串中所有的非字母和数字字符变成一个百分号(%) 和一个两位的十六进制数，空格被转换成+,-、_和.不做任何转换\n\nurldecode(str) \n```\n\n\n其实还有好多比如字符串的内置函数、文件操作的内置函数、数据库连接的内置函数等等。其实PHP方法还是比JS多用到的时候查看API即可...<br/>\n","slug":"php/method","published":1,"updated":"2019-08-26T16:46:27.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n910044kuu6pd6zf7hm","content":"<p>此篇文章JS数组方法总结一样纯属是为了熟悉API，不得不承认PHP大法好比JS的原生方法多的很。这里只列出个人认为比较常用的。<br></p>\n<p><strong>数组内置函数</strong><br></p>\n<ol>\n<li><p>for、foreach循环输出数组元素<br></p>\n<pre><code>&lt;?php \n// for循环\nfor ($i = 0; $i &lt;= 100; $i++) {\n echo &quot;$i &lt;br/&gt;&quot;;\n} \n\n// foreach 只适用于数组\n$name = array(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;);  // 创建数组\nforeach ($name as $value) {\n echo &quot;$value &lt;br/&gt;&quot;;\n}\n?&gt;</code></pre></li>\n<li><p>count() 获取数组元素的个数 <br></p>\n<pre><code>&lt;?php\n$nameLength = array(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;);\necho count($nameLength); // 3\n?&gt;</code></pre></li>\n<li><p>输出数组当前的元素的值，如果当前元素为空或者无值则返回FALSE <br></p>\n<pre><code>&lt;?php\n$name = array(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;);\n\necho current($name); // 返回第一个元素zhangsan \n\necho end($name); // 返回最后一个元素wangwu\n\necho next($name); // 返回指定元素的下一个元素\n\necho prev($name); // 返回指定元素的上一个元素\n\necho reset($name); // 把内部指针移动到数组的首个元素zhangsan\n</code></pre></li>\n</ol>\n<p>?&gt;</p>\n<pre><code>\n4. 对当前数组进行排序&lt;br/&gt;</code></pre><p>  $numbers = array(1, 2, 3, 3, 4, 5, 6, 2);</p>\n<p>  // 返回bool<br>  sort($numbers);  //对数组进行升序成功则为true 失败则为false<br>  rsort($numbers); //对数组进行降序成功则为true 失败则为false<br>  array_reverse($array, $preserve); //对原数组按反序排序，返回排序后的数组(2, 6, 5, 4, 3, 3, 2, 1)</p>\n<pre><code>\n5. 合并数组&lt;br/&gt;</code></pre><p>$arr = array(1, 2, 3, 3, 4, 5, 6, 2);<br>$arr1 = array(10, 20, 30);</p>\n<p>array_merge($arr, $arr1 );</p>\n<pre><code>\n6. 压栈，出栈&lt;br/&gt;</code></pre><p>$name = ‘wang’;<br>$name1  = array(‘zhang’, ‘li’);</p>\n<p>array_push($name1, $name); // 3 返回新数组的长度</p>\n<p>array_pop($name1); //li 返回被pop的值。栈为空，返回null</p>\n<p>array_shift($name1); //删除第一个元素并返回；</p>\n<p>array_unshift(array，val1，val2,…); //将参数按照顺序加入队列中</p>\n<pre><code>\n7. 统计数组中值为出现的次数&lt;br/&gt;\n</code></pre><p>$val = array(1, 2, 3, 3, 4, 3, 3, 1, 1);<br>print_r(array_count_values($val));</p>\n<pre><code>\n8. 过滤数组的元素&lt;br/&gt;</code></pre><p>function func ($var) {<br>  return($var &amp; 1);<br>}</p>\n<p>$val = array(‘a’, ‘b’, 2, 3, 4);<br>print_r(array_filter($val, ‘func’)); // 3</p>\n<pre><code>\n9. 检查索引是否在数组中&lt;br/&gt;</code></pre><p>$people = array(‘name’=&gt;’renbo’, ‘age’=&gt;’28’);</p>\n<p>if (array_key_exists(‘name’, $people)) {<br>  echo ‘name存在’;<br>}</p>\n<pre><code>\n10. 检查数组中是否存在指定的值&lt;br/&gt;</code></pre><p>$val = array(‘zhangsan’, ‘lisi’, ‘wangwu’);<br>if (in_array(‘zhangsan’, $val)) {<br>  echo ‘存在’;<br>}</p>\n<pre><code>\n11. 返回当前元素的Key&lt;br/&gt;</code></pre><p>$people = array(‘name’=&gt;’renbo’, ‘age’=&gt;’28’);<br>key($people); //name</p>\n<pre><code>\n12. 返回当前元素所有的key&lt;br/&gt;</code></pre><p>$people = array(‘name’=&gt;’renbo’,’age’=&gt;’28’);<br>print_r(array_keys($people)); // name age</p>\n<pre><code>\n**时间内置函数**&lt;br/&gt;</code></pre><p>date(format[,timestamp])</p>\n<p>mktime(hour,minute,second,month,day,year) //省略的参数将以本地日期和时间代替</p>\n<p>getdate([timestamp]) </p>\n<pre><code>\n**URL处理内置函数**&lt;br/&gt;</code></pre><p>urlencode(str) 返回值字符串中所有的非字母和数字字符变成一个百分号(%) 和一个两位的十六进制数，空格被转换成+,-、_和.不做任何转换</p>\n<p>urldecode(str) </p>\n<pre><code>\n\n其实还有好多比如字符串的内置函数、文件操作的内置函数、数据库连接的内置函数等等。其实PHP方法还是比JS多用到的时候查看API即可...&lt;br/&gt;</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>此篇文章JS数组方法总结一样纯属是为了熟悉API，不得不承认PHP大法好比JS的原生方法多的很。这里只列出个人认为比较常用的。<br></p>\n<p><strong>数组内置函数</strong><br></p>\n<ol>\n<li><p>for、foreach循环输出数组元素<br></p>\n<pre><code>&lt;?php \n// for循环\nfor ($i = 0; $i &lt;= 100; $i++) {\n echo &quot;$i &lt;br/&gt;&quot;;\n} \n\n// foreach 只适用于数组\n$name = array(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;);  // 创建数组\nforeach ($name as $value) {\n echo &quot;$value &lt;br/&gt;&quot;;\n}\n?&gt;</code></pre></li>\n<li><p>count() 获取数组元素的个数 <br></p>\n<pre><code>&lt;?php\n$nameLength = array(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;);\necho count($nameLength); // 3\n?&gt;</code></pre></li>\n<li><p>输出数组当前的元素的值，如果当前元素为空或者无值则返回FALSE <br></p>\n<pre><code>&lt;?php\n$name = array(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;);\n\necho current($name); // 返回第一个元素zhangsan \n\necho end($name); // 返回最后一个元素wangwu\n\necho next($name); // 返回指定元素的下一个元素\n\necho prev($name); // 返回指定元素的上一个元素\n\necho reset($name); // 把内部指针移动到数组的首个元素zhangsan\n</code></pre></li>\n</ol>\n<p>?&gt;</p>\n<pre><code>\n4. 对当前数组进行排序&lt;br/&gt;</code></pre><p>  $numbers = array(1, 2, 3, 3, 4, 5, 6, 2);</p>\n<p>  // 返回bool<br>  sort($numbers);  //对数组进行升序成功则为true 失败则为false<br>  rsort($numbers); //对数组进行降序成功则为true 失败则为false<br>  array_reverse($array, $preserve); //对原数组按反序排序，返回排序后的数组(2, 6, 5, 4, 3, 3, 2, 1)</p>\n<pre><code>\n5. 合并数组&lt;br/&gt;</code></pre><p>$arr = array(1, 2, 3, 3, 4, 5, 6, 2);<br>$arr1 = array(10, 20, 30);</p>\n<p>array_merge($arr, $arr1 );</p>\n<pre><code>\n6. 压栈，出栈&lt;br/&gt;</code></pre><p>$name = ‘wang’;<br>$name1  = array(‘zhang’, ‘li’);</p>\n<p>array_push($name1, $name); // 3 返回新数组的长度</p>\n<p>array_pop($name1); //li 返回被pop的值。栈为空，返回null</p>\n<p>array_shift($name1); //删除第一个元素并返回；</p>\n<p>array_unshift(array，val1，val2,…); //将参数按照顺序加入队列中</p>\n<pre><code>\n7. 统计数组中值为出现的次数&lt;br/&gt;\n</code></pre><p>$val = array(1, 2, 3, 3, 4, 3, 3, 1, 1);<br>print_r(array_count_values($val));</p>\n<pre><code>\n8. 过滤数组的元素&lt;br/&gt;</code></pre><p>function func ($var) {<br>  return($var &amp; 1);<br>}</p>\n<p>$val = array(‘a’, ‘b’, 2, 3, 4);<br>print_r(array_filter($val, ‘func’)); // 3</p>\n<pre><code>\n9. 检查索引是否在数组中&lt;br/&gt;</code></pre><p>$people = array(‘name’=&gt;’renbo’, ‘age’=&gt;’28’);</p>\n<p>if (array_key_exists(‘name’, $people)) {<br>  echo ‘name存在’;<br>}</p>\n<pre><code>\n10. 检查数组中是否存在指定的值&lt;br/&gt;</code></pre><p>$val = array(‘zhangsan’, ‘lisi’, ‘wangwu’);<br>if (in_array(‘zhangsan’, $val)) {<br>  echo ‘存在’;<br>}</p>\n<pre><code>\n11. 返回当前元素的Key&lt;br/&gt;</code></pre><p>$people = array(‘name’=&gt;’renbo’, ‘age’=&gt;’28’);<br>key($people); //name</p>\n<pre><code>\n12. 返回当前元素所有的key&lt;br/&gt;</code></pre><p>$people = array(‘name’=&gt;’renbo’,’age’=&gt;’28’);<br>print_r(array_keys($people)); // name age</p>\n<pre><code>\n**时间内置函数**&lt;br/&gt;</code></pre><p>date(format[,timestamp])</p>\n<p>mktime(hour,minute,second,month,day,year) //省略的参数将以本地日期和时间代替</p>\n<p>getdate([timestamp]) </p>\n<pre><code>\n**URL处理内置函数**&lt;br/&gt;</code></pre><p>urlencode(str) 返回值字符串中所有的非字母和数字字符变成一个百分号(%) 和一个两位的十六进制数，空格被转换成+,-、_和.不做任何转换</p>\n<p>urldecode(str) </p>\n<pre><code>\n\n其实还有好多比如字符串的内置函数、文件操作的内置函数、数据库连接的内置函数等等。其实PHP方法还是比JS多用到的时候查看API即可...&lt;br/&gt;</code></pre>"},{"title":"PHP 面向对象","date":"2017-01-23T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n**面向对象基础概念**<br/>\nObject Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数<br/>\n\n**对象的主要三个特性**<br/>\n对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为<br/>\n对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型<br/>\n对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同<br/>\n\n比如 People(人) 是一个抽象类，我们可以具体到男人和女人，男人和女人就是具体的对象，他们有名字属性，可以写，可以学习说话等行为状态。\n\n**面向对象内容**<br/>\n```\n类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作\n\n对象 − 是类的实例\n\n成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性\n\n成员函数 − 定义在类的内部，可用于访问对象的数据\n\n继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容\n\n父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类\n\n子类 − 一个类继承其他类称为子类，也可称为派生类\n\n多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性\n\n重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法\n\n抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关\n\n封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内\n\n构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n\n析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做\"清理善后\" 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）\n```\n\n## 代码解析上述概念\n\n**PHP中类的定义**<br/>\n```\n  <?php\n    class People {\n      // 公有成员属性\n      public $name = 'zhangsan';\n      public $age = 28;\n      // 公有成员函数方法\n      public function sayName () {\n        //业务逻辑 \n      }\n    }\n  ?>\n\n```\n**PHP中对象的创建**<br/>\n```\n  class People {\n    // 公有成员属性\n    public $name = 'zhangsan';\n    public $age = 28;\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo $this->name;\n    }\n  }\n  // 通过new操作符创建对象\n  $body = new People();\n  // 成员对象的调用\n  $body->study();\n```\n**PHP中构造函数**<br/>\n构造函数是一种特殊的方法。主要用来在创建对象时初始化对象和JS中构造函数中的constructor相似<br/>\n```\n  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct( $name, $age ) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n  }\n  // 通过new操作符创建zhangsan对象\n  $zhangsan = new People('zhangsan', 28);\n  $zhangsan->sayName();\n\n  // 通过new操作符创建lisi对象\n  $lisi = new People('lisi', 26);\n  $lisi->sayName();\n```\n**PHP中析构函数**<br/>\n析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时，系统自动执行析构函数，常用场景例如连接数据库在__construct中,处理完数据断开连接在__destruct方法中<br/>\n```\n  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct ($name, $age) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n    // 析构函数用于销毁某些变量、对象，操作等\n    function __destruct () {\n      $this->name = '';\n      return true;\n    }\n  }\n  // 通过new操作符创建lisi对象\n  $lisi = new People('lisi', 26);\n\n  var_dump($lisi);\n  echo '<br/>';\n\n  if ($lisi->__destruct()) {\n    echo '销毁成功 <br/>';\n    var_dump($lisi);\n  }\n```\n\n**PHP中继承实现**<br/>\nPHP 使用关键字 extends 来继承一个类<br/>\n```\n  // 父类\n  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n  }\n  // 子类\n  class Boy extends People {\n\n    function getParentProperty () {\n      var_dump($this);\n    }\n\n  }\n  $lisi = new People('lisi', 26);\n  $boy = new Boy('wangwu',28);\n  $boy->getParentProperty();\n  // 子类调用父类方法\n  $boy->sayName();\n```\n**PHP中方法重写**\n```\n  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n  }\n  // 子类\n  class Boy extends People {\n    // 重写父类方法\n    public function sayName () {\n      echo (\"my name is &nbsp;\" .$this->name);\n      return $this->name;\n    }\n  }\n  $lisi = new People('lisi', 26);\n  $boy = new Boy('wangwu',28);\n  // 重写方法\n  $boy->sayName();\n```\n**PHP中访问的控制**<br/>\nPHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的<br/>\n\npublic & var（公有）：公有的类成员可以在任何地方被访问<br/>\n\nprotected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问<br/>\n\nprivate（私有）：私有的类成员则只能被其定义所在的类访问<br/>\n\n```\n  /**\n   * 基类\n   * Define People\n   */\n  class People \n  {\n    // 声明一个公有的构造函数\n    public function __construct () {}\n\n    // 声明一个共有的方法\n    public function sayName () \n    {\n      echo 'sayname</br>';\n    }\n\n    // 声明一个受保护的方法\n    protected function swim () \n    {\n      echo 'swim</br>';\n    }\n\n    // 声明一个私有方法\n    private function study () \n    {\n      echo 'study';\n    }\n    \n    // 不加关键字默认公有方法\n    function getFun () {\n      $this->sayName();\n      $this->swim();\n      $this->study();\n    }\n  }\n  $people = new People();\n  // 正常运行输出sayname\n  $people->sayName();\n  // 产生错误\n  $people->swim();\n  // 产生错误\n  $people->study();\n  // 公有，受保护，私有都可以执行\n  $people->getFun(); \n\n  /**\n   * 子类\n   * Define Boy\n   */\n\n  class Boy extends People\n  {\n    function getFun2 ()\n    {\n      $this->sayName();\n      $this->swim();\n      // 这行会产生一个错误\n      $this->study(); \n    }\n  }\n  $body = new Boy();\n  // 这行能被正常执行\n  $body ->sayName();\n  // 公有的和受保护的都可执行，但私有的不行\n  $body->getFun2(); \n```\n\n**PHP中抽象类**<br/>\n利用关键字abstract声明抽象\n\n如果类中有一个方法被是声明为抽象，那么这个类也必须声明为抽象<br/>\n\n抽象方法只声明了调用方式（参数），不能定义其具体的功能实现（相当于没有函数体），子类通过继承实现抽象方法，且不能被实例化<br/>\n\n继承一个抽象类，子类必须定义父类中的所有抽象方法并且必须要和父类的声明访问级别保持一致或者更宽松<br/>\n\n```\n  /**\n   * 定义抽象类People\n   */\n  abstract class People \n  {\n\n    abstract protected function eat();\n    abstract protected function sleep();\n    abstract protected function study();\n    public function runing() \n    {\n      echo '跑啊跑！</br>';\n    }\n  }\n\n  /**\n   * 实现抽象类\n   */\n  class Zhangsan extends People\n  {\n    protected function eat()\n    {\n      echo 'eat </br>';\n      return 'eat';\n    }\n\n    protected function sleep()\n    {\n      echo 'sleep </br>';\n      return 'sleep';\n    }\n\n    protected function study()\n    {\n      echo 'study </br>';\n      return 'study';\n    }\n\n    public function getFunc () \n    {\n      $this->eat();\n      $this->sleep();\n      $this->study();\n    }\n  }\n  // 调用子类\n  $zhangsan = new Zhangsan;\n  $zhangsan->runing(); //跑啊跑！\n  $zhangsan->getFunc(); // eat sleep study\n```\n\n场景：在很多类里面很多的方法都是在重复。这里就可以去用抽象类，当然也可以重写一个类，每个公共类实例化实例化一次，调用相同的方法。但是abstract可以省去实例化的步骤，而且可以重载这个方法,这样不是更方便简单嘛<br/>\n**PHP中接口的使用**<br/>\ninterface主要对类名，类所拥有的方法，以及所传参数起约束和规范作用，和abstract类似。在多人协同开发项目时起重要作用<br/>\n```\n// 定义接口类\ninterface People  \n{\n  public eat () {};\n}\n// 实现接口类\nclass Apple implements People{\n public function eat ()\n {\n   echo '我吃的苹果';\n }\n}\n\n$apple = new Apple();\n$apple->eat(); \n```\n\n参数约束，如果参数名字不一样会报错<br/>\n```\n// 定义接口类\ninterface People  \n{\n  public function eat($color);\n}\n\n// 实现接口类Apple\nclass Apple implements People\n{\n public function eat($color)\n {\n    echo(\"我吃的$color 🍎<br/>\");\n }\n}\n\n// 实现接口类Grape\nclass Grape implements People\n{\n  public function eat($color)\n  {\n    echo(\"我吃的$color 🍇\");\n  }\n}\n\n$apple = new Apple();\n$apple->eat('红'); \n\n$grape = new Grape();\n$grape->eat('紫'); \n```\n\n接口继承<br/>\n```\n  // 定义People接口类\n  interface People  \n  {  \n    public function eat();  \n  }\n\n  // 继承People接口类\n  interface Boy extends People  \n  {  \n    public function drink();  \n  }\n\n  // 接口方法实现\n  class Behavior implements Boy  \n  {  \n    public function eat()  \n    {  \n        echo \"吃东西<br>\";  \n    }  \n    \n    public function drink()  \n    {  \n      echo \"喝饮料<br>\";  \n    }  \n  }         \n  Behavior::eat();      \n  Behavior::drink();\n\n```\n**总结抽象类和接口**<br/>\n抽象类就是一个类的服务提供商，拥有众多服务<br/>\n\n接口类就是一个类的规范，子类必须完成它指定方法<br/>\n\n它们的区别：<br/>\n\n抽象类继承用extends,接口继承用implements<br/>\n\n抽象类能多重继承,接口多重继承用\",\"隔开<br/>\n\n抽象类中的方法不必全部重载,接口方法必须声明或者重载<br/>\n\n抽象类不必只包含抽象方法,可以定义完整的方法,接口不能包含任何完整定义方法<br/>\n\n\n**__set,__get,__isset,__unset,__call,__sleep(),__wakeup()等魔术方法**\n\n1. __sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用<br/>\n\n__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作<br/>\n\n引入php手册中的例子<br/>\n```\n  class Connection \n  {\n      protected $link;\n      private $server, $username, $password, $db;\n      \n      public function __construct($server, $username, $password, $db)\n      {\n          $this->server = $server;\n          $this->username = $username;\n          $this->password = $password;\n          $this->db = $db;\n          $this->connect();\n      }\n      \n      private function connect()\n      {\n          $this->link = mysql_connect($this->server, $this->username, $this->password);\n          mysql_select_db($this->db, $this->link);\n      }\n      \n      public function __sleep()\n      {\n          return array('server', 'username', 'password', 'db');\n      }\n      \n      public function __wakeup()\n      {\n          $this->connect();\n      }\n  }\n```\n\n2. 属性重载__set,__get,__isset,__unset<br/>\n```\npublic __set ( string $name , mixed $value ) : void // 设置私有属性值的时候调用\npublic __get ( string $name ) : mixed  // 获取私有属性值的时候调用\npublic __isset ( string $name ) : bool // 当判断一个私有成员属性是否被设置过时调用\npublic __unset ( string $name ) : void // 当销毁一个私有成员属性的时候调用\n```\n当实例化一个对象后，调用类中不存在或者没有权限访问的属性的时候，默认调用__get()方法。可以访问内部属性<br/>\n\n\n3. 方法重载__call和__callStatic<br/>\n```\ncall 和 callStatic 是类似的方法，前者是调用类不存在的方法时执行，而后者是调用类不存在的静态方式方法时执行。正常情况下如果调用一个类不存在的方法 PHP 会抛出致命错误，而使用这两个魔术方法我们可以替换一些更友好的提示或者记录错误调用日志信息、将用户重定向、抛出异常等等，亦或者是如同set 和 get 那样做方法的重命名。\n```\n\n\n\n\n\n\n\n","source":"_posts/php/oop.md","raw":"---\ntitle: PHP 面向对象\ndate: 2017-01-23 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- PHP\ncategories:\n- PHP\n---\n\n**面向对象基础概念**<br/>\nObject Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数<br/>\n\n**对象的主要三个特性**<br/>\n对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为<br/>\n对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型<br/>\n对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同<br/>\n\n比如 People(人) 是一个抽象类，我们可以具体到男人和女人，男人和女人就是具体的对象，他们有名字属性，可以写，可以学习说话等行为状态。\n\n**面向对象内容**<br/>\n```\n类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作\n\n对象 − 是类的实例\n\n成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性\n\n成员函数 − 定义在类的内部，可用于访问对象的数据\n\n继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容\n\n父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类\n\n子类 − 一个类继承其他类称为子类，也可称为派生类\n\n多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性\n\n重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法\n\n抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关\n\n封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内\n\n构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n\n析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做\"清理善后\" 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）\n```\n\n## 代码解析上述概念\n\n**PHP中类的定义**<br/>\n```\n  <?php\n    class People {\n      // 公有成员属性\n      public $name = 'zhangsan';\n      public $age = 28;\n      // 公有成员函数方法\n      public function sayName () {\n        //业务逻辑 \n      }\n    }\n  ?>\n\n```\n**PHP中对象的创建**<br/>\n```\n  class People {\n    // 公有成员属性\n    public $name = 'zhangsan';\n    public $age = 28;\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo $this->name;\n    }\n  }\n  // 通过new操作符创建对象\n  $body = new People();\n  // 成员对象的调用\n  $body->study();\n```\n**PHP中构造函数**<br/>\n构造函数是一种特殊的方法。主要用来在创建对象时初始化对象和JS中构造函数中的constructor相似<br/>\n```\n  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct( $name, $age ) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n  }\n  // 通过new操作符创建zhangsan对象\n  $zhangsan = new People('zhangsan', 28);\n  $zhangsan->sayName();\n\n  // 通过new操作符创建lisi对象\n  $lisi = new People('lisi', 26);\n  $lisi->sayName();\n```\n**PHP中析构函数**<br/>\n析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时，系统自动执行析构函数，常用场景例如连接数据库在__construct中,处理完数据断开连接在__destruct方法中<br/>\n```\n  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct ($name, $age) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n    // 析构函数用于销毁某些变量、对象，操作等\n    function __destruct () {\n      $this->name = '';\n      return true;\n    }\n  }\n  // 通过new操作符创建lisi对象\n  $lisi = new People('lisi', 26);\n\n  var_dump($lisi);\n  echo '<br/>';\n\n  if ($lisi->__destruct()) {\n    echo '销毁成功 <br/>';\n    var_dump($lisi);\n  }\n```\n\n**PHP中继承实现**<br/>\nPHP 使用关键字 extends 来继承一个类<br/>\n```\n  // 父类\n  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n  }\n  // 子类\n  class Boy extends People {\n\n    function getParentProperty () {\n      var_dump($this);\n    }\n\n  }\n  $lisi = new People('lisi', 26);\n  $boy = new Boy('wangwu',28);\n  $boy->getParentProperty();\n  // 子类调用父类方法\n  $boy->sayName();\n```\n**PHP中方法重写**\n```\n  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this->name = $name;\n      $this->age = $age;\n    }\n    public function sayName () {\n      echo(\"my name is &nbsp;\" .$this->name.\",&nbspI`m&nbsp;\" .$this->age .\"&nbsp;years old\");\n      echo '</br>';\n    }\n  }\n  // 子类\n  class Boy extends People {\n    // 重写父类方法\n    public function sayName () {\n      echo (\"my name is &nbsp;\" .$this->name);\n      return $this->name;\n    }\n  }\n  $lisi = new People('lisi', 26);\n  $boy = new Boy('wangwu',28);\n  // 重写方法\n  $boy->sayName();\n```\n**PHP中访问的控制**<br/>\nPHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的<br/>\n\npublic & var（公有）：公有的类成员可以在任何地方被访问<br/>\n\nprotected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问<br/>\n\nprivate（私有）：私有的类成员则只能被其定义所在的类访问<br/>\n\n```\n  /**\n   * 基类\n   * Define People\n   */\n  class People \n  {\n    // 声明一个公有的构造函数\n    public function __construct () {}\n\n    // 声明一个共有的方法\n    public function sayName () \n    {\n      echo 'sayname</br>';\n    }\n\n    // 声明一个受保护的方法\n    protected function swim () \n    {\n      echo 'swim</br>';\n    }\n\n    // 声明一个私有方法\n    private function study () \n    {\n      echo 'study';\n    }\n    \n    // 不加关键字默认公有方法\n    function getFun () {\n      $this->sayName();\n      $this->swim();\n      $this->study();\n    }\n  }\n  $people = new People();\n  // 正常运行输出sayname\n  $people->sayName();\n  // 产生错误\n  $people->swim();\n  // 产生错误\n  $people->study();\n  // 公有，受保护，私有都可以执行\n  $people->getFun(); \n\n  /**\n   * 子类\n   * Define Boy\n   */\n\n  class Boy extends People\n  {\n    function getFun2 ()\n    {\n      $this->sayName();\n      $this->swim();\n      // 这行会产生一个错误\n      $this->study(); \n    }\n  }\n  $body = new Boy();\n  // 这行能被正常执行\n  $body ->sayName();\n  // 公有的和受保护的都可执行，但私有的不行\n  $body->getFun2(); \n```\n\n**PHP中抽象类**<br/>\n利用关键字abstract声明抽象\n\n如果类中有一个方法被是声明为抽象，那么这个类也必须声明为抽象<br/>\n\n抽象方法只声明了调用方式（参数），不能定义其具体的功能实现（相当于没有函数体），子类通过继承实现抽象方法，且不能被实例化<br/>\n\n继承一个抽象类，子类必须定义父类中的所有抽象方法并且必须要和父类的声明访问级别保持一致或者更宽松<br/>\n\n```\n  /**\n   * 定义抽象类People\n   */\n  abstract class People \n  {\n\n    abstract protected function eat();\n    abstract protected function sleep();\n    abstract protected function study();\n    public function runing() \n    {\n      echo '跑啊跑！</br>';\n    }\n  }\n\n  /**\n   * 实现抽象类\n   */\n  class Zhangsan extends People\n  {\n    protected function eat()\n    {\n      echo 'eat </br>';\n      return 'eat';\n    }\n\n    protected function sleep()\n    {\n      echo 'sleep </br>';\n      return 'sleep';\n    }\n\n    protected function study()\n    {\n      echo 'study </br>';\n      return 'study';\n    }\n\n    public function getFunc () \n    {\n      $this->eat();\n      $this->sleep();\n      $this->study();\n    }\n  }\n  // 调用子类\n  $zhangsan = new Zhangsan;\n  $zhangsan->runing(); //跑啊跑！\n  $zhangsan->getFunc(); // eat sleep study\n```\n\n场景：在很多类里面很多的方法都是在重复。这里就可以去用抽象类，当然也可以重写一个类，每个公共类实例化实例化一次，调用相同的方法。但是abstract可以省去实例化的步骤，而且可以重载这个方法,这样不是更方便简单嘛<br/>\n**PHP中接口的使用**<br/>\ninterface主要对类名，类所拥有的方法，以及所传参数起约束和规范作用，和abstract类似。在多人协同开发项目时起重要作用<br/>\n```\n// 定义接口类\ninterface People  \n{\n  public eat () {};\n}\n// 实现接口类\nclass Apple implements People{\n public function eat ()\n {\n   echo '我吃的苹果';\n }\n}\n\n$apple = new Apple();\n$apple->eat(); \n```\n\n参数约束，如果参数名字不一样会报错<br/>\n```\n// 定义接口类\ninterface People  \n{\n  public function eat($color);\n}\n\n// 实现接口类Apple\nclass Apple implements People\n{\n public function eat($color)\n {\n    echo(\"我吃的$color 🍎<br/>\");\n }\n}\n\n// 实现接口类Grape\nclass Grape implements People\n{\n  public function eat($color)\n  {\n    echo(\"我吃的$color 🍇\");\n  }\n}\n\n$apple = new Apple();\n$apple->eat('红'); \n\n$grape = new Grape();\n$grape->eat('紫'); \n```\n\n接口继承<br/>\n```\n  // 定义People接口类\n  interface People  \n  {  \n    public function eat();  \n  }\n\n  // 继承People接口类\n  interface Boy extends People  \n  {  \n    public function drink();  \n  }\n\n  // 接口方法实现\n  class Behavior implements Boy  \n  {  \n    public function eat()  \n    {  \n        echo \"吃东西<br>\";  \n    }  \n    \n    public function drink()  \n    {  \n      echo \"喝饮料<br>\";  \n    }  \n  }         \n  Behavior::eat();      \n  Behavior::drink();\n\n```\n**总结抽象类和接口**<br/>\n抽象类就是一个类的服务提供商，拥有众多服务<br/>\n\n接口类就是一个类的规范，子类必须完成它指定方法<br/>\n\n它们的区别：<br/>\n\n抽象类继承用extends,接口继承用implements<br/>\n\n抽象类能多重继承,接口多重继承用\",\"隔开<br/>\n\n抽象类中的方法不必全部重载,接口方法必须声明或者重载<br/>\n\n抽象类不必只包含抽象方法,可以定义完整的方法,接口不能包含任何完整定义方法<br/>\n\n\n**__set,__get,__isset,__unset,__call,__sleep(),__wakeup()等魔术方法**\n\n1. __sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用<br/>\n\n__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作<br/>\n\n引入php手册中的例子<br/>\n```\n  class Connection \n  {\n      protected $link;\n      private $server, $username, $password, $db;\n      \n      public function __construct($server, $username, $password, $db)\n      {\n          $this->server = $server;\n          $this->username = $username;\n          $this->password = $password;\n          $this->db = $db;\n          $this->connect();\n      }\n      \n      private function connect()\n      {\n          $this->link = mysql_connect($this->server, $this->username, $this->password);\n          mysql_select_db($this->db, $this->link);\n      }\n      \n      public function __sleep()\n      {\n          return array('server', 'username', 'password', 'db');\n      }\n      \n      public function __wakeup()\n      {\n          $this->connect();\n      }\n  }\n```\n\n2. 属性重载__set,__get,__isset,__unset<br/>\n```\npublic __set ( string $name , mixed $value ) : void // 设置私有属性值的时候调用\npublic __get ( string $name ) : mixed  // 获取私有属性值的时候调用\npublic __isset ( string $name ) : bool // 当判断一个私有成员属性是否被设置过时调用\npublic __unset ( string $name ) : void // 当销毁一个私有成员属性的时候调用\n```\n当实例化一个对象后，调用类中不存在或者没有权限访问的属性的时候，默认调用__get()方法。可以访问内部属性<br/>\n\n\n3. 方法重载__call和__callStatic<br/>\n```\ncall 和 callStatic 是类似的方法，前者是调用类不存在的方法时执行，而后者是调用类不存在的静态方式方法时执行。正常情况下如果调用一个类不存在的方法 PHP 会抛出致命错误，而使用这两个魔术方法我们可以替换一些更友好的提示或者记录错误调用日志信息、将用户重定向、抛出异常等等，亦或者是如同set 和 get 那样做方法的重命名。\n```\n\n\n\n\n\n\n\n","slug":"php/oop","published":1,"updated":"2019-08-26T16:46:27.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n930049kuu6anzouidw","content":"<p><strong>面向对象基础概念</strong><br><br>Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数<br></p>\n<p><strong>对象的主要三个特性</strong><br><br>对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为<br><br>对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型<br><br>对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同<br></p>\n<p>比如 People(人) 是一个抽象类，我们可以具体到男人和女人，男人和女人就是具体的对象，他们有名字属性，可以写，可以学习说话等行为状态。</p>\n<p><strong>面向对象内容</strong><br></p>\n<pre><code>类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作\n\n对象 − 是类的实例\n\n成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性\n\n成员函数 − 定义在类的内部，可用于访问对象的数据\n\n继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容\n\n父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类\n\n子类 − 一个类继承其他类称为子类，也可称为派生类\n\n多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性\n\n重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法\n\n抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关\n\n封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内\n\n构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n\n析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做&quot;清理善后&quot; 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）</code></pre><h2 id=\"代码解析上述概念\"><a href=\"#代码解析上述概念\" class=\"headerlink\" title=\"代码解析上述概念\"></a>代码解析上述概念</h2><p><strong>PHP中类的定义</strong><br></p>\n<pre><code>  &lt;?php\n    class People {\n      // 公有成员属性\n      public $name = &#39;zhangsan&#39;;\n      public $age = 28;\n      // 公有成员函数方法\n      public function sayName () {\n        //业务逻辑 \n      }\n    }\n  ?&gt;\n</code></pre><p><strong>PHP中对象的创建</strong><br></p>\n<pre><code>  class People {\n    // 公有成员属性\n    public $name = &#39;zhangsan&#39;;\n    public $age = 28;\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo $this-&gt;name;\n    }\n  }\n  // 通过new操作符创建对象\n  $body = new People();\n  // 成员对象的调用\n  $body-&gt;study();</code></pre><p><strong>PHP中构造函数</strong><br><br>构造函数是一种特殊的方法。主要用来在创建对象时初始化对象和JS中构造函数中的constructor相似<br></p>\n<pre><code>  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct( $name, $age ) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n  }\n  // 通过new操作符创建zhangsan对象\n  $zhangsan = new People(&#39;zhangsan&#39;, 28);\n  $zhangsan-&gt;sayName();\n\n  // 通过new操作符创建lisi对象\n  $lisi = new People(&#39;lisi&#39;, 26);\n  $lisi-&gt;sayName();</code></pre><p><strong>PHP中析构函数</strong><br><br>析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时，系统自动执行析构函数，常用场景例如连接数据库在<strong>construct中,处理完数据断开连接在</strong>destruct方法中<br></p>\n<pre><code>  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct ($name, $age) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n    // 析构函数用于销毁某些变量、对象，操作等\n    function __destruct () {\n      $this-&gt;name = &#39;&#39;;\n      return true;\n    }\n  }\n  // 通过new操作符创建lisi对象\n  $lisi = new People(&#39;lisi&#39;, 26);\n\n  var_dump($lisi);\n  echo &#39;&lt;br/&gt;&#39;;\n\n  if ($lisi-&gt;__destruct()) {\n    echo &#39;销毁成功 &lt;br/&gt;&#39;;\n    var_dump($lisi);\n  }</code></pre><p><strong>PHP中继承实现</strong><br><br>PHP 使用关键字 extends 来继承一个类<br></p>\n<pre><code>  // 父类\n  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n  }\n  // 子类\n  class Boy extends People {\n\n    function getParentProperty () {\n      var_dump($this);\n    }\n\n  }\n  $lisi = new People(&#39;lisi&#39;, 26);\n  $boy = new Boy(&#39;wangwu&#39;,28);\n  $boy-&gt;getParentProperty();\n  // 子类调用父类方法\n  $boy-&gt;sayName();</code></pre><p><strong>PHP中方法重写</strong></p>\n<pre><code>  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n  }\n  // 子类\n  class Boy extends People {\n    // 重写父类方法\n    public function sayName () {\n      echo (&quot;my name is &amp;nbsp;&quot; .$this-&gt;name);\n      return $this-&gt;name;\n    }\n  }\n  $lisi = new People(&#39;lisi&#39;, 26);\n  $boy = new Boy(&#39;wangwu&#39;,28);\n  // 重写方法\n  $boy-&gt;sayName();</code></pre><p><strong>PHP中访问的控制</strong><br><br>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的<br></p>\n<p>public &amp; var（公有）：公有的类成员可以在任何地方被访问<br></p>\n<p>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问<br></p>\n<p>private（私有）：私有的类成员则只能被其定义所在的类访问<br></p>\n<pre><code>  /**\n   * 基类\n   * Define People\n   */\n  class People \n  {\n    // 声明一个公有的构造函数\n    public function __construct () {}\n\n    // 声明一个共有的方法\n    public function sayName () \n    {\n      echo &#39;sayname&lt;/br&gt;&#39;;\n    }\n\n    // 声明一个受保护的方法\n    protected function swim () \n    {\n      echo &#39;swim&lt;/br&gt;&#39;;\n    }\n\n    // 声明一个私有方法\n    private function study () \n    {\n      echo &#39;study&#39;;\n    }\n\n    // 不加关键字默认公有方法\n    function getFun () {\n      $this-&gt;sayName();\n      $this-&gt;swim();\n      $this-&gt;study();\n    }\n  }\n  $people = new People();\n  // 正常运行输出sayname\n  $people-&gt;sayName();\n  // 产生错误\n  $people-&gt;swim();\n  // 产生错误\n  $people-&gt;study();\n  // 公有，受保护，私有都可以执行\n  $people-&gt;getFun(); \n\n  /**\n   * 子类\n   * Define Boy\n   */\n\n  class Boy extends People\n  {\n    function getFun2 ()\n    {\n      $this-&gt;sayName();\n      $this-&gt;swim();\n      // 这行会产生一个错误\n      $this-&gt;study(); \n    }\n  }\n  $body = new Boy();\n  // 这行能被正常执行\n  $body -&gt;sayName();\n  // 公有的和受保护的都可执行，但私有的不行\n  $body-&gt;getFun2(); </code></pre><p><strong>PHP中抽象类</strong><br><br>利用关键字abstract声明抽象</p>\n<p>如果类中有一个方法被是声明为抽象，那么这个类也必须声明为抽象<br></p>\n<p>抽象方法只声明了调用方式（参数），不能定义其具体的功能实现（相当于没有函数体），子类通过继承实现抽象方法，且不能被实例化<br></p>\n<p>继承一个抽象类，子类必须定义父类中的所有抽象方法并且必须要和父类的声明访问级别保持一致或者更宽松<br></p>\n<pre><code>  /**\n   * 定义抽象类People\n   */\n  abstract class People \n  {\n\n    abstract protected function eat();\n    abstract protected function sleep();\n    abstract protected function study();\n    public function runing() \n    {\n      echo &#39;跑啊跑！&lt;/br&gt;&#39;;\n    }\n  }\n\n  /**\n   * 实现抽象类\n   */\n  class Zhangsan extends People\n  {\n    protected function eat()\n    {\n      echo &#39;eat &lt;/br&gt;&#39;;\n      return &#39;eat&#39;;\n    }\n\n    protected function sleep()\n    {\n      echo &#39;sleep &lt;/br&gt;&#39;;\n      return &#39;sleep&#39;;\n    }\n\n    protected function study()\n    {\n      echo &#39;study &lt;/br&gt;&#39;;\n      return &#39;study&#39;;\n    }\n\n    public function getFunc () \n    {\n      $this-&gt;eat();\n      $this-&gt;sleep();\n      $this-&gt;study();\n    }\n  }\n  // 调用子类\n  $zhangsan = new Zhangsan;\n  $zhangsan-&gt;runing(); //跑啊跑！\n  $zhangsan-&gt;getFunc(); // eat sleep study</code></pre><p>场景：在很多类里面很多的方法都是在重复。这里就可以去用抽象类，当然也可以重写一个类，每个公共类实例化实例化一次，调用相同的方法。但是abstract可以省去实例化的步骤，而且可以重载这个方法,这样不是更方便简单嘛<br><br><strong>PHP中接口的使用</strong><br><br>interface主要对类名，类所拥有的方法，以及所传参数起约束和规范作用，和abstract类似。在多人协同开发项目时起重要作用<br></p>\n<pre><code>// 定义接口类\ninterface People  \n{\n  public eat () {};\n}\n// 实现接口类\nclass Apple implements People{\n public function eat ()\n {\n   echo &#39;我吃的苹果&#39;;\n }\n}\n\n$apple = new Apple();\n$apple-&gt;eat(); </code></pre><p>参数约束，如果参数名字不一样会报错<br></p>\n<pre><code>// 定义接口类\ninterface People  \n{\n  public function eat($color);\n}\n\n// 实现接口类Apple\nclass Apple implements People\n{\n public function eat($color)\n {\n    echo(&quot;我吃的$color 🍎&lt;br/&gt;&quot;);\n }\n}\n\n// 实现接口类Grape\nclass Grape implements People\n{\n  public function eat($color)\n  {\n    echo(&quot;我吃的$color 🍇&quot;);\n  }\n}\n\n$apple = new Apple();\n$apple-&gt;eat(&#39;红&#39;); \n\n$grape = new Grape();\n$grape-&gt;eat(&#39;紫&#39;); </code></pre><p>接口继承<br></p>\n<pre><code>  // 定义People接口类\n  interface People  \n  {  \n    public function eat();  \n  }\n\n  // 继承People接口类\n  interface Boy extends People  \n  {  \n    public function drink();  \n  }\n\n  // 接口方法实现\n  class Behavior implements Boy  \n  {  \n    public function eat()  \n    {  \n        echo &quot;吃东西&lt;br&gt;&quot;;  \n    }  \n\n    public function drink()  \n    {  \n      echo &quot;喝饮料&lt;br&gt;&quot;;  \n    }  \n  }         \n  Behavior::eat();      \n  Behavior::drink();\n</code></pre><p><strong>总结抽象类和接口</strong><br><br>抽象类就是一个类的服务提供商，拥有众多服务<br></p>\n<p>接口类就是一个类的规范，子类必须完成它指定方法<br></p>\n<p>它们的区别：<br></p>\n<p>抽象类继承用extends,接口继承用implements<br></p>\n<p>抽象类能多重继承,接口多重继承用”,”隔开<br></p>\n<p>抽象类中的方法不必全部重载,接口方法必须声明或者重载<br></p>\n<p>抽象类不必只包含抽象方法,可以定义完整的方法,接口不能包含任何完整定义方法<br></p>\n<p><strong><strong>set,</strong>get,<strong>isset,</strong>unset,<strong>call,</strong>sleep(),__wakeup()等魔术方法</strong></p>\n<ol>\n<li>__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用<br></li>\n</ol>\n<p>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作<br></p>\n<p>引入php手册中的例子<br></p>\n<pre><code>  class Connection \n  {\n      protected $link;\n      private $server, $username, $password, $db;\n\n      public function __construct($server, $username, $password, $db)\n      {\n          $this-&gt;server = $server;\n          $this-&gt;username = $username;\n          $this-&gt;password = $password;\n          $this-&gt;db = $db;\n          $this-&gt;connect();\n      }\n\n      private function connect()\n      {\n          $this-&gt;link = mysql_connect($this-&gt;server, $this-&gt;username, $this-&gt;password);\n          mysql_select_db($this-&gt;db, $this-&gt;link);\n      }\n\n      public function __sleep()\n      {\n          return array(&#39;server&#39;, &#39;username&#39;, &#39;password&#39;, &#39;db&#39;);\n      }\n\n      public function __wakeup()\n      {\n          $this-&gt;connect();\n      }\n  }</code></pre><ol start=\"2\">\n<li>属性重载<strong>set,</strong>get,<strong>isset,</strong>unset<br><pre><code>public __set ( string $name , mixed $value ) : void // 设置私有属性值的时候调用\npublic __get ( string $name ) : mixed  // 获取私有属性值的时候调用\npublic __isset ( string $name ) : bool // 当判断一个私有成员属性是否被设置过时调用\npublic __unset ( string $name ) : void // 当销毁一个私有成员属性的时候调用</code></pre>当实例化一个对象后，调用类中不存在或者没有权限访问的属性的时候，默认调用__get()方法。可以访问内部属性<br></li>\n</ol>\n<ol start=\"3\">\n<li>方法重载<strong>call和</strong>callStatic<br><pre><code>call 和 callStatic 是类似的方法，前者是调用类不存在的方法时执行，而后者是调用类不存在的静态方式方法时执行。正常情况下如果调用一个类不存在的方法 PHP 会抛出致命错误，而使用这两个魔术方法我们可以替换一些更友好的提示或者记录错误调用日志信息、将用户重定向、抛出异常等等，亦或者是如同set 和 get 那样做方法的重命名。</code></pre></li>\n</ol>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p><strong>面向对象基础概念</strong><br><br>Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数<br></p>\n<p><strong>对象的主要三个特性</strong><br><br>对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为<br><br>对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型<br><br>对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同<br></p>\n<p>比如 People(人) 是一个抽象类，我们可以具体到男人和女人，男人和女人就是具体的对象，他们有名字属性，可以写，可以学习说话等行为状态。</p>\n<p><strong>面向对象内容</strong><br></p>\n<pre><code>类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作\n\n对象 − 是类的实例\n\n成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性\n\n成员函数 − 定义在类的内部，可用于访问对象的数据\n\n继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容\n\n父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类\n\n子类 − 一个类继承其他类称为子类，也可称为派生类\n\n多态 − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性\n\n重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法\n\n抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关\n\n封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内\n\n构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n\n析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做&quot;清理善后&quot; 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）</code></pre><h2 id=\"代码解析上述概念\"><a href=\"#代码解析上述概念\" class=\"headerlink\" title=\"代码解析上述概念\"></a>代码解析上述概念</h2><p><strong>PHP中类的定义</strong><br></p>\n<pre><code>  &lt;?php\n    class People {\n      // 公有成员属性\n      public $name = &#39;zhangsan&#39;;\n      public $age = 28;\n      // 公有成员函数方法\n      public function sayName () {\n        //业务逻辑 \n      }\n    }\n  ?&gt;\n</code></pre><p><strong>PHP中对象的创建</strong><br></p>\n<pre><code>  class People {\n    // 公有成员属性\n    public $name = &#39;zhangsan&#39;;\n    public $age = 28;\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo $this-&gt;name;\n    }\n  }\n  // 通过new操作符创建对象\n  $body = new People();\n  // 成员对象的调用\n  $body-&gt;study();</code></pre><p><strong>PHP中构造函数</strong><br><br>构造函数是一种特殊的方法。主要用来在创建对象时初始化对象和JS中构造函数中的constructor相似<br></p>\n<pre><code>  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct( $name, $age ) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n  }\n  // 通过new操作符创建zhangsan对象\n  $zhangsan = new People(&#39;zhangsan&#39;, 28);\n  $zhangsan-&gt;sayName();\n\n  // 通过new操作符创建lisi对象\n  $lisi = new People(&#39;lisi&#39;, 26);\n  $lisi-&gt;sayName();</code></pre><p><strong>PHP中析构函数</strong><br><br>析构函数 (destructor) 与构造函数相反，当对象结束其生命周期时，系统自动执行析构函数，常用场景例如连接数据库在<strong>construct中,处理完数据断开连接在</strong>destruct方法中<br></p>\n<pre><code>  class People {\n    // 通过构造方法为成员变量赋初始值\n    function __construct ($name, $age) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    // 公有成员函数方法（$this代表自身的对象);\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n    // 析构函数用于销毁某些变量、对象，操作等\n    function __destruct () {\n      $this-&gt;name = &#39;&#39;;\n      return true;\n    }\n  }\n  // 通过new操作符创建lisi对象\n  $lisi = new People(&#39;lisi&#39;, 26);\n\n  var_dump($lisi);\n  echo &#39;&lt;br/&gt;&#39;;\n\n  if ($lisi-&gt;__destruct()) {\n    echo &#39;销毁成功 &lt;br/&gt;&#39;;\n    var_dump($lisi);\n  }</code></pre><p><strong>PHP中继承实现</strong><br><br>PHP 使用关键字 extends 来继承一个类<br></p>\n<pre><code>  // 父类\n  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n  }\n  // 子类\n  class Boy extends People {\n\n    function getParentProperty () {\n      var_dump($this);\n    }\n\n  }\n  $lisi = new People(&#39;lisi&#39;, 26);\n  $boy = new Boy(&#39;wangwu&#39;,28);\n  $boy-&gt;getParentProperty();\n  // 子类调用父类方法\n  $boy-&gt;sayName();</code></pre><p><strong>PHP中方法重写</strong></p>\n<pre><code>  class People {\n    var $name;\n    var $age;\n    function __construct ($name, $age) {\n      $this-&gt;name = $name;\n      $this-&gt;age = $age;\n    }\n    public function sayName () {\n      echo(&quot;my name is &amp;nbsp;&quot; .$this-&gt;name.&quot;,&amp;nbspI`m&amp;nbsp;&quot; .$this-&gt;age .&quot;&amp;nbsp;years old&quot;);\n      echo &#39;&lt;/br&gt;&#39;;\n    }\n  }\n  // 子类\n  class Boy extends People {\n    // 重写父类方法\n    public function sayName () {\n      echo (&quot;my name is &amp;nbsp;&quot; .$this-&gt;name);\n      return $this-&gt;name;\n    }\n  }\n  $lisi = new People(&#39;lisi&#39;, 26);\n  $boy = new Boy(&#39;wangwu&#39;,28);\n  // 重写方法\n  $boy-&gt;sayName();</code></pre><p><strong>PHP中访问的控制</strong><br><br>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的<br></p>\n<p>public &amp; var（公有）：公有的类成员可以在任何地方被访问<br></p>\n<p>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问<br></p>\n<p>private（私有）：私有的类成员则只能被其定义所在的类访问<br></p>\n<pre><code>  /**\n   * 基类\n   * Define People\n   */\n  class People \n  {\n    // 声明一个公有的构造函数\n    public function __construct () {}\n\n    // 声明一个共有的方法\n    public function sayName () \n    {\n      echo &#39;sayname&lt;/br&gt;&#39;;\n    }\n\n    // 声明一个受保护的方法\n    protected function swim () \n    {\n      echo &#39;swim&lt;/br&gt;&#39;;\n    }\n\n    // 声明一个私有方法\n    private function study () \n    {\n      echo &#39;study&#39;;\n    }\n\n    // 不加关键字默认公有方法\n    function getFun () {\n      $this-&gt;sayName();\n      $this-&gt;swim();\n      $this-&gt;study();\n    }\n  }\n  $people = new People();\n  // 正常运行输出sayname\n  $people-&gt;sayName();\n  // 产生错误\n  $people-&gt;swim();\n  // 产生错误\n  $people-&gt;study();\n  // 公有，受保护，私有都可以执行\n  $people-&gt;getFun(); \n\n  /**\n   * 子类\n   * Define Boy\n   */\n\n  class Boy extends People\n  {\n    function getFun2 ()\n    {\n      $this-&gt;sayName();\n      $this-&gt;swim();\n      // 这行会产生一个错误\n      $this-&gt;study(); \n    }\n  }\n  $body = new Boy();\n  // 这行能被正常执行\n  $body -&gt;sayName();\n  // 公有的和受保护的都可执行，但私有的不行\n  $body-&gt;getFun2(); </code></pre><p><strong>PHP中抽象类</strong><br><br>利用关键字abstract声明抽象</p>\n<p>如果类中有一个方法被是声明为抽象，那么这个类也必须声明为抽象<br></p>\n<p>抽象方法只声明了调用方式（参数），不能定义其具体的功能实现（相当于没有函数体），子类通过继承实现抽象方法，且不能被实例化<br></p>\n<p>继承一个抽象类，子类必须定义父类中的所有抽象方法并且必须要和父类的声明访问级别保持一致或者更宽松<br></p>\n<pre><code>  /**\n   * 定义抽象类People\n   */\n  abstract class People \n  {\n\n    abstract protected function eat();\n    abstract protected function sleep();\n    abstract protected function study();\n    public function runing() \n    {\n      echo &#39;跑啊跑！&lt;/br&gt;&#39;;\n    }\n  }\n\n  /**\n   * 实现抽象类\n   */\n  class Zhangsan extends People\n  {\n    protected function eat()\n    {\n      echo &#39;eat &lt;/br&gt;&#39;;\n      return &#39;eat&#39;;\n    }\n\n    protected function sleep()\n    {\n      echo &#39;sleep &lt;/br&gt;&#39;;\n      return &#39;sleep&#39;;\n    }\n\n    protected function study()\n    {\n      echo &#39;study &lt;/br&gt;&#39;;\n      return &#39;study&#39;;\n    }\n\n    public function getFunc () \n    {\n      $this-&gt;eat();\n      $this-&gt;sleep();\n      $this-&gt;study();\n    }\n  }\n  // 调用子类\n  $zhangsan = new Zhangsan;\n  $zhangsan-&gt;runing(); //跑啊跑！\n  $zhangsan-&gt;getFunc(); // eat sleep study</code></pre><p>场景：在很多类里面很多的方法都是在重复。这里就可以去用抽象类，当然也可以重写一个类，每个公共类实例化实例化一次，调用相同的方法。但是abstract可以省去实例化的步骤，而且可以重载这个方法,这样不是更方便简单嘛<br><br><strong>PHP中接口的使用</strong><br><br>interface主要对类名，类所拥有的方法，以及所传参数起约束和规范作用，和abstract类似。在多人协同开发项目时起重要作用<br></p>\n<pre><code>// 定义接口类\ninterface People  \n{\n  public eat () {};\n}\n// 实现接口类\nclass Apple implements People{\n public function eat ()\n {\n   echo &#39;我吃的苹果&#39;;\n }\n}\n\n$apple = new Apple();\n$apple-&gt;eat(); </code></pre><p>参数约束，如果参数名字不一样会报错<br></p>\n<pre><code>// 定义接口类\ninterface People  \n{\n  public function eat($color);\n}\n\n// 实现接口类Apple\nclass Apple implements People\n{\n public function eat($color)\n {\n    echo(&quot;我吃的$color 🍎&lt;br/&gt;&quot;);\n }\n}\n\n// 实现接口类Grape\nclass Grape implements People\n{\n  public function eat($color)\n  {\n    echo(&quot;我吃的$color 🍇&quot;);\n  }\n}\n\n$apple = new Apple();\n$apple-&gt;eat(&#39;红&#39;); \n\n$grape = new Grape();\n$grape-&gt;eat(&#39;紫&#39;); </code></pre><p>接口继承<br></p>\n<pre><code>  // 定义People接口类\n  interface People  \n  {  \n    public function eat();  \n  }\n\n  // 继承People接口类\n  interface Boy extends People  \n  {  \n    public function drink();  \n  }\n\n  // 接口方法实现\n  class Behavior implements Boy  \n  {  \n    public function eat()  \n    {  \n        echo &quot;吃东西&lt;br&gt;&quot;;  \n    }  \n\n    public function drink()  \n    {  \n      echo &quot;喝饮料&lt;br&gt;&quot;;  \n    }  \n  }         \n  Behavior::eat();      \n  Behavior::drink();\n</code></pre><p><strong>总结抽象类和接口</strong><br><br>抽象类就是一个类的服务提供商，拥有众多服务<br></p>\n<p>接口类就是一个类的规范，子类必须完成它指定方法<br></p>\n<p>它们的区别：<br></p>\n<p>抽象类继承用extends,接口继承用implements<br></p>\n<p>抽象类能多重继承,接口多重继承用”,”隔开<br></p>\n<p>抽象类中的方法不必全部重载,接口方法必须声明或者重载<br></p>\n<p>抽象类不必只包含抽象方法,可以定义完整的方法,接口不能包含任何完整定义方法<br></p>\n<p><strong><strong>set,</strong>get,<strong>isset,</strong>unset,<strong>call,</strong>sleep(),__wakeup()等魔术方法</strong></p>\n<ol>\n<li>__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用<br></li>\n</ol>\n<p>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作<br></p>\n<p>引入php手册中的例子<br></p>\n<pre><code>  class Connection \n  {\n      protected $link;\n      private $server, $username, $password, $db;\n\n      public function __construct($server, $username, $password, $db)\n      {\n          $this-&gt;server = $server;\n          $this-&gt;username = $username;\n          $this-&gt;password = $password;\n          $this-&gt;db = $db;\n          $this-&gt;connect();\n      }\n\n      private function connect()\n      {\n          $this-&gt;link = mysql_connect($this-&gt;server, $this-&gt;username, $this-&gt;password);\n          mysql_select_db($this-&gt;db, $this-&gt;link);\n      }\n\n      public function __sleep()\n      {\n          return array(&#39;server&#39;, &#39;username&#39;, &#39;password&#39;, &#39;db&#39;);\n      }\n\n      public function __wakeup()\n      {\n          $this-&gt;connect();\n      }\n  }</code></pre><ol start=\"2\">\n<li>属性重载<strong>set,</strong>get,<strong>isset,</strong>unset<br><pre><code>public __set ( string $name , mixed $value ) : void // 设置私有属性值的时候调用\npublic __get ( string $name ) : mixed  // 获取私有属性值的时候调用\npublic __isset ( string $name ) : bool // 当判断一个私有成员属性是否被设置过时调用\npublic __unset ( string $name ) : void // 当销毁一个私有成员属性的时候调用</code></pre>当实例化一个对象后，调用类中不存在或者没有权限访问的属性的时候，默认调用__get()方法。可以访问内部属性<br></li>\n</ol>\n<ol start=\"3\">\n<li>方法重载<strong>call和</strong>callStatic<br><pre><code>call 和 callStatic 是类似的方法，前者是调用类不存在的方法时执行，而后者是调用类不存在的静态方式方法时执行。正常情况下如果调用一个类不存在的方法 PHP 会抛出致命错误，而使用这两个魔术方法我们可以替换一些更友好的提示或者记录错误调用日志信息、将用户重定向、抛出异常等等，亦或者是如同set 和 get 那样做方法的重命名。</code></pre></li>\n</ol>\n"},{"title":"基本数据类型","date":"2019-05-23T14:28:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n每种语言都会有属于自己的数据类型，ts的基本数据类型基本上是继承了js，但也在基础之上增加了几个不一样的类型\n\n### 布尔型 true／false <br/>\n```\n//在js中声明boolean型的方法和ts中的不同之处\nlet flag = true;\nlet flag: boolean = true;\n```\n\n### float,数值型（在js和ts中数字型都是float）<br/>\n```\n//在js中声明number型的方法和ts中的不同之处\nlet age = 26;\nlet age: number = 26;\n```\n\n### 字符型 String <br/> \n```\n//在js中声明number型的方法和ts中的不同之处\nlet name = 'boren';\nlet name: string = 'boren';\n```\n\n### 数组 Array <br/> \n```\n//在js中声明数组的方法和ts中的不同之处\n//1.js中声明数组的两种方式\nlet city = [];\nlet city = new Array();\n//2.ts中声明数组的两种方式\nlet city: string[] = [];\nlet city:Array<string> = []\n//在ts中声明数组必须提前指定其数据类型，如果其数组中的元素其数据类型不相同，声明的方式会在后面介绍\n```\n\n### 元组 Tuple <br/> \n```\n//可以定义数组中元素不相同的数据类型\nlet people = ['boren',26];//js\nlet people:[string,number];\npeople = ['boren',26];//ts\n```\n\n### 枚举 Enum <br/> \n```\n//js中没有此方法，都是以object或者json的形式去实现枚举的特性如：\nlet school = {\n\n     teacherOne : 'Mars',\n     teacherTwo:'yupeng',\n     teacherThree:'luxuesong'\n\n} \nconsole.log(school.teacherOne)//Mars\n\n在ECMA2015，简称es5中Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象\nObject.getOwnPropertyDescriptor（school,‘teacherOne’）\n\n// {\n// value: Mars,\n// writable: true,\n// enumerable: true,\n// configurable: true\n// }\n\n其中这么方法打印出来的对象中key enumerable属性，为可枚举性，在js es5中有三个操作会忽略枚举为 false，for...in、 Object...keys()、 JSON.stringify()；在es6中新增一个方法Object.assign()会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。关于更多js中对枚举属性的支持，在这里就不一一介绍，例如toString()和length等等其枚举属性为false\n//ts中枚举类型的用法\nenum classMember = {chenchao,rongbin,chenhua,liurui,luxuesong};\nlet teacher:classMember = classMember.luxuesong\n\n我们也可以给枚举中的成员进行编号等等，以便于更方便的去找到相应的对象元素\n```\n\n### 通用数据类型 Any<br/>\n```\n这种数据类型个人认为是万能的，它可以在你不知道这个变量为什么数据类型的情况下，并且项目比较急的时候标注为Any，它可以通过编译时的类型检查，有人会说那我所有的类型都写Any，如果你非要这么干，也无妨，那就失去了ts这么语言本身的意义所在，可以用这种方法去解决一个上述声明数组类型时很麻烦的问题\nlet lists: any[] = ['boren',26,'body']; \n\nlet age: any = 26;\nlet name: any = 'boren';\n```\n\n### 空值Void <br/>\n```\n在js中我们其实对void不是那么的陌生，它被认为是一个操作符，这个操作符可以计算表达式但不会返回任何值，在js中常常出现的位置就是在a标签的链接中，我们不想让页面刷新，更不想链接到某些位置只是简简单单的a标签，有时候会调用一个简单的函数，仅此而已，那么我们就会\n<a href=\"javascript:void(0)\" onclick=\"people()\">点我</a>\n\n//在ts中，void类型像是与any类型相反，它表示没有任何类型。\nfunction student(): void{\n   console.log('my name is renbo')\n}\n\n在上述函数中没有返回任何值，所以类型为void，其实void的变量没什么用处和null,undefined一样职能作为数据的类型的判断。\n```\n\n### 永不存在值的类型Never<br/>\n```\n官网解释\nnever is the return type for a function expression or an \narrow function expression that always throws an exception or one that \nnever returns;\nVariables also acquire the type never when narrowed by any type guards that can never be true. \nnever类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是never类型，当它们被永不为真的类型保护所约束时。\n个人觉得没什么太大用这里就不做深究。\n```\n\n### 类型断言 <br/>\n```\n在ts中类型断言这种方式还是比较有用处的，其相当于js中的类型转换。但是只在编译的时候起作用。并不会改变其数据的本身结构。\nlet city: any = \"beijing\";\n\nlet strLength: number = (city as string).length;\n\n另外一种写法：\nlet city: any = \"beijing\";\n\nlet strLength: number = (<string>city).length;\n```\n<hr/>\n总结：通过以上的介绍相信大家对ts的数据类型已经有了大概的了解，其实相对于js,ts的数据类型并没有做什么变更，只是在声明其数据类型的时候必须明确的指定其相应的数据类型，否则代码编译会报错。虽然 ts的文件是xxx.ts 但由于编译过后和js 没有什么大的不同点，能够很好的运行在浏览器端，其中class、public等等函数及模块编译过后的js能后让你更深入的了解js\n\n\n\n\n\n                \n","source":"_posts/typescript/baseDataType.md","raw":"---\ntitle: 基本数据类型\ndate: 2019-05-23 22:28:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n每种语言都会有属于自己的数据类型，ts的基本数据类型基本上是继承了js，但也在基础之上增加了几个不一样的类型\n\n### 布尔型 true／false <br/>\n```\n//在js中声明boolean型的方法和ts中的不同之处\nlet flag = true;\nlet flag: boolean = true;\n```\n\n### float,数值型（在js和ts中数字型都是float）<br/>\n```\n//在js中声明number型的方法和ts中的不同之处\nlet age = 26;\nlet age: number = 26;\n```\n\n### 字符型 String <br/> \n```\n//在js中声明number型的方法和ts中的不同之处\nlet name = 'boren';\nlet name: string = 'boren';\n```\n\n### 数组 Array <br/> \n```\n//在js中声明数组的方法和ts中的不同之处\n//1.js中声明数组的两种方式\nlet city = [];\nlet city = new Array();\n//2.ts中声明数组的两种方式\nlet city: string[] = [];\nlet city:Array<string> = []\n//在ts中声明数组必须提前指定其数据类型，如果其数组中的元素其数据类型不相同，声明的方式会在后面介绍\n```\n\n### 元组 Tuple <br/> \n```\n//可以定义数组中元素不相同的数据类型\nlet people = ['boren',26];//js\nlet people:[string,number];\npeople = ['boren',26];//ts\n```\n\n### 枚举 Enum <br/> \n```\n//js中没有此方法，都是以object或者json的形式去实现枚举的特性如：\nlet school = {\n\n     teacherOne : 'Mars',\n     teacherTwo:'yupeng',\n     teacherThree:'luxuesong'\n\n} \nconsole.log(school.teacherOne)//Mars\n\n在ECMA2015，简称es5中Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象\nObject.getOwnPropertyDescriptor（school,‘teacherOne’）\n\n// {\n// value: Mars,\n// writable: true,\n// enumerable: true,\n// configurable: true\n// }\n\n其中这么方法打印出来的对象中key enumerable属性，为可枚举性，在js es5中有三个操作会忽略枚举为 false，for...in、 Object...keys()、 JSON.stringify()；在es6中新增一个方法Object.assign()会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。关于更多js中对枚举属性的支持，在这里就不一一介绍，例如toString()和length等等其枚举属性为false\n//ts中枚举类型的用法\nenum classMember = {chenchao,rongbin,chenhua,liurui,luxuesong};\nlet teacher:classMember = classMember.luxuesong\n\n我们也可以给枚举中的成员进行编号等等，以便于更方便的去找到相应的对象元素\n```\n\n### 通用数据类型 Any<br/>\n```\n这种数据类型个人认为是万能的，它可以在你不知道这个变量为什么数据类型的情况下，并且项目比较急的时候标注为Any，它可以通过编译时的类型检查，有人会说那我所有的类型都写Any，如果你非要这么干，也无妨，那就失去了ts这么语言本身的意义所在，可以用这种方法去解决一个上述声明数组类型时很麻烦的问题\nlet lists: any[] = ['boren',26,'body']; \n\nlet age: any = 26;\nlet name: any = 'boren';\n```\n\n### 空值Void <br/>\n```\n在js中我们其实对void不是那么的陌生，它被认为是一个操作符，这个操作符可以计算表达式但不会返回任何值，在js中常常出现的位置就是在a标签的链接中，我们不想让页面刷新，更不想链接到某些位置只是简简单单的a标签，有时候会调用一个简单的函数，仅此而已，那么我们就会\n<a href=\"javascript:void(0)\" onclick=\"people()\">点我</a>\n\n//在ts中，void类型像是与any类型相反，它表示没有任何类型。\nfunction student(): void{\n   console.log('my name is renbo')\n}\n\n在上述函数中没有返回任何值，所以类型为void，其实void的变量没什么用处和null,undefined一样职能作为数据的类型的判断。\n```\n\n### 永不存在值的类型Never<br/>\n```\n官网解释\nnever is the return type for a function expression or an \narrow function expression that always throws an exception or one that \nnever returns;\nVariables also acquire the type never when narrowed by any type guards that can never be true. \nnever类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是never类型，当它们被永不为真的类型保护所约束时。\n个人觉得没什么太大用这里就不做深究。\n```\n\n### 类型断言 <br/>\n```\n在ts中类型断言这种方式还是比较有用处的，其相当于js中的类型转换。但是只在编译的时候起作用。并不会改变其数据的本身结构。\nlet city: any = \"beijing\";\n\nlet strLength: number = (city as string).length;\n\n另外一种写法：\nlet city: any = \"beijing\";\n\nlet strLength: number = (<string>city).length;\n```\n<hr/>\n总结：通过以上的介绍相信大家对ts的数据类型已经有了大概的了解，其实相对于js,ts的数据类型并没有做什么变更，只是在声明其数据类型的时候必须明确的指定其相应的数据类型，否则代码编译会报错。虽然 ts的文件是xxx.ts 但由于编译过后和js 没有什么大的不同点，能够很好的运行在浏览器端，其中class、public等等函数及模块编译过后的js能后让你更深入的了解js\n\n\n\n\n\n                \n","slug":"typescript/baseDataType","published":1,"updated":"2019-08-26T16:46:27.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n94004akuu6qftis9hc","content":"<p>每种语言都会有属于自己的数据类型，ts的基本数据类型基本上是继承了js，但也在基础之上增加了几个不一样的类型</p>\n<h3 id=\"布尔型-true／false\"><a href=\"#布尔型-true／false\" class=\"headerlink\" title=\"布尔型 true／false \"></a>布尔型 true／false <br></h3><pre><code>//在js中声明boolean型的方法和ts中的不同之处\nlet flag = true;\nlet flag: boolean = true;</code></pre><h3 id=\"float-数值型（在js和ts中数字型都是float）\"><a href=\"#float-数值型（在js和ts中数字型都是float）\" class=\"headerlink\" title=\"float,数值型（在js和ts中数字型都是float）\"></a>float,数值型（在js和ts中数字型都是float）<br></h3><pre><code>//在js中声明number型的方法和ts中的不同之处\nlet age = 26;\nlet age: number = 26;</code></pre><h3 id=\"字符型-String\"><a href=\"#字符型-String\" class=\"headerlink\" title=\"字符型 String \"></a>字符型 String <br></h3><pre><code>//在js中声明number型的方法和ts中的不同之处\nlet name = &#39;boren&#39;;\nlet name: string = &#39;boren&#39;;</code></pre><h3 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组 Array \"></a>数组 Array <br></h3><pre><code>//在js中声明数组的方法和ts中的不同之处\n//1.js中声明数组的两种方式\nlet city = [];\nlet city = new Array();\n//2.ts中声明数组的两种方式\nlet city: string[] = [];\nlet city:Array&lt;string&gt; = []\n//在ts中声明数组必须提前指定其数据类型，如果其数组中的元素其数据类型不相同，声明的方式会在后面介绍</code></pre><h3 id=\"元组-Tuple\"><a href=\"#元组-Tuple\" class=\"headerlink\" title=\"元组 Tuple \"></a>元组 Tuple <br></h3><pre><code>//可以定义数组中元素不相同的数据类型\nlet people = [&#39;boren&#39;,26];//js\nlet people:[string,number];\npeople = [&#39;boren&#39;,26];//ts</code></pre><h3 id=\"枚举-Enum\"><a href=\"#枚举-Enum\" class=\"headerlink\" title=\"枚举 Enum \"></a>枚举 Enum <br></h3><pre><code>//js中没有此方法，都是以object或者json的形式去实现枚举的特性如：\nlet school = {\n\n     teacherOne : &#39;Mars&#39;,\n     teacherTwo:&#39;yupeng&#39;,\n     teacherThree:&#39;luxuesong&#39;\n\n} \nconsole.log(school.teacherOne)//Mars\n\n在ECMA2015，简称es5中Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象\nObject.getOwnPropertyDescriptor（school,‘teacherOne’）\n\n// {\n// value: Mars,\n// writable: true,\n// enumerable: true,\n// configurable: true\n// }\n\n其中这么方法打印出来的对象中key enumerable属性，为可枚举性，在js es5中有三个操作会忽略枚举为 false，for...in、 Object...keys()、 JSON.stringify()；在es6中新增一个方法Object.assign()会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。关于更多js中对枚举属性的支持，在这里就不一一介绍，例如toString()和length等等其枚举属性为false\n//ts中枚举类型的用法\nenum classMember = {chenchao,rongbin,chenhua,liurui,luxuesong};\nlet teacher:classMember = classMember.luxuesong\n\n我们也可以给枚举中的成员进行编号等等，以便于更方便的去找到相应的对象元素</code></pre><h3 id=\"通用数据类型-Any\"><a href=\"#通用数据类型-Any\" class=\"headerlink\" title=\"通用数据类型 Any\"></a>通用数据类型 Any<br></h3><pre><code>这种数据类型个人认为是万能的，它可以在你不知道这个变量为什么数据类型的情况下，并且项目比较急的时候标注为Any，它可以通过编译时的类型检查，有人会说那我所有的类型都写Any，如果你非要这么干，也无妨，那就失去了ts这么语言本身的意义所在，可以用这种方法去解决一个上述声明数组类型时很麻烦的问题\nlet lists: any[] = [&#39;boren&#39;,26,&#39;body&#39;]; \n\nlet age: any = 26;\nlet name: any = &#39;boren&#39;;</code></pre><h3 id=\"空值Void\"><a href=\"#空值Void\" class=\"headerlink\" title=\"空值Void \"></a>空值Void <br></h3><pre><code>在js中我们其实对void不是那么的陌生，它被认为是一个操作符，这个操作符可以计算表达式但不会返回任何值，在js中常常出现的位置就是在a标签的链接中，我们不想让页面刷新，更不想链接到某些位置只是简简单单的a标签，有时候会调用一个简单的函数，仅此而已，那么我们就会\n&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;people()&quot;&gt;点我&lt;/a&gt;\n\n//在ts中，void类型像是与any类型相反，它表示没有任何类型。\nfunction student(): void{\n   console.log(&#39;my name is renbo&#39;)\n}\n\n在上述函数中没有返回任何值，所以类型为void，其实void的变量没什么用处和null,undefined一样职能作为数据的类型的判断。</code></pre><h3 id=\"永不存在值的类型Never\"><a href=\"#永不存在值的类型Never\" class=\"headerlink\" title=\"永不存在值的类型Never\"></a>永不存在值的类型Never<br></h3><pre><code>官网解释\nnever is the return type for a function expression or an \narrow function expression that always throws an exception or one that \nnever returns;\nVariables also acquire the type never when narrowed by any type guards that can never be true. \nnever类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是never类型，当它们被永不为真的类型保护所约束时。\n个人觉得没什么太大用这里就不做深究。</code></pre><h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言 \"></a>类型断言 <br></h3><pre><code>在ts中类型断言这种方式还是比较有用处的，其相当于js中的类型转换。但是只在编译的时候起作用。并不会改变其数据的本身结构。\nlet city: any = &quot;beijing&quot;;\n\nlet strLength: number = (city as string).length;\n\n另外一种写法：\nlet city: any = &quot;beijing&quot;;\n\nlet strLength: number = (&lt;string&gt;city).length;</code></pre><hr>\n总结：通过以上的介绍相信大家对ts的数据类型已经有了大概的了解，其实相对于js,ts的数据类型并没有做什么变更，只是在声明其数据类型的时候必须明确的指定其相应的数据类型，否则代码编译会报错。虽然 ts的文件是xxx.ts 但由于编译过后和js 没有什么大的不同点，能够很好的运行在浏览器端，其中class、public等等函数及模块编译过后的js能后让你更深入的了解js\n\n\n\n\n\n\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>每种语言都会有属于自己的数据类型，ts的基本数据类型基本上是继承了js，但也在基础之上增加了几个不一样的类型</p>\n<h3 id=\"布尔型-true／false\"><a href=\"#布尔型-true／false\" class=\"headerlink\" title=\"布尔型 true／false \"></a>布尔型 true／false <br></h3><pre><code>//在js中声明boolean型的方法和ts中的不同之处\nlet flag = true;\nlet flag: boolean = true;</code></pre><h3 id=\"float-数值型（在js和ts中数字型都是float）\"><a href=\"#float-数值型（在js和ts中数字型都是float）\" class=\"headerlink\" title=\"float,数值型（在js和ts中数字型都是float）\"></a>float,数值型（在js和ts中数字型都是float）<br></h3><pre><code>//在js中声明number型的方法和ts中的不同之处\nlet age = 26;\nlet age: number = 26;</code></pre><h3 id=\"字符型-String\"><a href=\"#字符型-String\" class=\"headerlink\" title=\"字符型 String \"></a>字符型 String <br></h3><pre><code>//在js中声明number型的方法和ts中的不同之处\nlet name = &#39;boren&#39;;\nlet name: string = &#39;boren&#39;;</code></pre><h3 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组 Array \"></a>数组 Array <br></h3><pre><code>//在js中声明数组的方法和ts中的不同之处\n//1.js中声明数组的两种方式\nlet city = [];\nlet city = new Array();\n//2.ts中声明数组的两种方式\nlet city: string[] = [];\nlet city:Array&lt;string&gt; = []\n//在ts中声明数组必须提前指定其数据类型，如果其数组中的元素其数据类型不相同，声明的方式会在后面介绍</code></pre><h3 id=\"元组-Tuple\"><a href=\"#元组-Tuple\" class=\"headerlink\" title=\"元组 Tuple \"></a>元组 Tuple <br></h3><pre><code>//可以定义数组中元素不相同的数据类型\nlet people = [&#39;boren&#39;,26];//js\nlet people:[string,number];\npeople = [&#39;boren&#39;,26];//ts</code></pre><h3 id=\"枚举-Enum\"><a href=\"#枚举-Enum\" class=\"headerlink\" title=\"枚举 Enum \"></a>枚举 Enum <br></h3><pre><code>//js中没有此方法，都是以object或者json的形式去实现枚举的特性如：\nlet school = {\n\n     teacherOne : &#39;Mars&#39;,\n     teacherTwo:&#39;yupeng&#39;,\n     teacherThree:&#39;luxuesong&#39;\n\n} \nconsole.log(school.teacherOne)//Mars\n\n在ECMA2015，简称es5中Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象\nObject.getOwnPropertyDescriptor（school,‘teacherOne’）\n\n// {\n// value: Mars,\n// writable: true,\n// enumerable: true,\n// configurable: true\n// }\n\n其中这么方法打印出来的对象中key enumerable属性，为可枚举性，在js es5中有三个操作会忽略枚举为 false，for...in、 Object...keys()、 JSON.stringify()；在es6中新增一个方法Object.assign()会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。关于更多js中对枚举属性的支持，在这里就不一一介绍，例如toString()和length等等其枚举属性为false\n//ts中枚举类型的用法\nenum classMember = {chenchao,rongbin,chenhua,liurui,luxuesong};\nlet teacher:classMember = classMember.luxuesong\n\n我们也可以给枚举中的成员进行编号等等，以便于更方便的去找到相应的对象元素</code></pre><h3 id=\"通用数据类型-Any\"><a href=\"#通用数据类型-Any\" class=\"headerlink\" title=\"通用数据类型 Any\"></a>通用数据类型 Any<br></h3><pre><code>这种数据类型个人认为是万能的，它可以在你不知道这个变量为什么数据类型的情况下，并且项目比较急的时候标注为Any，它可以通过编译时的类型检查，有人会说那我所有的类型都写Any，如果你非要这么干，也无妨，那就失去了ts这么语言本身的意义所在，可以用这种方法去解决一个上述声明数组类型时很麻烦的问题\nlet lists: any[] = [&#39;boren&#39;,26,&#39;body&#39;]; \n\nlet age: any = 26;\nlet name: any = &#39;boren&#39;;</code></pre><h3 id=\"空值Void\"><a href=\"#空值Void\" class=\"headerlink\" title=\"空值Void \"></a>空值Void <br></h3><pre><code>在js中我们其实对void不是那么的陌生，它被认为是一个操作符，这个操作符可以计算表达式但不会返回任何值，在js中常常出现的位置就是在a标签的链接中，我们不想让页面刷新，更不想链接到某些位置只是简简单单的a标签，有时候会调用一个简单的函数，仅此而已，那么我们就会\n&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;people()&quot;&gt;点我&lt;/a&gt;\n\n//在ts中，void类型像是与any类型相反，它表示没有任何类型。\nfunction student(): void{\n   console.log(&#39;my name is renbo&#39;)\n}\n\n在上述函数中没有返回任何值，所以类型为void，其实void的变量没什么用处和null,undefined一样职能作为数据的类型的判断。</code></pre><h3 id=\"永不存在值的类型Never\"><a href=\"#永不存在值的类型Never\" class=\"headerlink\" title=\"永不存在值的类型Never\"></a>永不存在值的类型Never<br></h3><pre><code>官网解释\nnever is the return type for a function expression or an \narrow function expression that always throws an exception or one that \nnever returns;\nVariables also acquire the type never when narrowed by any type guards that can never be true. \nnever类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是never类型，当它们被永不为真的类型保护所约束时。\n个人觉得没什么太大用这里就不做深究。</code></pre><h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言 \"></a>类型断言 <br></h3><pre><code>在ts中类型断言这种方式还是比较有用处的，其相当于js中的类型转换。但是只在编译的时候起作用。并不会改变其数据的本身结构。\nlet city: any = &quot;beijing&quot;;\n\nlet strLength: number = (city as string).length;\n\n另外一种写法：\nlet city: any = &quot;beijing&quot;;\n\nlet strLength: number = (&lt;string&gt;city).length;</code></pre><hr>\n总结：通过以上的介绍相信大家对ts的数据类型已经有了大概的了解，其实相对于js,ts的数据类型并没有做什么变更，只是在声明其数据类型的时候必须明确的指定其相应的数据类型，否则代码编译会报错。虽然 ts的文件是xxx.ts 但由于编译过后和js 没有什么大的不同点，能够很好的运行在浏览器端，其中class、public等等函数及模块编译过后的js能后让你更深入的了解js\n\n\n\n\n\n\n"},{"title":"类","date":"2019-05-17T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n## TS基础系列之-类\n\n在JavaScript 通过构造函数和原型链来实现类和继承。而在 ES6 中，也用语法糖实现了class，下面介绍一下在 ts 中的类。\n\n### 类的概念 <br/><hr/>\n\n类是面向对象程序设计中的概念，是面向对象编程的基础，由于是一种数据类型，而不是数据，所以不存在于内存中。\n\n- 类(Class)：定义了一件事物的抽象特点，包含它的属性和方法\n- 对象（Object）：类的实例，通过 new 生成，类是概念，对象是实体\n- 面向对象（OOP）的三大特性：封装、继承、多态\n- 封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据\n- 继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性\n- 多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。\n- 存取器（getter & setter）：用以改变属性的读取和赋值行为\n- 修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法\n- 抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现\n- 接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口\n\n### ES6中类的用法 <br/><hr/>\n\n1. **定义属性和方法**\n    ```\n    // 定义类\n    class Parent{\n      // 定义构造函数\n      constructor(name='wang',age='27'){\n        // 定义属性\n        this.name = name;\n        this.age = age;\n      }\n      // 定义方法\n      eat(){\n        console.log(`${this.name} ${this.age} eat food`)\n      }\n    }\n\n    ```\n2. **利用关键字extends 和 super 继承**\n    ```\n    class Child extends Parent{ \n        constructor(name = 'ren',age = '27'){ \n          //继承父类属性\n          super(name, age); \n        } \n          eat(){ \n          //继承父类方法\n            super.eat() \n          } \n      } \n      let child =new Child('xiaoxiami'); \n      child.eat();\n    ```\n3. **存储器getter,setter改变属性和读取**\n\n    ```\n    class People{\n      // 定义构造函数\n      constructor(name){\n        // 定义属性\n        this.name = name;\n      }\n      get name () {\n        return 'renbo';\n      }\n      set name (value) {\n        console.log('setter: ' + value);\n      }\n      // 定义方法\n      eat(){\n        console.log(`${this.name}  eat food`)\n      }\n    }\n    let people = new People('lisi'); // setter: lisi\n    people.name = 'zhangsan'; // setter: zhangsan\n    console.log(people.name); // renbo\n    ```\n4. **静态方法使用static修饰符（由于分配在静态内存空间中，所以不需要实例化，只需要吊影即可）**\n    ```\n    class People{\n      // 定义静态方法\n      static eat(name){\n        console.log(`${name} eat food`)\n      }\n    }\n    console.log(People.eat('renbo')) // renbo eat food\n    ```\n\n### ES7中类的用法 <br/><hr/>\n\n1. **定义属性可以直接在类中定义**\n  ```\n    class People{\n      name = 'zhangsan'\n      constructor () {\n        // \n      }\n    }\n    let people = new People();\n    console.log(npeople.name) // zhangsan\n  ```\n\n2. **定义静态属性**\n```\n  class People{\n   static  name = 'zhangsan'\n    constructor () {\n      // \n    }\n  }\n  console.log(People.name) // zhangsan\n```\n\n### TypeScript 中类的用法 <br/><hr/>\n\n1. **说起 ts 中的类不得不说访问修饰符 public private protected**\n\n- public 说明属性或方法是公有的，在任何地方被访问到，在 ts 中方法和属性默认的是 public\n- private 说明属性或方法是私有的，不能在类的外部访问\n- protected 说明属性或方法是受保护的，和 private 类似，但是 protected 也可以在子类中访问\n\n**public 修饰符**\n\n```\nclass People {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People('renbo');\nconsole.log(people.name); // renbo\n```\n\n**private 修饰符**\n\n```\nclass People {\n  private  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People('renbo');\nconsole.log(people.name); // Property 'name' is private and only accessible within class 'People'.\n\n// 在子类中也不允许访问，只是私有\nclass People {\n  private  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name); // Property 'name' is private and only accessible within class 'People'.\n  }\n}\n```\n\n**protected 修饰符**\n\n```\nclass People {\n  protected  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People('renbo');\nconsole.log(people.name); // Property 'name' is protected and only accessible within class 'People' and its subclasses.ts\n```\n\n**protected 修饰符(子类访问)**\n\n```\nclass People {\n  protected  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name)\n  }\n}\n\nlet people  = new People ('zhangsna')\nlet smilePeople = new SmilePeople('wangwu'); // wangwu\n\n```\n\n2. **抽象类（ abstract 用于定义抽象类以及抽象类中的抽象方法）**\n\n- 抽象类可以作为派生其他类的基类\n- 抽象类中的抽象方法必须被子类实现\n- 抽象类无法直接实例化\n- 与接口不同，抽象类可以包含其成员的实现细节\n\n``` \n// 上述1，2\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat():string\n}\n// 派生类\nclass SmilePeople extends People {\n  static food: string = 'apple'\n  // eat 方法必须在子类中实现\n  public eat ():string {\n    return `my name is ${this.name} I,m eating ${SmilePeople.food}`\n  }\n}\n\nlet smilePeople = new SmilePeople('zhangsan');\nsmilePeople.eat()\n\n// 无法直接实例化\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat ():void\n}\n\nlet people = new People('zhangsan') // Cannot create an instance of an abstract class.\n\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/typescript/class.md","raw":"---\ntitle: 类\ndate: 2019-05-17 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n## TS基础系列之-类\n\n在JavaScript 通过构造函数和原型链来实现类和继承。而在 ES6 中，也用语法糖实现了class，下面介绍一下在 ts 中的类。\n\n### 类的概念 <br/><hr/>\n\n类是面向对象程序设计中的概念，是面向对象编程的基础，由于是一种数据类型，而不是数据，所以不存在于内存中。\n\n- 类(Class)：定义了一件事物的抽象特点，包含它的属性和方法\n- 对象（Object）：类的实例，通过 new 生成，类是概念，对象是实体\n- 面向对象（OOP）的三大特性：封装、继承、多态\n- 封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据\n- 继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性\n- 多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。\n- 存取器（getter & setter）：用以改变属性的读取和赋值行为\n- 修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法\n- 抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现\n- 接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口\n\n### ES6中类的用法 <br/><hr/>\n\n1. **定义属性和方法**\n    ```\n    // 定义类\n    class Parent{\n      // 定义构造函数\n      constructor(name='wang',age='27'){\n        // 定义属性\n        this.name = name;\n        this.age = age;\n      }\n      // 定义方法\n      eat(){\n        console.log(`${this.name} ${this.age} eat food`)\n      }\n    }\n\n    ```\n2. **利用关键字extends 和 super 继承**\n    ```\n    class Child extends Parent{ \n        constructor(name = 'ren',age = '27'){ \n          //继承父类属性\n          super(name, age); \n        } \n          eat(){ \n          //继承父类方法\n            super.eat() \n          } \n      } \n      let child =new Child('xiaoxiami'); \n      child.eat();\n    ```\n3. **存储器getter,setter改变属性和读取**\n\n    ```\n    class People{\n      // 定义构造函数\n      constructor(name){\n        // 定义属性\n        this.name = name;\n      }\n      get name () {\n        return 'renbo';\n      }\n      set name (value) {\n        console.log('setter: ' + value);\n      }\n      // 定义方法\n      eat(){\n        console.log(`${this.name}  eat food`)\n      }\n    }\n    let people = new People('lisi'); // setter: lisi\n    people.name = 'zhangsan'; // setter: zhangsan\n    console.log(people.name); // renbo\n    ```\n4. **静态方法使用static修饰符（由于分配在静态内存空间中，所以不需要实例化，只需要吊影即可）**\n    ```\n    class People{\n      // 定义静态方法\n      static eat(name){\n        console.log(`${name} eat food`)\n      }\n    }\n    console.log(People.eat('renbo')) // renbo eat food\n    ```\n\n### ES7中类的用法 <br/><hr/>\n\n1. **定义属性可以直接在类中定义**\n  ```\n    class People{\n      name = 'zhangsan'\n      constructor () {\n        // \n      }\n    }\n    let people = new People();\n    console.log(npeople.name) // zhangsan\n  ```\n\n2. **定义静态属性**\n```\n  class People{\n   static  name = 'zhangsan'\n    constructor () {\n      // \n    }\n  }\n  console.log(People.name) // zhangsan\n```\n\n### TypeScript 中类的用法 <br/><hr/>\n\n1. **说起 ts 中的类不得不说访问修饰符 public private protected**\n\n- public 说明属性或方法是公有的，在任何地方被访问到，在 ts 中方法和属性默认的是 public\n- private 说明属性或方法是私有的，不能在类的外部访问\n- protected 说明属性或方法是受保护的，和 private 类似，但是 protected 也可以在子类中访问\n\n**public 修饰符**\n\n```\nclass People {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People('renbo');\nconsole.log(people.name); // renbo\n```\n\n**private 修饰符**\n\n```\nclass People {\n  private  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People('renbo');\nconsole.log(people.name); // Property 'name' is private and only accessible within class 'People'.\n\n// 在子类中也不允许访问，只是私有\nclass People {\n  private  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name); // Property 'name' is private and only accessible within class 'People'.\n  }\n}\n```\n\n**protected 修饰符**\n\n```\nclass People {\n  protected  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People('renbo');\nconsole.log(people.name); // Property 'name' is protected and only accessible within class 'People' and its subclasses.ts\n```\n\n**protected 修饰符(子类访问)**\n\n```\nclass People {\n  protected  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name)\n  }\n}\n\nlet people  = new People ('zhangsna')\nlet smilePeople = new SmilePeople('wangwu'); // wangwu\n\n```\n\n2. **抽象类（ abstract 用于定义抽象类以及抽象类中的抽象方法）**\n\n- 抽象类可以作为派生其他类的基类\n- 抽象类中的抽象方法必须被子类实现\n- 抽象类无法直接实例化\n- 与接口不同，抽象类可以包含其成员的实现细节\n\n``` \n// 上述1，2\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat():string\n}\n// 派生类\nclass SmilePeople extends People {\n  static food: string = 'apple'\n  // eat 方法必须在子类中实现\n  public eat ():string {\n    return `my name is ${this.name} I,m eating ${SmilePeople.food}`\n  }\n}\n\nlet smilePeople = new SmilePeople('zhangsan');\nsmilePeople.eat()\n\n// 无法直接实例化\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat ():void\n}\n\nlet people = new People('zhangsan') // Cannot create an instance of an abstract class.\n\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"typescript/class","published":1,"updated":"2019-08-26T16:46:27.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n97004fkuu6rxkdxvys","content":"<h2 id=\"TS基础系列之-类\"><a href=\"#TS基础系列之-类\" class=\"headerlink\" title=\"TS基础系列之-类\"></a>TS基础系列之-类</h2><p>在JavaScript 通过构造函数和原型链来实现类和继承。而在 ES6 中，也用语法糖实现了class，下面介绍一下在 ts 中的类。</p>\n<h3 id=\"类的概念\"><a href=\"#类的概念\" class=\"headerlink\" title=\"类的概念 \"></a>类的概念 <br><hr></h3><p>类是面向对象程序设计中的概念，是面向对象编程的基础，由于是一种数据类型，而不是数据，所以不存在于内存中。</p>\n<ul>\n<li>类(Class)：定义了一件事物的抽象特点，包含它的属性和方法</li>\n<li>对象（Object）：类的实例，通过 new 生成，类是概念，对象是实体</li>\n<li>面向对象（OOP）的三大特性：封装、继承、多态</li>\n<li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li>\n<li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li>\n<li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。</li>\n<li>存取器（getter &amp; setter）：用以改变属性的读取和赋值行为</li>\n<li>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法</li>\n<li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li>\n<li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</li>\n</ul>\n<h3 id=\"ES6中类的用法\"><a href=\"#ES6中类的用法\" class=\"headerlink\" title=\"ES6中类的用法 \"></a>ES6中类的用法 <br><hr></h3><ol>\n<li><p><strong>定义属性和方法</strong></p>\n<pre><code> // 定义类\n class Parent{\n   // 定义构造函数\n   constructor(name=&#39;wang&#39;,age=&#39;27&#39;){\n     // 定义属性\n     this.name = name;\n     this.age = age;\n   }\n   // 定义方法\n   eat(){\n     console.log(`${this.name} ${this.age} eat food`)\n   }\n }\n</code></pre></li>\n<li><p><strong>利用关键字extends 和 super 继承</strong></p>\n<pre><code> class Child extends Parent{ \n     constructor(name = &#39;ren&#39;,age = &#39;27&#39;){ \n       //继承父类属性\n       super(name, age); \n     } \n       eat(){ \n       //继承父类方法\n         super.eat() \n       } \n   } \n   let child =new Child(&#39;xiaoxiami&#39;); \n   child.eat();</code></pre></li>\n<li><p><strong>存储器getter,setter改变属性和读取</strong></p>\n<pre><code> class People{\n   // 定义构造函数\n   constructor(name){\n     // 定义属性\n     this.name = name;\n   }\n   get name () {\n     return &#39;renbo&#39;;\n   }\n   set name (value) {\n     console.log(&#39;setter: &#39; + value);\n   }\n   // 定义方法\n   eat(){\n     console.log(`${this.name}  eat food`)\n   }\n }\n let people = new People(&#39;lisi&#39;); // setter: lisi\n people.name = &#39;zhangsan&#39;; // setter: zhangsan\n console.log(people.name); // renbo</code></pre></li>\n<li><p><strong>静态方法使用static修饰符（由于分配在静态内存空间中，所以不需要实例化，只需要吊影即可）</strong></p>\n<pre><code> class People{\n   // 定义静态方法\n   static eat(name){\n     console.log(`${name} eat food`)\n   }\n }\n console.log(People.eat(&#39;renbo&#39;)) // renbo eat food</code></pre></li>\n</ol>\n<h3 id=\"ES7中类的用法\"><a href=\"#ES7中类的用法\" class=\"headerlink\" title=\"ES7中类的用法 \"></a>ES7中类的用法 <br><hr></h3><ol>\n<li><p><strong>定义属性可以直接在类中定义</strong></p>\n<pre><code> class People{\n   name = &#39;zhangsan&#39;\n   constructor () {\n     // \n   }\n }\n let people = new People();\n console.log(npeople.name) // zhangsan</code></pre></li>\n<li><p><strong>定义静态属性</strong></p>\n<pre><code>class People{\nstatic  name = &#39;zhangsan&#39;\n constructor () {\n   // \n }\n}\nconsole.log(People.name) // zhangsan</code></pre></li>\n</ol>\n<h3 id=\"TypeScript-中类的用法\"><a href=\"#TypeScript-中类的用法\" class=\"headerlink\" title=\"TypeScript 中类的用法 \"></a>TypeScript 中类的用法 <br><hr></h3><ol>\n<li><strong>说起 ts 中的类不得不说访问修饰符 public private protected</strong></li>\n</ol>\n<ul>\n<li>public 说明属性或方法是公有的，在任何地方被访问到，在 ts 中方法和属性默认的是 public</li>\n<li>private 说明属性或方法是私有的，不能在类的外部访问</li>\n<li>protected 说明属性或方法是受保护的，和 private 类似，但是 protected 也可以在子类中访问</li>\n</ul>\n<p><strong>public 修饰符</strong></p>\n<pre><code>class People {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People(&#39;renbo&#39;);\nconsole.log(people.name); // renbo</code></pre><p><strong>private 修饰符</strong></p>\n<pre><code>class People {\n  private  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People(&#39;renbo&#39;);\nconsole.log(people.name); // Property &#39;name&#39; is private and only accessible within class &#39;People&#39;.\n\n// 在子类中也不允许访问，只是私有\nclass People {\n  private  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name); // Property &#39;name&#39; is private and only accessible within class &#39;People&#39;.\n  }\n}</code></pre><p><strong>protected 修饰符</strong></p>\n<pre><code>class People {\n  protected  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People(&#39;renbo&#39;);\nconsole.log(people.name); // Property &#39;name&#39; is protected and only accessible within class &#39;People&#39; and its subclasses.ts</code></pre><p><strong>protected 修饰符(子类访问)</strong></p>\n<pre><code>class People {\n  protected  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name)\n  }\n}\n\nlet people  = new People (&#39;zhangsna&#39;)\nlet smilePeople = new SmilePeople(&#39;wangwu&#39;); // wangwu\n</code></pre><ol start=\"2\">\n<li><strong>抽象类（ abstract 用于定义抽象类以及抽象类中的抽象方法）</strong></li>\n</ol>\n<ul>\n<li>抽象类可以作为派生其他类的基类</li>\n<li>抽象类中的抽象方法必须被子类实现</li>\n<li>抽象类无法直接实例化</li>\n<li>与接口不同，抽象类可以包含其成员的实现细节</li>\n</ul>\n<pre><code>// 上述1，2\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat():string\n}\n// 派生类\nclass SmilePeople extends People {\n  static food: string = &#39;apple&#39;\n  // eat 方法必须在子类中实现\n  public eat ():string {\n    return `my name is ${this.name} I,m eating ${SmilePeople.food}`\n  }\n}\n\nlet smilePeople = new SmilePeople(&#39;zhangsan&#39;);\nsmilePeople.eat()\n\n// 无法直接实例化\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat ():void\n}\n\nlet people = new People(&#39;zhangsan&#39;) // Cannot create an instance of an abstract class.\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h2 id=\"TS基础系列之-类\"><a href=\"#TS基础系列之-类\" class=\"headerlink\" title=\"TS基础系列之-类\"></a>TS基础系列之-类</h2><p>在JavaScript 通过构造函数和原型链来实现类和继承。而在 ES6 中，也用语法糖实现了class，下面介绍一下在 ts 中的类。</p>\n<h3 id=\"类的概念\"><a href=\"#类的概念\" class=\"headerlink\" title=\"类的概念 \"></a>类的概念 <br><hr></h3><p>类是面向对象程序设计中的概念，是面向对象编程的基础，由于是一种数据类型，而不是数据，所以不存在于内存中。</p>\n<ul>\n<li>类(Class)：定义了一件事物的抽象特点，包含它的属性和方法</li>\n<li>对象（Object）：类的实例，通过 new 生成，类是概念，对象是实体</li>\n<li>面向对象（OOP）的三大特性：封装、继承、多态</li>\n<li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li>\n<li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li>\n<li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。</li>\n<li>存取器（getter &amp; setter）：用以改变属性的读取和赋值行为</li>\n<li>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法</li>\n<li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li>\n<li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</li>\n</ul>\n<h3 id=\"ES6中类的用法\"><a href=\"#ES6中类的用法\" class=\"headerlink\" title=\"ES6中类的用法 \"></a>ES6中类的用法 <br><hr></h3><ol>\n<li><p><strong>定义属性和方法</strong></p>\n<pre><code> // 定义类\n class Parent{\n   // 定义构造函数\n   constructor(name=&#39;wang&#39;,age=&#39;27&#39;){\n     // 定义属性\n     this.name = name;\n     this.age = age;\n   }\n   // 定义方法\n   eat(){\n     console.log(`${this.name} ${this.age} eat food`)\n   }\n }\n</code></pre></li>\n<li><p><strong>利用关键字extends 和 super 继承</strong></p>\n<pre><code> class Child extends Parent{ \n     constructor(name = &#39;ren&#39;,age = &#39;27&#39;){ \n       //继承父类属性\n       super(name, age); \n     } \n       eat(){ \n       //继承父类方法\n         super.eat() \n       } \n   } \n   let child =new Child(&#39;xiaoxiami&#39;); \n   child.eat();</code></pre></li>\n<li><p><strong>存储器getter,setter改变属性和读取</strong></p>\n<pre><code> class People{\n   // 定义构造函数\n   constructor(name){\n     // 定义属性\n     this.name = name;\n   }\n   get name () {\n     return &#39;renbo&#39;;\n   }\n   set name (value) {\n     console.log(&#39;setter: &#39; + value);\n   }\n   // 定义方法\n   eat(){\n     console.log(`${this.name}  eat food`)\n   }\n }\n let people = new People(&#39;lisi&#39;); // setter: lisi\n people.name = &#39;zhangsan&#39;; // setter: zhangsan\n console.log(people.name); // renbo</code></pre></li>\n<li><p><strong>静态方法使用static修饰符（由于分配在静态内存空间中，所以不需要实例化，只需要吊影即可）</strong></p>\n<pre><code> class People{\n   // 定义静态方法\n   static eat(name){\n     console.log(`${name} eat food`)\n   }\n }\n console.log(People.eat(&#39;renbo&#39;)) // renbo eat food</code></pre></li>\n</ol>\n<h3 id=\"ES7中类的用法\"><a href=\"#ES7中类的用法\" class=\"headerlink\" title=\"ES7中类的用法 \"></a>ES7中类的用法 <br><hr></h3><ol>\n<li><p><strong>定义属性可以直接在类中定义</strong></p>\n<pre><code> class People{\n   name = &#39;zhangsan&#39;\n   constructor () {\n     // \n   }\n }\n let people = new People();\n console.log(npeople.name) // zhangsan</code></pre></li>\n<li><p><strong>定义静态属性</strong></p>\n<pre><code>class People{\nstatic  name = &#39;zhangsan&#39;\n constructor () {\n   // \n }\n}\nconsole.log(People.name) // zhangsan</code></pre></li>\n</ol>\n<h3 id=\"TypeScript-中类的用法\"><a href=\"#TypeScript-中类的用法\" class=\"headerlink\" title=\"TypeScript 中类的用法 \"></a>TypeScript 中类的用法 <br><hr></h3><ol>\n<li><strong>说起 ts 中的类不得不说访问修饰符 public private protected</strong></li>\n</ol>\n<ul>\n<li>public 说明属性或方法是公有的，在任何地方被访问到，在 ts 中方法和属性默认的是 public</li>\n<li>private 说明属性或方法是私有的，不能在类的外部访问</li>\n<li>protected 说明属性或方法是受保护的，和 private 类似，但是 protected 也可以在子类中访问</li>\n</ul>\n<p><strong>public 修饰符</strong></p>\n<pre><code>class People {\n  public name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People(&#39;renbo&#39;);\nconsole.log(people.name); // renbo</code></pre><p><strong>private 修饰符</strong></p>\n<pre><code>class People {\n  private  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People(&#39;renbo&#39;);\nconsole.log(people.name); // Property &#39;name&#39; is private and only accessible within class &#39;People&#39;.\n\n// 在子类中也不允许访问，只是私有\nclass People {\n  private  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name); // Property &#39;name&#39; is private and only accessible within class &#39;People&#39;.\n  }\n}</code></pre><p><strong>protected 修饰符</strong></p>\n<pre><code>class People {\n  protected  name;\n  public constructor(name) {\n    this.name = name;\n  }\n}\n\nlet people = new People(&#39;renbo&#39;);\nconsole.log(people.name); // Property &#39;name&#39; is protected and only accessible within class &#39;People&#39; and its subclasses.ts</code></pre><p><strong>protected 修饰符(子类访问)</strong></p>\n<pre><code>class People {\n  protected  name: string;\n  public constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass SmilePeople extends People {\n\n  public constructor (name:string) {\n    super(name)\n    console.log(this.name)\n  }\n}\n\nlet people  = new People (&#39;zhangsna&#39;)\nlet smilePeople = new SmilePeople(&#39;wangwu&#39;); // wangwu\n</code></pre><ol start=\"2\">\n<li><strong>抽象类（ abstract 用于定义抽象类以及抽象类中的抽象方法）</strong></li>\n</ol>\n<ul>\n<li>抽象类可以作为派生其他类的基类</li>\n<li>抽象类中的抽象方法必须被子类实现</li>\n<li>抽象类无法直接实例化</li>\n<li>与接口不同，抽象类可以包含其成员的实现细节</li>\n</ul>\n<pre><code>// 上述1，2\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat():string\n}\n// 派生类\nclass SmilePeople extends People {\n  static food: string = &#39;apple&#39;\n  // eat 方法必须在子类中实现\n  public eat ():string {\n    return `my name is ${this.name} I,m eating ${SmilePeople.food}`\n  }\n}\n\nlet smilePeople = new SmilePeople(&#39;zhangsan&#39;);\nsmilePeople.eat()\n\n// 无法直接实例化\nabstract class People {\n  public name:string;\n  public constructor (name:string) {\n    this.name = name;\n  }\n  public abstract eat ():void\n}\n\nlet people = new People(&#39;zhangsan&#39;) // Cannot create an instance of an abstract class.\n</code></pre>"},{"title":"TypeScript编译原理","date":"2019-08-05T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\nTypeScript 编译器源文件位于 <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/compiler\">src/compiler </a> 目录下\n\n主要的应用文件\n\n<image src=\"/images/TypeScript 编译原理.png\" />\n\n\n### 编译器的大概工作流\n\n```\nSourceCode（源码） ~~ 扫描器 ~~> Token 流\n```\n\n```\nToken 流 ~~ 解析器 ~~> AST（抽象语法树）\n```\n\n```\nAST ~~ 绑定器 ~~> Symbols（符号）\n```\n\n```\nAST + 符号 ~~ 检查器 ~~> 类型验证\n```\n\n```\nAST + 检查器 ~~ 发射器 ~~> JavaScript 代码\n```\n\n\n\n","source":"_posts/typescript/compilationPrinciple.md","raw":"---\ntitle: TypeScript编译原理\ndate:  2019-08-05 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n\nTypeScript 编译器源文件位于 <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/compiler\">src/compiler </a> 目录下\n\n主要的应用文件\n\n<image src=\"/images/TypeScript 编译原理.png\" />\n\n\n### 编译器的大概工作流\n\n```\nSourceCode（源码） ~~ 扫描器 ~~> Token 流\n```\n\n```\nToken 流 ~~ 解析器 ~~> AST（抽象语法树）\n```\n\n```\nAST ~~ 绑定器 ~~> Symbols（符号）\n```\n\n```\nAST + 符号 ~~ 检查器 ~~> 类型验证\n```\n\n```\nAST + 检查器 ~~ 发射器 ~~> JavaScript 代码\n```\n\n\n\n","slug":"typescript/compilationPrinciple","published":1,"updated":"2019-08-26T16:46:27.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n98004gkuu69pwbujru","content":"<p>TypeScript 编译器源文件位于 <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/compiler\" target=\"_blank\" rel=\"noopener\">src/compiler </a> 目录下</p>\n<p>主要的应用文件</p>\n<image src=\"/images/TypeScript 编译原理.png\">\n\n\n<h3 id=\"编译器的大概工作流\"><a href=\"#编译器的大概工作流\" class=\"headerlink\" title=\"编译器的大概工作流\"></a>编译器的大概工作流</h3><pre><code>SourceCode（源码） ~~ 扫描器 ~~&gt; Token 流</code></pre><pre><code>Token 流 ~~ 解析器 ~~&gt; AST（抽象语法树）</code></pre><pre><code>AST ~~ 绑定器 ~~&gt; Symbols（符号）</code></pre><pre><code>AST + 符号 ~~ 检查器 ~~&gt; 类型验证</code></pre><pre><code>AST + 检查器 ~~ 发射器 ~~&gt; JavaScript 代码</code></pre></image>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>TypeScript 编译器源文件位于 <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/compiler\" target=\"_blank\" rel=\"noopener\">src/compiler </a> 目录下</p>\n<p>主要的应用文件</p>\n<image src=\"/images/TypeScript 编译原理.png\">\n\n\n<h3 id=\"编译器的大概工作流\"><a href=\"#编译器的大概工作流\" class=\"headerlink\" title=\"编译器的大概工作流\"></a>编译器的大概工作流</h3><pre><code>SourceCode（源码） ~~ 扫描器 ~~&gt; Token 流</code></pre><pre><code>Token 流 ~~ 解析器 ~~&gt; AST（抽象语法树）</code></pre><pre><code>AST ~~ 绑定器 ~~&gt; Symbols（符号）</code></pre><pre><code>AST + 符号 ~~ 检查器 ~~&gt; 类型验证</code></pre><pre><code>AST + 检查器 ~~ 发射器 ~~&gt; JavaScript 代码</code></pre></image>"},{"title":"声明文件","date":"2019-06-20T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n## 声明文件\n\n### 识别库的类型\n\n全局库(全局命名空间下能访问)\n\n- 顶级的var语句或function声明\n- 一个或多个赋值语句到window上\n- 假设DOM原始值像document或window是存在的\n\n```\n<script src=\"jquery.js\"></script>\n\nwindow.test = function(){\n    console.log('1111')\n}\n\n```\n\n模块化库（只能工作在模块加载器的环境下）\n\n- 无条件的调用require或define\n- 像import * as a from 'b'; or export c;这样的声明\n- 赋值给exports或module.exports\n \nUMD模块是指那些既可以作为模块使用（通过导入）又可以作为全局（在没有模块加载器的环境里）使用的模块\n\n```\nimport moment = require(\"moment\");\nconsole.log(moment.format());\n\n```\n在浏览器环境内也可以这样使用\n\n```\nconsole.log(moment.format());\n```\n\n识别UMD库\n```\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"libName\"], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory(require(\"libName\"));\n    } else {\n        root.returnExports = factory(root.libName);\n    }\n}(this, function (b) {}))\n```\n\n### 使用依赖\n\n依赖全局库\n```\n/// <reference types=\"someLib\" />\n\nfunction getThing(): someLib.thing;\n```\n\n依赖模块\n```\nimport * as moment from \"moment\";\n\nfunction getThing(): moment;\n```\n\n依赖UMD库\n```\n// <reference types=\"moment\" />\n\nfunction getThing(): moment;\n```\n\n如果你的模块或UMD库依赖于一个UMD库\n\n不要使用/// <reference指令去声明UMD库的依赖！\n```\nimport * as someLib from 'someLib';\n\n```\n\n### 防止命名冲突\n\n在书写全局声明文件时，使用库定义的全局变量名来声明命名空间类型\n```\ndeclare namespace cats {\n    interface KittySettings { }\n}\n```\n\n\n### 定义全局库模版\n\n模版文件<a href=\"global.d.ts.md\"> global.d.ts </a>定义了myLib库作为例子\n\n### 定义模块化库模版\n\n针对模块有三种可用的模块， module.d.ts, module-class.d.ts and module-fun\n\n<a href=\"module.d.ts.md\"> module.d.ts </a> 作为函数调用\n```\nvar x = require(\"foo\");\n// Note: calling 'x' as a function\nvar y = x(42);\n\n```\n\n<a href=\"module-class.d.ts.md\" >module-class.d.ts </a>使用new来构造调用\n```\nvar x = require(\"bar\");\n// Note: using 'new' operator on the imported variable\nvar y = new x(\"hello\");\n\n```\n\n如果模块不能被调用或构造，使用<a href=\"module.d.ts.md\"> module.d.ts </a>文件\n\n### 使用库\n\n在TypeScript 2.0以上的版本，获取类型声明文件只需要使用npm。\n\n```\nnpm install --save @types/lodash\n\nimport * as _ from \"lodash\";\n\n_.padStart(\"Hello TypeScript!\", 20, \" \");\n```\n\n如果npm包没有包含它的声明文件，那就必须下载相应的@types包\n\n大多数类型声明包的名字总是与它们在npm上的包的名字相同，但是有@types/前缀\n\n查找更多typeScript 库请前往 <a href=\"https://aka.ms/types\">https://aka.ms/types</a>\n\n\n\n","source":"_posts/typescript/declareFile.md","raw":"---\ntitle: 声明文件\ndate:  2019-6-20 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n## 声明文件\n\n### 识别库的类型\n\n全局库(全局命名空间下能访问)\n\n- 顶级的var语句或function声明\n- 一个或多个赋值语句到window上\n- 假设DOM原始值像document或window是存在的\n\n```\n<script src=\"jquery.js\"></script>\n\nwindow.test = function(){\n    console.log('1111')\n}\n\n```\n\n模块化库（只能工作在模块加载器的环境下）\n\n- 无条件的调用require或define\n- 像import * as a from 'b'; or export c;这样的声明\n- 赋值给exports或module.exports\n \nUMD模块是指那些既可以作为模块使用（通过导入）又可以作为全局（在没有模块加载器的环境里）使用的模块\n\n```\nimport moment = require(\"moment\");\nconsole.log(moment.format());\n\n```\n在浏览器环境内也可以这样使用\n\n```\nconsole.log(moment.format());\n```\n\n识别UMD库\n```\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"libName\"], factory);\n    } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory(require(\"libName\"));\n    } else {\n        root.returnExports = factory(root.libName);\n    }\n}(this, function (b) {}))\n```\n\n### 使用依赖\n\n依赖全局库\n```\n/// <reference types=\"someLib\" />\n\nfunction getThing(): someLib.thing;\n```\n\n依赖模块\n```\nimport * as moment from \"moment\";\n\nfunction getThing(): moment;\n```\n\n依赖UMD库\n```\n// <reference types=\"moment\" />\n\nfunction getThing(): moment;\n```\n\n如果你的模块或UMD库依赖于一个UMD库\n\n不要使用/// <reference指令去声明UMD库的依赖！\n```\nimport * as someLib from 'someLib';\n\n```\n\n### 防止命名冲突\n\n在书写全局声明文件时，使用库定义的全局变量名来声明命名空间类型\n```\ndeclare namespace cats {\n    interface KittySettings { }\n}\n```\n\n\n### 定义全局库模版\n\n模版文件<a href=\"global.d.ts.md\"> global.d.ts </a>定义了myLib库作为例子\n\n### 定义模块化库模版\n\n针对模块有三种可用的模块， module.d.ts, module-class.d.ts and module-fun\n\n<a href=\"module.d.ts.md\"> module.d.ts </a> 作为函数调用\n```\nvar x = require(\"foo\");\n// Note: calling 'x' as a function\nvar y = x(42);\n\n```\n\n<a href=\"module-class.d.ts.md\" >module-class.d.ts </a>使用new来构造调用\n```\nvar x = require(\"bar\");\n// Note: using 'new' operator on the imported variable\nvar y = new x(\"hello\");\n\n```\n\n如果模块不能被调用或构造，使用<a href=\"module.d.ts.md\"> module.d.ts </a>文件\n\n### 使用库\n\n在TypeScript 2.0以上的版本，获取类型声明文件只需要使用npm。\n\n```\nnpm install --save @types/lodash\n\nimport * as _ from \"lodash\";\n\n_.padStart(\"Hello TypeScript!\", 20, \" \");\n```\n\n如果npm包没有包含它的声明文件，那就必须下载相应的@types包\n\n大多数类型声明包的名字总是与它们在npm上的包的名字相同，但是有@types/前缀\n\n查找更多typeScript 库请前往 <a href=\"https://aka.ms/types\">https://aka.ms/types</a>\n\n\n\n","slug":"typescript/declareFile","published":1,"updated":"2019-08-26T16:46:27.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9b004lkuu6qwdg9ekc","content":"<h2 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h2><h3 id=\"识别库的类型\"><a href=\"#识别库的类型\" class=\"headerlink\" title=\"识别库的类型\"></a>识别库的类型</h3><p>全局库(全局命名空间下能访问)</p>\n<ul>\n<li>顶级的var语句或function声明</li>\n<li>一个或多个赋值语句到window上</li>\n<li>假设DOM原始值像document或window是存在的</li>\n</ul>\n<pre><code>&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;\n\nwindow.test = function(){\n    console.log(&#39;1111&#39;)\n}\n</code></pre><p>模块化库（只能工作在模块加载器的环境下）</p>\n<ul>\n<li>无条件的调用require或define</li>\n<li>像import * as a from ‘b’; or export c;这样的声明</li>\n<li>赋值给exports或module.exports</li>\n</ul>\n<p>UMD模块是指那些既可以作为模块使用（通过导入）又可以作为全局（在没有模块加载器的环境里）使用的模块</p>\n<pre><code>import moment = require(&quot;moment&quot;);\nconsole.log(moment.format());\n</code></pre><p>在浏览器环境内也可以这样使用</p>\n<pre><code>console.log(moment.format());</code></pre><p>识别UMD库</p>\n<pre><code>(function (root, factory) {\n    if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {\n        define([&quot;libName&quot;], factory);\n    } else if (typeof module === &quot;object&quot; &amp;&amp; module.exports) {\n        module.exports = factory(require(&quot;libName&quot;));\n    } else {\n        root.returnExports = factory(root.libName);\n    }\n}(this, function (b) {}))</code></pre><h3 id=\"使用依赖\"><a href=\"#使用依赖\" class=\"headerlink\" title=\"使用依赖\"></a>使用依赖</h3><p>依赖全局库</p>\n<pre><code>/// &lt;reference types=&quot;someLib&quot; /&gt;\n\nfunction getThing(): someLib.thing;</code></pre><p>依赖模块</p>\n<pre><code>import * as moment from &quot;moment&quot;;\n\nfunction getThing(): moment;</code></pre><p>依赖UMD库</p>\n<pre><code>// &lt;reference types=&quot;moment&quot; /&gt;\n\nfunction getThing(): moment;</code></pre><p>如果你的模块或UMD库依赖于一个UMD库</p>\n<p>不要使用/// &lt;reference指令去声明UMD库的依赖！</p>\n<pre><code>import * as someLib from &#39;someLib&#39;;\n</code></pre><h3 id=\"防止命名冲突\"><a href=\"#防止命名冲突\" class=\"headerlink\" title=\"防止命名冲突\"></a>防止命名冲突</h3><p>在书写全局声明文件时，使用库定义的全局变量名来声明命名空间类型</p>\n<pre><code>declare namespace cats {\n    interface KittySettings { }\n}</code></pre><h3 id=\"定义全局库模版\"><a href=\"#定义全局库模版\" class=\"headerlink\" title=\"定义全局库模版\"></a>定义全局库模版</h3><p>模版文件<a href=\"global.d.ts.md\"> global.d.ts </a>定义了myLib库作为例子</p>\n<h3 id=\"定义模块化库模版\"><a href=\"#定义模块化库模版\" class=\"headerlink\" title=\"定义模块化库模版\"></a>定义模块化库模版</h3><p>针对模块有三种可用的模块， module.d.ts, module-class.d.ts and module-fun</p>\n<p><a href=\"module.d.ts.md\"> module.d.ts </a> 作为函数调用</p>\n<pre><code>var x = require(&quot;foo&quot;);\n// Note: calling &#39;x&#39; as a function\nvar y = x(42);\n</code></pre><p><a href=\"module-class.d.ts.md\">module-class.d.ts </a>使用new来构造调用</p>\n<pre><code>var x = require(&quot;bar&quot;);\n// Note: using &#39;new&#39; operator on the imported variable\nvar y = new x(&quot;hello&quot;);\n</code></pre><p>如果模块不能被调用或构造，使用<a href=\"module.d.ts.md\"> module.d.ts </a>文件</p>\n<h3 id=\"使用库\"><a href=\"#使用库\" class=\"headerlink\" title=\"使用库\"></a>使用库</h3><p>在TypeScript 2.0以上的版本，获取类型声明文件只需要使用npm。</p>\n<pre><code>npm install --save @types/lodash\n\nimport * as _ from &quot;lodash&quot;;\n\n_.padStart(&quot;Hello TypeScript!&quot;, 20, &quot; &quot;);</code></pre><p>如果npm包没有包含它的声明文件，那就必须下载相应的@types包</p>\n<p>大多数类型声明包的名字总是与它们在npm上的包的名字相同，但是有@types/前缀</p>\n<p>查找更多typeScript 库请前往 <a href=\"https://aka.ms/types\" target=\"_blank\" rel=\"noopener\">https://aka.ms/types</a></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h2 id=\"声明文件\"><a href=\"#声明文件\" class=\"headerlink\" title=\"声明文件\"></a>声明文件</h2><h3 id=\"识别库的类型\"><a href=\"#识别库的类型\" class=\"headerlink\" title=\"识别库的类型\"></a>识别库的类型</h3><p>全局库(全局命名空间下能访问)</p>\n<ul>\n<li>顶级的var语句或function声明</li>\n<li>一个或多个赋值语句到window上</li>\n<li>假设DOM原始值像document或window是存在的</li>\n</ul>\n<pre><code>&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;\n\nwindow.test = function(){\n    console.log(&#39;1111&#39;)\n}\n</code></pre><p>模块化库（只能工作在模块加载器的环境下）</p>\n<ul>\n<li>无条件的调用require或define</li>\n<li>像import * as a from ‘b’; or export c;这样的声明</li>\n<li>赋值给exports或module.exports</li>\n</ul>\n<p>UMD模块是指那些既可以作为模块使用（通过导入）又可以作为全局（在没有模块加载器的环境里）使用的模块</p>\n<pre><code>import moment = require(&quot;moment&quot;);\nconsole.log(moment.format());\n</code></pre><p>在浏览器环境内也可以这样使用</p>\n<pre><code>console.log(moment.format());</code></pre><p>识别UMD库</p>\n<pre><code>(function (root, factory) {\n    if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {\n        define([&quot;libName&quot;], factory);\n    } else if (typeof module === &quot;object&quot; &amp;&amp; module.exports) {\n        module.exports = factory(require(&quot;libName&quot;));\n    } else {\n        root.returnExports = factory(root.libName);\n    }\n}(this, function (b) {}))</code></pre><h3 id=\"使用依赖\"><a href=\"#使用依赖\" class=\"headerlink\" title=\"使用依赖\"></a>使用依赖</h3><p>依赖全局库</p>\n<pre><code>/// &lt;reference types=&quot;someLib&quot; /&gt;\n\nfunction getThing(): someLib.thing;</code></pre><p>依赖模块</p>\n<pre><code>import * as moment from &quot;moment&quot;;\n\nfunction getThing(): moment;</code></pre><p>依赖UMD库</p>\n<pre><code>// &lt;reference types=&quot;moment&quot; /&gt;\n\nfunction getThing(): moment;</code></pre><p>如果你的模块或UMD库依赖于一个UMD库</p>\n<p>不要使用/// &lt;reference指令去声明UMD库的依赖！</p>\n<pre><code>import * as someLib from &#39;someLib&#39;;\n</code></pre><h3 id=\"防止命名冲突\"><a href=\"#防止命名冲突\" class=\"headerlink\" title=\"防止命名冲突\"></a>防止命名冲突</h3><p>在书写全局声明文件时，使用库定义的全局变量名来声明命名空间类型</p>\n<pre><code>declare namespace cats {\n    interface KittySettings { }\n}</code></pre><h3 id=\"定义全局库模版\"><a href=\"#定义全局库模版\" class=\"headerlink\" title=\"定义全局库模版\"></a>定义全局库模版</h3><p>模版文件<a href=\"global.d.ts.md\"> global.d.ts </a>定义了myLib库作为例子</p>\n<h3 id=\"定义模块化库模版\"><a href=\"#定义模块化库模版\" class=\"headerlink\" title=\"定义模块化库模版\"></a>定义模块化库模版</h3><p>针对模块有三种可用的模块， module.d.ts, module-class.d.ts and module-fun</p>\n<p><a href=\"module.d.ts.md\"> module.d.ts </a> 作为函数调用</p>\n<pre><code>var x = require(&quot;foo&quot;);\n// Note: calling &#39;x&#39; as a function\nvar y = x(42);\n</code></pre><p><a href=\"module-class.d.ts.md\">module-class.d.ts </a>使用new来构造调用</p>\n<pre><code>var x = require(&quot;bar&quot;);\n// Note: using &#39;new&#39; operator on the imported variable\nvar y = new x(&quot;hello&quot;);\n</code></pre><p>如果模块不能被调用或构造，使用<a href=\"module.d.ts.md\"> module.d.ts </a>文件</p>\n<h3 id=\"使用库\"><a href=\"#使用库\" class=\"headerlink\" title=\"使用库\"></a>使用库</h3><p>在TypeScript 2.0以上的版本，获取类型声明文件只需要使用npm。</p>\n<pre><code>npm install --save @types/lodash\n\nimport * as _ from &quot;lodash&quot;;\n\n_.padStart(&quot;Hello TypeScript!&quot;, 20, &quot; &quot;);</code></pre><p>如果npm包没有包含它的声明文件，那就必须下载相应的@types包</p>\n<p>大多数类型声明包的名字总是与它们在npm上的包的名字相同，但是有@types/前缀</p>\n<p>查找更多typeScript 库请前往 <a href=\"https://aka.ms/types\" target=\"_blank\" rel=\"noopener\">https://aka.ms/types</a></p>\n"},{"title":"装饰器","date":"2019-07-18T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n装饰器是一种为类声明和成员添加注释和元编程语法的方法，用于在编译时对类、类的方法、类的属性、类的方法的参数进行处理，通俗的讲就是在原有代码外层包装了一层处理逻辑，这样就可以在不改变原方法、函数等逻辑功能的基础上增加额外的处理行为\n\n### **使用装饰器**\n\n要启用装饰器功能需要开始experimentalDecorators选项，两种方式\n\n命令行\n```\ntsc --target ES5 --experimentalDecorators\n```\n\ntsconfig.json配置\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"experimentalDecorators\": true\n    }\n}\n```\n\n### **装饰器的简单应用**\n\n定义一个装饰器\n\n```\nfunction people (target) {\n  console.log(target)\n}\n\n```\n\n在类中使用装饰器（@Decorator的语法是通过 @ 符号后边跟一个装饰器函数的引用）\n\n```\n@people\nclass People {\n  constructor(){}\n} \n```\n\n### 装饰器工厂\n\n解决在类中调用装饰器传参数的场景\n\n```\n// 装饰器工厂\nfunction people(name : string) {   \n  // 装饰器\n  return function(target){       \n    console.log(target);\n  }\n}\n\n// 调用装饰器工厂\n@people('zhangsan')\nclass People{\n  constructor(){}\n} \n```\n\n### 多个装饰器应用\n\n当在一个类上由多个装饰器调用的时候，类似于<a href=\"functionalCombination.md\">函数组合</a>\n\n定义多个装饰器\n\n```\nfunction decorator1() {\n  console.log(\"decorator1(): start\");\n  return function (target) {\n    console.log(\"decorator1(): end\");\n  }\n}\n\nfunction decorator2() {\n    console.log(\"decorator2(): start\");\n    return function (target) {\n      console.log(\"decorator2(): end\");\n    }\n}\n```\n\n调用装饰器\n```\nclass C {\n  @decorator1()\n  @decorator2()\n  method() {}\n}\n```\n\n输出结果为(可以看作组合函数调用 decorator1(decorator2()))\n\n```\ndecorator1(): start\ndecorator2(): start\ndecorator2(): end\ndecorator1(): end\n```\n\n### 类装饰器（Class）\n\n- 类装饰器应用于类的构造函数，用于观察，修改或替换类定义 \n- 类会在class定义前调用，如果函数有返回值，它将使用提供的构造函数替换之前的构造函数\n- 函数接收一个参数 `constructor` 之前的构造函数\n- 如果返回新的构造函数，则必须维护原始原型\n\n我们定义一个类，继承原有的类并对这个类增加一些属性\n\n```\n// 定义类装饰器\nfunction personName<T extends {new(...args:any[]):{}}>(constructor:T){\n  return class extends constructor {\n    name = \"zhangsan\";\n  }\n}\n\n// 使用类装饰器\n@personName\nclass Person {\n public name: string;\n  constructor (name: string) {\n    this.name = name\n    console.log(`Hi, my name is ${this.name}`) // Hi, my name is wangwu\n  }\n}\n\nconsole.log(new Person('wangwu')) // class_1 {name: \"zhangsan\",__proto__:Person}\n```\n\n### 方法装饰器\n\n\n方法，属性，get、set访问器，都可以认为是类成员。所以被分为了Method Decorator、Accessor Decorator和Property Decorator 这三个参数 \n\n\n方法装饰只是一个方法声明之前声明，方法装饰器不能用于声明文件，重载或任何其他环境上下文（例如declare类中）\n\n方法装饰器的表达式将在运行时作为函数调用，具有以下三个参数：\n- 如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型\n- 装饰器挂载的成员名称\n- 方法成员的属性描述对象（Object.getOwnPropertyDescriptor 的返回值）\n\n\n\n所谓的访问器也就是有 get set 前缀的函数，方法是控制属性的赋值及取值，访问器装饰器和方法装饰器一样因为和下面要说到的属性装饰器一样都是类的成员具有三个参数\n\nMethod Decorator、Accessor Decorator和Property Decorator\n使用方法装饰器\n\n```\nclass Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n```\n```\nfunction enumerable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor{\n    descriptor.enumerable = value;\n  };\n}\n```\n\n明确一下静态成员与实例成员在返回值上的区别\n\n```\nclass Func {\n\n  // 静态成员\n  static method1 () {}\n  static method2 = () => {}\n  \n  // 实例成员\n  method3 () {}\n  method4 = () => {}\n}\n\n```\n\n静态成员 method1 和 method2 都是定义在 Func 构造函数上，method3 和 method4 区别在于 method3 定义在原型链之上 method4 只有在 Func 类实例化对象之后才有，转化ES5代码之后的样子\n\n```\nvar Func = /** @class */ (function () {\n    function Func() {\n      this.method4 = function () { };\n    }\n    // 静态成员\n    Func.method1 = function () { };\n    // 实例成员\n    Func.prototype.method3 = function () { };\n    Func.method2 = function () { };\n    return Func;\n}());\n```\n通过函数可以证明上述论点装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型 而且 method4 在实例化之前是一个不存在的属性所以没有 descriptor，就是为什么TS在针对Property Decorator不传递第三个参数的原因\n\n\n### 访问器装饰器（get set）\n访问器装饰器就是有get、set前缀的函数，用于控制属性的赋值及取值操作。上面说到和方法装饰器一样有三个参数\n\n定义装饰器三个参数\n\n```\nfunction configurable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.configurable = value;\n  };\n}\n\n```\n\n定义带有get，set的类\n\n```\nclass Point {\n  private _x: number;\n  private _y: number;\n  constructor(x: number, y: number) {\n      this._x = x;\n      this._y = y;\n  }\n\n  @configurable(false)\n  get x() { return this._x; }\n\n  @configurable(false)\n  get y() { return this._y; }\n}\n```\n\n### 属性装饰器\n\n属性装饰器由于没有返回 descriptor 所以只有两个参数，没有方法成员的属性描述对象，如果想要修改某一个静态属性，可以通过 Object.getOwnPropertyDescriptor 获取 descriptor\n\n\n*注意在TypeScript中如何初始化属性修饰符，因此不提供属性描述符作为属性修饰符的参数。这是因为当定义原型的成员时，当前没有机制来描述实例属性，也无法观察或修改属性的初始化器。返回值也被忽略。因此，属性装饰器只能用于观察已为类声明特定名称的属性。*\n\n定义类\n```\nclass Point {\n  @configurable\n  static x = 1;\n}\n```\n\n定义属性装饰器获取类属性上的值进行更改\n```\nfunction configurable(target,x) {\n  let descriptor = Object.getOwnPropertyDescriptor(target, x)\n  Object.defineProperty(target, x, {\n    ...descriptor,\n    value: 2\n  })\n}\nconsole.log(Point.x) // 2 \n```\n\n也可以使用 reflect-metadata 这个库它主要用来在声明的时候添加和读取元数据\n使用的时候需要安装\n\n```\nnpm i reflect-metadata --save\n```\n之后在tsconfig.json 中配置emitDecoratorMetadata选项\n\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n```\n\n\n定义类\n```\nclass Greeter {\n    @format(\"Hello, %s\")\n    greeting: string;\n\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        let formatString = getFormat(this, \"greeting\");\n        return formatString.replace(\"%s\", this.greeting);\n    }\n}\n```\n\n// 利用 reflect-metadata 定义装饰器\n\nReflect.metadata 当作 Decorator 使用，当修饰类时，在类上添加元数据，当修饰类属性时，在类原型的属性上添加元数据\n\n\nReflect.getMetadata 能获取属性\n\n```\nimport \"reflect-metadata\";\n\nconst formatMetadataKey = Symbol(\"format\");\nfunction format(formatString: string) {\n  return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}\n```\n\n### 参数装饰器\n\n参数装饰器和属性装饰器一样都是在函数运行时调用的，它接收3个参数\n\n- 如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型\n- 参数所处的函数名称\n- 参数在函数中形参中的位置\n\n\n```\nconst obj = []\n\nfunction require (value : string) {\n  return function (target : any , propertyKey : string ,parameterIndex : number) {\n    obj[parameterIndex] = value\n  }\n}\n\nclass Hello{\n  method(@require('lisi') name : string){\n    console.log(name)\n  }\n}\n\nconsole.log(obj) // ['lisi']\n```\n\n","source":"_posts/typescript/decorators.md","raw":"---\ntitle: 装饰器\ndate: 2019-07-18 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n装饰器是一种为类声明和成员添加注释和元编程语法的方法，用于在编译时对类、类的方法、类的属性、类的方法的参数进行处理，通俗的讲就是在原有代码外层包装了一层处理逻辑，这样就可以在不改变原方法、函数等逻辑功能的基础上增加额外的处理行为\n\n### **使用装饰器**\n\n要启用装饰器功能需要开始experimentalDecorators选项，两种方式\n\n命令行\n```\ntsc --target ES5 --experimentalDecorators\n```\n\ntsconfig.json配置\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"experimentalDecorators\": true\n    }\n}\n```\n\n### **装饰器的简单应用**\n\n定义一个装饰器\n\n```\nfunction people (target) {\n  console.log(target)\n}\n\n```\n\n在类中使用装饰器（@Decorator的语法是通过 @ 符号后边跟一个装饰器函数的引用）\n\n```\n@people\nclass People {\n  constructor(){}\n} \n```\n\n### 装饰器工厂\n\n解决在类中调用装饰器传参数的场景\n\n```\n// 装饰器工厂\nfunction people(name : string) {   \n  // 装饰器\n  return function(target){       \n    console.log(target);\n  }\n}\n\n// 调用装饰器工厂\n@people('zhangsan')\nclass People{\n  constructor(){}\n} \n```\n\n### 多个装饰器应用\n\n当在一个类上由多个装饰器调用的时候，类似于<a href=\"functionalCombination.md\">函数组合</a>\n\n定义多个装饰器\n\n```\nfunction decorator1() {\n  console.log(\"decorator1(): start\");\n  return function (target) {\n    console.log(\"decorator1(): end\");\n  }\n}\n\nfunction decorator2() {\n    console.log(\"decorator2(): start\");\n    return function (target) {\n      console.log(\"decorator2(): end\");\n    }\n}\n```\n\n调用装饰器\n```\nclass C {\n  @decorator1()\n  @decorator2()\n  method() {}\n}\n```\n\n输出结果为(可以看作组合函数调用 decorator1(decorator2()))\n\n```\ndecorator1(): start\ndecorator2(): start\ndecorator2(): end\ndecorator1(): end\n```\n\n### 类装饰器（Class）\n\n- 类装饰器应用于类的构造函数，用于观察，修改或替换类定义 \n- 类会在class定义前调用，如果函数有返回值，它将使用提供的构造函数替换之前的构造函数\n- 函数接收一个参数 `constructor` 之前的构造函数\n- 如果返回新的构造函数，则必须维护原始原型\n\n我们定义一个类，继承原有的类并对这个类增加一些属性\n\n```\n// 定义类装饰器\nfunction personName<T extends {new(...args:any[]):{}}>(constructor:T){\n  return class extends constructor {\n    name = \"zhangsan\";\n  }\n}\n\n// 使用类装饰器\n@personName\nclass Person {\n public name: string;\n  constructor (name: string) {\n    this.name = name\n    console.log(`Hi, my name is ${this.name}`) // Hi, my name is wangwu\n  }\n}\n\nconsole.log(new Person('wangwu')) // class_1 {name: \"zhangsan\",__proto__:Person}\n```\n\n### 方法装饰器\n\n\n方法，属性，get、set访问器，都可以认为是类成员。所以被分为了Method Decorator、Accessor Decorator和Property Decorator 这三个参数 \n\n\n方法装饰只是一个方法声明之前声明，方法装饰器不能用于声明文件，重载或任何其他环境上下文（例如declare类中）\n\n方法装饰器的表达式将在运行时作为函数调用，具有以下三个参数：\n- 如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型\n- 装饰器挂载的成员名称\n- 方法成员的属性描述对象（Object.getOwnPropertyDescriptor 的返回值）\n\n\n\n所谓的访问器也就是有 get set 前缀的函数，方法是控制属性的赋值及取值，访问器装饰器和方法装饰器一样因为和下面要说到的属性装饰器一样都是类的成员具有三个参数\n\nMethod Decorator、Accessor Decorator和Property Decorator\n使用方法装饰器\n\n```\nclass Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n```\n```\nfunction enumerable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor{\n    descriptor.enumerable = value;\n  };\n}\n```\n\n明确一下静态成员与实例成员在返回值上的区别\n\n```\nclass Func {\n\n  // 静态成员\n  static method1 () {}\n  static method2 = () => {}\n  \n  // 实例成员\n  method3 () {}\n  method4 = () => {}\n}\n\n```\n\n静态成员 method1 和 method2 都是定义在 Func 构造函数上，method3 和 method4 区别在于 method3 定义在原型链之上 method4 只有在 Func 类实例化对象之后才有，转化ES5代码之后的样子\n\n```\nvar Func = /** @class */ (function () {\n    function Func() {\n      this.method4 = function () { };\n    }\n    // 静态成员\n    Func.method1 = function () { };\n    // 实例成员\n    Func.prototype.method3 = function () { };\n    Func.method2 = function () { };\n    return Func;\n}());\n```\n通过函数可以证明上述论点装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型 而且 method4 在实例化之前是一个不存在的属性所以没有 descriptor，就是为什么TS在针对Property Decorator不传递第三个参数的原因\n\n\n### 访问器装饰器（get set）\n访问器装饰器就是有get、set前缀的函数，用于控制属性的赋值及取值操作。上面说到和方法装饰器一样有三个参数\n\n定义装饰器三个参数\n\n```\nfunction configurable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.configurable = value;\n  };\n}\n\n```\n\n定义带有get，set的类\n\n```\nclass Point {\n  private _x: number;\n  private _y: number;\n  constructor(x: number, y: number) {\n      this._x = x;\n      this._y = y;\n  }\n\n  @configurable(false)\n  get x() { return this._x; }\n\n  @configurable(false)\n  get y() { return this._y; }\n}\n```\n\n### 属性装饰器\n\n属性装饰器由于没有返回 descriptor 所以只有两个参数，没有方法成员的属性描述对象，如果想要修改某一个静态属性，可以通过 Object.getOwnPropertyDescriptor 获取 descriptor\n\n\n*注意在TypeScript中如何初始化属性修饰符，因此不提供属性描述符作为属性修饰符的参数。这是因为当定义原型的成员时，当前没有机制来描述实例属性，也无法观察或修改属性的初始化器。返回值也被忽略。因此，属性装饰器只能用于观察已为类声明特定名称的属性。*\n\n定义类\n```\nclass Point {\n  @configurable\n  static x = 1;\n}\n```\n\n定义属性装饰器获取类属性上的值进行更改\n```\nfunction configurable(target,x) {\n  let descriptor = Object.getOwnPropertyDescriptor(target, x)\n  Object.defineProperty(target, x, {\n    ...descriptor,\n    value: 2\n  })\n}\nconsole.log(Point.x) // 2 \n```\n\n也可以使用 reflect-metadata 这个库它主要用来在声明的时候添加和读取元数据\n使用的时候需要安装\n\n```\nnpm i reflect-metadata --save\n```\n之后在tsconfig.json 中配置emitDecoratorMetadata选项\n\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n```\n\n\n定义类\n```\nclass Greeter {\n    @format(\"Hello, %s\")\n    greeting: string;\n\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        let formatString = getFormat(this, \"greeting\");\n        return formatString.replace(\"%s\", this.greeting);\n    }\n}\n```\n\n// 利用 reflect-metadata 定义装饰器\n\nReflect.metadata 当作 Decorator 使用，当修饰类时，在类上添加元数据，当修饰类属性时，在类原型的属性上添加元数据\n\n\nReflect.getMetadata 能获取属性\n\n```\nimport \"reflect-metadata\";\n\nconst formatMetadataKey = Symbol(\"format\");\nfunction format(formatString: string) {\n  return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}\n```\n\n### 参数装饰器\n\n参数装饰器和属性装饰器一样都是在函数运行时调用的，它接收3个参数\n\n- 如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型\n- 参数所处的函数名称\n- 参数在函数中形参中的位置\n\n\n```\nconst obj = []\n\nfunction require (value : string) {\n  return function (target : any , propertyKey : string ,parameterIndex : number) {\n    obj[parameterIndex] = value\n  }\n}\n\nclass Hello{\n  method(@require('lisi') name : string){\n    console.log(name)\n  }\n}\n\nconsole.log(obj) // ['lisi']\n```\n\n","slug":"typescript/decorators","published":1,"updated":"2019-08-26T16:46:27.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9c004mkuu6zg3vbsvv","content":"<p>装饰器是一种为类声明和成员添加注释和元编程语法的方法，用于在编译时对类、类的方法、类的属性、类的方法的参数进行处理，通俗的讲就是在原有代码外层包装了一层处理逻辑，这样就可以在不改变原方法、函数等逻辑功能的基础上增加额外的处理行为</p>\n<h3 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a><strong>使用装饰器</strong></h3><p>要启用装饰器功能需要开始experimentalDecorators选项，两种方式</p>\n<p>命令行</p>\n<pre><code>tsc --target ES5 --experimentalDecorators</code></pre><p>tsconfig.json配置</p>\n<pre><code>{\n    &quot;compilerOptions&quot;: {\n        &quot;target&quot;: &quot;ES5&quot;,\n        &quot;experimentalDecorators&quot;: true\n    }\n}</code></pre><h3 id=\"装饰器的简单应用\"><a href=\"#装饰器的简单应用\" class=\"headerlink\" title=\"装饰器的简单应用\"></a><strong>装饰器的简单应用</strong></h3><p>定义一个装饰器</p>\n<pre><code>function people (target) {\n  console.log(target)\n}\n</code></pre><p>在类中使用装饰器（@Decorator的语法是通过 @ 符号后边跟一个装饰器函数的引用）</p>\n<pre><code>@people\nclass People {\n  constructor(){}\n} </code></pre><h3 id=\"装饰器工厂\"><a href=\"#装饰器工厂\" class=\"headerlink\" title=\"装饰器工厂\"></a>装饰器工厂</h3><p>解决在类中调用装饰器传参数的场景</p>\n<pre><code>// 装饰器工厂\nfunction people(name : string) {   \n  // 装饰器\n  return function(target){       \n    console.log(target);\n  }\n}\n\n// 调用装饰器工厂\n@people(&#39;zhangsan&#39;)\nclass People{\n  constructor(){}\n} </code></pre><h3 id=\"多个装饰器应用\"><a href=\"#多个装饰器应用\" class=\"headerlink\" title=\"多个装饰器应用\"></a>多个装饰器应用</h3><p>当在一个类上由多个装饰器调用的时候，类似于<a href=\"functionalCombination.md\">函数组合</a></p>\n<p>定义多个装饰器</p>\n<pre><code>function decorator1() {\n  console.log(&quot;decorator1(): start&quot;);\n  return function (target) {\n    console.log(&quot;decorator1(): end&quot;);\n  }\n}\n\nfunction decorator2() {\n    console.log(&quot;decorator2(): start&quot;);\n    return function (target) {\n      console.log(&quot;decorator2(): end&quot;);\n    }\n}</code></pre><p>调用装饰器</p>\n<pre><code>class C {\n  @decorator1()\n  @decorator2()\n  method() {}\n}</code></pre><p>输出结果为(可以看作组合函数调用 decorator1(decorator2()))</p>\n<pre><code>decorator1(): start\ndecorator2(): start\ndecorator2(): end\ndecorator1(): end</code></pre><h3 id=\"类装饰器（Class）\"><a href=\"#类装饰器（Class）\" class=\"headerlink\" title=\"类装饰器（Class）\"></a>类装饰器（Class）</h3><ul>\n<li>类装饰器应用于类的构造函数，用于观察，修改或替换类定义 </li>\n<li>类会在class定义前调用，如果函数有返回值，它将使用提供的构造函数替换之前的构造函数</li>\n<li>函数接收一个参数 <code>constructor</code> 之前的构造函数</li>\n<li>如果返回新的构造函数，则必须维护原始原型</li>\n</ul>\n<p>我们定义一个类，继承原有的类并对这个类增加一些属性</p>\n<pre><code>// 定义类装饰器\nfunction personName&lt;T extends {new(...args:any[]):{}}&gt;(constructor:T){\n  return class extends constructor {\n    name = &quot;zhangsan&quot;;\n  }\n}\n\n// 使用类装饰器\n@personName\nclass Person {\n public name: string;\n  constructor (name: string) {\n    this.name = name\n    console.log(`Hi, my name is ${this.name}`) // Hi, my name is wangwu\n  }\n}\n\nconsole.log(new Person(&#39;wangwu&#39;)) // class_1 {name: &quot;zhangsan&quot;,__proto__:Person}</code></pre><h3 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h3><p>方法，属性，get、set访问器，都可以认为是类成员。所以被分为了Method Decorator、Accessor Decorator和Property Decorator 这三个参数 </p>\n<p>方法装饰只是一个方法声明之前声明，方法装饰器不能用于声明文件，重载或任何其他环境上下文（例如declare类中）</p>\n<p>方法装饰器的表达式将在运行时作为函数调用，具有以下三个参数：</p>\n<ul>\n<li>如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型</li>\n<li>装饰器挂载的成员名称</li>\n<li>方法成员的属性描述对象（Object.getOwnPropertyDescriptor 的返回值）</li>\n</ul>\n<p>所谓的访问器也就是有 get set 前缀的函数，方法是控制属性的赋值及取值，访问器装饰器和方法装饰器一样因为和下面要说到的属性装饰器一样都是类的成员具有三个参数</p>\n<p>Method Decorator、Accessor Decorator和Property Decorator<br>使用方法装饰器</p>\n<pre><code>class Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return &quot;Hello, &quot; + this.greeting;\n  }\n}</code></pre><pre><code>function enumerable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor{\n    descriptor.enumerable = value;\n  };\n}</code></pre><p>明确一下静态成员与实例成员在返回值上的区别</p>\n<pre><code>class Func {\n\n  // 静态成员\n  static method1 () {}\n  static method2 = () =&gt; {}\n\n  // 实例成员\n  method3 () {}\n  method4 = () =&gt; {}\n}\n</code></pre><p>静态成员 method1 和 method2 都是定义在 Func 构造函数上，method3 和 method4 区别在于 method3 定义在原型链之上 method4 只有在 Func 类实例化对象之后才有，转化ES5代码之后的样子</p>\n<pre><code>var Func = /** @class */ (function () {\n    function Func() {\n      this.method4 = function () { };\n    }\n    // 静态成员\n    Func.method1 = function () { };\n    // 实例成员\n    Func.prototype.method3 = function () { };\n    Func.method2 = function () { };\n    return Func;\n}());</code></pre><p>通过函数可以证明上述论点装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型 而且 method4 在实例化之前是一个不存在的属性所以没有 descriptor，就是为什么TS在针对Property Decorator不传递第三个参数的原因</p>\n<h3 id=\"访问器装饰器（get-set）\"><a href=\"#访问器装饰器（get-set）\" class=\"headerlink\" title=\"访问器装饰器（get set）\"></a>访问器装饰器（get set）</h3><p>访问器装饰器就是有get、set前缀的函数，用于控制属性的赋值及取值操作。上面说到和方法装饰器一样有三个参数</p>\n<p>定义装饰器三个参数</p>\n<pre><code>function configurable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.configurable = value;\n  };\n}\n</code></pre><p>定义带有get，set的类</p>\n<pre><code>class Point {\n  private _x: number;\n  private _y: number;\n  constructor(x: number, y: number) {\n      this._x = x;\n      this._y = y;\n  }\n\n  @configurable(false)\n  get x() { return this._x; }\n\n  @configurable(false)\n  get y() { return this._y; }\n}</code></pre><h3 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h3><p>属性装饰器由于没有返回 descriptor 所以只有两个参数，没有方法成员的属性描述对象，如果想要修改某一个静态属性，可以通过 Object.getOwnPropertyDescriptor 获取 descriptor</p>\n<p><em>注意在TypeScript中如何初始化属性修饰符，因此不提供属性描述符作为属性修饰符的参数。这是因为当定义原型的成员时，当前没有机制来描述实例属性，也无法观察或修改属性的初始化器。返回值也被忽略。因此，属性装饰器只能用于观察已为类声明特定名称的属性。</em></p>\n<p>定义类</p>\n<pre><code>class Point {\n  @configurable\n  static x = 1;\n}</code></pre><p>定义属性装饰器获取类属性上的值进行更改</p>\n<pre><code>function configurable(target,x) {\n  let descriptor = Object.getOwnPropertyDescriptor(target, x)\n  Object.defineProperty(target, x, {\n    ...descriptor,\n    value: 2\n  })\n}\nconsole.log(Point.x) // 2 </code></pre><p>也可以使用 reflect-metadata 这个库它主要用来在声明的时候添加和读取元数据<br>使用的时候需要安装</p>\n<pre><code>npm i reflect-metadata --save</code></pre><p>之后在tsconfig.json 中配置emitDecoratorMetadata选项</p>\n<pre><code>{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES5&quot;,\n    &quot;experimentalDecorators&quot;: true,\n    &quot;emitDecoratorMetadata&quot;: true\n  }\n}</code></pre><p>定义类</p>\n<pre><code>class Greeter {\n    @format(&quot;Hello, %s&quot;)\n    greeting: string;\n\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        let formatString = getFormat(this, &quot;greeting&quot;);\n        return formatString.replace(&quot;%s&quot;, this.greeting);\n    }\n}</code></pre><p>// 利用 reflect-metadata 定义装饰器</p>\n<p>Reflect.metadata 当作 Decorator 使用，当修饰类时，在类上添加元数据，当修饰类属性时，在类原型的属性上添加元数据</p>\n<p>Reflect.getMetadata 能获取属性</p>\n<pre><code>import &quot;reflect-metadata&quot;;\n\nconst formatMetadataKey = Symbol(&quot;format&quot;);\nfunction format(formatString: string) {\n  return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}</code></pre><h3 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h3><p>参数装饰器和属性装饰器一样都是在函数运行时调用的，它接收3个参数</p>\n<ul>\n<li>如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型</li>\n<li>参数所处的函数名称</li>\n<li>参数在函数中形参中的位置</li>\n</ul>\n<pre><code>const obj = []\n\nfunction require (value : string) {\n  return function (target : any , propertyKey : string ,parameterIndex : number) {\n    obj[parameterIndex] = value\n  }\n}\n\nclass Hello{\n  method(@require(&#39;lisi&#39;) name : string){\n    console.log(name)\n  }\n}\n\nconsole.log(obj) // [&#39;lisi&#39;]</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>装饰器是一种为类声明和成员添加注释和元编程语法的方法，用于在编译时对类、类的方法、类的属性、类的方法的参数进行处理，通俗的讲就是在原有代码外层包装了一层处理逻辑，这样就可以在不改变原方法、函数等逻辑功能的基础上增加额外的处理行为</p>\n<h3 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a><strong>使用装饰器</strong></h3><p>要启用装饰器功能需要开始experimentalDecorators选项，两种方式</p>\n<p>命令行</p>\n<pre><code>tsc --target ES5 --experimentalDecorators</code></pre><p>tsconfig.json配置</p>\n<pre><code>{\n    &quot;compilerOptions&quot;: {\n        &quot;target&quot;: &quot;ES5&quot;,\n        &quot;experimentalDecorators&quot;: true\n    }\n}</code></pre><h3 id=\"装饰器的简单应用\"><a href=\"#装饰器的简单应用\" class=\"headerlink\" title=\"装饰器的简单应用\"></a><strong>装饰器的简单应用</strong></h3><p>定义一个装饰器</p>\n<pre><code>function people (target) {\n  console.log(target)\n}\n</code></pre><p>在类中使用装饰器（@Decorator的语法是通过 @ 符号后边跟一个装饰器函数的引用）</p>\n<pre><code>@people\nclass People {\n  constructor(){}\n} </code></pre><h3 id=\"装饰器工厂\"><a href=\"#装饰器工厂\" class=\"headerlink\" title=\"装饰器工厂\"></a>装饰器工厂</h3><p>解决在类中调用装饰器传参数的场景</p>\n<pre><code>// 装饰器工厂\nfunction people(name : string) {   \n  // 装饰器\n  return function(target){       \n    console.log(target);\n  }\n}\n\n// 调用装饰器工厂\n@people(&#39;zhangsan&#39;)\nclass People{\n  constructor(){}\n} </code></pre><h3 id=\"多个装饰器应用\"><a href=\"#多个装饰器应用\" class=\"headerlink\" title=\"多个装饰器应用\"></a>多个装饰器应用</h3><p>当在一个类上由多个装饰器调用的时候，类似于<a href=\"functionalCombination.md\">函数组合</a></p>\n<p>定义多个装饰器</p>\n<pre><code>function decorator1() {\n  console.log(&quot;decorator1(): start&quot;);\n  return function (target) {\n    console.log(&quot;decorator1(): end&quot;);\n  }\n}\n\nfunction decorator2() {\n    console.log(&quot;decorator2(): start&quot;);\n    return function (target) {\n      console.log(&quot;decorator2(): end&quot;);\n    }\n}</code></pre><p>调用装饰器</p>\n<pre><code>class C {\n  @decorator1()\n  @decorator2()\n  method() {}\n}</code></pre><p>输出结果为(可以看作组合函数调用 decorator1(decorator2()))</p>\n<pre><code>decorator1(): start\ndecorator2(): start\ndecorator2(): end\ndecorator1(): end</code></pre><h3 id=\"类装饰器（Class）\"><a href=\"#类装饰器（Class）\" class=\"headerlink\" title=\"类装饰器（Class）\"></a>类装饰器（Class）</h3><ul>\n<li>类装饰器应用于类的构造函数，用于观察，修改或替换类定义 </li>\n<li>类会在class定义前调用，如果函数有返回值，它将使用提供的构造函数替换之前的构造函数</li>\n<li>函数接收一个参数 <code>constructor</code> 之前的构造函数</li>\n<li>如果返回新的构造函数，则必须维护原始原型</li>\n</ul>\n<p>我们定义一个类，继承原有的类并对这个类增加一些属性</p>\n<pre><code>// 定义类装饰器\nfunction personName&lt;T extends {new(...args:any[]):{}}&gt;(constructor:T){\n  return class extends constructor {\n    name = &quot;zhangsan&quot;;\n  }\n}\n\n// 使用类装饰器\n@personName\nclass Person {\n public name: string;\n  constructor (name: string) {\n    this.name = name\n    console.log(`Hi, my name is ${this.name}`) // Hi, my name is wangwu\n  }\n}\n\nconsole.log(new Person(&#39;wangwu&#39;)) // class_1 {name: &quot;zhangsan&quot;,__proto__:Person}</code></pre><h3 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h3><p>方法，属性，get、set访问器，都可以认为是类成员。所以被分为了Method Decorator、Accessor Decorator和Property Decorator 这三个参数 </p>\n<p>方法装饰只是一个方法声明之前声明，方法装饰器不能用于声明文件，重载或任何其他环境上下文（例如declare类中）</p>\n<p>方法装饰器的表达式将在运行时作为函数调用，具有以下三个参数：</p>\n<ul>\n<li>如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型</li>\n<li>装饰器挂载的成员名称</li>\n<li>方法成员的属性描述对象（Object.getOwnPropertyDescriptor 的返回值）</li>\n</ul>\n<p>所谓的访问器也就是有 get set 前缀的函数，方法是控制属性的赋值及取值，访问器装饰器和方法装饰器一样因为和下面要说到的属性装饰器一样都是类的成员具有三个参数</p>\n<p>Method Decorator、Accessor Decorator和Property Decorator<br>使用方法装饰器</p>\n<pre><code>class Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return &quot;Hello, &quot; + this.greeting;\n  }\n}</code></pre><pre><code>function enumerable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor{\n    descriptor.enumerable = value;\n  };\n}</code></pre><p>明确一下静态成员与实例成员在返回值上的区别</p>\n<pre><code>class Func {\n\n  // 静态成员\n  static method1 () {}\n  static method2 = () =&gt; {}\n\n  // 实例成员\n  method3 () {}\n  method4 = () =&gt; {}\n}\n</code></pre><p>静态成员 method1 和 method2 都是定义在 Func 构造函数上，method3 和 method4 区别在于 method3 定义在原型链之上 method4 只有在 Func 类实例化对象之后才有，转化ES5代码之后的样子</p>\n<pre><code>var Func = /** @class */ (function () {\n    function Func() {\n      this.method4 = function () { };\n    }\n    // 静态成员\n    Func.method1 = function () { };\n    // 实例成员\n    Func.prototype.method3 = function () { };\n    Func.method2 = function () { };\n    return Func;\n}());</code></pre><p>通过函数可以证明上述论点装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型 而且 method4 在实例化之前是一个不存在的属性所以没有 descriptor，就是为什么TS在针对Property Decorator不传递第三个参数的原因</p>\n<h3 id=\"访问器装饰器（get-set）\"><a href=\"#访问器装饰器（get-set）\" class=\"headerlink\" title=\"访问器装饰器（get set）\"></a>访问器装饰器（get set）</h3><p>访问器装饰器就是有get、set前缀的函数，用于控制属性的赋值及取值操作。上面说到和方法装饰器一样有三个参数</p>\n<p>定义装饰器三个参数</p>\n<pre><code>function configurable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.configurable = value;\n  };\n}\n</code></pre><p>定义带有get，set的类</p>\n<pre><code>class Point {\n  private _x: number;\n  private _y: number;\n  constructor(x: number, y: number) {\n      this._x = x;\n      this._y = y;\n  }\n\n  @configurable(false)\n  get x() { return this._x; }\n\n  @configurable(false)\n  get y() { return this._y; }\n}</code></pre><h3 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h3><p>属性装饰器由于没有返回 descriptor 所以只有两个参数，没有方法成员的属性描述对象，如果想要修改某一个静态属性，可以通过 Object.getOwnPropertyDescriptor 获取 descriptor</p>\n<p><em>注意在TypeScript中如何初始化属性修饰符，因此不提供属性描述符作为属性修饰符的参数。这是因为当定义原型的成员时，当前没有机制来描述实例属性，也无法观察或修改属性的初始化器。返回值也被忽略。因此，属性装饰器只能用于观察已为类声明特定名称的属性。</em></p>\n<p>定义类</p>\n<pre><code>class Point {\n  @configurable\n  static x = 1;\n}</code></pre><p>定义属性装饰器获取类属性上的值进行更改</p>\n<pre><code>function configurable(target,x) {\n  let descriptor = Object.getOwnPropertyDescriptor(target, x)\n  Object.defineProperty(target, x, {\n    ...descriptor,\n    value: 2\n  })\n}\nconsole.log(Point.x) // 2 </code></pre><p>也可以使用 reflect-metadata 这个库它主要用来在声明的时候添加和读取元数据<br>使用的时候需要安装</p>\n<pre><code>npm i reflect-metadata --save</code></pre><p>之后在tsconfig.json 中配置emitDecoratorMetadata选项</p>\n<pre><code>{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES5&quot;,\n    &quot;experimentalDecorators&quot;: true,\n    &quot;emitDecoratorMetadata&quot;: true\n  }\n}</code></pre><p>定义类</p>\n<pre><code>class Greeter {\n    @format(&quot;Hello, %s&quot;)\n    greeting: string;\n\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        let formatString = getFormat(this, &quot;greeting&quot;);\n        return formatString.replace(&quot;%s&quot;, this.greeting);\n    }\n}</code></pre><p>// 利用 reflect-metadata 定义装饰器</p>\n<p>Reflect.metadata 当作 Decorator 使用，当修饰类时，在类上添加元数据，当修饰类属性时，在类原型的属性上添加元数据</p>\n<p>Reflect.getMetadata 能获取属性</p>\n<pre><code>import &quot;reflect-metadata&quot;;\n\nconst formatMetadataKey = Symbol(&quot;format&quot;);\nfunction format(formatString: string) {\n  return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n  return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}</code></pre><h3 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h3><p>参数装饰器和属性装饰器一样都是在函数运行时调用的，它接收3个参数</p>\n<ul>\n<li>如果装饰器挂载于静态成员上，则会返回构造函数，如果挂载于实例成员上则会返回类的原型</li>\n<li>参数所处的函数名称</li>\n<li>参数在函数中形参中的位置</li>\n</ul>\n<pre><code>const obj = []\n\nfunction require (value : string) {\n  return function (target : any , propertyKey : string ,parameterIndex : number) {\n    obj[parameterIndex] = value\n  }\n}\n\nclass Hello{\n  method(@require(&#39;lisi&#39;) name : string){\n    console.log(name)\n  }\n}\n\nconsole.log(obj) // [&#39;lisi&#39;]</code></pre>"},{"title":"泛型","date":"2019-05-22T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n泛型（Generics）就是不提前指定接口、变量、函数等的类型，在使用的时候再指定类型\n\n### 定义泛型 <br/>\n\n```\n// 定义类型\nfunction identity(arg: number): number {\n  return arg;\n}\n// 定义 any 类型\nfunction identity(arg: any): any {\n  return arg;\n}\n```\n\n如果所有的接口、变量、函数等都用 any 类型，那么写 TS 和写 JS 一样将失去意义，因为你可能像 JS 一样造成许多未知的错误，那么解决这样的问题我们使用一种特殊的变量T，来表示返回的内容。\n\n```\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n```\n\n### 调用泛型<br/>\n\n```\nlet output = identity<string>(\"myString\");\n```\n\n### 泛型约束<br/>\n\n在函数内部使用泛型变量的时候，因为不知道它是哪种类型，所以不能随意的操作它的属性或方法\n\n```\nfunction loggingIdentity<T>(arg: T): T {\n  console.log(arg.length);  // Error: T doesn't have .length\n  return arg;\n}\n```\n由于上面的泛型 T 中不一定包含属性.length, 所以会抛出异常。\n\n这时我们可以创建一个具有单个.length属性的接口，然后我们将使用此接口和extends关键字来表示我们的约束：\n```\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\n```\n\n上面的例子如果在调用的时候传入的参数不符合定义的约束，那么就会抛出异常\n```\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity(5) \n// Argument of type '5' is not assignable to parameter of type 'Lengthwise'\n\n```\n\n相反如果定义了正确的类型\n```\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity([1,2]) // 2\nloggingIdentity({length: 5, value: 1}) // 5\n```\n\n### 泛型接口<br/>\n\n```\n// 定义泛型结构\ninterface CreatePeopleFunc {\n  <T>(name: string, age: T): Array<T>;\n}\n\n// 创建泛型\nlet createPeople:CreatePeopleFunc;\ncreatePeople = function<T>(name: string, age: T): Array<T> {\n  let people: T[] = []\n  let temp:any = {\n    name : name,\n    age: age\n  }\n  people.push(temp)\n  return people\n}\n// 调用函数\ncreatePeople('zhangsan', 28)\n```\n上面例子我们定义了一个泛型，创建了函数，在函数内创建数组并添加了一个元素 name, age\n\n### 泛型类<br/>\n\n泛型类具有与通用接口类似的形状。泛型类<>在类名称后面的尖括号（）中有一个泛型类型参数列表\n\n```\nclass GenericNumber<T> {\n    zeroValue: T;\n    add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n```\n\n\n\n","source":"_posts/typescript/generics.md","raw":"---\ntitle: 泛型\ndate: 2019-05-22 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n泛型（Generics）就是不提前指定接口、变量、函数等的类型，在使用的时候再指定类型\n\n### 定义泛型 <br/>\n\n```\n// 定义类型\nfunction identity(arg: number): number {\n  return arg;\n}\n// 定义 any 类型\nfunction identity(arg: any): any {\n  return arg;\n}\n```\n\n如果所有的接口、变量、函数等都用 any 类型，那么写 TS 和写 JS 一样将失去意义，因为你可能像 JS 一样造成许多未知的错误，那么解决这样的问题我们使用一种特殊的变量T，来表示返回的内容。\n\n```\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n```\n\n### 调用泛型<br/>\n\n```\nlet output = identity<string>(\"myString\");\n```\n\n### 泛型约束<br/>\n\n在函数内部使用泛型变量的时候，因为不知道它是哪种类型，所以不能随意的操作它的属性或方法\n\n```\nfunction loggingIdentity<T>(arg: T): T {\n  console.log(arg.length);  // Error: T doesn't have .length\n  return arg;\n}\n```\n由于上面的泛型 T 中不一定包含属性.length, 所以会抛出异常。\n\n这时我们可以创建一个具有单个.length属性的接口，然后我们将使用此接口和extends关键字来表示我们的约束：\n```\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\n```\n\n上面的例子如果在调用的时候传入的参数不符合定义的约束，那么就会抛出异常\n```\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity(5) \n// Argument of type '5' is not assignable to parameter of type 'Lengthwise'\n\n```\n\n相反如果定义了正确的类型\n```\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity([1,2]) // 2\nloggingIdentity({length: 5, value: 1}) // 5\n```\n\n### 泛型接口<br/>\n\n```\n// 定义泛型结构\ninterface CreatePeopleFunc {\n  <T>(name: string, age: T): Array<T>;\n}\n\n// 创建泛型\nlet createPeople:CreatePeopleFunc;\ncreatePeople = function<T>(name: string, age: T): Array<T> {\n  let people: T[] = []\n  let temp:any = {\n    name : name,\n    age: age\n  }\n  people.push(temp)\n  return people\n}\n// 调用函数\ncreatePeople('zhangsan', 28)\n```\n上面例子我们定义了一个泛型，创建了函数，在函数内创建数组并添加了一个元素 name, age\n\n### 泛型类<br/>\n\n泛型类具有与通用接口类似的形状。泛型类<>在类名称后面的尖括号（）中有一个泛型类型参数列表\n\n```\nclass GenericNumber<T> {\n    zeroValue: T;\n    add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n```\n\n\n\n","slug":"typescript/generics","published":1,"updated":"2019-08-26T16:46:27.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9d004rkuu610wql5lv","content":"<p>泛型（Generics）就是不提前指定接口、变量、函数等的类型，在使用的时候再指定类型</p>\n<h3 id=\"定义泛型\"><a href=\"#定义泛型\" class=\"headerlink\" title=\"定义泛型 \"></a>定义泛型 <br></h3><pre><code>// 定义类型\nfunction identity(arg: number): number {\n  return arg;\n}\n// 定义 any 类型\nfunction identity(arg: any): any {\n  return arg;\n}</code></pre><p>如果所有的接口、变量、函数等都用 any 类型，那么写 TS 和写 JS 一样将失去意义，因为你可能像 JS 一样造成许多未知的错误，那么解决这样的问题我们使用一种特殊的变量T，来表示返回的内容。</p>\n<pre><code>function identity&lt;T&gt;(arg: T): T {\n  return arg;\n}</code></pre><h3 id=\"调用泛型\"><a href=\"#调用泛型\" class=\"headerlink\" title=\"调用泛型\"></a>调用泛型<br></h3><pre><code>let output = identity&lt;string&gt;(&quot;myString&quot;);</code></pre><h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束<br></h3><p>在函数内部使用泛型变量的时候，因为不知道它是哪种类型，所以不能随意的操作它的属性或方法</p>\n<pre><code>function loggingIdentity&lt;T&gt;(arg: T): T {\n  console.log(arg.length);  // Error: T doesn&#39;t have .length\n  return arg;\n}</code></pre><p>由于上面的泛型 T 中不一定包含属性.length, 所以会抛出异常。</p>\n<p>这时我们可以创建一个具有单个.length属性的接口，然后我们将使用此接口和extends关键字来表示我们的约束：</p>\n<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n</code></pre><p>上面的例子如果在调用的时候传入的参数不符合定义的约束，那么就会抛出异常</p>\n<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity(5) \n// Argument of type &#39;5&#39; is not assignable to parameter of type &#39;Lengthwise&#39;\n</code></pre><p>相反如果定义了正确的类型</p>\n<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity([1,2]) // 2\nloggingIdentity({length: 5, value: 1}) // 5</code></pre><h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口<br></h3><pre><code>// 定义泛型结构\ninterface CreatePeopleFunc {\n  &lt;T&gt;(name: string, age: T): Array&lt;T&gt;;\n}\n\n// 创建泛型\nlet createPeople:CreatePeopleFunc;\ncreatePeople = function&lt;T&gt;(name: string, age: T): Array&lt;T&gt; {\n  let people: T[] = []\n  let temp:any = {\n    name : name,\n    age: age\n  }\n  people.push(temp)\n  return people\n}\n// 调用函数\ncreatePeople(&#39;zhangsan&#39;, 28)</code></pre><p>上面例子我们定义了一个泛型，创建了函数，在函数内创建数组并添加了一个元素 name, age</p>\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类<br></h3><p>泛型类具有与通用接口类似的形状。泛型类&lt;&gt;在类名称后面的尖括号（）中有一个泛型类型参数列表</p>\n<pre><code>class GenericNumber&lt;T&gt; {\n    zeroValue: T;\n    add: (x: T, y: T) =&gt; T;\n}\n\nlet myGenericNumber = new GenericNumber&lt;number&gt;();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>泛型（Generics）就是不提前指定接口、变量、函数等的类型，在使用的时候再指定类型</p>\n<h3 id=\"定义泛型\"><a href=\"#定义泛型\" class=\"headerlink\" title=\"定义泛型 \"></a>定义泛型 <br></h3><pre><code>// 定义类型\nfunction identity(arg: number): number {\n  return arg;\n}\n// 定义 any 类型\nfunction identity(arg: any): any {\n  return arg;\n}</code></pre><p>如果所有的接口、变量、函数等都用 any 类型，那么写 TS 和写 JS 一样将失去意义，因为你可能像 JS 一样造成许多未知的错误，那么解决这样的问题我们使用一种特殊的变量T，来表示返回的内容。</p>\n<pre><code>function identity&lt;T&gt;(arg: T): T {\n  return arg;\n}</code></pre><h3 id=\"调用泛型\"><a href=\"#调用泛型\" class=\"headerlink\" title=\"调用泛型\"></a>调用泛型<br></h3><pre><code>let output = identity&lt;string&gt;(&quot;myString&quot;);</code></pre><h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束<br></h3><p>在函数内部使用泛型变量的时候，因为不知道它是哪种类型，所以不能随意的操作它的属性或方法</p>\n<pre><code>function loggingIdentity&lt;T&gt;(arg: T): T {\n  console.log(arg.length);  // Error: T doesn&#39;t have .length\n  return arg;\n}</code></pre><p>由于上面的泛型 T 中不一定包含属性.length, 所以会抛出异常。</p>\n<p>这时我们可以创建一个具有单个.length属性的接口，然后我们将使用此接口和extends关键字来表示我们的约束：</p>\n<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n</code></pre><p>上面的例子如果在调用的时候传入的参数不符合定义的约束，那么就会抛出异常</p>\n<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity(5) \n// Argument of type &#39;5&#39; is not assignable to parameter of type &#39;Lengthwise&#39;\n</code></pre><p>相反如果定义了正确的类型</p>\n<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n  console.log(arg.length); \n  return arg;\n}\n\nloggingIdentity([1,2]) // 2\nloggingIdentity({length: 5, value: 1}) // 5</code></pre><h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口<br></h3><pre><code>// 定义泛型结构\ninterface CreatePeopleFunc {\n  &lt;T&gt;(name: string, age: T): Array&lt;T&gt;;\n}\n\n// 创建泛型\nlet createPeople:CreatePeopleFunc;\ncreatePeople = function&lt;T&gt;(name: string, age: T): Array&lt;T&gt; {\n  let people: T[] = []\n  let temp:any = {\n    name : name,\n    age: age\n  }\n  people.push(temp)\n  return people\n}\n// 调用函数\ncreatePeople(&#39;zhangsan&#39;, 28)</code></pre><p>上面例子我们定义了一个泛型，创建了函数，在函数内创建数组并添加了一个元素 name, age</p>\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类<br></h3><p>泛型类具有与通用接口类似的形状。泛型类&lt;&gt;在类名称后面的尖括号（）中有一个泛型类型参数列表</p>\n<pre><code>class GenericNumber&lt;T&gt; {\n    zeroValue: T;\n    add: (x: T, y: T) =&gt; T;\n}\n\nlet myGenericNumber = new GenericNumber&lt;number&gt;();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };</code></pre>"},{"title":"基础之概述和环境配置","date":"2019-05-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 什么是TypeScript？<br/>\n  ts是一种的开源的编程语言，是由Microsoft主导研发。从工作机制上讲，它就像javaScript的超集。这个语言添加了可选的静态类型和基于类的面向对象编程。2012年首个版本公布\n\n\n### TypeScript的特点?\n  - JavaScript可以使用TypeScript。所有TypeScript代码也都转换为它的JavaScript等效代码\n  - TypeScript支持其他JS库\n  - TypeScript是可移植的。TypeScript可跨浏览器，设备和操作系统的移植\n  - TypeScript与ECMAScript6规范一致\n\n### 为什么要使用TypeScript？<br/>\n  作为前端开发人员我们都知道，从本质上讲，JavaScript是一种自由语言，也叫弱类型的语言，它的语法规则并不是那么严格。正因为如此，我们就更容易犯错，而且，即使是在运行的时候，我们也不能找到所有的错误。鉴于此，TypeScript作为JavaScript的超集，它的语法更严格，我们在编写代码的时候就能够发现大部分错误。不仅如此，按照TypeScript官方的说法，TypeScript使得我们能够以JavaScript的方式实现自己的构思。TypeScript对面向对象的支持也非常完善，它拥有面向对象编程语言的所有特性。如果你想要获取有关TypeScript的更多信息，可以前往TypeScript的官方网站: <a href=\"http://www.typescriptlang.org/\">TypeScript - JavaScript that scales.</a>\n\n### TypeScript的组成部分?\n  - 语言层 - 它包括语法，关键字和类型注释\n  - 编译器层 - TypeScript编译器（TSC）将使用TypeScript编写的指令转换为其等效的JavaScript\n  - 语言服务层 - “语言服务”在核心编译管道周围公开了一个额外的层，它是类似编辑器的应用程序。ts编译核心(core.ts,program.ts,scanner.ts,parser.ts,checker,emitter.ts)<br/>\n<image src=\"images/ts-lang.png\" width=\"350\"></image>\n\n### TypeScript 环境配置（本文不讨论 windows 安装过程和 mac 类似）\n - 下载并安装 node <a href=\"https://nodejs.org/en/\">相关 node 官网</a>\n - 查看 node 是否安装成功，在命令行中执行 `node -v` 如果出现版本号则证明 node 安装成功 \n - 通过 npm 安装 typescript `npm install -g typescript` \n - 创建 filename.ts 文件在文件中书写相应ts代码\n - 执行 `tsc filename.ts` 编译过后默认会在当前目录产生js文件,在页面中引入js文件即可\n - 后续在tsconfig.json 中讨论配置监听属性\n\n\n\n\n\n\n","source":"_posts/typescript/envConfig.md","raw":"---\ntitle: 基础之概述和环境配置\ndate: 2019-05-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n### 什么是TypeScript？<br/>\n  ts是一种的开源的编程语言，是由Microsoft主导研发。从工作机制上讲，它就像javaScript的超集。这个语言添加了可选的静态类型和基于类的面向对象编程。2012年首个版本公布\n\n\n### TypeScript的特点?\n  - JavaScript可以使用TypeScript。所有TypeScript代码也都转换为它的JavaScript等效代码\n  - TypeScript支持其他JS库\n  - TypeScript是可移植的。TypeScript可跨浏览器，设备和操作系统的移植\n  - TypeScript与ECMAScript6规范一致\n\n### 为什么要使用TypeScript？<br/>\n  作为前端开发人员我们都知道，从本质上讲，JavaScript是一种自由语言，也叫弱类型的语言，它的语法规则并不是那么严格。正因为如此，我们就更容易犯错，而且，即使是在运行的时候，我们也不能找到所有的错误。鉴于此，TypeScript作为JavaScript的超集，它的语法更严格，我们在编写代码的时候就能够发现大部分错误。不仅如此，按照TypeScript官方的说法，TypeScript使得我们能够以JavaScript的方式实现自己的构思。TypeScript对面向对象的支持也非常完善，它拥有面向对象编程语言的所有特性。如果你想要获取有关TypeScript的更多信息，可以前往TypeScript的官方网站: <a href=\"http://www.typescriptlang.org/\">TypeScript - JavaScript that scales.</a>\n\n### TypeScript的组成部分?\n  - 语言层 - 它包括语法，关键字和类型注释\n  - 编译器层 - TypeScript编译器（TSC）将使用TypeScript编写的指令转换为其等效的JavaScript\n  - 语言服务层 - “语言服务”在核心编译管道周围公开了一个额外的层，它是类似编辑器的应用程序。ts编译核心(core.ts,program.ts,scanner.ts,parser.ts,checker,emitter.ts)<br/>\n<image src=\"images/ts-lang.png\" width=\"350\"></image>\n\n### TypeScript 环境配置（本文不讨论 windows 安装过程和 mac 类似）\n - 下载并安装 node <a href=\"https://nodejs.org/en/\">相关 node 官网</a>\n - 查看 node 是否安装成功，在命令行中执行 `node -v` 如果出现版本号则证明 node 安装成功 \n - 通过 npm 安装 typescript `npm install -g typescript` \n - 创建 filename.ts 文件在文件中书写相应ts代码\n - 执行 `tsc filename.ts` 编译过后默认会在当前目录产生js文件,在页面中引入js文件即可\n - 后续在tsconfig.json 中讨论配置监听属性\n\n\n\n\n\n\n","slug":"typescript/envConfig","published":1,"updated":"2019-08-26T16:46:27.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9e004skuu6qq1uk5f3","content":"<h3 id=\"什么是TypeScript？\"><a href=\"#什么是TypeScript？\" class=\"headerlink\" title=\"什么是TypeScript？\"></a>什么是TypeScript？<br></h3><p>  ts是一种的开源的编程语言，是由Microsoft主导研发。从工作机制上讲，它就像javaScript的超集。这个语言添加了可选的静态类型和基于类的面向对象编程。2012年首个版本公布</p>\n<h3 id=\"TypeScript的特点\"><a href=\"#TypeScript的特点\" class=\"headerlink\" title=\"TypeScript的特点?\"></a>TypeScript的特点?</h3><ul>\n<li>JavaScript可以使用TypeScript。所有TypeScript代码也都转换为它的JavaScript等效代码</li>\n<li>TypeScript支持其他JS库</li>\n<li>TypeScript是可移植的。TypeScript可跨浏览器，设备和操作系统的移植</li>\n<li>TypeScript与ECMAScript6规范一致</li>\n</ul>\n<h3 id=\"为什么要使用TypeScript？\"><a href=\"#为什么要使用TypeScript？\" class=\"headerlink\" title=\"为什么要使用TypeScript？\"></a>为什么要使用TypeScript？<br></h3><p>  作为前端开发人员我们都知道，从本质上讲，JavaScript是一种自由语言，也叫弱类型的语言，它的语法规则并不是那么严格。正因为如此，我们就更容易犯错，而且，即使是在运行的时候，我们也不能找到所有的错误。鉴于此，TypeScript作为JavaScript的超集，它的语法更严格，我们在编写代码的时候就能够发现大部分错误。不仅如此，按照TypeScript官方的说法，TypeScript使得我们能够以JavaScript的方式实现自己的构思。TypeScript对面向对象的支持也非常完善，它拥有面向对象编程语言的所有特性。如果你想要获取有关TypeScript的更多信息，可以前往TypeScript的官方网站: <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript - JavaScript that scales.</a></p>\n<h3 id=\"TypeScript的组成部分\"><a href=\"#TypeScript的组成部分\" class=\"headerlink\" title=\"TypeScript的组成部分?\"></a>TypeScript的组成部分?</h3><ul>\n<li>语言层 - 它包括语法，关键字和类型注释</li>\n<li>编译器层 - TypeScript编译器（TSC）将使用TypeScript编写的指令转换为其等效的JavaScript</li>\n<li>语言服务层 - “语言服务”在核心编译管道周围公开了一个额外的层，它是类似编辑器的应用程序。ts编译核心(core.ts,program.ts,scanner.ts,parser.ts,checker,emitter.ts)<br><br><image src=\"images/ts-lang.png\" width=\"350\"></image></li>\n</ul>\n<h3 id=\"TypeScript-环境配置（本文不讨论-windows-安装过程和-mac-类似）\"><a href=\"#TypeScript-环境配置（本文不讨论-windows-安装过程和-mac-类似）\" class=\"headerlink\" title=\"TypeScript 环境配置（本文不讨论 windows 安装过程和 mac 类似）\"></a>TypeScript 环境配置（本文不讨论 windows 安装过程和 mac 类似）</h3><ul>\n<li>下载并安装 node <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">相关 node 官网</a></li>\n<li>查看 node 是否安装成功，在命令行中执行 <code>node -v</code> 如果出现版本号则证明 node 安装成功 </li>\n<li>通过 npm 安装 typescript <code>npm install -g typescript</code> </li>\n<li>创建 filename.ts 文件在文件中书写相应ts代码</li>\n<li>执行 <code>tsc filename.ts</code> 编译过后默认会在当前目录产生js文件,在页面中引入js文件即可</li>\n<li>后续在tsconfig.json 中讨论配置监听属性</li>\n</ul>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"什么是TypeScript？\"><a href=\"#什么是TypeScript？\" class=\"headerlink\" title=\"什么是TypeScript？\"></a>什么是TypeScript？<br></h3><p>  ts是一种的开源的编程语言，是由Microsoft主导研发。从工作机制上讲，它就像javaScript的超集。这个语言添加了可选的静态类型和基于类的面向对象编程。2012年首个版本公布</p>\n<h3 id=\"TypeScript的特点\"><a href=\"#TypeScript的特点\" class=\"headerlink\" title=\"TypeScript的特点?\"></a>TypeScript的特点?</h3><ul>\n<li>JavaScript可以使用TypeScript。所有TypeScript代码也都转换为它的JavaScript等效代码</li>\n<li>TypeScript支持其他JS库</li>\n<li>TypeScript是可移植的。TypeScript可跨浏览器，设备和操作系统的移植</li>\n<li>TypeScript与ECMAScript6规范一致</li>\n</ul>\n<h3 id=\"为什么要使用TypeScript？\"><a href=\"#为什么要使用TypeScript？\" class=\"headerlink\" title=\"为什么要使用TypeScript？\"></a>为什么要使用TypeScript？<br></h3><p>  作为前端开发人员我们都知道，从本质上讲，JavaScript是一种自由语言，也叫弱类型的语言，它的语法规则并不是那么严格。正因为如此，我们就更容易犯错，而且，即使是在运行的时候，我们也不能找到所有的错误。鉴于此，TypeScript作为JavaScript的超集，它的语法更严格，我们在编写代码的时候就能够发现大部分错误。不仅如此，按照TypeScript官方的说法，TypeScript使得我们能够以JavaScript的方式实现自己的构思。TypeScript对面向对象的支持也非常完善，它拥有面向对象编程语言的所有特性。如果你想要获取有关TypeScript的更多信息，可以前往TypeScript的官方网站: <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript - JavaScript that scales.</a></p>\n<h3 id=\"TypeScript的组成部分\"><a href=\"#TypeScript的组成部分\" class=\"headerlink\" title=\"TypeScript的组成部分?\"></a>TypeScript的组成部分?</h3><ul>\n<li>语言层 - 它包括语法，关键字和类型注释</li>\n<li>编译器层 - TypeScript编译器（TSC）将使用TypeScript编写的指令转换为其等效的JavaScript</li>\n<li>语言服务层 - “语言服务”在核心编译管道周围公开了一个额外的层，它是类似编辑器的应用程序。ts编译核心(core.ts,program.ts,scanner.ts,parser.ts,checker,emitter.ts)<br><br><image src=\"images/ts-lang.png\" width=\"350\"></image></li>\n</ul>\n<h3 id=\"TypeScript-环境配置（本文不讨论-windows-安装过程和-mac-类似）\"><a href=\"#TypeScript-环境配置（本文不讨论-windows-安装过程和-mac-类似）\" class=\"headerlink\" title=\"TypeScript 环境配置（本文不讨论 windows 安装过程和 mac 类似）\"></a>TypeScript 环境配置（本文不讨论 windows 安装过程和 mac 类似）</h3><ul>\n<li>下载并安装 node <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">相关 node 官网</a></li>\n<li>查看 node 是否安装成功，在命令行中执行 <code>node -v</code> 如果出现版本号则证明 node 安装成功 </li>\n<li>通过 npm 安装 typescript <code>npm install -g typescript</code> </li>\n<li>创建 filename.ts 文件在文件中书写相应ts代码</li>\n<li>执行 <code>tsc filename.ts</code> 编译过后默认会在当前目录产生js文件,在页面中引入js文件即可</li>\n<li>后续在tsconfig.json 中讨论配置监听属性</li>\n</ul>\n"},{"title":"函数","date":"2019-05-16T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n### 函数的创建 <br/>\n\n在 ts 中函数创建也氛围两种匿名函数和有命名的函数\n```\n// 有名字的函数\nfunction people () {}\n\n// 匿名函数\nconst people = function () {}\n```\n\n### 函数的参数类型和返回值类型 <br/>\n- 只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正\n- 设定了类型之后必须要返回相对应的类型，否则会报错\n- 如果函数没有返回任何值，也必须指定返回值类型为 void而不能留空\n```\n/**\n * \n * @param {*} x number\n * @param {*} y number\n *  return add number \n */\n\nconst add = (x: number, y: number): number => x + y;\n// 书写完整的函数类型\nconst add: (x: number, y: number) => number = (x: number, y: number):number => x + y \n```\n\n### 函数的可选参数和默认参数<br/>\n- 传递给一个函数的参数个数必须与函数期望的参数个数一致，否则会报错\n- 可选参数用`?argname`表示，必须跟在必须参数后面\n- 没有传递参数或传递的值是undefined，这种叫做默认初始化值的参数\n- 所有必须参数**后面**的带默认初始化的参数都是可选的，调用时可省略\n- 带默认值的参数如果出现在必须参数**前面**，用户必须明确的传入 undefined 值来获得默认值\n- 当传入的参数个数不固定时，将所有参数收集到一个变量里和 js 中的 arguments 类似，剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个表达方式为（...）\n\n```\n// 上述1\nconst add: (x: number, y: number) => number = (x: number, y: number):number => x + y \nadd(1, 2) // 3\nadd(1) // 报错\nadd(1,2,3) // 报错\n\n// 上述2\nconst yourName = (firstName: string, lastName?: string): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //ren+bo\nconsole.log(yourName('ren')) // ren+undefined\n\n\n// 上述3\nconst yourName = (firstName: string, lastName?: string): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //ren+bo\nconsole.log(yourName('ren', undefined)) // ren+undefined\n\n//上述4\nconst yourName = (firstName: string, lastName='bo'): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //ren+bo\nconsole.log(yourName('ren')) // ren+bo\n\n// 上述5\nconst yourName = ( lastName='bo', firstName: string): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //bo+ren\nconsole.log(yourName(undefined, 'ren')) // ren+bo\n\n\n// 上述6\nconst people = ( name: string, ...otherProperty: string[]): string => {\n  return name + \" \" + otherProperty.join(\" \");\n}\nconsole.log(people('renbo', '28','170'))  // renbo 28 170 \n```\n\n### 函数的重载 <br/>\n\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理\n\n```\n// 我们来实现一下通过传入不同的 type 来实现函数的加操作和乘法操作并返回相应的类型\nconst compute = (type: number, ...resetData: number[]):number | string => {\n  if (type === 1 ) {\n    return resetData.reduce((a:number, b:number):number => a + b);\n  } else if (type === 2) {\n    return String(resetData.reduce((a:number, b:number):number => a * b));\n  }\n} \nconsole.log(compute(1, 3, 4, 5, 6)) // 18\nconsole.log(compute(2, 3, 4, 5, 6)) // '360'\n\n// 通过上面的实现唯一的缺点就是不能明确通过type返回的相对应的计算的值和类型\n\nconst compute = (type: number, ...resetData: number[]):number;\nconst compute = (type: number, ...resetData: number[]):string;\nconst compute = (type: number, ...resetData: number[]):number | string => {\n  if (type === 1 ) {\n    return resetData.reduce((a:number, b:number):number => a + b);\n  } else if (type === 2) {\n    return String(resetData.reduce((a:number, b:number):number => a * b));\n  }\n} \nconsole.log(compute(1, 3, 4, 5, 6)) // 18\nconsole.log(compute(2, 3, 4, 5, 6)) // '360'\n\n// 上例中，我们重复定义了多次函数 compute，前几次都是函数定义，最后一次是函数实现。\n```\n\n\n\n\n","source":"_posts/typescript/function.md","raw":"---\ntitle: 函数\ndate:  2019-05-16 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n### 函数的创建 <br/>\n\n在 ts 中函数创建也氛围两种匿名函数和有命名的函数\n```\n// 有名字的函数\nfunction people () {}\n\n// 匿名函数\nconst people = function () {}\n```\n\n### 函数的参数类型和返回值类型 <br/>\n- 只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正\n- 设定了类型之后必须要返回相对应的类型，否则会报错\n- 如果函数没有返回任何值，也必须指定返回值类型为 void而不能留空\n```\n/**\n * \n * @param {*} x number\n * @param {*} y number\n *  return add number \n */\n\nconst add = (x: number, y: number): number => x + y;\n// 书写完整的函数类型\nconst add: (x: number, y: number) => number = (x: number, y: number):number => x + y \n```\n\n### 函数的可选参数和默认参数<br/>\n- 传递给一个函数的参数个数必须与函数期望的参数个数一致，否则会报错\n- 可选参数用`?argname`表示，必须跟在必须参数后面\n- 没有传递参数或传递的值是undefined，这种叫做默认初始化值的参数\n- 所有必须参数**后面**的带默认初始化的参数都是可选的，调用时可省略\n- 带默认值的参数如果出现在必须参数**前面**，用户必须明确的传入 undefined 值来获得默认值\n- 当传入的参数个数不固定时，将所有参数收集到一个变量里和 js 中的 arguments 类似，剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个表达方式为（...）\n\n```\n// 上述1\nconst add: (x: number, y: number) => number = (x: number, y: number):number => x + y \nadd(1, 2) // 3\nadd(1) // 报错\nadd(1,2,3) // 报错\n\n// 上述2\nconst yourName = (firstName: string, lastName?: string): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //ren+bo\nconsole.log(yourName('ren')) // ren+undefined\n\n\n// 上述3\nconst yourName = (firstName: string, lastName?: string): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //ren+bo\nconsole.log(yourName('ren', undefined)) // ren+undefined\n\n//上述4\nconst yourName = (firstName: string, lastName='bo'): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //ren+bo\nconsole.log(yourName('ren')) // ren+bo\n\n// 上述5\nconst yourName = ( lastName='bo', firstName: string): string => `${firstName}+${lastName} `;\nconsole.log(yourName('ren', 'bo')) //bo+ren\nconsole.log(yourName(undefined, 'ren')) // ren+bo\n\n\n// 上述6\nconst people = ( name: string, ...otherProperty: string[]): string => {\n  return name + \" \" + otherProperty.join(\" \");\n}\nconsole.log(people('renbo', '28','170'))  // renbo 28 170 \n```\n\n### 函数的重载 <br/>\n\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理\n\n```\n// 我们来实现一下通过传入不同的 type 来实现函数的加操作和乘法操作并返回相应的类型\nconst compute = (type: number, ...resetData: number[]):number | string => {\n  if (type === 1 ) {\n    return resetData.reduce((a:number, b:number):number => a + b);\n  } else if (type === 2) {\n    return String(resetData.reduce((a:number, b:number):number => a * b));\n  }\n} \nconsole.log(compute(1, 3, 4, 5, 6)) // 18\nconsole.log(compute(2, 3, 4, 5, 6)) // '360'\n\n// 通过上面的实现唯一的缺点就是不能明确通过type返回的相对应的计算的值和类型\n\nconst compute = (type: number, ...resetData: number[]):number;\nconst compute = (type: number, ...resetData: number[]):string;\nconst compute = (type: number, ...resetData: number[]):number | string => {\n  if (type === 1 ) {\n    return resetData.reduce((a:number, b:number):number => a + b);\n  } else if (type === 2) {\n    return String(resetData.reduce((a:number, b:number):number => a * b));\n  }\n} \nconsole.log(compute(1, 3, 4, 5, 6)) // 18\nconsole.log(compute(2, 3, 4, 5, 6)) // '360'\n\n// 上例中，我们重复定义了多次函数 compute，前几次都是函数定义，最后一次是函数实现。\n```\n\n\n\n\n","slug":"typescript/function","published":1,"updated":"2019-08-26T16:46:27.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9g004xkuu6je3x3boy","content":"<h3 id=\"函数的创建\"><a href=\"#函数的创建\" class=\"headerlink\" title=\"函数的创建 \"></a>函数的创建 <br></h3><p>在 ts 中函数创建也氛围两种匿名函数和有命名的函数</p>\n<pre><code>// 有名字的函数\nfunction people () {}\n\n// 匿名函数\nconst people = function () {}</code></pre><h3 id=\"函数的参数类型和返回值类型\"><a href=\"#函数的参数类型和返回值类型\" class=\"headerlink\" title=\"函数的参数类型和返回值类型 \"></a>函数的参数类型和返回值类型 <br></h3><ul>\n<li>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正</li>\n<li>设定了类型之后必须要返回相对应的类型，否则会报错</li>\n<li>如果函数没有返回任何值，也必须指定返回值类型为 void而不能留空<pre><code>/**\n* \n* @param {*} x number\n* @param {*} y number\n*  return add number \n*/\n</code></pre></li>\n</ul>\n<p>const add = (x: number, y: number): number =&gt; x + y;<br>// 书写完整的函数类型<br>const add: (x: number, y: number) =&gt; number = (x: number, y: number):number =&gt; x + y </p>\n<pre><code>\n### 函数的可选参数和默认参数&lt;br/&gt;\n- 传递给一个函数的参数个数必须与函数期望的参数个数一致，否则会报错\n- 可选参数用`?argname`表示，必须跟在必须参数后面\n- 没有传递参数或传递的值是undefined，这种叫做默认初始化值的参数\n- 所有必须参数**后面**的带默认初始化的参数都是可选的，调用时可省略\n- 带默认值的参数如果出现在必须参数**前面**，用户必须明确的传入 undefined 值来获得默认值\n- 当传入的参数个数不固定时，将所有参数收集到一个变量里和 js 中的 arguments 类似，剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个表达方式为（...）\n</code></pre><p>// 上述1<br>const add: (x: number, y: number) =&gt; number = (x: number, y: number):number =&gt; x + y<br>add(1, 2) // 3<br>add(1) // 报错<br>add(1,2,3) // 报错</p>\n<p>// 上述2<br>const yourName = (firstName: string, lastName?: string): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //ren+bo<br>console.log(yourName(‘ren’)) // ren+undefined</p>\n<p>// 上述3<br>const yourName = (firstName: string, lastName?: string): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //ren+bo<br>console.log(yourName(‘ren’, undefined)) // ren+undefined</p>\n<p>//上述4<br>const yourName = (firstName: string, lastName=’bo’): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //ren+bo<br>console.log(yourName(‘ren’)) // ren+bo</p>\n<p>// 上述5<br>const yourName = ( lastName=’bo’, firstName: string): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //bo+ren<br>console.log(yourName(undefined, ‘ren’)) // ren+bo</p>\n<p>// 上述6<br>const people = ( name: string, …otherProperty: string[]): string =&gt; {<br>  return name + “ “ + otherProperty.join(“ “);<br>}<br>console.log(people(‘renbo’, ‘28’,’170’))  // renbo 28 170 </p>\n<pre><code>\n### 函数的重载 &lt;br/&gt;\n\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理\n</code></pre><p>// 我们来实现一下通过传入不同的 type 来实现函数的加操作和乘法操作并返回相应的类型<br>const compute = (type: number, …resetData: number[]):number | string =&gt; {<br>  if (type === 1 ) {<br>    return resetData.reduce((a:number, b:number):number =&gt; a + b);<br>  } else if (type === 2) {<br>    return String(resetData.reduce((a:number, b:number):number =&gt; a * b));<br>  }<br>}<br>console.log(compute(1, 3, 4, 5, 6)) // 18<br>console.log(compute(2, 3, 4, 5, 6)) // ‘360’</p>\n<p>// 通过上面的实现唯一的缺点就是不能明确通过type返回的相对应的计算的值和类型</p>\n<p>const compute = (type: number, …resetData: number[]):number;<br>const compute = (type: number, …resetData: number[]):string;<br>const compute = (type: number, …resetData: number[]):number | string =&gt; {<br>  if (type === 1 ) {<br>    return resetData.reduce((a:number, b:number):number =&gt; a + b);<br>  } else if (type === 2) {<br>    return String(resetData.reduce((a:number, b:number):number =&gt; a * b));<br>  }<br>}<br>console.log(compute(1, 3, 4, 5, 6)) // 18<br>console.log(compute(2, 3, 4, 5, 6)) // ‘360’</p>\n<p>// 上例中，我们重复定义了多次函数 compute，前几次都是函数定义，最后一次是函数实现。</p>\n<pre><code>\n\n\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<h3 id=\"函数的创建\"><a href=\"#函数的创建\" class=\"headerlink\" title=\"函数的创建 \"></a>函数的创建 <br></h3><p>在 ts 中函数创建也氛围两种匿名函数和有命名的函数</p>\n<pre><code>// 有名字的函数\nfunction people () {}\n\n// 匿名函数\nconst people = function () {}</code></pre><h3 id=\"函数的参数类型和返回值类型\"><a href=\"#函数的参数类型和返回值类型\" class=\"headerlink\" title=\"函数的参数类型和返回值类型 \"></a>函数的参数类型和返回值类型 <br></h3><ul>\n<li>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正</li>\n<li>设定了类型之后必须要返回相对应的类型，否则会报错</li>\n<li>如果函数没有返回任何值，也必须指定返回值类型为 void而不能留空<pre><code>/**\n* \n* @param {*} x number\n* @param {*} y number\n*  return add number \n*/\n</code></pre></li>\n</ul>\n<p>const add = (x: number, y: number): number =&gt; x + y;<br>// 书写完整的函数类型<br>const add: (x: number, y: number) =&gt; number = (x: number, y: number):number =&gt; x + y </p>\n<pre><code>\n### 函数的可选参数和默认参数&lt;br/&gt;\n- 传递给一个函数的参数个数必须与函数期望的参数个数一致，否则会报错\n- 可选参数用`?argname`表示，必须跟在必须参数后面\n- 没有传递参数或传递的值是undefined，这种叫做默认初始化值的参数\n- 所有必须参数**后面**的带默认初始化的参数都是可选的，调用时可省略\n- 带默认值的参数如果出现在必须参数**前面**，用户必须明确的传入 undefined 值来获得默认值\n- 当传入的参数个数不固定时，将所有参数收集到一个变量里和 js 中的 arguments 类似，剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个表达方式为（...）\n</code></pre><p>// 上述1<br>const add: (x: number, y: number) =&gt; number = (x: number, y: number):number =&gt; x + y<br>add(1, 2) // 3<br>add(1) // 报错<br>add(1,2,3) // 报错</p>\n<p>// 上述2<br>const yourName = (firstName: string, lastName?: string): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //ren+bo<br>console.log(yourName(‘ren’)) // ren+undefined</p>\n<p>// 上述3<br>const yourName = (firstName: string, lastName?: string): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //ren+bo<br>console.log(yourName(‘ren’, undefined)) // ren+undefined</p>\n<p>//上述4<br>const yourName = (firstName: string, lastName=’bo’): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //ren+bo<br>console.log(yourName(‘ren’)) // ren+bo</p>\n<p>// 上述5<br>const yourName = ( lastName=’bo’, firstName: string): string =&gt; <code>${firstName}+${lastName}</code>;<br>console.log(yourName(‘ren’, ‘bo’)) //bo+ren<br>console.log(yourName(undefined, ‘ren’)) // ren+bo</p>\n<p>// 上述6<br>const people = ( name: string, …otherProperty: string[]): string =&gt; {<br>  return name + “ “ + otherProperty.join(“ “);<br>}<br>console.log(people(‘renbo’, ‘28’,’170’))  // renbo 28 170 </p>\n<pre><code>\n### 函数的重载 &lt;br/&gt;\n\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理\n</code></pre><p>// 我们来实现一下通过传入不同的 type 来实现函数的加操作和乘法操作并返回相应的类型<br>const compute = (type: number, …resetData: number[]):number | string =&gt; {<br>  if (type === 1 ) {<br>    return resetData.reduce((a:number, b:number):number =&gt; a + b);<br>  } else if (type === 2) {<br>    return String(resetData.reduce((a:number, b:number):number =&gt; a * b));<br>  }<br>}<br>console.log(compute(1, 3, 4, 5, 6)) // 18<br>console.log(compute(2, 3, 4, 5, 6)) // ‘360’</p>\n<p>// 通过上面的实现唯一的缺点就是不能明确通过type返回的相对应的计算的值和类型</p>\n<p>const compute = (type: number, …resetData: number[]):number;<br>const compute = (type: number, …resetData: number[]):string;<br>const compute = (type: number, …resetData: number[]):number | string =&gt; {<br>  if (type === 1 ) {<br>    return resetData.reduce((a:number, b:number):number =&gt; a + b);<br>  } else if (type === 2) {<br>    return String(resetData.reduce((a:number, b:number):number =&gt; a * b));<br>  }<br>}<br>console.log(compute(1, 3, 4, 5, 6)) // 18<br>console.log(compute(2, 3, 4, 5, 6)) // ‘360’</p>\n<p>// 上例中，我们重复定义了多次函数 compute，前几次都是函数定义，最后一次是函数实现。</p>\n<pre><code>\n\n\n</code></pre>"},{"title":"global.d.ts","date":"2019-08-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ If this library is callable (e.g. can be invoked as myLib(3)),\n *~ include those call signatures here.\n *~ Otherwise, delete this section.\n */\ndeclare function myLib(a: string): string;\ndeclare function myLib(a: number): number;\n\n/*~ If you want the name of this library to be a valid type name,\n *~ you can do so here.\n *~\n *~ For example, this allows us to write 'var x: myLib';\n *~ Be sure this actually makes sense! If it doesn't, just\n *~ delete this declaration and add types inside the namespace below.\n */\ninterface myLib {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ If your library has properties exposed on a global variable,\n *~ place them here.\n *~ You should also place types (interfaces and type alias) here.\n */\ndeclare namespace myLib {\n    //~ We can write 'myLib.timeout = 50;'\n    let timeout: number;\n\n    //~ We can access 'myLib.version', but not change it\n    const version: string;\n\n    //~ There's some class we can create via 'let c = new myLib.Cat(42)'\n    //~ Or reference e.g. 'function f(c: myLib.Cat) { ... }\n    class Cat {\n        constructor(n: number);\n\n        //~ We can read 'c.age' from a 'Cat' instance\n        readonly age: number;\n\n        //~ We can invoke 'c.purr()' from a 'Cat' instance\n        purr(): void;\n    }\n\n    //~ We can declare a variable as\n    //~   'var s: myLib.CatSettings = { weight: 5, name: \"Maru\" };'\n    interface CatSettings {\n        weight: number;\n        name: string;\n        tailLength?: number;\n    }\n\n    //~ We can write 'const v: myLib.VetID = 42;'\n    //~  or 'const v: myLib.VetID = \"bob\";'\n    type VetID = string | number;\n\n    //~ We can invoke 'myLib.checkCat(c)' or 'myLib.checkCat(c, v);'\n    function checkCat(c: Cat, s?: VetID);\n}\n```","source":"_posts/typescript/global.d.ts.md","raw":"---\ntitle: global.d.ts\ndate:  2019-8-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ If this library is callable (e.g. can be invoked as myLib(3)),\n *~ include those call signatures here.\n *~ Otherwise, delete this section.\n */\ndeclare function myLib(a: string): string;\ndeclare function myLib(a: number): number;\n\n/*~ If you want the name of this library to be a valid type name,\n *~ you can do so here.\n *~\n *~ For example, this allows us to write 'var x: myLib';\n *~ Be sure this actually makes sense! If it doesn't, just\n *~ delete this declaration and add types inside the namespace below.\n */\ninterface myLib {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ If your library has properties exposed on a global variable,\n *~ place them here.\n *~ You should also place types (interfaces and type alias) here.\n */\ndeclare namespace myLib {\n    //~ We can write 'myLib.timeout = 50;'\n    let timeout: number;\n\n    //~ We can access 'myLib.version', but not change it\n    const version: string;\n\n    //~ There's some class we can create via 'let c = new myLib.Cat(42)'\n    //~ Or reference e.g. 'function f(c: myLib.Cat) { ... }\n    class Cat {\n        constructor(n: number);\n\n        //~ We can read 'c.age' from a 'Cat' instance\n        readonly age: number;\n\n        //~ We can invoke 'c.purr()' from a 'Cat' instance\n        purr(): void;\n    }\n\n    //~ We can declare a variable as\n    //~   'var s: myLib.CatSettings = { weight: 5, name: \"Maru\" };'\n    interface CatSettings {\n        weight: number;\n        name: string;\n        tailLength?: number;\n    }\n\n    //~ We can write 'const v: myLib.VetID = 42;'\n    //~  or 'const v: myLib.VetID = \"bob\";'\n    type VetID = string | number;\n\n    //~ We can invoke 'myLib.checkCat(c)' or 'myLib.checkCat(c, v);'\n    function checkCat(c: Cat, s?: VetID);\n}\n```","slug":"typescript/global.d.ts","published":1,"updated":"2019-08-26T16:46:27.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9h004ykuu65c6m9dpp","content":"<pre><code>// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;\n\n/*~ If this library is callable (e.g. can be invoked as myLib(3)),\n *~ include those call signatures here.\n *~ Otherwise, delete this section.\n */\ndeclare function myLib(a: string): string;\ndeclare function myLib(a: number): number;\n\n/*~ If you want the name of this library to be a valid type name,\n *~ you can do so here.\n *~\n *~ For example, this allows us to write &#39;var x: myLib&#39;;\n *~ Be sure this actually makes sense! If it doesn&#39;t, just\n *~ delete this declaration and add types inside the namespace below.\n */\ninterface myLib {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ If your library has properties exposed on a global variable,\n *~ place them here.\n *~ You should also place types (interfaces and type alias) here.\n */\ndeclare namespace myLib {\n    //~ We can write &#39;myLib.timeout = 50;&#39;\n    let timeout: number;\n\n    //~ We can access &#39;myLib.version&#39;, but not change it\n    const version: string;\n\n    //~ There&#39;s some class we can create via &#39;let c = new myLib.Cat(42)&#39;\n    //~ Or reference e.g. &#39;function f(c: myLib.Cat) { ... }\n    class Cat {\n        constructor(n: number);\n\n        //~ We can read &#39;c.age&#39; from a &#39;Cat&#39; instance\n        readonly age: number;\n\n        //~ We can invoke &#39;c.purr()&#39; from a &#39;Cat&#39; instance\n        purr(): void;\n    }\n\n    //~ We can declare a variable as\n    //~   &#39;var s: myLib.CatSettings = { weight: 5, name: &quot;Maru&quot; };&#39;\n    interface CatSettings {\n        weight: number;\n        name: string;\n        tailLength?: number;\n    }\n\n    //~ We can write &#39;const v: myLib.VetID = 42;&#39;\n    //~  or &#39;const v: myLib.VetID = &quot;bob&quot;;&#39;\n    type VetID = string | number;\n\n    //~ We can invoke &#39;myLib.checkCat(c)&#39; or &#39;myLib.checkCat(c, v);&#39;\n    function checkCat(c: Cat, s?: VetID);\n}</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<pre><code>// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;\n\n/*~ If this library is callable (e.g. can be invoked as myLib(3)),\n *~ include those call signatures here.\n *~ Otherwise, delete this section.\n */\ndeclare function myLib(a: string): string;\ndeclare function myLib(a: number): number;\n\n/*~ If you want the name of this library to be a valid type name,\n *~ you can do so here.\n *~\n *~ For example, this allows us to write &#39;var x: myLib&#39;;\n *~ Be sure this actually makes sense! If it doesn&#39;t, just\n *~ delete this declaration and add types inside the namespace below.\n */\ninterface myLib {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ If your library has properties exposed on a global variable,\n *~ place them here.\n *~ You should also place types (interfaces and type alias) here.\n */\ndeclare namespace myLib {\n    //~ We can write &#39;myLib.timeout = 50;&#39;\n    let timeout: number;\n\n    //~ We can access &#39;myLib.version&#39;, but not change it\n    const version: string;\n\n    //~ There&#39;s some class we can create via &#39;let c = new myLib.Cat(42)&#39;\n    //~ Or reference e.g. &#39;function f(c: myLib.Cat) { ... }\n    class Cat {\n        constructor(n: number);\n\n        //~ We can read &#39;c.age&#39; from a &#39;Cat&#39; instance\n        readonly age: number;\n\n        //~ We can invoke &#39;c.purr()&#39; from a &#39;Cat&#39; instance\n        purr(): void;\n    }\n\n    //~ We can declare a variable as\n    //~   &#39;var s: myLib.CatSettings = { weight: 5, name: &quot;Maru&quot; };&#39;\n    interface CatSettings {\n        weight: number;\n        name: string;\n        tailLength?: number;\n    }\n\n    //~ We can write &#39;const v: myLib.VetID = 42;&#39;\n    //~  or &#39;const v: myLib.VetID = &quot;bob&quot;;&#39;\n    type VetID = string | number;\n\n    //~ We can invoke &#39;myLib.checkCat(c)&#39; or &#39;myLib.checkCat(c, v);&#39;\n    function checkCat(c: Cat, s?: VetID);\n}</code></pre>"},{"title":"Mixinx","date":"2019-07-02T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n 一般情况下，我们已经习惯了用面向对象的继承方式，比如在 JS ES5中用 prototype， 在 ES6 和 TS 中 用extends,然而用 mixinx 也是一种通过可重用组件创建类的方式，来进行混用，混合多个类的方法到一个类上\n\n ### 应用例子\n\n```\n// Disposable Mixin\nclass Disposable {\n    isDisposed!: boolean;\n    dispose() {\n    console.log(this.isDisposed);\n    }\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive!: boolean;\n    activate() {\n       console.log(this.isActive)\n    }\n}\n\n// 没使用 extends 而是使用 implements\nclass SmartObject implements Disposable,Activatable {\n    // Disposable\n    isDisposed: boolean = false;\n    dispose!: () => void;\n    // Activatable\n    isActive: boolean = false;\n    activate!: () => void;\n}\n\n// mixins混入定义的类，完成全部实现部分\napplyMixins(SmartObject, [Disposable, Activatable]);\n\n\n// 创建 applyMixins 混用函数，作用是遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\nlet smartObject = new SmartObject()\n\nsmartObject.dispose() // false\nsmartObject.activate() // false\n\n```\n\n\n\n\n  ","source":"_posts/typescript/mixinx.md","raw":"---\ntitle:  Mixinx\ndate: 2019-7-02 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n 一般情况下，我们已经习惯了用面向对象的继承方式，比如在 JS ES5中用 prototype， 在 ES6 和 TS 中 用extends,然而用 mixinx 也是一种通过可重用组件创建类的方式，来进行混用，混合多个类的方法到一个类上\n\n ### 应用例子\n\n```\n// Disposable Mixin\nclass Disposable {\n    isDisposed!: boolean;\n    dispose() {\n    console.log(this.isDisposed);\n    }\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive!: boolean;\n    activate() {\n       console.log(this.isActive)\n    }\n}\n\n// 没使用 extends 而是使用 implements\nclass SmartObject implements Disposable,Activatable {\n    // Disposable\n    isDisposed: boolean = false;\n    dispose!: () => void;\n    // Activatable\n    isActive: boolean = false;\n    activate!: () => void;\n}\n\n// mixins混入定义的类，完成全部实现部分\napplyMixins(SmartObject, [Disposable, Activatable]);\n\n\n// 创建 applyMixins 混用函数，作用是遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\nlet smartObject = new SmartObject()\n\nsmartObject.dispose() // false\nsmartObject.activate() // false\n\n```\n\n\n\n\n  ","slug":"typescript/mixinx","published":1,"updated":"2019-08-26T16:46:27.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9i0052kuu6encwjqah","content":"<p> 一般情况下，我们已经习惯了用面向对象的继承方式，比如在 JS ES5中用 prototype， 在 ES6 和 TS 中 用extends,然而用 mixinx 也是一种通过可重用组件创建类的方式，来进行混用，混合多个类的方法到一个类上</p>\n<h3 id=\"应用例子\"><a href=\"#应用例子\" class=\"headerlink\" title=\"应用例子\"></a>应用例子</h3><pre><code>// Disposable Mixin\nclass Disposable {\n    isDisposed!: boolean;\n    dispose() {\n    console.log(this.isDisposed);\n    }\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive!: boolean;\n    activate() {\n       console.log(this.isActive)\n    }\n}\n\n// 没使用 extends 而是使用 implements\nclass SmartObject implements Disposable,Activatable {\n    // Disposable\n    isDisposed: boolean = false;\n    dispose!: () =&gt; void;\n    // Activatable\n    isActive: boolean = false;\n    activate!: () =&gt; void;\n}\n\n// mixins混入定义的类，完成全部实现部分\napplyMixins(SmartObject, [Disposable, Activatable]);\n\n\n// 创建 applyMixins 混用函数，作用是遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor =&gt; {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =&gt; {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\nlet smartObject = new SmartObject()\n\nsmartObject.dispose() // false\nsmartObject.activate() // false\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p> 一般情况下，我们已经习惯了用面向对象的继承方式，比如在 JS ES5中用 prototype， 在 ES6 和 TS 中 用extends,然而用 mixinx 也是一种通过可重用组件创建类的方式，来进行混用，混合多个类的方法到一个类上</p>\n<h3 id=\"应用例子\"><a href=\"#应用例子\" class=\"headerlink\" title=\"应用例子\"></a>应用例子</h3><pre><code>// Disposable Mixin\nclass Disposable {\n    isDisposed!: boolean;\n    dispose() {\n    console.log(this.isDisposed);\n    }\n}\n\n// Activatable Mixin\nclass Activatable {\n    isActive!: boolean;\n    activate() {\n       console.log(this.isActive)\n    }\n}\n\n// 没使用 extends 而是使用 implements\nclass SmartObject implements Disposable,Activatable {\n    // Disposable\n    isDisposed: boolean = false;\n    dispose!: () =&gt; void;\n    // Activatable\n    isActive: boolean = false;\n    activate!: () =&gt; void;\n}\n\n// mixins混入定义的类，完成全部实现部分\napplyMixins(SmartObject, [Disposable, Activatable]);\n\n\n// 创建 applyMixins 混用函数，作用是遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor =&gt; {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =&gt; {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\nlet smartObject = new SmartObject()\n\nsmartObject.dispose() // false\nsmartObject.activate() // false\n</code></pre>"},{"title":"接口","date":"2019-05-18T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n##\n\n在面向对象语言中接口 (Interfaces) 是对类的行为的抽象，在TypeScript中也常用于定义结构子类型，方便进行类型检查\n\n### 定义一个简单的接口<br/>\n```\ninterface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n  age: 25\n};\n\n```\n\n上面的例子我定义了一个接口 IPeople，并且定义了一个变量 zhangsan，它的类型是 IPerson，zhangsan的数据结构类型必须与 IPeople 一致否则会报错例如下面\n\n```\ninterface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n};\n\nProperty 'age' is missing in type '{ name: string; }' but required in type 'IPeople'\n```\n\n### 可选属性 <br/>\n\n当我们定义接口属性的时候不是必须的那么可选属性就起到了作用\n\n```\ninterface IPeople {\n  name: string;\n  age?: number\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n};\n```\n### 任意属性<br/>\n\n当我们需要定义或增加一些未知的属性，那么任意属性就起到了作用\n\n```\ninterface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: any;\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n  age: 28,\n  gender: 'm'\n};\n```\n上述例子中需要注意的是一旦定义了任意属性，那么可选属性和确定属性的类型必须是它的的类型的子集，否则会报错，例如\n\n```\ninterface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: string;\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n  age: 28,\n  gender: 'm'\n};\n\nType '{ name: string; age: number; gender: string; }' is not assignable to type 'IPeople'.\nProperty 'age' is incompatible with index signature.\nType 'number' is not assignable to type 'string'.\n```\n\n### 只读属性<br/>\n\n当我们需要对象中字段只能在创建的时候被赋值，那么只读属性就起到了作用\n\n```\ninterface IPerson {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet zhangsan: IPerson = {\n  id: 1,\n  name: 'zhangsan',\n  gender: 'm'\n};\n\nzhangsan.id = 2;\n\nCannot assign to 'id' because it is a read-only property.\n```\n\n### 可以为接口定义函数类型<br/>\n\n```\ninterface IPeople {\n  (name: string, age: number): string;\n}\n\nlet hello: IPeople;\nhello = function(name: string, age: number): string {\n  return `my name is ${name} I,m years old ${age}`\n}\n\nhello('zhangsan', 28) //my name is zhangsan I,m years old 28\n```\n\n\n上面简单的介绍了接口的基本用法，也就是对对象的结构进行性约定，接下来我们来用 Interface 对类的行为进行抽象\n\n### 用类实现接口<br/>\n\n用类实现接口主要应用的场景就是类与类之间有一些公有的功能及特性，要实现高度抽象这也是面向对象的基本。在 TypeScript 中用关键字 implements 去实现。\n\n\n```\n// 定义接口，接口中有一个公共的方法eat\ninterface People{\n  eat(food: string)\n}\n// 实现接口的方法\nclass Boy implements People {\n  constructor () {}\n  eat (food: string): string {\n   return food \n  }\n}\n// 实现接口方法\nclass Girl implements People {\n  constructor () {}\n  eat (food: string):string {\n    return food\n  }\n}\n\nlet boy = new Boy()\nconsole.log(boy.eat('apple'))\n\nlet girl = new Girl()\nconsole.log(girl.eat('banana'))\n\n```\n\n一个类也可以实现多个接口\n```\ninterface Eat{\n  food (food: string)\n}\ninterface Drink{\n  drink()\n}\n// 实现接口的方法\nclass People implements Eat, Drink {\n  constructor () {}\n  food (food: string): string {\n   return food \n  }\n  drink ():string {\n    return `小明跑步中吃${this.food('apple')}是不健康的`\n  }\n}\n\nlet people = new People()\nconsole.log(people.drink())\n```\n\n### 接口的继承<br/>\n\n在 JS ECMA6 中类的继承用 extends 关键字， 那么在 TS 中我们依然同样用这个关键字\n\n```\ninterface Eat {\n  eat ()\n}\n\ninterface People extends Eat {\n  eat()\n  run ()\n}\n\n```\n\n### 混合类型<br/>\n\n混合类型实际上就是在接口中存在多种规则，利用这种规则去实现自己的属性和方法\n\n```\n// 定义规则\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n// 实现规则\nfunction getCounter(): Counter {\n  \n  let counter = <Counter>function (start: number) { \n    console.log(start)\n  };\n\n  counter.interval = 0;\n\n  counter.reset = function () {\n    console.log('reset')\n  };\n\n  return counter;\n}\n\nlet counter = getCounter()\ncounter(20); // 20\ncounter.reset(); // reset \ncounter.interval = 5; // 5\n\n```\n\n","source":"_posts/typescript/interfaces.md","raw":"---\ntitle:  接口\ndate: 2019-05-18 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n##\n\n在面向对象语言中接口 (Interfaces) 是对类的行为的抽象，在TypeScript中也常用于定义结构子类型，方便进行类型检查\n\n### 定义一个简单的接口<br/>\n```\ninterface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n  age: 25\n};\n\n```\n\n上面的例子我定义了一个接口 IPeople，并且定义了一个变量 zhangsan，它的类型是 IPerson，zhangsan的数据结构类型必须与 IPeople 一致否则会报错例如下面\n\n```\ninterface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n};\n\nProperty 'age' is missing in type '{ name: string; }' but required in type 'IPeople'\n```\n\n### 可选属性 <br/>\n\n当我们定义接口属性的时候不是必须的那么可选属性就起到了作用\n\n```\ninterface IPeople {\n  name: string;\n  age?: number\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n};\n```\n### 任意属性<br/>\n\n当我们需要定义或增加一些未知的属性，那么任意属性就起到了作用\n\n```\ninterface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: any;\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n  age: 28,\n  gender: 'm'\n};\n```\n上述例子中需要注意的是一旦定义了任意属性，那么可选属性和确定属性的类型必须是它的的类型的子集，否则会报错，例如\n\n```\ninterface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: string;\n}\n\nlet zhangsan: IPeople = {\n  name: 'zhangsan',\n  age: 28,\n  gender: 'm'\n};\n\nType '{ name: string; age: number; gender: string; }' is not assignable to type 'IPeople'.\nProperty 'age' is incompatible with index signature.\nType 'number' is not assignable to type 'string'.\n```\n\n### 只读属性<br/>\n\n当我们需要对象中字段只能在创建的时候被赋值，那么只读属性就起到了作用\n\n```\ninterface IPerson {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet zhangsan: IPerson = {\n  id: 1,\n  name: 'zhangsan',\n  gender: 'm'\n};\n\nzhangsan.id = 2;\n\nCannot assign to 'id' because it is a read-only property.\n```\n\n### 可以为接口定义函数类型<br/>\n\n```\ninterface IPeople {\n  (name: string, age: number): string;\n}\n\nlet hello: IPeople;\nhello = function(name: string, age: number): string {\n  return `my name is ${name} I,m years old ${age}`\n}\n\nhello('zhangsan', 28) //my name is zhangsan I,m years old 28\n```\n\n\n上面简单的介绍了接口的基本用法，也就是对对象的结构进行性约定，接下来我们来用 Interface 对类的行为进行抽象\n\n### 用类实现接口<br/>\n\n用类实现接口主要应用的场景就是类与类之间有一些公有的功能及特性，要实现高度抽象这也是面向对象的基本。在 TypeScript 中用关键字 implements 去实现。\n\n\n```\n// 定义接口，接口中有一个公共的方法eat\ninterface People{\n  eat(food: string)\n}\n// 实现接口的方法\nclass Boy implements People {\n  constructor () {}\n  eat (food: string): string {\n   return food \n  }\n}\n// 实现接口方法\nclass Girl implements People {\n  constructor () {}\n  eat (food: string):string {\n    return food\n  }\n}\n\nlet boy = new Boy()\nconsole.log(boy.eat('apple'))\n\nlet girl = new Girl()\nconsole.log(girl.eat('banana'))\n\n```\n\n一个类也可以实现多个接口\n```\ninterface Eat{\n  food (food: string)\n}\ninterface Drink{\n  drink()\n}\n// 实现接口的方法\nclass People implements Eat, Drink {\n  constructor () {}\n  food (food: string): string {\n   return food \n  }\n  drink ():string {\n    return `小明跑步中吃${this.food('apple')}是不健康的`\n  }\n}\n\nlet people = new People()\nconsole.log(people.drink())\n```\n\n### 接口的继承<br/>\n\n在 JS ECMA6 中类的继承用 extends 关键字， 那么在 TS 中我们依然同样用这个关键字\n\n```\ninterface Eat {\n  eat ()\n}\n\ninterface People extends Eat {\n  eat()\n  run ()\n}\n\n```\n\n### 混合类型<br/>\n\n混合类型实际上就是在接口中存在多种规则，利用这种规则去实现自己的属性和方法\n\n```\n// 定义规则\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n// 实现规则\nfunction getCounter(): Counter {\n  \n  let counter = <Counter>function (start: number) { \n    console.log(start)\n  };\n\n  counter.interval = 0;\n\n  counter.reset = function () {\n    console.log('reset')\n  };\n\n  return counter;\n}\n\nlet counter = getCounter()\ncounter(20); // 20\ncounter.reset(); // reset \ncounter.interval = 5; // 5\n\n```\n\n","slug":"typescript/interfaces","published":1,"updated":"2019-08-26T16:46:27.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9k0054kuu6yv7y2x5h","content":"<p>##</p>\n<p>在面向对象语言中接口 (Interfaces) 是对类的行为的抽象，在TypeScript中也常用于定义结构子类型，方便进行类型检查</p>\n<h3 id=\"定义一个简单的接口\"><a href=\"#定义一个简单的接口\" class=\"headerlink\" title=\"定义一个简单的接口\"></a>定义一个简单的接口<br></h3><pre><code>interface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n  age: 25\n};\n</code></pre><p>上面的例子我定义了一个接口 IPeople，并且定义了一个变量 zhangsan，它的类型是 IPerson，zhangsan的数据结构类型必须与 IPeople 一致否则会报错例如下面</p>\n<pre><code>interface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n};\n\nProperty &#39;age&#39; is missing in type &#39;{ name: string; }&#39; but required in type &#39;IPeople&#39;</code></pre><h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性 \"></a>可选属性 <br></h3><p>当我们定义接口属性的时候不是必须的那么可选属性就起到了作用</p>\n<pre><code>interface IPeople {\n  name: string;\n  age?: number\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n};</code></pre><h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性<br></h3><p>当我们需要定义或增加一些未知的属性，那么任意属性就起到了作用</p>\n<pre><code>interface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: any;\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n  age: 28,\n  gender: &#39;m&#39;\n};</code></pre><p>上述例子中需要注意的是一旦定义了任意属性，那么可选属性和确定属性的类型必须是它的的类型的子集，否则会报错，例如</p>\n<pre><code>interface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: string;\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n  age: 28,\n  gender: &#39;m&#39;\n};\n\nType &#39;{ name: string; age: number; gender: string; }&#39; is not assignable to type &#39;IPeople&#39;.\nProperty &#39;age&#39; is incompatible with index signature.\nType &#39;number&#39; is not assignable to type &#39;string&#39;.</code></pre><h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性<br></h3><p>当我们需要对象中字段只能在创建的时候被赋值，那么只读属性就起到了作用</p>\n<pre><code>interface IPerson {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet zhangsan: IPerson = {\n  id: 1,\n  name: &#39;zhangsan&#39;,\n  gender: &#39;m&#39;\n};\n\nzhangsan.id = 2;\n\nCannot assign to &#39;id&#39; because it is a read-only property.</code></pre><h3 id=\"可以为接口定义函数类型\"><a href=\"#可以为接口定义函数类型\" class=\"headerlink\" title=\"可以为接口定义函数类型\"></a>可以为接口定义函数类型<br></h3><pre><code>interface IPeople {\n  (name: string, age: number): string;\n}\n\nlet hello: IPeople;\nhello = function(name: string, age: number): string {\n  return `my name is ${name} I,m years old ${age}`\n}\n\nhello(&#39;zhangsan&#39;, 28) //my name is zhangsan I,m years old 28</code></pre><p>上面简单的介绍了接口的基本用法，也就是对对象的结构进行性约定，接下来我们来用 Interface 对类的行为进行抽象</p>\n<h3 id=\"用类实现接口\"><a href=\"#用类实现接口\" class=\"headerlink\" title=\"用类实现接口\"></a>用类实现接口<br></h3><p>用类实现接口主要应用的场景就是类与类之间有一些公有的功能及特性，要实现高度抽象这也是面向对象的基本。在 TypeScript 中用关键字 implements 去实现。</p>\n<pre><code>// 定义接口，接口中有一个公共的方法eat\ninterface People{\n  eat(food: string)\n}\n// 实现接口的方法\nclass Boy implements People {\n  constructor () {}\n  eat (food: string): string {\n   return food \n  }\n}\n// 实现接口方法\nclass Girl implements People {\n  constructor () {}\n  eat (food: string):string {\n    return food\n  }\n}\n\nlet boy = new Boy()\nconsole.log(boy.eat(&#39;apple&#39;))\n\nlet girl = new Girl()\nconsole.log(girl.eat(&#39;banana&#39;))\n</code></pre><p>一个类也可以实现多个接口</p>\n<pre><code>interface Eat{\n  food (food: string)\n}\ninterface Drink{\n  drink()\n}\n// 实现接口的方法\nclass People implements Eat, Drink {\n  constructor () {}\n  food (food: string): string {\n   return food \n  }\n  drink ():string {\n    return `小明跑步中吃${this.food(&#39;apple&#39;)}是不健康的`\n  }\n}\n\nlet people = new People()\nconsole.log(people.drink())</code></pre><h3 id=\"接口的继承\"><a href=\"#接口的继承\" class=\"headerlink\" title=\"接口的继承\"></a>接口的继承<br></h3><p>在 JS ECMA6 中类的继承用 extends 关键字， 那么在 TS 中我们依然同样用这个关键字</p>\n<pre><code>interface Eat {\n  eat ()\n}\n\ninterface People extends Eat {\n  eat()\n  run ()\n}\n</code></pre><h3 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型<br></h3><p>混合类型实际上就是在接口中存在多种规则，利用这种规则去实现自己的属性和方法</p>\n<pre><code>// 定义规则\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n// 实现规则\nfunction getCounter(): Counter {\n\n  let counter = &lt;Counter&gt;function (start: number) { \n    console.log(start)\n  };\n\n  counter.interval = 0;\n\n  counter.reset = function () {\n    console.log(&#39;reset&#39;)\n  };\n\n  return counter;\n}\n\nlet counter = getCounter()\ncounter(20); // 20\ncounter.reset(); // reset \ncounter.interval = 5; // 5\n</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>##</p>\n<p>在面向对象语言中接口 (Interfaces) 是对类的行为的抽象，在TypeScript中也常用于定义结构子类型，方便进行类型检查</p>\n<h3 id=\"定义一个简单的接口\"><a href=\"#定义一个简单的接口\" class=\"headerlink\" title=\"定义一个简单的接口\"></a>定义一个简单的接口<br></h3><pre><code>interface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n  age: 25\n};\n</code></pre><p>上面的例子我定义了一个接口 IPeople，并且定义了一个变量 zhangsan，它的类型是 IPerson，zhangsan的数据结构类型必须与 IPeople 一致否则会报错例如下面</p>\n<pre><code>interface IPeople {\n  name: string;\n  age: number\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n};\n\nProperty &#39;age&#39; is missing in type &#39;{ name: string; }&#39; but required in type &#39;IPeople&#39;</code></pre><h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性 \"></a>可选属性 <br></h3><p>当我们定义接口属性的时候不是必须的那么可选属性就起到了作用</p>\n<pre><code>interface IPeople {\n  name: string;\n  age?: number\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n};</code></pre><h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性<br></h3><p>当我们需要定义或增加一些未知的属性，那么任意属性就起到了作用</p>\n<pre><code>interface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: any;\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n  age: 28,\n  gender: &#39;m&#39;\n};</code></pre><p>上述例子中需要注意的是一旦定义了任意属性，那么可选属性和确定属性的类型必须是它的的类型的子集，否则会报错，例如</p>\n<pre><code>interface IPeople {\n  name: string;\n  age?: number\n  [propName: string]: string;\n}\n\nlet zhangsan: IPeople = {\n  name: &#39;zhangsan&#39;,\n  age: 28,\n  gender: &#39;m&#39;\n};\n\nType &#39;{ name: string; age: number; gender: string; }&#39; is not assignable to type &#39;IPeople&#39;.\nProperty &#39;age&#39; is incompatible with index signature.\nType &#39;number&#39; is not assignable to type &#39;string&#39;.</code></pre><h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性<br></h3><p>当我们需要对象中字段只能在创建的时候被赋值，那么只读属性就起到了作用</p>\n<pre><code>interface IPerson {\n  readonly id: number;\n  name: string;\n  age?: number;\n  [propName: string]: any;\n}\n\nlet zhangsan: IPerson = {\n  id: 1,\n  name: &#39;zhangsan&#39;,\n  gender: &#39;m&#39;\n};\n\nzhangsan.id = 2;\n\nCannot assign to &#39;id&#39; because it is a read-only property.</code></pre><h3 id=\"可以为接口定义函数类型\"><a href=\"#可以为接口定义函数类型\" class=\"headerlink\" title=\"可以为接口定义函数类型\"></a>可以为接口定义函数类型<br></h3><pre><code>interface IPeople {\n  (name: string, age: number): string;\n}\n\nlet hello: IPeople;\nhello = function(name: string, age: number): string {\n  return `my name is ${name} I,m years old ${age}`\n}\n\nhello(&#39;zhangsan&#39;, 28) //my name is zhangsan I,m years old 28</code></pre><p>上面简单的介绍了接口的基本用法，也就是对对象的结构进行性约定，接下来我们来用 Interface 对类的行为进行抽象</p>\n<h3 id=\"用类实现接口\"><a href=\"#用类实现接口\" class=\"headerlink\" title=\"用类实现接口\"></a>用类实现接口<br></h3><p>用类实现接口主要应用的场景就是类与类之间有一些公有的功能及特性，要实现高度抽象这也是面向对象的基本。在 TypeScript 中用关键字 implements 去实现。</p>\n<pre><code>// 定义接口，接口中有一个公共的方法eat\ninterface People{\n  eat(food: string)\n}\n// 实现接口的方法\nclass Boy implements People {\n  constructor () {}\n  eat (food: string): string {\n   return food \n  }\n}\n// 实现接口方法\nclass Girl implements People {\n  constructor () {}\n  eat (food: string):string {\n    return food\n  }\n}\n\nlet boy = new Boy()\nconsole.log(boy.eat(&#39;apple&#39;))\n\nlet girl = new Girl()\nconsole.log(girl.eat(&#39;banana&#39;))\n</code></pre><p>一个类也可以实现多个接口</p>\n<pre><code>interface Eat{\n  food (food: string)\n}\ninterface Drink{\n  drink()\n}\n// 实现接口的方法\nclass People implements Eat, Drink {\n  constructor () {}\n  food (food: string): string {\n   return food \n  }\n  drink ():string {\n    return `小明跑步中吃${this.food(&#39;apple&#39;)}是不健康的`\n  }\n}\n\nlet people = new People()\nconsole.log(people.drink())</code></pre><h3 id=\"接口的继承\"><a href=\"#接口的继承\" class=\"headerlink\" title=\"接口的继承\"></a>接口的继承<br></h3><p>在 JS ECMA6 中类的继承用 extends 关键字， 那么在 TS 中我们依然同样用这个关键字</p>\n<pre><code>interface Eat {\n  eat ()\n}\n\ninterface People extends Eat {\n  eat()\n  run ()\n}\n</code></pre><h3 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型<br></h3><p>混合类型实际上就是在接口中存在多种规则，利用这种规则去实现自己的属性和方法</p>\n<pre><code>// 定义规则\ninterface Counter {\n  (start: number): string;\n  interval: number;\n  reset(): void;\n}\n// 实现规则\nfunction getCounter(): Counter {\n\n  let counter = &lt;Counter&gt;function (start: number) { \n    console.log(start)\n  };\n\n  counter.interval = 0;\n\n  counter.reset = function () {\n    console.log(&#39;reset&#39;)\n  };\n\n  return counter;\n}\n\nlet counter = getCounter()\ncounter(20); // 20\ncounter.reset(); // reset \ncounter.interval = 5; // 5\n</code></pre>"},{"title":"class.d.ts","date":"2019-08-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file for class modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ Note that ES6 modules cannot directly export class objects.\n *~ This file should be imported using the CommonJS-style:\n *~   import x = require('someLibrary');\n *~\n *~ Refer to the documentation to understand common\n *~ workarounds for this limitation of ES6 modules.\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myClassLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myClassLib;\n\n/*~ This declaration specifies that the class constructor function\n *~ is the exported object from the file\n */\nexport = MyClass;\n\n/*~ Write your module's methods and properties in this class */\ndeclare class MyClass {\n    constructor(someParam?: string);\n\n    someProperty: string[];\n\n    myMethod(opts: MyClass.MyClassMethodOptions): number;\n}\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block.\n */\ndeclare namespace MyClass {\n    export interface MyClassMethodOptions {\n        width?: number;\n        height?: number;\n    }\n}","source":"_posts/typescript/module-class.d.ts.md","raw":"---\ntitle: class.d.ts\ndate:  2019-8-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file for class modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ Note that ES6 modules cannot directly export class objects.\n *~ This file should be imported using the CommonJS-style:\n *~   import x = require('someLibrary');\n *~\n *~ Refer to the documentation to understand common\n *~ workarounds for this limitation of ES6 modules.\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myClassLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myClassLib;\n\n/*~ This declaration specifies that the class constructor function\n *~ is the exported object from the file\n */\nexport = MyClass;\n\n/*~ Write your module's methods and properties in this class */\ndeclare class MyClass {\n    constructor(someParam?: string);\n\n    someProperty: string[];\n\n    myMethod(opts: MyClass.MyClassMethodOptions): number;\n}\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block.\n */\ndeclare namespace MyClass {\n    export interface MyClassMethodOptions {\n        width?: number;\n        height?: number;\n    }\n}","slug":"typescript/module-class.d.ts","published":1,"updated":"2019-08-26T16:46:27.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9m0058kuu6mb13xes4","content":"<p>// Type definitions for [<del>THE LIBRARY NAME</del>] [<del>OPTIONAL VERSION NUMBER</del>]<br>// Project: [<del>THE PROJECT NAME</del>]<br>// Definitions by: [<del>YOUR NAME</del>] &lt;[<del>A URL FOR YOU</del>]&gt;</p>\n<p>/*~ This is the module template file for class modules.<br> *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.<br> *~ For example, if you were writing a file for “super-greeter”, this<br> *~ file should be ‘super-greeter/index.d.ts’<br> */</p>\n<p>/*~ Note that ES6 modules cannot directly export class objects.<br> *~ This file should be imported using the CommonJS-style:<br> *~   import x = require(‘someLibrary’);<br> *~<br> *~ Refer to the documentation to understand common<br> *~ workarounds for this limitation of ES6 modules.<br> */</p>\n<p>/*~ If this module is a UMD module that exposes a global variable ‘myClassLib’ when<br> *~ loaded outside a module loader environment, declare that global here.<br> *~ Otherwise, delete this declaration.<br> */<br>export as namespace myClassLib;</p>\n<p>/*~ This declaration specifies that the class constructor function<br> *~ is the exported object from the file<br> */<br>export = MyClass;</p>\n<p>/*~ Write your module’s methods and properties in this class */<br>declare class MyClass {<br>    constructor(someParam?: string);</p>\n<pre><code>someProperty: string[];\n\nmyMethod(opts: MyClass.MyClassMethodOptions): number;</code></pre><p>}</p>\n<p>/*~ If you want to expose types from your module as well, you can<br> *~ place them in this block.<br> */<br>declare namespace MyClass {<br>    export interface MyClassMethodOptions {<br>        width?: number;<br>        height?: number;<br>    }<br>}</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>// Type definitions for [<del>THE LIBRARY NAME</del>] [<del>OPTIONAL VERSION NUMBER</del>]<br>// Project: [<del>THE PROJECT NAME</del>]<br>// Definitions by: [<del>YOUR NAME</del>] &lt;[<del>A URL FOR YOU</del>]&gt;</p>\n<p>/*~ This is the module template file for class modules.<br> *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.<br> *~ For example, if you were writing a file for “super-greeter”, this<br> *~ file should be ‘super-greeter/index.d.ts’<br> */</p>\n<p>/*~ Note that ES6 modules cannot directly export class objects.<br> *~ This file should be imported using the CommonJS-style:<br> *~   import x = require(‘someLibrary’);<br> *~<br> *~ Refer to the documentation to understand common<br> *~ workarounds for this limitation of ES6 modules.<br> */</p>\n<p>/*~ If this module is a UMD module that exposes a global variable ‘myClassLib’ when<br> *~ loaded outside a module loader environment, declare that global here.<br> *~ Otherwise, delete this declaration.<br> */<br>export as namespace myClassLib;</p>\n<p>/*~ This declaration specifies that the class constructor function<br> *~ is the exported object from the file<br> */<br>export = MyClass;</p>\n<p>/*~ Write your module’s methods and properties in this class */<br>declare class MyClass {<br>    constructor(someParam?: string);</p>\n<pre><code>someProperty: string[];\n\nmyMethod(opts: MyClass.MyClassMethodOptions): number;</code></pre><p>}</p>\n<p>/*~ If you want to expose types from your module as well, you can<br> *~ place them in this block.<br> */<br>declare namespace MyClass {<br>    export interface MyClassMethodOptions {<br>        width?: number;<br>        height?: number;<br>    }<br>}</p>\n"},{"title":"module.d.ts","date":"2019-08-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myLib;\n\n/*~ If this module has methods, declare them as functions like so.\n */\nexport function myMethod(a: string): string;\nexport function myOtherMethod(a: number): number;\n\n/*~ You can declare types that are available via importing the module */\nexport interface someType {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ You can declare properties of the module using const, let, or var */\nexport const myField: number;\n\n/*~ If there are types, properties, or methods inside dotted names\n *~ of the module, declare them inside a 'namespace'.\n */\nexport namespace subProp {\n    /*~ For example, given this definition, someone could write:\n     *~   import { subProp } from 'yourModule';\n     *~   subProp.foo();\n     *~ or\n     *~   import * as yourMod from 'yourModule';\n     *~   yourMod.subProp.foo();\n     */\n    export function foo(): void;\n}\n```","source":"_posts/typescript/module.d.ts.md","raw":"---\ntitle: module.d.ts\ndate: 2019-8-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n```\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myLib;\n\n/*~ If this module has methods, declare them as functions like so.\n */\nexport function myMethod(a: string): string;\nexport function myOtherMethod(a: number): number;\n\n/*~ You can declare types that are available via importing the module */\nexport interface someType {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ You can declare properties of the module using const, let, or var */\nexport const myField: number;\n\n/*~ If there are types, properties, or methods inside dotted names\n *~ of the module, declare them inside a 'namespace'.\n */\nexport namespace subProp {\n    /*~ For example, given this definition, someone could write:\n     *~   import { subProp } from 'yourModule';\n     *~   subProp.foo();\n     *~ or\n     *~   import * as yourMod from 'yourModule';\n     *~   yourMod.subProp.foo();\n     */\n    export function foo(): void;\n}\n```","slug":"typescript/module.d.ts","published":1,"updated":"2019-08-26T16:46:27.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9n005akuu6y2mxzl06","content":"<pre><code>// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;\n\n/*~ This is the module template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for &quot;super-greeter&quot;, this\n *~ file should be &#39;super-greeter/index.d.ts&#39;\n */\n\n/*~ If this module is a UMD module that exposes a global variable &#39;myLib&#39; when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myLib;\n\n/*~ If this module has methods, declare them as functions like so.\n */\nexport function myMethod(a: string): string;\nexport function myOtherMethod(a: number): number;\n\n/*~ You can declare types that are available via importing the module */\nexport interface someType {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ You can declare properties of the module using const, let, or var */\nexport const myField: number;\n\n/*~ If there are types, properties, or methods inside dotted names\n *~ of the module, declare them inside a &#39;namespace&#39;.\n */\nexport namespace subProp {\n    /*~ For example, given this definition, someone could write:\n     *~   import { subProp } from &#39;yourModule&#39;;\n     *~   subProp.foo();\n     *~ or\n     *~   import * as yourMod from &#39;yourModule&#39;;\n     *~   yourMod.subProp.foo();\n     */\n    export function foo(): void;\n}</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<pre><code>// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;\n\n/*~ This is the module template file. You should rename it to index.d.ts\n *~ and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for &quot;super-greeter&quot;, this\n *~ file should be &#39;super-greeter/index.d.ts&#39;\n */\n\n/*~ If this module is a UMD module that exposes a global variable &#39;myLib&#39; when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myLib;\n\n/*~ If this module has methods, declare them as functions like so.\n */\nexport function myMethod(a: string): string;\nexport function myOtherMethod(a: number): number;\n\n/*~ You can declare types that are available via importing the module */\nexport interface someType {\n    name: string;\n    length: number;\n    extras?: string[];\n}\n\n/*~ You can declare properties of the module using const, let, or var */\nexport const myField: number;\n\n/*~ If there are types, properties, or methods inside dotted names\n *~ of the module, declare them inside a &#39;namespace&#39;.\n */\nexport namespace subProp {\n    /*~ For example, given this definition, someone could write:\n     *~   import { subProp } from &#39;yourModule&#39;;\n     *~   subProp.foo();\n     *~ or\n     *~   import * as yourMod from &#39;yourModule&#39;;\n     *~   yourMod.subProp.foo();\n     */\n    export function foo(): void;\n}</code></pre>"},{"title":"模块与命名空间","date":"2019-06-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n在 JS 中 有 module 模块机制，和 TS 类似，在 TS 中内部模块命名空间为关键字namespaces。外部模块现在只是modules\n\n### 使用命名空间 <br/>\n- 命名空间只是全局命名空间中的JavaScript对象\n- 使用 namespace 关键字\n- 跨多个文件，并且可以使用连接--outFile\n- 不使用require关键字\n\n**1.单文件命名空间**\n  ```\n  namespace Validation {\n    export interface StringValidator {\n      isAcceptable(s: string): boolean;\n    }\n\n    const lettersRegexp = /^[A-Za-z]+$/;\n    const numberRegexp = /^[0-9]+$/;\n\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 && numberRegexp.test(s);\n        }\n    }\n  }\n  ```\n**2.多文件命名空间及引入**\n\nValidation.ts\n```\nnamespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n}\n```\n\nLettersOnlyValidator.ts\n```\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n    const lettersRegexp = /^[A-Za-z]+$/;\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n}\n```\nZipCodeValidator.ts\n```\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n    const numberRegexp = /^[0-9]+$/;\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 && numberRegexp.test(s);\n        }\n    }\n}\n```\nTest.ts\n```\n/// <reference path=\"Validation.ts\" />\n/// <reference path=\"LettersOnlyValidator.ts\" />\n/// <reference path=\"ZipCodeValidator.ts\" />\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(`\"${ s }\" - ${ validators[name].isAcceptable(s) ? \"matches\" : \"does not match\" } ${ name }`);\n  }\n}\n```\n\n涉及多个文件，我们需要确保加载所有已编译的代码。有两种方法可以做到这一点。\n\n1. **--outFile 编译器将根据文件中存在的引用标记自动排序输出文件**\n  ```\n  tsc --outFile sample.js Test.ts\n  ```\n2. **为每一个文件编译一个 JS 文件利用 Script 按照顺序引入**\n  ```\n  <script src=\"Validation.js\" type=\"text/javascript\" />\n  <script src=\"LettersOnlyValidator.js\" type=\"text/javascript\" />\n  <script src=\"ZipCodeValidator.js\" type=\"text/javascript\" />\n  <script src=\"Test.js\" type=\"text/javascript\" />\n  ```\n\n### 使用模块 <br/>\n- 模块在自己的范围内执行，而不是在全局范围内执行\n- 模块中声明的变量，函数，类等在模块外部不可见,除非使用其中一个export显式导出\n- 模块是声明性的; 模块之间的关系是根据文件级别的导入和导出来指定的\n- 模块文件之间引用用关键字 import 或被 export\n\n**1.使用 export 关键字来导出声明**\n\n单模块导出\n```\nexport interface StringValidator {\n  isAcceptable(s: string): boolean;\n}\n```\n\n重命名导出\n```\nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return s.length === 5 && numberRegexp.test(s);\n  }\n}\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };\n```\n导出所有模块\n```\nexport * from \"./StringValidator\";\n\nexport * from \"./ZipCodeValidator\";\n```\n\n**2.使用 import 关键字来导入声明**\n\n从模块导入单个导出\n```\nimport { ZipCodeValidator } from \"./ZipCodeValidator\";\n\nlet myValidator = new ZipCodeValidator();\n```\n\n重命名导入\n```\nimport { ZipCodeValidator as ZCV } from \"./ZipCodeValidator\";\nlet myValidator = new ZCV();\n```\n\n将整个模块导入单个变量，并使用它来访问模块导出\n```\nimport * as validator from \"./ZipCodeValidator\";\n\nlet myValidator = new validator.ZipCodeValidator();\n```\n\n仅使用这个文件\n```\nimport \"./my-module.js\";\n```\n**3.模块的代码生成**\n\n编译器将为Node.js（CommonJS），require.js（AMD），UMD，SystemJS或ECMAScript 2015本机模块（ES6）模块加载系统生成适当的代码\n\n编译 commonjs 规范\n```\ntsc --module commonjs Test.ts\n```\n\n编译 amd 规范\n```\ntsc --module amd Test.ts\n```\n\n","source":"_posts/typescript/module.md","raw":"---\ntitle:  模块与命名空间\ndate: 2019-6-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n在 JS 中 有 module 模块机制，和 TS 类似，在 TS 中内部模块命名空间为关键字namespaces。外部模块现在只是modules\n\n### 使用命名空间 <br/>\n- 命名空间只是全局命名空间中的JavaScript对象\n- 使用 namespace 关键字\n- 跨多个文件，并且可以使用连接--outFile\n- 不使用require关键字\n\n**1.单文件命名空间**\n  ```\n  namespace Validation {\n    export interface StringValidator {\n      isAcceptable(s: string): boolean;\n    }\n\n    const lettersRegexp = /^[A-Za-z]+$/;\n    const numberRegexp = /^[0-9]+$/;\n\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 && numberRegexp.test(s);\n        }\n    }\n  }\n  ```\n**2.多文件命名空间及引入**\n\nValidation.ts\n```\nnamespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n}\n```\n\nLettersOnlyValidator.ts\n```\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n    const lettersRegexp = /^[A-Za-z]+$/;\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n}\n```\nZipCodeValidator.ts\n```\n/// <reference path=\"Validation.ts\" />\nnamespace Validation {\n    const numberRegexp = /^[0-9]+$/;\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 && numberRegexp.test(s);\n        }\n    }\n}\n```\nTest.ts\n```\n/// <reference path=\"Validation.ts\" />\n/// <reference path=\"LettersOnlyValidator.ts\" />\n/// <reference path=\"ZipCodeValidator.ts\" />\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(`\"${ s }\" - ${ validators[name].isAcceptable(s) ? \"matches\" : \"does not match\" } ${ name }`);\n  }\n}\n```\n\n涉及多个文件，我们需要确保加载所有已编译的代码。有两种方法可以做到这一点。\n\n1. **--outFile 编译器将根据文件中存在的引用标记自动排序输出文件**\n  ```\n  tsc --outFile sample.js Test.ts\n  ```\n2. **为每一个文件编译一个 JS 文件利用 Script 按照顺序引入**\n  ```\n  <script src=\"Validation.js\" type=\"text/javascript\" />\n  <script src=\"LettersOnlyValidator.js\" type=\"text/javascript\" />\n  <script src=\"ZipCodeValidator.js\" type=\"text/javascript\" />\n  <script src=\"Test.js\" type=\"text/javascript\" />\n  ```\n\n### 使用模块 <br/>\n- 模块在自己的范围内执行，而不是在全局范围内执行\n- 模块中声明的变量，函数，类等在模块外部不可见,除非使用其中一个export显式导出\n- 模块是声明性的; 模块之间的关系是根据文件级别的导入和导出来指定的\n- 模块文件之间引用用关键字 import 或被 export\n\n**1.使用 export 关键字来导出声明**\n\n单模块导出\n```\nexport interface StringValidator {\n  isAcceptable(s: string): boolean;\n}\n```\n\n重命名导出\n```\nclass ZipCodeValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return s.length === 5 && numberRegexp.test(s);\n  }\n}\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };\n```\n导出所有模块\n```\nexport * from \"./StringValidator\";\n\nexport * from \"./ZipCodeValidator\";\n```\n\n**2.使用 import 关键字来导入声明**\n\n从模块导入单个导出\n```\nimport { ZipCodeValidator } from \"./ZipCodeValidator\";\n\nlet myValidator = new ZipCodeValidator();\n```\n\n重命名导入\n```\nimport { ZipCodeValidator as ZCV } from \"./ZipCodeValidator\";\nlet myValidator = new ZCV();\n```\n\n将整个模块导入单个变量，并使用它来访问模块导出\n```\nimport * as validator from \"./ZipCodeValidator\";\n\nlet myValidator = new validator.ZipCodeValidator();\n```\n\n仅使用这个文件\n```\nimport \"./my-module.js\";\n```\n**3.模块的代码生成**\n\n编译器将为Node.js（CommonJS），require.js（AMD），UMD，SystemJS或ECMAScript 2015本机模块（ES6）模块加载系统生成适当的代码\n\n编译 commonjs 规范\n```\ntsc --module commonjs Test.ts\n```\n\n编译 amd 规范\n```\ntsc --module amd Test.ts\n```\n\n","slug":"typescript/module","published":1,"updated":"2019-08-26T16:46:27.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9p005ekuu6homvekhy","content":"<p>在 JS 中 有 module 模块机制，和 TS 类似，在 TS 中内部模块命名空间为关键字namespaces。外部模块现在只是modules</p>\n<h3 id=\"使用命名空间\"><a href=\"#使用命名空间\" class=\"headerlink\" title=\"使用命名空间 \"></a>使用命名空间 <br></h3><ul>\n<li>命名空间只是全局命名空间中的JavaScript对象</li>\n<li>使用 namespace 关键字</li>\n<li>跨多个文件，并且可以使用连接–outFile</li>\n<li>不使用require关键字</li>\n</ul>\n<p><strong>1.单文件命名空间</strong></p>\n<pre><code>  namespace Validation {\n    export interface StringValidator {\n      isAcceptable(s: string): boolean;\n    }\n\n    const lettersRegexp = /^[A-Za-z]+$/;\n    const numberRegexp = /^[0-9]+$/;\n\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 &amp;&amp; numberRegexp.test(s);\n        }\n    }\n  }</code></pre><p><strong>2.多文件命名空间及引入</strong></p>\n<p>Validation.ts</p>\n<pre><code>namespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n}</code></pre><p>LettersOnlyValidator.ts</p>\n<pre><code>/// &lt;reference path=&quot;Validation.ts&quot; /&gt;\nnamespace Validation {\n    const lettersRegexp = /^[A-Za-z]+$/;\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n}</code></pre><p>ZipCodeValidator.ts</p>\n<pre><code>/// &lt;reference path=&quot;Validation.ts&quot; /&gt;\nnamespace Validation {\n    const numberRegexp = /^[0-9]+$/;\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 &amp;&amp; numberRegexp.test(s);\n        }\n    }\n}</code></pre><p>Test.ts</p>\n<pre><code>/// &lt;reference path=&quot;Validation.ts&quot; /&gt;\n/// &lt;reference path=&quot;LettersOnlyValidator.ts&quot; /&gt;\n/// &lt;reference path=&quot;ZipCodeValidator.ts&quot; /&gt;\n\n// Some samples to try\nlet strings = [&quot;Hello&quot;, &quot;98052&quot;, &quot;101&quot;];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators[&quot;ZIP code&quot;] = new Validation.ZipCodeValidator();\nvalidators[&quot;Letters only&quot;] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(`&quot;${ s }&quot; - ${ validators[name].isAcceptable(s) ? &quot;matches&quot; : &quot;does not match&quot; } ${ name }`);\n  }\n}</code></pre><p>涉及多个文件，我们需要确保加载所有已编译的代码。有两种方法可以做到这一点。</p>\n<ol>\n<li><strong>–outFile 编译器将根据文件中存在的引用标记自动排序输出文件</strong><pre><code>tsc --outFile sample.js Test.ts</code></pre></li>\n<li><strong>为每一个文件编译一个 JS 文件利用 Script 按照顺序引入</strong><pre><code>&lt;script src=&quot;Validation.js&quot; type=&quot;text/javascript&quot; /&gt;\n&lt;script src=&quot;LettersOnlyValidator.js&quot; type=&quot;text/javascript&quot; /&gt;\n&lt;script src=&quot;ZipCodeValidator.js&quot; type=&quot;text/javascript&quot; /&gt;\n&lt;script src=&quot;Test.js&quot; type=&quot;text/javascript&quot; /&gt;</code></pre></li>\n</ol>\n<h3 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块 \"></a>使用模块 <br></h3><ul>\n<li>模块在自己的范围内执行，而不是在全局范围内执行</li>\n<li>模块中声明的变量，函数，类等在模块外部不可见,除非使用其中一个export显式导出</li>\n<li>模块是声明性的; 模块之间的关系是根据文件级别的导入和导出来指定的</li>\n<li>模块文件之间引用用关键字 import 或被 export</li>\n</ul>\n<p><strong>1.使用 export 关键字来导出声明</strong></p>\n<p>单模块导出</p>\n<pre><code>export interface StringValidator {\n  isAcceptable(s: string): boolean;\n}</code></pre><p>重命名导出</p>\n<pre><code>class ZipCodeValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return s.length === 5 &amp;&amp; numberRegexp.test(s);\n  }\n}\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };</code></pre><p>导出所有模块</p>\n<pre><code>export * from &quot;./StringValidator&quot;;\n\nexport * from &quot;./ZipCodeValidator&quot;;</code></pre><p><strong>2.使用 import 关键字来导入声明</strong></p>\n<p>从模块导入单个导出</p>\n<pre><code>import { ZipCodeValidator } from &quot;./ZipCodeValidator&quot;;\n\nlet myValidator = new ZipCodeValidator();</code></pre><p>重命名导入</p>\n<pre><code>import { ZipCodeValidator as ZCV } from &quot;./ZipCodeValidator&quot;;\nlet myValidator = new ZCV();</code></pre><p>将整个模块导入单个变量，并使用它来访问模块导出</p>\n<pre><code>import * as validator from &quot;./ZipCodeValidator&quot;;\n\nlet myValidator = new validator.ZipCodeValidator();</code></pre><p>仅使用这个文件</p>\n<pre><code>import &quot;./my-module.js&quot;;</code></pre><p><strong>3.模块的代码生成</strong></p>\n<p>编译器将为Node.js（CommonJS），require.js（AMD），UMD，SystemJS或ECMAScript 2015本机模块（ES6）模块加载系统生成适当的代码</p>\n<p>编译 commonjs 规范</p>\n<pre><code>tsc --module commonjs Test.ts</code></pre><p>编译 amd 规范</p>\n<pre><code>tsc --module amd Test.ts</code></pre>","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>在 JS 中 有 module 模块机制，和 TS 类似，在 TS 中内部模块命名空间为关键字namespaces。外部模块现在只是modules</p>\n<h3 id=\"使用命名空间\"><a href=\"#使用命名空间\" class=\"headerlink\" title=\"使用命名空间 \"></a>使用命名空间 <br></h3><ul>\n<li>命名空间只是全局命名空间中的JavaScript对象</li>\n<li>使用 namespace 关键字</li>\n<li>跨多个文件，并且可以使用连接–outFile</li>\n<li>不使用require关键字</li>\n</ul>\n<p><strong>1.单文件命名空间</strong></p>\n<pre><code>  namespace Validation {\n    export interface StringValidator {\n      isAcceptable(s: string): boolean;\n    }\n\n    const lettersRegexp = /^[A-Za-z]+$/;\n    const numberRegexp = /^[0-9]+$/;\n\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 &amp;&amp; numberRegexp.test(s);\n        }\n    }\n  }</code></pre><p><strong>2.多文件命名空间及引入</strong></p>\n<p>Validation.ts</p>\n<pre><code>namespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n}</code></pre><p>LettersOnlyValidator.ts</p>\n<pre><code>/// &lt;reference path=&quot;Validation.ts&quot; /&gt;\nnamespace Validation {\n    const lettersRegexp = /^[A-Za-z]+$/;\n    export class LettersOnlyValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return lettersRegexp.test(s);\n        }\n    }\n}</code></pre><p>ZipCodeValidator.ts</p>\n<pre><code>/// &lt;reference path=&quot;Validation.ts&quot; /&gt;\nnamespace Validation {\n    const numberRegexp = /^[0-9]+$/;\n    export class ZipCodeValidator implements StringValidator {\n        isAcceptable(s: string) {\n            return s.length === 5 &amp;&amp; numberRegexp.test(s);\n        }\n    }\n}</code></pre><p>Test.ts</p>\n<pre><code>/// &lt;reference path=&quot;Validation.ts&quot; /&gt;\n/// &lt;reference path=&quot;LettersOnlyValidator.ts&quot; /&gt;\n/// &lt;reference path=&quot;ZipCodeValidator.ts&quot; /&gt;\n\n// Some samples to try\nlet strings = [&quot;Hello&quot;, &quot;98052&quot;, &quot;101&quot;];\n\n// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators[&quot;ZIP code&quot;] = new Validation.ZipCodeValidator();\nvalidators[&quot;Letters only&quot;] = new Validation.LettersOnlyValidator();\n\n// Show whether each string passed each validator\nfor (let s of strings) {\n  for (let name in validators) {\n    console.log(`&quot;${ s }&quot; - ${ validators[name].isAcceptable(s) ? &quot;matches&quot; : &quot;does not match&quot; } ${ name }`);\n  }\n}</code></pre><p>涉及多个文件，我们需要确保加载所有已编译的代码。有两种方法可以做到这一点。</p>\n<ol>\n<li><strong>–outFile 编译器将根据文件中存在的引用标记自动排序输出文件</strong><pre><code>tsc --outFile sample.js Test.ts</code></pre></li>\n<li><strong>为每一个文件编译一个 JS 文件利用 Script 按照顺序引入</strong><pre><code>&lt;script src=&quot;Validation.js&quot; type=&quot;text/javascript&quot; /&gt;\n&lt;script src=&quot;LettersOnlyValidator.js&quot; type=&quot;text/javascript&quot; /&gt;\n&lt;script src=&quot;ZipCodeValidator.js&quot; type=&quot;text/javascript&quot; /&gt;\n&lt;script src=&quot;Test.js&quot; type=&quot;text/javascript&quot; /&gt;</code></pre></li>\n</ol>\n<h3 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块 \"></a>使用模块 <br></h3><ul>\n<li>模块在自己的范围内执行，而不是在全局范围内执行</li>\n<li>模块中声明的变量，函数，类等在模块外部不可见,除非使用其中一个export显式导出</li>\n<li>模块是声明性的; 模块之间的关系是根据文件级别的导入和导出来指定的</li>\n<li>模块文件之间引用用关键字 import 或被 export</li>\n</ul>\n<p><strong>1.使用 export 关键字来导出声明</strong></p>\n<p>单模块导出</p>\n<pre><code>export interface StringValidator {\n  isAcceptable(s: string): boolean;\n}</code></pre><p>重命名导出</p>\n<pre><code>class ZipCodeValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return s.length === 5 &amp;&amp; numberRegexp.test(s);\n  }\n}\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };</code></pre><p>导出所有模块</p>\n<pre><code>export * from &quot;./StringValidator&quot;;\n\nexport * from &quot;./ZipCodeValidator&quot;;</code></pre><p><strong>2.使用 import 关键字来导入声明</strong></p>\n<p>从模块导入单个导出</p>\n<pre><code>import { ZipCodeValidator } from &quot;./ZipCodeValidator&quot;;\n\nlet myValidator = new ZipCodeValidator();</code></pre><p>重命名导入</p>\n<pre><code>import { ZipCodeValidator as ZCV } from &quot;./ZipCodeValidator&quot;;\nlet myValidator = new ZCV();</code></pre><p>将整个模块导入单个变量，并使用它来访问模块导出</p>\n<pre><code>import * as validator from &quot;./ZipCodeValidator&quot;;\n\nlet myValidator = new validator.ZipCodeValidator();</code></pre><p>仅使用这个文件</p>\n<pre><code>import &quot;./my-module.js&quot;;</code></pre><p><strong>3.模块的代码生成</strong></p>\n<p>编译器将为Node.js（CommonJS），require.js（AMD），UMD，SystemJS或ECMAScript 2015本机模块（ES6）模块加载系统生成适当的代码</p>\n<p>编译 commonjs 规范</p>\n<pre><code>tsc --module commonjs Test.ts</code></pre><p>编译 amd 规范</p>\n<pre><code>tsc --module amd Test.ts</code></pre>"},{"title":"function.d.ts","date":"2019-08-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file for function modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ Note that ES6 modules cannot directly export callable functions.\n *~ This file should be imported using the CommonJS-style:\n *~   import x = require('someLibrary');\n *~\n *~ Refer to the documentation to understand common\n *~ workarounds for this limitation of ES6 modules.\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myFuncLib;\n\n/*~ This declaration specifies that the function\n *~ is the exported object from the file\n */\nexport = MyFunction;\n\n/*~ This example shows how to have multiple overloads for your function */\ndeclare function MyFunction(name: string): MyFunction.NamedReturnType;\ndeclare function MyFunction(length: number): MyFunction.LengthReturnType;\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block. Often you will want to describe the\n *~ shape of the return type of the function; that type should\n *~ be declared in here, as this example shows.\n */\ndeclare namespace MyFunction {\n    export interface LengthReturnType {\n        width: number;\n        height: number;\n    }\n    export interface NamedReturnType {\n        firstName: string;\n        lastName: string;\n    }\n\n    /*~ If the module also has properties, declare them here. For example,\n     *~ this declaration says that this code is legal:\n     *~   import f = require('myFuncLibrary');\n     *~   console.log(f.defaultName);\n     */\n    export const defaultName: string;\n    export let defaultLength: number;\n}","source":"_posts/typescript/module-function.d.ts.md","raw":"---\ntitle: function.d.ts\ndate:  2019-8-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]\n// Project: [~THE PROJECT NAME~]\n// Definitions by: [~YOUR NAME~] <[~A URL FOR YOU~]>\n\n/*~ This is the module template file for function modules.\n *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.\n *~ For example, if you were writing a file for \"super-greeter\", this\n *~ file should be 'super-greeter/index.d.ts'\n */\n\n/*~ Note that ES6 modules cannot directly export callable functions.\n *~ This file should be imported using the CommonJS-style:\n *~   import x = require('someLibrary');\n *~\n *~ Refer to the documentation to understand common\n *~ workarounds for this limitation of ES6 modules.\n */\n\n/*~ If this module is a UMD module that exposes a global variable 'myFuncLib' when\n *~ loaded outside a module loader environment, declare that global here.\n *~ Otherwise, delete this declaration.\n */\nexport as namespace myFuncLib;\n\n/*~ This declaration specifies that the function\n *~ is the exported object from the file\n */\nexport = MyFunction;\n\n/*~ This example shows how to have multiple overloads for your function */\ndeclare function MyFunction(name: string): MyFunction.NamedReturnType;\ndeclare function MyFunction(length: number): MyFunction.LengthReturnType;\n\n/*~ If you want to expose types from your module as well, you can\n *~ place them in this block. Often you will want to describe the\n *~ shape of the return type of the function; that type should\n *~ be declared in here, as this example shows.\n */\ndeclare namespace MyFunction {\n    export interface LengthReturnType {\n        width: number;\n        height: number;\n    }\n    export interface NamedReturnType {\n        firstName: string;\n        lastName: string;\n    }\n\n    /*~ If the module also has properties, declare them here. For example,\n     *~ this declaration says that this code is legal:\n     *~   import f = require('myFuncLibrary');\n     *~   console.log(f.defaultName);\n     */\n    export const defaultName: string;\n    export let defaultLength: number;\n}","slug":"typescript/module-function.d.ts","published":1,"updated":"2019-08-26T16:46:27.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9q005gkuu6hodhfzgn","content":"<p>// Type definitions for [<del>THE LIBRARY NAME</del>] [<del>OPTIONAL VERSION NUMBER</del>]<br>// Project: [<del>THE PROJECT NAME</del>]<br>// Definitions by: [<del>YOUR NAME</del>] &lt;[<del>A URL FOR YOU</del>]&gt;</p>\n<p>/*~ This is the module template file for function modules.<br> *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.<br> *~ For example, if you were writing a file for “super-greeter”, this<br> *~ file should be ‘super-greeter/index.d.ts’<br> */</p>\n<p>/*~ Note that ES6 modules cannot directly export callable functions.<br> *~ This file should be imported using the CommonJS-style:<br> *~   import x = require(‘someLibrary’);<br> *~<br> *~ Refer to the documentation to understand common<br> *~ workarounds for this limitation of ES6 modules.<br> */</p>\n<p>/*~ If this module is a UMD module that exposes a global variable ‘myFuncLib’ when<br> *~ loaded outside a module loader environment, declare that global here.<br> *~ Otherwise, delete this declaration.<br> */<br>export as namespace myFuncLib;</p>\n<p>/*~ This declaration specifies that the function<br> *~ is the exported object from the file<br> */<br>export = MyFunction;</p>\n<p>/*~ This example shows how to have multiple overloads for your function */<br>declare function MyFunction(name: string): MyFunction.NamedReturnType;<br>declare function MyFunction(length: number): MyFunction.LengthReturnType;</p>\n<p>/*~ If you want to expose types from your module as well, you can<br> *~ place them in this block. Often you will want to describe the<br> *~ shape of the return type of the function; that type should<br> *~ be declared in here, as this example shows.<br> */<br>declare namespace MyFunction {<br>    export interface LengthReturnType {<br>        width: number;<br>        height: number;<br>    }<br>    export interface NamedReturnType {<br>        firstName: string;<br>        lastName: string;<br>    }</p>\n<pre><code>/*~ If the module also has properties, declare them here. For example,\n *~ this declaration says that this code is legal:\n *~   import f = require(&#39;myFuncLibrary&#39;);\n *~   console.log(f.defaultName);\n */\nexport const defaultName: string;\nexport let defaultLength: number;</code></pre><p>}</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>// Type definitions for [<del>THE LIBRARY NAME</del>] [<del>OPTIONAL VERSION NUMBER</del>]<br>// Project: [<del>THE PROJECT NAME</del>]<br>// Definitions by: [<del>YOUR NAME</del>] &lt;[<del>A URL FOR YOU</del>]&gt;</p>\n<p>/*~ This is the module template file for function modules.<br> *~ You should rename it to index.d.ts and place it in a folder with the same name as the module.<br> *~ For example, if you were writing a file for “super-greeter”, this<br> *~ file should be ‘super-greeter/index.d.ts’<br> */</p>\n<p>/*~ Note that ES6 modules cannot directly export callable functions.<br> *~ This file should be imported using the CommonJS-style:<br> *~   import x = require(‘someLibrary’);<br> *~<br> *~ Refer to the documentation to understand common<br> *~ workarounds for this limitation of ES6 modules.<br> */</p>\n<p>/*~ If this module is a UMD module that exposes a global variable ‘myFuncLib’ when<br> *~ loaded outside a module loader environment, declare that global here.<br> *~ Otherwise, delete this declaration.<br> */<br>export as namespace myFuncLib;</p>\n<p>/*~ This declaration specifies that the function<br> *~ is the exported object from the file<br> */<br>export = MyFunction;</p>\n<p>/*~ This example shows how to have multiple overloads for your function */<br>declare function MyFunction(name: string): MyFunction.NamedReturnType;<br>declare function MyFunction(length: number): MyFunction.LengthReturnType;</p>\n<p>/*~ If you want to expose types from your module as well, you can<br> *~ place them in this block. Often you will want to describe the<br> *~ shape of the return type of the function; that type should<br> *~ be declared in here, as this example shows.<br> */<br>declare namespace MyFunction {<br>    export interface LengthReturnType {<br>        width: number;<br>        height: number;<br>    }<br>    export interface NamedReturnType {<br>        firstName: string;<br>        lastName: string;<br>    }</p>\n<pre><code>/*~ If the module also has properties, declare them here. For example,\n *~ this declaration says that this code is legal:\n *~   import f = require(&#39;myFuncLibrary&#39;);\n *~   console.log(f.defaultName);\n */\nexport const defaultName: string;\nexport let defaultLength: number;</code></pre><p>}</p>\n"},{"title":"tsconfig.json","date":"2019-07-15T10:20:27.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n## \n\n如果一个目录下存在一个tsconfig.json文件，它会把一个文件夹转换为项目，也意味着这个目录是TypeScript项目的根目录\n\n### 使用tsconfig.json\n\n初始化 tsconfig.json 或者手动建立文件tsconfig.json\n```\ntsc --init\n```\n\n如果项目配置了tsconfig.json，那么在进行转换的时候可以在命令行直接输入\n```\ntsc \n```\n编译器会从当前目录开始去查找tsconfig.json文件，逐级向上搜索父目录\n\n否则就需要在编译时加上文件及目录\n```\ntsc test.ts\n```\n默认在当前目录生成test.js\n\n\n### 编写需要的配置项\n\n下面这个例子是列举了在项目中经常用到的配置，当前根据项目的不同会有区别\n\n```\n{\n\n  \"compileOnSave\": true, //让IDE在保存文件的时候根据tsconfig.json重新生成文件\n  \"compilerOptions\": {\n    \"target\": \"ES5\", // 目标代码类型版本\n    \"outDir\":\"build/\", // 重定向输出目录\n    \"baseUrl\":  \"https://test.file.com\", // 解析非相对模块名的基准目录\n    \"noImplicitAny\":true, // 在表达式和声明上有隐含的'any'类型时报错\n    \"removeComments\":true, //编译 js 的时候，删除掉注释\n    \"preserveConstEnums\":true, // 保留const和enum声明\n    \"experimentalDecorators\": true, // 使用装饰器要开始此选项\n    \"emitDecoratorMetadata\": true, // 在使用reflect-metadata库时候需要添加，给源码里的装饰器声明加上设计类型元数据\n    \"declaration\": true, // 编译时候是否同时产生一份 声明文件\n    \"strict\": true, // 编译时开启严格模式\n    \"sourceMap\": true, // 生成相应的.map文件\n    \"module\": \"commonjs\", //生成哪种模块系统代码\n    \"watch\": true, //会在文件改变时候监视输出文件，重新进行编译\n    \n  },\n  \"include\": [ // 编译时包含的目录及文件\n    \"test.ts\" \n  ],\n  \"exclude\": [ // 编译时排除的目录及文件\n    \"node_modules\", \n    \"dist\",  \n    \"mock\"\n    \"build\"\n  ],\n  \"lib\": [ // 需编译过程中需要引入的库文件的列表，不然编译器识别错误报错\n    \"es2017\",\n    \"dom\"\n  ]\n}\n```\n\n*注意使用\"include\"引入的文件可以使用\"exclude\"属性过滤。 然而，通过 \"files\"属性明确指定的文件不管\"exclude\"如何设置却总是会被包含在内。 如果没有特殊指定， \"exclude\"默认情况下会排除node_modules，bower_components，jspm_packages和outDir目录。*\n\n更多参数请参考官网<a href=\"https://www.tslang.cn/docs/handbook/compiler-options.html\"> tsconfig配置列表 </a>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/typescript/tsConfig.md","raw":"---\ntitle: tsconfig.json\ndate:  2019-7-15 18:20:27\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- TypeScript\ncategories:\n- TypeScript\n---\n\n## \n\n如果一个目录下存在一个tsconfig.json文件，它会把一个文件夹转换为项目，也意味着这个目录是TypeScript项目的根目录\n\n### 使用tsconfig.json\n\n初始化 tsconfig.json 或者手动建立文件tsconfig.json\n```\ntsc --init\n```\n\n如果项目配置了tsconfig.json，那么在进行转换的时候可以在命令行直接输入\n```\ntsc \n```\n编译器会从当前目录开始去查找tsconfig.json文件，逐级向上搜索父目录\n\n否则就需要在编译时加上文件及目录\n```\ntsc test.ts\n```\n默认在当前目录生成test.js\n\n\n### 编写需要的配置项\n\n下面这个例子是列举了在项目中经常用到的配置，当前根据项目的不同会有区别\n\n```\n{\n\n  \"compileOnSave\": true, //让IDE在保存文件的时候根据tsconfig.json重新生成文件\n  \"compilerOptions\": {\n    \"target\": \"ES5\", // 目标代码类型版本\n    \"outDir\":\"build/\", // 重定向输出目录\n    \"baseUrl\":  \"https://test.file.com\", // 解析非相对模块名的基准目录\n    \"noImplicitAny\":true, // 在表达式和声明上有隐含的'any'类型时报错\n    \"removeComments\":true, //编译 js 的时候，删除掉注释\n    \"preserveConstEnums\":true, // 保留const和enum声明\n    \"experimentalDecorators\": true, // 使用装饰器要开始此选项\n    \"emitDecoratorMetadata\": true, // 在使用reflect-metadata库时候需要添加，给源码里的装饰器声明加上设计类型元数据\n    \"declaration\": true, // 编译时候是否同时产生一份 声明文件\n    \"strict\": true, // 编译时开启严格模式\n    \"sourceMap\": true, // 生成相应的.map文件\n    \"module\": \"commonjs\", //生成哪种模块系统代码\n    \"watch\": true, //会在文件改变时候监视输出文件，重新进行编译\n    \n  },\n  \"include\": [ // 编译时包含的目录及文件\n    \"test.ts\" \n  ],\n  \"exclude\": [ // 编译时排除的目录及文件\n    \"node_modules\", \n    \"dist\",  \n    \"mock\"\n    \"build\"\n  ],\n  \"lib\": [ // 需编译过程中需要引入的库文件的列表，不然编译器识别错误报错\n    \"es2017\",\n    \"dom\"\n  ]\n}\n```\n\n*注意使用\"include\"引入的文件可以使用\"exclude\"属性过滤。 然而，通过 \"files\"属性明确指定的文件不管\"exclude\"如何设置却总是会被包含在内。 如果没有特殊指定， \"exclude\"默认情况下会排除node_modules，bower_components，jspm_packages和outDir目录。*\n\n更多参数请参考官网<a href=\"https://www.tslang.cn/docs/handbook/compiler-options.html\"> tsconfig配置列表 </a>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"typescript/tsConfig","published":1,"updated":"2019-08-26T16:46:27.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9s005kkuu6qygremna","content":"<p>## </p>\n<p>如果一个目录下存在一个tsconfig.json文件，它会把一个文件夹转换为项目，也意味着这个目录是TypeScript项目的根目录</p>\n<h3 id=\"使用tsconfig-json\"><a href=\"#使用tsconfig-json\" class=\"headerlink\" title=\"使用tsconfig.json\"></a>使用tsconfig.json</h3><p>初始化 tsconfig.json 或者手动建立文件tsconfig.json</p>\n<pre><code>tsc --init</code></pre><p>如果项目配置了tsconfig.json，那么在进行转换的时候可以在命令行直接输入</p>\n<pre><code>tsc </code></pre><p>编译器会从当前目录开始去查找tsconfig.json文件，逐级向上搜索父目录</p>\n<p>否则就需要在编译时加上文件及目录</p>\n<pre><code>tsc test.ts</code></pre><p>默认在当前目录生成test.js</p>\n<h3 id=\"编写需要的配置项\"><a href=\"#编写需要的配置项\" class=\"headerlink\" title=\"编写需要的配置项\"></a>编写需要的配置项</h3><p>下面这个例子是列举了在项目中经常用到的配置，当前根据项目的不同会有区别</p>\n<pre><code>{\n\n  &quot;compileOnSave&quot;: true, //让IDE在保存文件的时候根据tsconfig.json重新生成文件\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES5&quot;, // 目标代码类型版本\n    &quot;outDir&quot;:&quot;build/&quot;, // 重定向输出目录\n    &quot;baseUrl&quot;:  &quot;https://test.file.com&quot;, // 解析非相对模块名的基准目录\n    &quot;noImplicitAny&quot;:true, // 在表达式和声明上有隐含的&#39;any&#39;类型时报错\n    &quot;removeComments&quot;:true, //编译 js 的时候，删除掉注释\n    &quot;preserveConstEnums&quot;:true, // 保留const和enum声明\n    &quot;experimentalDecorators&quot;: true, // 使用装饰器要开始此选项\n    &quot;emitDecoratorMetadata&quot;: true, // 在使用reflect-metadata库时候需要添加，给源码里的装饰器声明加上设计类型元数据\n    &quot;declaration&quot;: true, // 编译时候是否同时产生一份 声明文件\n    &quot;strict&quot;: true, // 编译时开启严格模式\n    &quot;sourceMap&quot;: true, // 生成相应的.map文件\n    &quot;module&quot;: &quot;commonjs&quot;, //生成哪种模块系统代码\n    &quot;watch&quot;: true, //会在文件改变时候监视输出文件，重新进行编译\n\n  },\n  &quot;include&quot;: [ // 编译时包含的目录及文件\n    &quot;test.ts&quot; \n  ],\n  &quot;exclude&quot;: [ // 编译时排除的目录及文件\n    &quot;node_modules&quot;, \n    &quot;dist&quot;,  \n    &quot;mock&quot;\n    &quot;build&quot;\n  ],\n  &quot;lib&quot;: [ // 需编译过程中需要引入的库文件的列表，不然编译器识别错误报错\n    &quot;es2017&quot;,\n    &quot;dom&quot;\n  ]\n}</code></pre><p><em>注意使用”include”引入的文件可以使用”exclude”属性过滤。 然而，通过 “files”属性明确指定的文件不管”exclude”如何设置却总是会被包含在内。 如果没有特殊指定， “exclude”默认情况下会排除node_modules，bower_components，jspm_packages和outDir目录。</em></p>\n<p>更多参数请参考官网<a href=\"https://www.tslang.cn/docs/handbook/compiler-options.html\" target=\"_blank\" rel=\"noopener\"> tsconfig配置列表 </a></p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<p>## </p>\n<p>如果一个目录下存在一个tsconfig.json文件，它会把一个文件夹转换为项目，也意味着这个目录是TypeScript项目的根目录</p>\n<h3 id=\"使用tsconfig-json\"><a href=\"#使用tsconfig-json\" class=\"headerlink\" title=\"使用tsconfig.json\"></a>使用tsconfig.json</h3><p>初始化 tsconfig.json 或者手动建立文件tsconfig.json</p>\n<pre><code>tsc --init</code></pre><p>如果项目配置了tsconfig.json，那么在进行转换的时候可以在命令行直接输入</p>\n<pre><code>tsc </code></pre><p>编译器会从当前目录开始去查找tsconfig.json文件，逐级向上搜索父目录</p>\n<p>否则就需要在编译时加上文件及目录</p>\n<pre><code>tsc test.ts</code></pre><p>默认在当前目录生成test.js</p>\n<h3 id=\"编写需要的配置项\"><a href=\"#编写需要的配置项\" class=\"headerlink\" title=\"编写需要的配置项\"></a>编写需要的配置项</h3><p>下面这个例子是列举了在项目中经常用到的配置，当前根据项目的不同会有区别</p>\n<pre><code>{\n\n  &quot;compileOnSave&quot;: true, //让IDE在保存文件的时候根据tsconfig.json重新生成文件\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ES5&quot;, // 目标代码类型版本\n    &quot;outDir&quot;:&quot;build/&quot;, // 重定向输出目录\n    &quot;baseUrl&quot;:  &quot;https://test.file.com&quot;, // 解析非相对模块名的基准目录\n    &quot;noImplicitAny&quot;:true, // 在表达式和声明上有隐含的&#39;any&#39;类型时报错\n    &quot;removeComments&quot;:true, //编译 js 的时候，删除掉注释\n    &quot;preserveConstEnums&quot;:true, // 保留const和enum声明\n    &quot;experimentalDecorators&quot;: true, // 使用装饰器要开始此选项\n    &quot;emitDecoratorMetadata&quot;: true, // 在使用reflect-metadata库时候需要添加，给源码里的装饰器声明加上设计类型元数据\n    &quot;declaration&quot;: true, // 编译时候是否同时产生一份 声明文件\n    &quot;strict&quot;: true, // 编译时开启严格模式\n    &quot;sourceMap&quot;: true, // 生成相应的.map文件\n    &quot;module&quot;: &quot;commonjs&quot;, //生成哪种模块系统代码\n    &quot;watch&quot;: true, //会在文件改变时候监视输出文件，重新进行编译\n\n  },\n  &quot;include&quot;: [ // 编译时包含的目录及文件\n    &quot;test.ts&quot; \n  ],\n  &quot;exclude&quot;: [ // 编译时排除的目录及文件\n    &quot;node_modules&quot;, \n    &quot;dist&quot;,  \n    &quot;mock&quot;\n    &quot;build&quot;\n  ],\n  &quot;lib&quot;: [ // 需编译过程中需要引入的库文件的列表，不然编译器识别错误报错\n    &quot;es2017&quot;,\n    &quot;dom&quot;\n  ]\n}</code></pre><p><em>注意使用”include”引入的文件可以使用”exclude”属性过滤。 然而，通过 “files”属性明确指定的文件不管”exclude”如何设置却总是会被包含在内。 如果没有特殊指定， “exclude”默认情况下会排除node_modules，bower_components，jspm_packages和outDir目录。</em></p>\n<p>更多参数请参考官网<a href=\"https://www.tslang.cn/docs/handbook/compiler-options.html\" target=\"_blank\" rel=\"noopener\"> tsconfig配置列表 </a></p>\n"},{"title":"vue 原理解析一","date":"2019-08-27T15:12:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":null,"_content":"\n\n<div align=\"middle\">\n  <iframe \n    frameborder=\"no\" \n    border=\"0\" \n    marginwidth=\"0\" \n    marginheight=\"0\" \n    width=330 \n    height=86 \n    src=\"//music.163.com/outchain/player?type=2&id=436394160&auto=1&height=66\">\n  </iframe>\n</div>\n\n\n## 源码架构\n\nvue 一直以简单，快速著称，也自称为渐进式框架今天我们来分析一下vue的源码，这样我们也能了解其中的思想，帮助我们在工作中很好的应用和解决问题。当然我们并不可能把源码很细致的分析个遍，那样没什么意义。随着版本不断的更新会根据版本分析每个版本的核心原理。\n附上 git 仓库<a href=\"https://github.com/vuejs/vue\">vue源码</a>地址。\n\n我们看一下 vue 源码的核心目录方便大家去对应查找\n\n``` md\nsrc\n├── compiler/        # 模版编译目录 \n├── core/            # 核心代码 \n├── platforms/       # 跨平台的支持\n├── server/          # 处理服务端渲染\n├── sfc/             # .vue 文件的解析\n├── shared/          # 全局用到的工具函数\n```\n\n### compiler<hr>\n\nvue 所有编译相关的代码。包括把模版解析成抽象语法树（AST）,编译、生成等功能\n\n### core<hr>\n\nvue 核心代码，包括内置组件，指令、全局API、Observer、虚拟DOM、全局工具函数等，这个目录也是vue的灵魂，也是我们重点关注分析的地方，compiler 会在后续文章中分析\n\n###  platform<hr>\n\n最初 vue 是跑在 web 上的mvvm架构, 后期增加了 阿里团队的 weex 入口，配合 weex 也可以运行在 native 客户端上\n\n### server <hr>\n\n服务端渲染入口，这是是vue2.0 之后更新的功能，所谓的服务端渲染是把相对应的组件渲染为服务端的 html 字符串，然后发送给客户端，客户端进行处理。这样做能提高客户体验\n\n### sfc<hr>\n\n将 .vue 文件内容解析成JavaScript的对象\n\n\n## 源码构建\n\nvue 源码是基于 <a href=\"https://rollupjs.org/guide/en/\">Rollup </a>构建的，构建的配置在 scripts 目录下\n\n``` md\nscripts\n├── git-hook/           # git-hook配置文件\n├── alias               # 混入文件目录别名配置\n├── build               # 构建的入口文件\n├── config              # 构建全局配置文件\n├── feature-flags       # weex 环境 flag\n├── gen-release-note    # 生成 Change log\n├── get-weex-version    # 生成 weexBaseVersion\n├── release-weex        # weex发布的脚本\n├── release             # 发布脚本\n├── verify-commit-msg   # 检查 Commit message 是否符合格式\n```\n\n### 构建脚本<hr>\n\n基于 npm 托管的项目都会有一个 package.json 文件，这个文件当中的 script 描述符中一般配置的基本都是启动项目、打包、测试等相关命令, 看一下 vue 项目根目录的 package.json,由于只做 build 环境中的分析，所以我们去掉 dev、test等执行命令\n\n``` json\n{\n  \"scripts\": {\n    \"build\": \"node scripts/build.js\",\n    \"build:ssr\": \"npm run build -- web-runtime-cjs,web-server-renderer\",\n    \"build:weex\": \"npm run build -- weex\",\n  } \n}\n```\n\n\n上面三个命令在执行的时候通过环境参数来区分不同的平台，当执行 `npm run build` 命令的时候就会执行 `node scripts/build.js` 这个文件\n\n### 构建过程<hr>\n\n接下来来查看一下 `node scripts/build.js` 这个文件看看执行过程\n\n```js\nlet builds = require('./config').getAllBuilds()\n// filter builds via command line arg\nif (process.argv[2]) {\n  const filters = process.argv[2].split(',')\n  builds = builds.filter(b => {\n    return filters.some(f => b.output.file.indexOf(f) > -1 || b._name.indexOf(f) > -1)\n  })\n} else {\n  // filter out weex builds by default\n  builds = builds.filter(b => {\n    return b.output.file.indexOf('weex') === -1\n  })\n}\n\nbuild(builds)\n// ...\n\n\n```\n\n通过上面的代码片段了解到主要引用了 `./config` getAllBuilds 文件下面的方法，进入这个文件\n\n```js\nconst builds = {\n  // ...\n\n  const aliases = require('./alias')\n  const resolve = p => {\n    const base = p.split('/')[0]\n    if (aliases[base]) {\n      return path.resolve(aliases[base], p.slice(base.length + 1))\n    } else {\n      return path.resolve(__dirname, '../', p)\n    }\n  }\n\n\n  // Runtime only (CommonJS). Used by bundlers e.g. Webpack & Browserify\n  'web-runtime-cjs-prod': {\n    entry: resolve('web/entry-runtime.js'),\n    dest: resolve('dist/vue.runtime.common.prod.js'),\n    format: 'cjs',\n    env: 'production',\n    banner\n  },\n  // runtime-only production build (Browser)\n  'web-runtime-prod': {\n    entry: resolve('web/entry-runtime.js'),\n    dest: resolve('dist/vue.runtime.min.js'),\n    format: 'umd',\n    env: 'production',\n    banner\n  },\n  // Runtime+compiler CommonJS build (CommonJS)\n  'web-full-prod': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),\n    dest: resolve('dist/vue.min.js'),\n    format: 'umd',\n    env: 'production',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n\n  // ...\n}\n\nfunction genConfig (name) {\n  const opts = builds[name]\n  const config = {\n    input: opts.entry,\n    external: opts.external,\n    plugins: [\n      flow(),\n      alias(Object.assign({}, aliases, opts.alias))\n    ].concat(opts.plugins || []),\n    output: {\n      file: opts.dest,\n      format: opts.format,\n      banner: opts.banner,\n      name: opts.moduleName || 'Vue'\n    }\n    // ...\n  }\n  // ...\n  Object.defineProperty(config, '_name', {\n    enumerable: false,\n    value: name\n  })\n  return config\n\n}\n\n```\n\n通过这里的代码片面大概了解到 vue 通过当前web、服务端渲染、webpack插件、weex等配置来进行打包，每一个配置都遵循 rollup 的构建规则\n\n```json\n{\n  \"entry\": \"构建的入口文件\",\n  \"dest\": \"构建后的文件地址\",\n  \"format\": \"构建规范\",\n  \"alias\": \"别名设置\" \n  // ...\n}\n\n```\n\n那么在打包的过程中进行了路径别名设置，通过别名设置能够简化代码使之更清晰整洁。\n\n```js\nconst path = require('path')\n\nconst resolve = p => path.resolve(__dirname, '../', p)\n\nmodule.exports = {\n  vue: resolve('src/platforms/web/entry-runtime-with-compiler'),\n  compiler: resolve('src/compiler'),\n  core: resolve('src/core'),\n  shared: resolve('src/shared'),\n  web: resolve('src/platforms/web'),\n  weex: resolve('src/platforms/weex'),\n  server: resolve('src/server'),\n  sfc: resolve('src/sfc')\n}\n```\n\n看到这个别名设置，我们就应该很清楚 vue 的核心构建文件都在 src 目录，具体作用在文章开头就已经介绍过了。那么我们主要看 web 别名下的目录，其它的目录有兴趣的同学可以了解一下实现规则\n\n```js\nimport Vue from 'core/index'\nimport config from 'core/config'\nimport { extend, noop } from 'shared/util'\nimport { mountComponent } from 'core/instance/lifecycle'\nimport { devtools, inBrowser } from 'core/util/index'\n\n// ...\n\nimport { patch } from './patch'\nimport platformDirectives from './directives/index'\nimport platformComponents from './components/index'\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives)\nextend(Vue.options.components, platformComponents)\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// ...\n\n```\n\n终于看到了 Vue 构造函数和核心代码的入口`core/index`，并在构造函数和原型上面挂载了一些方法，通过执行的上述构建过程我们总结到\n\nVue.js 的组成是由 core + 对应的 ‘平台’ 补充代码构成(独立构建和运行时构建 只是 platforms 下 web 平台的两种选择)\n\n<img src=\"/images/vue-init.png\" width=\"50%\">\n\n\n## new Vue\n\n\n通过 vue 的核心目录，我们知道 Vue 实际上是一个构造函数，上面挂满了大大小小的各种方法我们在用的时候传一定的参数即可\n\n```js\nnew Vue({\n  el: 'xxxx',\n  data: xxxx,\n  ...\n})\n```\n\n### initGlobalAPI<hr/>\n\n那么在 vue 实例化的过程中到底发生了什么，打开核心代码 `src/core` 目录下面的 index\n\n\n```js\nsrc/core/index.js\n\n// vue初始化的核心文件--创建Vue构造函数，将构造函数传入五个方法中\nimport Vue from './instance/index'\n// 初始化全局API\nimport { initGlobalAPI } from './global-api/index'\n// 获得一些环境判断，和是否是服务端渲染\nimport { isServerRendering } from 'core/util/env'\n// ssr 环境加载此方法\nimport { FunctionalRenderContext } from 'core/vdom/create-functional-component'\n\n//初始化全局API变量\ninitGlobalAPI(Vue)\n\n//为vue的原型定义$isServer属性\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n})\n\n//为vue的原型定义$ssrContext\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n})\n\n//为vue原型定义当为ssr环境时加载FunctionalRenderContext方法\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n})\n\n//添加版本号\nVue.version = '__VERSION__'\n\nexport default Vue\n```\n\n总结一下这个文件加载的方法\n\n```md\n\ncore/index\n├── Vue            # 初始化构造函数\n├── initGlobalAPI  # 初始化全局API\n├── $isServer      # 判断环境的工具函数\n├── $ssrContext    # ssr 环境加载此方法也可用于操作状态\n├── FunctionalRenderContext  # ssr 环境加载此方法\n├── 添加版本号\n```\n### new Vue <hr/>\n\n初始化文件后，进入导出 Vue 构造函数的文件 `src/core/instance/index.js `\n\n```js\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n\n上面我们看到了 Vue 实际上就是一个用 Function 实现的类，通过 new 关键字初始化，然后会调用 this._init 方法。\n\n```js\n// ...\n Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n\n    let startTag, endTag\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = `vue-perf-start:${vm._uid}`\n      endTag = `vue-perf-end:${vm._uid}`\n      mark(startTag)\n    }\n\n    // 如果是Vue的实例，则不需要被observe\n    vm._isVue = true\n\n    // 对参数进行 merge 操作  \n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n\n    // 通过判断 Proxy 为 vue的实例属性赋值\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    vm._self = vm\n\n    // 初始化生命周期相关\n    initLifecycle(vm)\n\n    // 输初始化事件监听相关\n    initEvents(vm)\n\n    // 初始化编译render\n    initRender(vm)\n\n    // 调用beforeCreate钩子函数并且触发beforeCreate钩子事件\n    callHook(vm, 'beforeCreate')\n\n    initInjections(vm)\n\n    // 初始化props、methods、data、computed与watch\n    initState(vm)\n\n    initProvide(vm)\n\n    // 调用created钩子函数并且触发created钩子事件\n    callHook(vm, 'created')\n\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      // 格式化组件名\n      vm._name = formatComponentName(vm, false)\n      mark(endTag)\n      measure(`vue ${vm._name} init`, startTag, endTag)\n    }\n\n\n    // 挂载组件方法触发组件的DOM渲染\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n\n// ...\n```\n通过上面代码的注释，了解到 Vue 初始化主要就干了几件事情，合并配置操作，初始化生命周期，初始化事件监听，初始化render，初始化 data、props、computed、watcher 等，在最后调用vm.$mount 方法挂载 vm ，把模版渲染成DOM。当然这里面还有很多细节需要知道例如上面初始化合并配置，生命周期初始化等，会在后面清楚的梳理 vue 整理流程之后，进入细节\n\n## vm.$mount\n\n通过 $mount 实例方法去挂载 vm ，但 $mount 方法是由于多平台编译处理不太一样，所以在多个文件中定义。我们进入 `src/platform` 这个目录可以观察到有 web 和 weex 目录，我们直接抛掉 weex，只分析 web 目录，在 vue 官网教程中介绍了vue的完整版`web/entry-runtime-with-compiler.js`和runtime版本`web/runtime/index.js`\n\n完整版\n\n- 包含编译和运行是的版本\n- html字符串 → render函数 → vnode → 真实dom节点\n\nruntime版本\n\n- 创建 Vue 实例、render、更新 DOM 等的操作的代码，没有编译器编译模版字符串代码\n- render函数 → vnode → 真实dom节点\n\n\n### 完整版 $mount<hr>\n\n```js\n// ...\n\nconst mount = Vue.prototype.$mount\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && query(el)\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      \n      // ...\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== 'production',\n        shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n\n      // ..\n    }\n  }\n  return mount.call(this, el, hydrating)\n}\n\n// ...\n```\n\n上面代码逻辑很清晰，将执行以下过程\n\n- 首先在原型上定义了 $mount 这个方法\n- 对传入的 el 做限制不能将节点挂载在 body 和 html 这种根节点上\n- 如果没有定义 render 方法，则会把 el 或者 template 字符串转换成 render 方法\n- 模版或字符串转换 render 方法（调用 compileToFunctions 进行编译转换）\n\n\n### runtime 版本 $mount<hr>\n\n```js\n// ...\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// ...\n\n```\n\n执行过程\n- 挂载的元素，可以是字符串，也可以是DOM对象，如果是字符串通过 query 方法转换成DOM\n- 执行 mountComponent 函数传入三个参数\n \n通过上面代码可以看出并没有经过 compileToFunctions方法 进行转换编译阶段，而直接是 render --> VNode 过程。\n\n接下来我们接着查看 mountComponent方法调用，打开文件`src/core/instance/lifecycle.js`\n\n```js\nexport function mountComponent (\n  vm: Component,\n  el: ?Element,\n  hydrating?: boolean\n): Component {\n  vm.$el = el\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode\n    // ...\n  }\n  callHook(vm, 'beforeMount')\n\n  let updateComponent\n  \n  // ...\n\n  updateComponent = () => {\n    vm._update(vm._render(), hydrating)\n  }\n\n  // ...\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate')\n      }\n    }\n  }, true /* isRenderWatcher */)\n  hydrating = false\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true\n    callHook(vm, 'mounted')\n  }\n  return vm\n}\n```\n\n通过上面代码很直观的看见 mountComponent 方法主要作用\n\n- 判断 render 函数是不是存在如果不存在调用创建 createEmptyVNode 方法创建一个空VNode节点\n- 检测完 render 开始挂载 beforeMount 钩子\n- 执行 new Watcher方法()\n- _isMounted状态设置true， 开始挂载mounted\n\n\nWatcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM\n\nWatcher 初始化的时候会执行回调函数，当 vm 实例中的监测的数据发生变化的时候也会执行回调函数，这就是我们说的观察者进行依赖收集的过程,当然这也是 vue 核心原理的一部分。new Watcher到底做了什么我们在后面的单独整理，先以主线程为主\n\n\n## vm._render\n\n上文中提到 Watcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM，那么就出现私有方法 vm._render 和 vm._update 两个最核心的方法。\n \n_render 定义在 `src/core/instance/render.js` 中\n\n```js\n\n  // ...\n  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    const { render, _parentVnode } = vm.$options\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      )\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode\n    // render self\n    let vnode\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      handleError(e, vm, `render`)\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n        } catch (e) {\n          handleError(e, vm, `renderError`)\n          vnode = vm._vnode\n        }\n      } else {\n        vnode = vm._vnode\n      }\n    } finally {\n      currentRenderingInstance = null\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0]\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        )\n      }\n      vnode = createEmptyVNode()\n    }\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }\n```\n\n\n上面这段代码最关键的地方就是调用 render 方法 `render.call(vm._renderProxy, vm.$createElement)`，在上面说过在 mounted 方法中会把 template 和 string 经过 compileToFunctions 编译最后形成 render 方法进行渲染，但这是用字符串模版的形式，如果用字符串模板的代替方案 render 方法呢\n\n\n```js\nnew Vue({\n  render: function (createElement) {\n   return createElement('div', {\n     attrs: {\n        id: 'app'\n      },\n  }, this.message)\n  },\n  renderError: function(createElement, err) {\n    return createElement('pre', { style: { color: 'red' }}, err.stack)\n  }\n}).$mount('#app')\n```\n\n我们可以看出render 方法的参数 createElement 实际上就是 vm.$createElement,然而 vm.$createElement 在初始化中就已经执行过了\n\n```js\nexport function initRender (vm: Component) {\n  \n  // ...\n\n  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  const parentData = parentVnode && parentVnode.data\n\n  // ...\n\n}\n```\n\n所以在 initRender 方法的时候，除了 vm.$createElement 方法，还有一个 vm._c 方法，它是被模板编译成的 render 函数使用，但 vm.$createElement 是我们用原生写的 render 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 createElement 方法。\n\n官网中一句话说的很清楚 **Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。**\n\n通过上述总结到 render 函数最终是执行 createElement 方法 返回 vnode 节点，这是一个虚拟 node 而 vue2.0 的 另一个核心就是利用了Virtual DOM，实际上 Vue.js 中 Virtual DOM 是借鉴了开源库 <a href=\"https://github.com/snabbdom/snabbdom\">snabbdom</a> 的实现，然后加入了一些 Vue.js 特色的东西, 这部分源码就在 `src/core/vdom/vnode.js` 中我们暂时不去查看，待后续文章写到 Virtual DOM 的时候我们在做分析。 \n\n那么在面试中我们经常被问到是 操作 Virtual DOM 快还是真实 DOM 快\n\n答案是相对的在数据量大的情况下，肯定是 Virtual DOM 快，因为通过对比 node 减少频繁的去更新DOM， 如果数据量相对较小的情况还是直接操作 DOM 较快，因为少了编译、遍历、对比的过程\n\n## vm.$createElement\n\n上面文章提到 render 的时候内部调用了 createElement 方法，创建了vnode，该方法定义在 src/core/vdom/create-elemenet.js 中\n\n```js\n// ...\n\nexport function _createElement (\n  context: Component,\n  tag?: string | Class<Component> | Function | Object,\n  data?: VNodeData,\n  children?: any,\n  normalizationType?: number\n): VNode | Array<VNode> {\n\n   /**\n   * 如果存在data.__ob__，说明data是被Observer观察的数据\n   * 不能用作虚拟节点的data\n   * 需要抛出警告，并返回一个空节点\n   *\n   * 被监控的data不能被用作vnode渲染的数据的原因是：\n   * data在vnode渲染过程中可能会被改变，这样会触发监控，导致不符合预期的操作\n   */   \n  if (isDef(data) && isDef((data: any).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` +\n      'Always create fresh vnode data objects in each render!',\n      context\n    )\n    return createEmptyVNode()\n  }\n\n  // 当通过 :is 动态设置组件时\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n\n\n  // ...\n\n  // 作用域插槽\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {}\n    data.scopedSlots = { default: children[0] }\n    children.length = 0\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children)\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children)\n  }\n  let vnode, ns\n  if (typeof tag === 'string') {\n    let Ctor\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag)\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          `The .native modifier for v-on is only valid on components but it was used on <${tag}>.`,\n          context\n        )\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      )\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag)\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      )\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children)\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) applyNS(vnode, ns)\n    if (isDef(data)) registerDeepBindings(data)\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\n// ...\n\n```\n\n通过上面代码我们看到 主要调用了几个方法 createEmptyVNode 和 createComponent、normalizeChildren、simpleNormalizeChildren\n\n我们简单的看一下执行步骤\n\n首先判断了 tag 是否存在，如果不存在则调用 `src/core/vdom/vnode.js`目录下的 createEmptyVNode 方法创建空的 vnode 节点\n\n如果传递了children，由于其是任意类型，所以根据 normalizationType 去调用`src/core/vdom/helpers/normalzie-children.js` 目录下的 normalizeChildren(children) 和 simpleNormalizeChildren(children) 方法进行递归遍历，把整个 children 打平，让它变成深度只有一层的 vnode 数组\n\n最后通过 对参数 tag 的判断，如果是一个普通的 html 标签，则实例化一个普通 vnode 节点，否则通过 `src/core/vdom/create-component.js`目录下的 createComponent 方法创建一个组件的 vnode\n\n因为除了组件的 vnode 没有 children，其他通过 createElement 创建的每个 vnode 都有 children，children 每个元素也是一个 vnode，这样就形成了一个 vnode tree，这样我们就知道 vm._render 阶段是如何创建的 vnode，那么接下来我们就通过 vm._update，将 vnode 渲染成真实的 dom。\n\n## vm._update\n\nvm._update 也是一个私有方法，作用是把 vnode 渲染成真实的 dom 在 `src/core/instance/lifecycle.js` 文件中定义\n\n### _update <hr/>\n\n```js\n\n  // ...\n\n\n  Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n    const vm: Component = this\n    const prevEl = vm.$el\n    const prevVnode = vm._vnode\n    const restoreActiveInstance = setActiveInstance(vm)\n    vm._vnode = vnode\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n    restoreActiveInstance()\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  }\n\n  // ...\n```\n\n通过上面代码我们知道 vm._update 的核心就是通过 vm.__patch__函数来实现将 vnode 转换成真实的 node 节点，而 vm.__patch__ 的实现是多平台的有weex、ssr、inBrowser，我们只查看在浏览器环境内的实现\n\n在 `src/platforms/web/runtime/index.js` 通过判断如果是浏览器环境调用 patch，否则创建一个空对象\n\n### __patch__ <hr/>\n\n```js\n// ...\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// ...\n```\n\n通过引用我们到 `src/platforms/web/runtime/patch.js` 目录下调用了 createPatchFunction 方法的返回值\n\n```js\nexport const patch: Function = createPatchFunction({ nodeOps, modules })\n```\n\n### createPatchFunction <hr>\n\n在通过查找文件 `src/core/vdom/patch.js` 中定义的 createPatchFunction 方法\n\n```js\n\n// ...\n\nexport function createPatchFunction (backend) {\n\n  // ...\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    // 如果 vnode 不存在但 oldVnode 存在，调用 invokeDestroyHook(oldVnode) 来进行销毁旧节点\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = []\n\n    // 如果oldVnode不存在，vnode存在，则创建新节点  \n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true\n      createElm(vnode, insertedVnodeQueue)\n    } else {\n\n      const isRealElement = isDef(oldVnode.nodeType)\n      // 如果 oldVnode 与 vnode 都存在判断是同一节点调用 patchVnode 处理去比较两个节点的差异\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)\n      } else {\n\n        if (isRealElement) {\n\n          // 如果存在真实的节点，存在data-server-rendered属性，将 hydrating 变为true\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR)\n            hydrating = true\n          }\n\n          // 用hydrate函数将虚拟DOM和真实DOM进行映射\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true)\n              return oldVnode\n            }\n            // ...\n          }\n\n          // 如果不是server-rendered 或者hydration失败\n          // 创建一个空VNode，代替oldVnode\n          oldVnode = emptyNodeAt(oldVnode)\n        }\n\n        // 将oldVnode设置为对应的虚拟dom，找到oldVnode.elm的父节点\n        // 根据vnode创建一个真实dom节点并插入到该父节点中oldVnode.elm的位置\n        const oldElm = oldVnode.elm\n        const parentElm = nodeOps.parentNode(oldElm)\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        )\n\n        // 递归更新父级占位节点元素，\n        if (isDef(vnode.parent)) {\n          let ancestor = vnode.parent\n          const patchable = isPatchable(vnode)\n          while (ancestor) {\n            for (let i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor)\n            }\n            ancestor.elm = vnode.elm\n            if (patchable) {\n              for (let i = 0; i < cbs.create.length; ++i) {\n                cbs.create[i](emptyNode, ancestor)\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              const insert = ancestor.data.hook.insert\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (let i = 1; i < insert.fns.length; i++) {\n                  insert.fns[i]()\n                }\n              }\n            } else {\n              registerRef(ancestor)\n            }\n            ancestor = ancestor.parent\n          }\n        }\n\n        // 销毁旧节点\n        if (isDef(parentElm)) {\n          removeVnodes(parentElm, [oldVnode], 0, 0)\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode)\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)\n\n    // 返回节点\n    return vnode.elm\n  }\n}\n\n```\n\n通过上面看到 patch 方法本身\n\n接收 4个参数\n\n- oldVnode 表示旧的 VNode 节点或者或者是一个 DOM 对象\n- vnode 表示执行 _render 后返回的 VNode 的节点\n- hydrating 表示是否是服务端渲染\n- removeOnly 是给 transition-group 用的，防止在 updateChildren 阶段，移动 vnode 节点\n\n关键调用三个方法\n\n- createElm 以当前旧节点为参考节点，创建新的节点，执行相关的 insert 钩子函数，并插入到 DOM 中，\n- sameVnode 通过对比 key 是否相同、tag、注释、data是否存在等判断2个节点，是否是同一个节点\n- patchVnode vdom 核心更新 node\n\npatchVode 中的几个核心方法 addVnodes、 removeVnodes，updateChildren，具体是怎么增加、删除，更新 vnode 和 dom 节点的，dom-diff 比较复杂，我们会在分析响应式原理的时候具体查看细节\n\n### 主流程总结<hr>\n\n下面我们通过一张图来总结 vue 主线流程\n\n<img src=\"/images/vue-process.png\" />\n\n上面的图中能够直观的看到 vue 主干的执行流程，但是缺少核心部分，也就是 vue 的响应式原理，下篇文章我们也是通过文件的执行过程来分析 vue 响应式原理的实现\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                \n","source":"_posts/vue/vuePrinciple.md","raw":"---\ntitle: vue 原理解析一\ndate: 2019-08-27 23:12:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: \ntags:\n- vue\ncategories:\n- vue\n---\n\n\n<div align=\"middle\">\n  <iframe \n    frameborder=\"no\" \n    border=\"0\" \n    marginwidth=\"0\" \n    marginheight=\"0\" \n    width=330 \n    height=86 \n    src=\"//music.163.com/outchain/player?type=2&id=436394160&auto=1&height=66\">\n  </iframe>\n</div>\n\n\n## 源码架构\n\nvue 一直以简单，快速著称，也自称为渐进式框架今天我们来分析一下vue的源码，这样我们也能了解其中的思想，帮助我们在工作中很好的应用和解决问题。当然我们并不可能把源码很细致的分析个遍，那样没什么意义。随着版本不断的更新会根据版本分析每个版本的核心原理。\n附上 git 仓库<a href=\"https://github.com/vuejs/vue\">vue源码</a>地址。\n\n我们看一下 vue 源码的核心目录方便大家去对应查找\n\n``` md\nsrc\n├── compiler/        # 模版编译目录 \n├── core/            # 核心代码 \n├── platforms/       # 跨平台的支持\n├── server/          # 处理服务端渲染\n├── sfc/             # .vue 文件的解析\n├── shared/          # 全局用到的工具函数\n```\n\n### compiler<hr>\n\nvue 所有编译相关的代码。包括把模版解析成抽象语法树（AST）,编译、生成等功能\n\n### core<hr>\n\nvue 核心代码，包括内置组件，指令、全局API、Observer、虚拟DOM、全局工具函数等，这个目录也是vue的灵魂，也是我们重点关注分析的地方，compiler 会在后续文章中分析\n\n###  platform<hr>\n\n最初 vue 是跑在 web 上的mvvm架构, 后期增加了 阿里团队的 weex 入口，配合 weex 也可以运行在 native 客户端上\n\n### server <hr>\n\n服务端渲染入口，这是是vue2.0 之后更新的功能，所谓的服务端渲染是把相对应的组件渲染为服务端的 html 字符串，然后发送给客户端，客户端进行处理。这样做能提高客户体验\n\n### sfc<hr>\n\n将 .vue 文件内容解析成JavaScript的对象\n\n\n## 源码构建\n\nvue 源码是基于 <a href=\"https://rollupjs.org/guide/en/\">Rollup </a>构建的，构建的配置在 scripts 目录下\n\n``` md\nscripts\n├── git-hook/           # git-hook配置文件\n├── alias               # 混入文件目录别名配置\n├── build               # 构建的入口文件\n├── config              # 构建全局配置文件\n├── feature-flags       # weex 环境 flag\n├── gen-release-note    # 生成 Change log\n├── get-weex-version    # 生成 weexBaseVersion\n├── release-weex        # weex发布的脚本\n├── release             # 发布脚本\n├── verify-commit-msg   # 检查 Commit message 是否符合格式\n```\n\n### 构建脚本<hr>\n\n基于 npm 托管的项目都会有一个 package.json 文件，这个文件当中的 script 描述符中一般配置的基本都是启动项目、打包、测试等相关命令, 看一下 vue 项目根目录的 package.json,由于只做 build 环境中的分析，所以我们去掉 dev、test等执行命令\n\n``` json\n{\n  \"scripts\": {\n    \"build\": \"node scripts/build.js\",\n    \"build:ssr\": \"npm run build -- web-runtime-cjs,web-server-renderer\",\n    \"build:weex\": \"npm run build -- weex\",\n  } \n}\n```\n\n\n上面三个命令在执行的时候通过环境参数来区分不同的平台，当执行 `npm run build` 命令的时候就会执行 `node scripts/build.js` 这个文件\n\n### 构建过程<hr>\n\n接下来来查看一下 `node scripts/build.js` 这个文件看看执行过程\n\n```js\nlet builds = require('./config').getAllBuilds()\n// filter builds via command line arg\nif (process.argv[2]) {\n  const filters = process.argv[2].split(',')\n  builds = builds.filter(b => {\n    return filters.some(f => b.output.file.indexOf(f) > -1 || b._name.indexOf(f) > -1)\n  })\n} else {\n  // filter out weex builds by default\n  builds = builds.filter(b => {\n    return b.output.file.indexOf('weex') === -1\n  })\n}\n\nbuild(builds)\n// ...\n\n\n```\n\n通过上面的代码片段了解到主要引用了 `./config` getAllBuilds 文件下面的方法，进入这个文件\n\n```js\nconst builds = {\n  // ...\n\n  const aliases = require('./alias')\n  const resolve = p => {\n    const base = p.split('/')[0]\n    if (aliases[base]) {\n      return path.resolve(aliases[base], p.slice(base.length + 1))\n    } else {\n      return path.resolve(__dirname, '../', p)\n    }\n  }\n\n\n  // Runtime only (CommonJS). Used by bundlers e.g. Webpack & Browserify\n  'web-runtime-cjs-prod': {\n    entry: resolve('web/entry-runtime.js'),\n    dest: resolve('dist/vue.runtime.common.prod.js'),\n    format: 'cjs',\n    env: 'production',\n    banner\n  },\n  // runtime-only production build (Browser)\n  'web-runtime-prod': {\n    entry: resolve('web/entry-runtime.js'),\n    dest: resolve('dist/vue.runtime.min.js'),\n    format: 'umd',\n    env: 'production',\n    banner\n  },\n  // Runtime+compiler CommonJS build (CommonJS)\n  'web-full-prod': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),\n    dest: resolve('dist/vue.min.js'),\n    format: 'umd',\n    env: 'production',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n\n  // ...\n}\n\nfunction genConfig (name) {\n  const opts = builds[name]\n  const config = {\n    input: opts.entry,\n    external: opts.external,\n    plugins: [\n      flow(),\n      alias(Object.assign({}, aliases, opts.alias))\n    ].concat(opts.plugins || []),\n    output: {\n      file: opts.dest,\n      format: opts.format,\n      banner: opts.banner,\n      name: opts.moduleName || 'Vue'\n    }\n    // ...\n  }\n  // ...\n  Object.defineProperty(config, '_name', {\n    enumerable: false,\n    value: name\n  })\n  return config\n\n}\n\n```\n\n通过这里的代码片面大概了解到 vue 通过当前web、服务端渲染、webpack插件、weex等配置来进行打包，每一个配置都遵循 rollup 的构建规则\n\n```json\n{\n  \"entry\": \"构建的入口文件\",\n  \"dest\": \"构建后的文件地址\",\n  \"format\": \"构建规范\",\n  \"alias\": \"别名设置\" \n  // ...\n}\n\n```\n\n那么在打包的过程中进行了路径别名设置，通过别名设置能够简化代码使之更清晰整洁。\n\n```js\nconst path = require('path')\n\nconst resolve = p => path.resolve(__dirname, '../', p)\n\nmodule.exports = {\n  vue: resolve('src/platforms/web/entry-runtime-with-compiler'),\n  compiler: resolve('src/compiler'),\n  core: resolve('src/core'),\n  shared: resolve('src/shared'),\n  web: resolve('src/platforms/web'),\n  weex: resolve('src/platforms/weex'),\n  server: resolve('src/server'),\n  sfc: resolve('src/sfc')\n}\n```\n\n看到这个别名设置，我们就应该很清楚 vue 的核心构建文件都在 src 目录，具体作用在文章开头就已经介绍过了。那么我们主要看 web 别名下的目录，其它的目录有兴趣的同学可以了解一下实现规则\n\n```js\nimport Vue from 'core/index'\nimport config from 'core/config'\nimport { extend, noop } from 'shared/util'\nimport { mountComponent } from 'core/instance/lifecycle'\nimport { devtools, inBrowser } from 'core/util/index'\n\n// ...\n\nimport { patch } from './patch'\nimport platformDirectives from './directives/index'\nimport platformComponents from './components/index'\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives)\nextend(Vue.options.components, platformComponents)\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// ...\n\n```\n\n终于看到了 Vue 构造函数和核心代码的入口`core/index`，并在构造函数和原型上面挂载了一些方法，通过执行的上述构建过程我们总结到\n\nVue.js 的组成是由 core + 对应的 ‘平台’ 补充代码构成(独立构建和运行时构建 只是 platforms 下 web 平台的两种选择)\n\n<img src=\"/images/vue-init.png\" width=\"50%\">\n\n\n## new Vue\n\n\n通过 vue 的核心目录，我们知道 Vue 实际上是一个构造函数，上面挂满了大大小小的各种方法我们在用的时候传一定的参数即可\n\n```js\nnew Vue({\n  el: 'xxxx',\n  data: xxxx,\n  ...\n})\n```\n\n### initGlobalAPI<hr/>\n\n那么在 vue 实例化的过程中到底发生了什么，打开核心代码 `src/core` 目录下面的 index\n\n\n```js\nsrc/core/index.js\n\n// vue初始化的核心文件--创建Vue构造函数，将构造函数传入五个方法中\nimport Vue from './instance/index'\n// 初始化全局API\nimport { initGlobalAPI } from './global-api/index'\n// 获得一些环境判断，和是否是服务端渲染\nimport { isServerRendering } from 'core/util/env'\n// ssr 环境加载此方法\nimport { FunctionalRenderContext } from 'core/vdom/create-functional-component'\n\n//初始化全局API变量\ninitGlobalAPI(Vue)\n\n//为vue的原型定义$isServer属性\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n})\n\n//为vue的原型定义$ssrContext\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n})\n\n//为vue原型定义当为ssr环境时加载FunctionalRenderContext方法\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n})\n\n//添加版本号\nVue.version = '__VERSION__'\n\nexport default Vue\n```\n\n总结一下这个文件加载的方法\n\n```md\n\ncore/index\n├── Vue            # 初始化构造函数\n├── initGlobalAPI  # 初始化全局API\n├── $isServer      # 判断环境的工具函数\n├── $ssrContext    # ssr 环境加载此方法也可用于操作状态\n├── FunctionalRenderContext  # ssr 环境加载此方法\n├── 添加版本号\n```\n### new Vue <hr/>\n\n初始化文件后，进入导出 Vue 构造函数的文件 `src/core/instance/index.js `\n\n```js\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n\n上面我们看到了 Vue 实际上就是一个用 Function 实现的类，通过 new 关键字初始化，然后会调用 this._init 方法。\n\n```js\n// ...\n Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n\n    let startTag, endTag\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = `vue-perf-start:${vm._uid}`\n      endTag = `vue-perf-end:${vm._uid}`\n      mark(startTag)\n    }\n\n    // 如果是Vue的实例，则不需要被observe\n    vm._isVue = true\n\n    // 对参数进行 merge 操作  \n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n\n    // 通过判断 Proxy 为 vue的实例属性赋值\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    vm._self = vm\n\n    // 初始化生命周期相关\n    initLifecycle(vm)\n\n    // 输初始化事件监听相关\n    initEvents(vm)\n\n    // 初始化编译render\n    initRender(vm)\n\n    // 调用beforeCreate钩子函数并且触发beforeCreate钩子事件\n    callHook(vm, 'beforeCreate')\n\n    initInjections(vm)\n\n    // 初始化props、methods、data、computed与watch\n    initState(vm)\n\n    initProvide(vm)\n\n    // 调用created钩子函数并且触发created钩子事件\n    callHook(vm, 'created')\n\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      // 格式化组件名\n      vm._name = formatComponentName(vm, false)\n      mark(endTag)\n      measure(`vue ${vm._name} init`, startTag, endTag)\n    }\n\n\n    // 挂载组件方法触发组件的DOM渲染\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n\n// ...\n```\n通过上面代码的注释，了解到 Vue 初始化主要就干了几件事情，合并配置操作，初始化生命周期，初始化事件监听，初始化render，初始化 data、props、computed、watcher 等，在最后调用vm.$mount 方法挂载 vm ，把模版渲染成DOM。当然这里面还有很多细节需要知道例如上面初始化合并配置，生命周期初始化等，会在后面清楚的梳理 vue 整理流程之后，进入细节\n\n## vm.$mount\n\n通过 $mount 实例方法去挂载 vm ，但 $mount 方法是由于多平台编译处理不太一样，所以在多个文件中定义。我们进入 `src/platform` 这个目录可以观察到有 web 和 weex 目录，我们直接抛掉 weex，只分析 web 目录，在 vue 官网教程中介绍了vue的完整版`web/entry-runtime-with-compiler.js`和runtime版本`web/runtime/index.js`\n\n完整版\n\n- 包含编译和运行是的版本\n- html字符串 → render函数 → vnode → 真实dom节点\n\nruntime版本\n\n- 创建 Vue 实例、render、更新 DOM 等的操作的代码，没有编译器编译模版字符串代码\n- render函数 → vnode → 真实dom节点\n\n\n### 完整版 $mount<hr>\n\n```js\n// ...\n\nconst mount = Vue.prototype.$mount\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && query(el)\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      \n      // ...\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== 'production',\n        shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n\n      // ..\n    }\n  }\n  return mount.call(this, el, hydrating)\n}\n\n// ...\n```\n\n上面代码逻辑很清晰，将执行以下过程\n\n- 首先在原型上定义了 $mount 这个方法\n- 对传入的 el 做限制不能将节点挂载在 body 和 html 这种根节点上\n- 如果没有定义 render 方法，则会把 el 或者 template 字符串转换成 render 方法\n- 模版或字符串转换 render 方法（调用 compileToFunctions 进行编译转换）\n\n\n### runtime 版本 $mount<hr>\n\n```js\n// ...\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// ...\n\n```\n\n执行过程\n- 挂载的元素，可以是字符串，也可以是DOM对象，如果是字符串通过 query 方法转换成DOM\n- 执行 mountComponent 函数传入三个参数\n \n通过上面代码可以看出并没有经过 compileToFunctions方法 进行转换编译阶段，而直接是 render --> VNode 过程。\n\n接下来我们接着查看 mountComponent方法调用，打开文件`src/core/instance/lifecycle.js`\n\n```js\nexport function mountComponent (\n  vm: Component,\n  el: ?Element,\n  hydrating?: boolean\n): Component {\n  vm.$el = el\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode\n    // ...\n  }\n  callHook(vm, 'beforeMount')\n\n  let updateComponent\n  \n  // ...\n\n  updateComponent = () => {\n    vm._update(vm._render(), hydrating)\n  }\n\n  // ...\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate')\n      }\n    }\n  }, true /* isRenderWatcher */)\n  hydrating = false\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true\n    callHook(vm, 'mounted')\n  }\n  return vm\n}\n```\n\n通过上面代码很直观的看见 mountComponent 方法主要作用\n\n- 判断 render 函数是不是存在如果不存在调用创建 createEmptyVNode 方法创建一个空VNode节点\n- 检测完 render 开始挂载 beforeMount 钩子\n- 执行 new Watcher方法()\n- _isMounted状态设置true， 开始挂载mounted\n\n\nWatcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM\n\nWatcher 初始化的时候会执行回调函数，当 vm 实例中的监测的数据发生变化的时候也会执行回调函数，这就是我们说的观察者进行依赖收集的过程,当然这也是 vue 核心原理的一部分。new Watcher到底做了什么我们在后面的单独整理，先以主线程为主\n\n\n## vm._render\n\n上文中提到 Watcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM，那么就出现私有方法 vm._render 和 vm._update 两个最核心的方法。\n \n_render 定义在 `src/core/instance/render.js` 中\n\n```js\n\n  // ...\n  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    const { render, _parentVnode } = vm.$options\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      )\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode\n    // render self\n    let vnode\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      handleError(e, vm, `render`)\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n        } catch (e) {\n          handleError(e, vm, `renderError`)\n          vnode = vm._vnode\n        }\n      } else {\n        vnode = vm._vnode\n      }\n    } finally {\n      currentRenderingInstance = null\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0]\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        )\n      }\n      vnode = createEmptyVNode()\n    }\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }\n```\n\n\n上面这段代码最关键的地方就是调用 render 方法 `render.call(vm._renderProxy, vm.$createElement)`，在上面说过在 mounted 方法中会把 template 和 string 经过 compileToFunctions 编译最后形成 render 方法进行渲染，但这是用字符串模版的形式，如果用字符串模板的代替方案 render 方法呢\n\n\n```js\nnew Vue({\n  render: function (createElement) {\n   return createElement('div', {\n     attrs: {\n        id: 'app'\n      },\n  }, this.message)\n  },\n  renderError: function(createElement, err) {\n    return createElement('pre', { style: { color: 'red' }}, err.stack)\n  }\n}).$mount('#app')\n```\n\n我们可以看出render 方法的参数 createElement 实际上就是 vm.$createElement,然而 vm.$createElement 在初始化中就已经执行过了\n\n```js\nexport function initRender (vm: Component) {\n  \n  // ...\n\n  vm._c = (a, b, c, d) => createElement(vm, a, b, c, d, false)\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = (a, b, c, d) => createElement(vm, a, b, c, d, true)\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  const parentData = parentVnode && parentVnode.data\n\n  // ...\n\n}\n```\n\n所以在 initRender 方法的时候，除了 vm.$createElement 方法，还有一个 vm._c 方法，它是被模板编译成的 render 函数使用，但 vm.$createElement 是我们用原生写的 render 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 createElement 方法。\n\n官网中一句话说的很清楚 **Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。**\n\n通过上述总结到 render 函数最终是执行 createElement 方法 返回 vnode 节点，这是一个虚拟 node 而 vue2.0 的 另一个核心就是利用了Virtual DOM，实际上 Vue.js 中 Virtual DOM 是借鉴了开源库 <a href=\"https://github.com/snabbdom/snabbdom\">snabbdom</a> 的实现，然后加入了一些 Vue.js 特色的东西, 这部分源码就在 `src/core/vdom/vnode.js` 中我们暂时不去查看，待后续文章写到 Virtual DOM 的时候我们在做分析。 \n\n那么在面试中我们经常被问到是 操作 Virtual DOM 快还是真实 DOM 快\n\n答案是相对的在数据量大的情况下，肯定是 Virtual DOM 快，因为通过对比 node 减少频繁的去更新DOM， 如果数据量相对较小的情况还是直接操作 DOM 较快，因为少了编译、遍历、对比的过程\n\n## vm.$createElement\n\n上面文章提到 render 的时候内部调用了 createElement 方法，创建了vnode，该方法定义在 src/core/vdom/create-elemenet.js 中\n\n```js\n// ...\n\nexport function _createElement (\n  context: Component,\n  tag?: string | Class<Component> | Function | Object,\n  data?: VNodeData,\n  children?: any,\n  normalizationType?: number\n): VNode | Array<VNode> {\n\n   /**\n   * 如果存在data.__ob__，说明data是被Observer观察的数据\n   * 不能用作虚拟节点的data\n   * 需要抛出警告，并返回一个空节点\n   *\n   * 被监控的data不能被用作vnode渲染的数据的原因是：\n   * data在vnode渲染过程中可能会被改变，这样会触发监控，导致不符合预期的操作\n   */   \n  if (isDef(data) && isDef((data: any).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` +\n      'Always create fresh vnode data objects in each render!',\n      context\n    )\n    return createEmptyVNode()\n  }\n\n  // 当通过 :is 动态设置组件时\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n\n\n  // ...\n\n  // 作用域插槽\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {}\n    data.scopedSlots = { default: children[0] }\n    children.length = 0\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children)\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children)\n  }\n  let vnode, ns\n  if (typeof tag === 'string') {\n    let Ctor\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag)\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          `The .native modifier for v-on is only valid on components but it was used on <${tag}>.`,\n          context\n        )\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      )\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag)\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      )\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children)\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) applyNS(vnode, ns)\n    if (isDef(data)) registerDeepBindings(data)\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\n// ...\n\n```\n\n通过上面代码我们看到 主要调用了几个方法 createEmptyVNode 和 createComponent、normalizeChildren、simpleNormalizeChildren\n\n我们简单的看一下执行步骤\n\n首先判断了 tag 是否存在，如果不存在则调用 `src/core/vdom/vnode.js`目录下的 createEmptyVNode 方法创建空的 vnode 节点\n\n如果传递了children，由于其是任意类型，所以根据 normalizationType 去调用`src/core/vdom/helpers/normalzie-children.js` 目录下的 normalizeChildren(children) 和 simpleNormalizeChildren(children) 方法进行递归遍历，把整个 children 打平，让它变成深度只有一层的 vnode 数组\n\n最后通过 对参数 tag 的判断，如果是一个普通的 html 标签，则实例化一个普通 vnode 节点，否则通过 `src/core/vdom/create-component.js`目录下的 createComponent 方法创建一个组件的 vnode\n\n因为除了组件的 vnode 没有 children，其他通过 createElement 创建的每个 vnode 都有 children，children 每个元素也是一个 vnode，这样就形成了一个 vnode tree，这样我们就知道 vm._render 阶段是如何创建的 vnode，那么接下来我们就通过 vm._update，将 vnode 渲染成真实的 dom。\n\n## vm._update\n\nvm._update 也是一个私有方法，作用是把 vnode 渲染成真实的 dom 在 `src/core/instance/lifecycle.js` 文件中定义\n\n### _update <hr/>\n\n```js\n\n  // ...\n\n\n  Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n    const vm: Component = this\n    const prevEl = vm.$el\n    const prevVnode = vm._vnode\n    const restoreActiveInstance = setActiveInstance(vm)\n    vm._vnode = vnode\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n    restoreActiveInstance()\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  }\n\n  // ...\n```\n\n通过上面代码我们知道 vm._update 的核心就是通过 vm.__patch__函数来实现将 vnode 转换成真实的 node 节点，而 vm.__patch__ 的实现是多平台的有weex、ssr、inBrowser，我们只查看在浏览器环境内的实现\n\n在 `src/platforms/web/runtime/index.js` 通过判断如果是浏览器环境调用 patch，否则创建一个空对象\n\n### __patch__ <hr/>\n\n```js\n// ...\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// ...\n```\n\n通过引用我们到 `src/platforms/web/runtime/patch.js` 目录下调用了 createPatchFunction 方法的返回值\n\n```js\nexport const patch: Function = createPatchFunction({ nodeOps, modules })\n```\n\n### createPatchFunction <hr>\n\n在通过查找文件 `src/core/vdom/patch.js` 中定义的 createPatchFunction 方法\n\n```js\n\n// ...\n\nexport function createPatchFunction (backend) {\n\n  // ...\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    // 如果 vnode 不存在但 oldVnode 存在，调用 invokeDestroyHook(oldVnode) 来进行销毁旧节点\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = []\n\n    // 如果oldVnode不存在，vnode存在，则创建新节点  \n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true\n      createElm(vnode, insertedVnodeQueue)\n    } else {\n\n      const isRealElement = isDef(oldVnode.nodeType)\n      // 如果 oldVnode 与 vnode 都存在判断是同一节点调用 patchVnode 处理去比较两个节点的差异\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)\n      } else {\n\n        if (isRealElement) {\n\n          // 如果存在真实的节点，存在data-server-rendered属性，将 hydrating 变为true\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR)\n            hydrating = true\n          }\n\n          // 用hydrate函数将虚拟DOM和真实DOM进行映射\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true)\n              return oldVnode\n            }\n            // ...\n          }\n\n          // 如果不是server-rendered 或者hydration失败\n          // 创建一个空VNode，代替oldVnode\n          oldVnode = emptyNodeAt(oldVnode)\n        }\n\n        // 将oldVnode设置为对应的虚拟dom，找到oldVnode.elm的父节点\n        // 根据vnode创建一个真实dom节点并插入到该父节点中oldVnode.elm的位置\n        const oldElm = oldVnode.elm\n        const parentElm = nodeOps.parentNode(oldElm)\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        )\n\n        // 递归更新父级占位节点元素，\n        if (isDef(vnode.parent)) {\n          let ancestor = vnode.parent\n          const patchable = isPatchable(vnode)\n          while (ancestor) {\n            for (let i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor)\n            }\n            ancestor.elm = vnode.elm\n            if (patchable) {\n              for (let i = 0; i < cbs.create.length; ++i) {\n                cbs.create[i](emptyNode, ancestor)\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              const insert = ancestor.data.hook.insert\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (let i = 1; i < insert.fns.length; i++) {\n                  insert.fns[i]()\n                }\n              }\n            } else {\n              registerRef(ancestor)\n            }\n            ancestor = ancestor.parent\n          }\n        }\n\n        // 销毁旧节点\n        if (isDef(parentElm)) {\n          removeVnodes(parentElm, [oldVnode], 0, 0)\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode)\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)\n\n    // 返回节点\n    return vnode.elm\n  }\n}\n\n```\n\n通过上面看到 patch 方法本身\n\n接收 4个参数\n\n- oldVnode 表示旧的 VNode 节点或者或者是一个 DOM 对象\n- vnode 表示执行 _render 后返回的 VNode 的节点\n- hydrating 表示是否是服务端渲染\n- removeOnly 是给 transition-group 用的，防止在 updateChildren 阶段，移动 vnode 节点\n\n关键调用三个方法\n\n- createElm 以当前旧节点为参考节点，创建新的节点，执行相关的 insert 钩子函数，并插入到 DOM 中，\n- sameVnode 通过对比 key 是否相同、tag、注释、data是否存在等判断2个节点，是否是同一个节点\n- patchVnode vdom 核心更新 node\n\npatchVode 中的几个核心方法 addVnodes、 removeVnodes，updateChildren，具体是怎么增加、删除，更新 vnode 和 dom 节点的，dom-diff 比较复杂，我们会在分析响应式原理的时候具体查看细节\n\n### 主流程总结<hr>\n\n下面我们通过一张图来总结 vue 主线流程\n\n<img src=\"/images/vue-process.png\" />\n\n上面的图中能够直观的看到 vue 主干的执行流程，但是缺少核心部分，也就是 vue 的响应式原理，下篇文章我们也是通过文件的执行过程来分析 vue 响应式原理的实现\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                \n","slug":"vue/vuePrinciple","published":1,"updated":"2019-09-04T10:23:14.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0546n9t005mkuu6epby0tqa","content":"<div align=\"middle\">\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=436394160&auto=1&height=66\">\n  </iframe>\n</div>\n\n\n<h2 id=\"源码架构\"><a href=\"#源码架构\" class=\"headerlink\" title=\"源码架构\"></a>源码架构</h2><p>vue 一直以简单，快速著称，也自称为渐进式框架今天我们来分析一下vue的源码，这样我们也能了解其中的思想，帮助我们在工作中很好的应用和解决问题。当然我们并不可能把源码很细致的分析个遍，那样没什么意义。随着版本不断的更新会根据版本分析每个版本的核心原理。<br>附上 git 仓库<a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"noopener\">vue源码</a>地址。</p>\n<p>我们看一下 vue 源码的核心目录方便大家去对应查找</p>\n<pre class=\"line-numbers language-md\"><code class=\"language-md\">src\n├── compiler/        # 模版编译目录 \n├── core/            # 核心代码 \n├── platforms/       # 跨平台的支持\n├── server/          # 处理服务端渲染\n├── sfc/             # .vue 文件的解析\n├── shared/          # 全局用到的工具函数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"compiler\"><a href=\"#compiler\" class=\"headerlink\" title=\"compiler\"></a>compiler<hr></h3><p>vue 所有编译相关的代码。包括把模版解析成抽象语法树（AST）,编译、生成等功能</p>\n<h3 id=\"core\"><a href=\"#core\" class=\"headerlink\" title=\"core\"></a>core<hr></h3><p>vue 核心代码，包括内置组件，指令、全局API、Observer、虚拟DOM、全局工具函数等，这个目录也是vue的灵魂，也是我们重点关注分析的地方，compiler 会在后续文章中分析</p>\n<h3 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform<hr></h3><p>最初 vue 是跑在 web 上的mvvm架构, 后期增加了 阿里团队的 weex 入口，配合 weex 也可以运行在 native 客户端上</p>\n<h3 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server \"></a>server <hr></h3><p>服务端渲染入口，这是是vue2.0 之后更新的功能，所谓的服务端渲染是把相对应的组件渲染为服务端的 html 字符串，然后发送给客户端，客户端进行处理。这样做能提高客户体验</p>\n<h3 id=\"sfc\"><a href=\"#sfc\" class=\"headerlink\" title=\"sfc\"></a>sfc<hr></h3><p>将 .vue 文件内容解析成JavaScript的对象</p>\n<h2 id=\"源码构建\"><a href=\"#源码构建\" class=\"headerlink\" title=\"源码构建\"></a>源码构建</h2><p>vue 源码是基于 <a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener\">Rollup </a>构建的，构建的配置在 scripts 目录下</p>\n<pre class=\"line-numbers language-md\"><code class=\"language-md\">scripts\n├── git-hook/           # git-hook配置文件\n├── alias               # 混入文件目录别名配置\n├── build               # 构建的入口文件\n├── config              # 构建全局配置文件\n├── feature-flags       # weex 环境 flag\n├── gen-release-note    # 生成 Change log\n├── get-weex-version    # 生成 weexBaseVersion\n├── release-weex        # weex发布的脚本\n├── release             # 发布脚本\n├── verify-commit-msg   # 检查 Commit message 是否符合格式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本<hr></h3><p>基于 npm 托管的项目都会有一个 package.json 文件，这个文件当中的 script 描述符中一般配置的基本都是启动项目、打包、测试等相关命令, 看一下 vue 项目根目录的 package.json,由于只做 build 环境中的分析，所以我们去掉 dev、test等执行命令</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node scripts/build.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:ssr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build -- web-runtime-cjs,web-server-renderer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:weex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build -- weex\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面三个命令在执行的时候通过环境参数来区分不同的平台，当执行 <code>npm run build</code> 命令的时候就会执行 <code>node scripts/build.js</code> 这个文件</p>\n<h3 id=\"构建过程\"><a href=\"#构建过程\" class=\"headerlink\" title=\"构建过程\"></a>构建过程<hr></h3><p>接下来来查看一下 <code>node scripts/build.js</code> 这个文件看看执行过程</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> builds <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllBuilds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// filter builds via command line arg</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> filters <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n  builds <span class=\"token operator\">=</span> builds<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> filters<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> b<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// filter out weex builds by default</span>\n  builds <span class=\"token operator\">=</span> builds<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'weex'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>builds<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面的代码片段了解到主要引用了 <code>./config</code> getAllBuilds 文件下面的方法，进入这个文件</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> builds <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n  <span class=\"token keyword\">const</span> aliases <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./alias'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> resolve <span class=\"token operator\">=</span> p <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aliases<span class=\"token punctuation\">[</span>base<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>aliases<span class=\"token punctuation\">[</span>base<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token comment\" spellcheck=\"true\">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span>\n  <span class=\"token string\">'web-runtime-cjs-prod'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web/entry-runtime.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist/vue.runtime.common.prod.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token punctuation\">:</span> <span class=\"token string\">'cjs'</span><span class=\"token punctuation\">,</span>\n    env<span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    banner\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// runtime-only production build (Browser)</span>\n  <span class=\"token string\">'web-runtime-prod'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web/entry-runtime.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist/vue.runtime.min.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token punctuation\">:</span> <span class=\"token string\">'umd'</span><span class=\"token punctuation\">,</span>\n    env<span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    banner\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Runtime+compiler CommonJS build (CommonJS)</span>\n  <span class=\"token string\">'web-full-prod'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web/entry-runtime-with-compiler.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist/vue.min.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token punctuation\">:</span> <span class=\"token string\">'umd'</span><span class=\"token punctuation\">,</span>\n    env<span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> he<span class=\"token punctuation\">:</span> <span class=\"token string\">'./entity-decoder'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    banner\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> genConfig <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> opts <span class=\"token operator\">=</span> builds<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">:</span> opts<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">,</span>\n    external<span class=\"token punctuation\">:</span> opts<span class=\"token punctuation\">.</span>external<span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">flow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">alias</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aliases<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>plugins <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      file<span class=\"token punctuation\">:</span> opts<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">,</span>\n      format<span class=\"token punctuation\">:</span> opts<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">,</span>\n      banner<span class=\"token punctuation\">:</span> opts<span class=\"token punctuation\">.</span>banner<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> opts<span class=\"token punctuation\">.</span>moduleName <span class=\"token operator\">||</span> <span class=\"token string\">'Vue'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token string\">'_name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> name\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> config\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过这里的代码片面大概了解到 vue 通过当前web、服务端渲染、webpack插件、weex等配置来进行打包，每一个配置都遵循 rollup 的构建规则</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"entry\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"构建的入口文件\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"构建后的文件地址\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"构建规范\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"别名设置\"</span> \n  // ...\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>那么在打包的过程中进行了路径别名设置，通过别名设置能够简化代码使之更清晰整洁。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> resolve <span class=\"token operator\">=</span> p <span class=\"token operator\">=</span><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  vue<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/platforms/web/entry-runtime-with-compiler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  compiler<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/compiler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  core<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  shared<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/shared'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  web<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/platforms/web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  weex<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/platforms/weex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  server<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  sfc<span class=\"token punctuation\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/sfc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看到这个别名设置，我们就应该很清楚 vue 的核心构建文件都在 src 目录，具体作用在文章开头就已经介绍过了。那么我们主要看 web 别名下的目录，其它的目录有兴趣的同学可以了解一下实现规则</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'core/index'</span>\n<span class=\"token keyword\">import</span> config <span class=\"token keyword\">from</span> <span class=\"token string\">'core/config'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> extend<span class=\"token punctuation\">,</span> noop <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shared/util'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mountComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'core/instance/lifecycle'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> devtools<span class=\"token punctuation\">,</span> inBrowser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'core/util/index'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> patch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./patch'</span>\n<span class=\"token keyword\">import</span> platformDirectives <span class=\"token keyword\">from</span> <span class=\"token string\">'./directives/index'</span>\n<span class=\"token keyword\">import</span> platformComponents <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/index'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// install platform runtime directives &amp; components</span>\n<span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>directives<span class=\"token punctuation\">,</span> platformDirectives<span class=\"token punctuation\">)</span>\n<span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">,</span> platformComponents<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// install platform patch function</span>\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__patch__ <span class=\"token operator\">=</span> inBrowser <span class=\"token operator\">?</span> patch <span class=\"token punctuation\">:</span> noop\n\n<span class=\"token comment\" spellcheck=\"true\">// public mount method</span>\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$mount <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n  el<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Component <span class=\"token punctuation\">{</span>\n  el <span class=\"token operator\">=</span> el <span class=\"token operator\">&amp;&amp;</span> inBrowser <span class=\"token operator\">?</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> undefined\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>终于看到了 Vue 构造函数和核心代码的入口<code>core/index</code>，并在构造函数和原型上面挂载了一些方法，通过执行的上述构建过程我们总结到</p>\n<p>Vue.js 的组成是由 core + 对应的 ‘平台’ 补充代码构成(独立构建和运行时构建 只是 platforms 下 web 平台的两种选择)</p>\n<img src=\"/images/vue-init.png\" width=\"50%\">\n\n\n<h2 id=\"new-Vue\"><a href=\"#new-Vue\" class=\"headerlink\" title=\"new Vue\"></a>new Vue</h2><p>通过 vue 的核心目录，我们知道 Vue 实际上是一个构造函数，上面挂满了大大小小的各种方法我们在用的时候传一定的参数即可</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">:</span> <span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> xxxx<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"initGlobalAPI\"><a href=\"#initGlobalAPI\" class=\"headerlink\" title=\"initGlobalAPI\"></a>initGlobalAPI<hr></h3><p>那么在 vue 实例化的过程中到底发生了什么，打开核心代码 <code>src/core</code> 目录下面的 index</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">src<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js\n\n<span class=\"token comment\" spellcheck=\"true\">// vue初始化的核心文件--创建Vue构造函数，将构造函数传入五个方法中</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'./instance/index'</span>\n<span class=\"token comment\" spellcheck=\"true\">// 初始化全局API</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> initGlobalAPI <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./global-api/index'</span>\n<span class=\"token comment\" spellcheck=\"true\">// 获得一些环境判断，和是否是服务端渲染</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isServerRendering <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'core/util/env'</span>\n<span class=\"token comment\" spellcheck=\"true\">// ssr 环境加载此方法</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FunctionalRenderContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'core/vdom/create-functional-component'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//初始化全局API变量</span>\n<span class=\"token function\">initGlobalAPI</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//为vue的原型定义$isServer属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'$isServer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> isServerRendering\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//为vue的原型定义$ssrContext</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'$ssrContext'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore next */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">.</span>ssrContext\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//为vue原型定义当为ssr环境时加载FunctionalRenderContext方法</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">,</span> <span class=\"token string\">'FunctionalRenderContext'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> FunctionalRenderContext\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//添加版本号</span>\nVue<span class=\"token punctuation\">.</span>version <span class=\"token operator\">=</span> <span class=\"token string\">'__VERSION__'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Vue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>总结一下这个文件加载的方法</p>\n<pre class=\"line-numbers language-md\"><code class=\"language-md\">\ncore/index\n├── Vue            # 初始化构造函数\n├── initGlobalAPI  # 初始化全局API\n├── $isServer      # 判断环境的工具函数\n├── $ssrContext    # ssr 环境加载此方法也可用于操作状态\n├── FunctionalRenderContext  # ssr 环境加载此方法\n├── 添加版本号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"new-Vue-1\"><a href=\"#new-Vue-1\" class=\"headerlink\" title=\"new Vue \"></a>new Vue <hr></h3><p>初始化文件后，进入导出 Vue 构造函数的文件 <code>src/core/instance/index.js</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> Vue <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vue is a constructor and should be called with the `new` keyword'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面我们看到了 Vue 实际上就是一个用 Function 实现的类，通过 new 关键字初始化，然后会调用 this._init 方法。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// ...</span>\n Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>_init <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>options<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> vm<span class=\"token punctuation\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token comment\" spellcheck=\"true\">// a uid</span>\n    vm<span class=\"token punctuation\">.</span>_uid <span class=\"token operator\">=</span> uid<span class=\"token operator\">++</span>\n\n    <span class=\"token keyword\">let</span> startTag<span class=\"token punctuation\">,</span> endTag\n    <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore if */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">&amp;&amp;</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      startTag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`vue-perf-start:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>vm<span class=\"token punctuation\">.</span>_uid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n      endTag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`vue-perf-end:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>vm<span class=\"token punctuation\">.</span>_uid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n      <span class=\"token function\">mark</span><span class=\"token punctuation\">(</span>startTag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 如果是Vue的实例，则不需要被observe</span>\n    vm<span class=\"token punctuation\">.</span>_isVue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 对参数进行 merge 操作  </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>_isComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// optimize internal component instantiation</span>\n      <span class=\"token comment\" spellcheck=\"true\">// since dynamic options merging is pretty slow, and none of the</span>\n      <span class=\"token comment\" spellcheck=\"true\">// internal component options needs special treatment.</span>\n      <span class=\"token function\">initInternalComponent</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">resolveConstructorOptions</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        options <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        vm\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 通过判断 Proxy 为 vue的实例属性赋值</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore else */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">initProxy</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span>_renderProxy <span class=\"token operator\">=</span> vm\n    <span class=\"token punctuation\">}</span>\n\n    vm<span class=\"token punctuation\">.</span>_self <span class=\"token operator\">=</span> vm\n\n    <span class=\"token comment\" spellcheck=\"true\">// 初始化生命周期相关</span>\n    <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 输初始化事件监听相关</span>\n    <span class=\"token function\">initEvents</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 初始化编译render</span>\n    <span class=\"token function\">initRender</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 调用beforeCreate钩子函数并且触发beforeCreate钩子事件</span>\n    <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeCreate'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">initInjections</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 初始化props、methods、data、computed与watch</span>\n    <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">initProvide</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 调用created钩子函数并且触发created钩子事件</span>\n    <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'created'</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore if */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">&amp;&amp;</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 格式化组件名</span>\n      vm<span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> <span class=\"token function\">formatComponentName</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">mark</span><span class=\"token punctuation\">(</span>endTag<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">measure</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`vue </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>vm<span class=\"token punctuation\">.</span>_name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> init`</span></span><span class=\"token punctuation\">,</span> startTag<span class=\"token punctuation\">,</span> endTag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">// 挂载组件方法触发组件的DOM渲染</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面代码的注释，了解到 Vue 初始化主要就干了几件事情，合并配置操作，初始化生命周期，初始化事件监听，初始化render，初始化 data、props、computed、watcher 等，在最后调用vm.$mount 方法挂载 vm ，把模版渲染成DOM。当然这里面还有很多细节需要知道例如上面初始化合并配置，生命周期初始化等，会在后面清楚的梳理 vue 整理流程之后，进入细节</p>\n<h2 id=\"vm-mount\"><a href=\"#vm-mount\" class=\"headerlink\" title=\"vm.$mount\"></a>vm.$mount</h2><p>通过 $mount 实例方法去挂载 vm ，但 $mount 方法是由于多平台编译处理不太一样，所以在多个文件中定义。我们进入 <code>src/platform</code> 这个目录可以观察到有 web 和 weex 目录，我们直接抛掉 weex，只分析 web 目录，在 vue 官网教程中介绍了vue的完整版<code>web/entry-runtime-with-compiler.js</code>和runtime版本<code>web/runtime/index.js</code></p>\n<p>完整版</p>\n<ul>\n<li>包含编译和运行是的版本</li>\n<li>html字符串 → render函数 → vnode → 真实dom节点</li>\n</ul>\n<p>runtime版本</p>\n<ul>\n<li>创建 Vue 实例、render、更新 DOM 等的操作的代码，没有编译器编译模版字符串代码</li>\n<li>render函数 → vnode → 真实dom节点</li>\n</ul>\n<h3 id=\"完整版-mount\"><a href=\"#完整版-mount\" class=\"headerlink\" title=\"完整版 $mount\"></a>完整版 $mount<hr></h3><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token keyword\">const</span> mount <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$mount\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$mount <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n  el<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Component <span class=\"token punctuation\">{</span>\n  el <span class=\"token operator\">=</span> el <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore if */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span>body <span class=\"token operator\">||</span> el <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.`</span></span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$options\n  <span class=\"token comment\" spellcheck=\"true\">// resolve template/el and convert to render function</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> template <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>template\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> template <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          template <span class=\"token operator\">=</span> <span class=\"token function\">idToTemplate</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span>\n          <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore if */</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n              <span class=\"token template-string\"><span class=\"token string\">`Template element not found or is empty: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>options<span class=\"token punctuation\">.</span>template<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">this</span>\n            <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        template <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>innerHTML\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invalid template option:'</span> <span class=\"token operator\">+</span> template<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      template <span class=\"token operator\">=</span> <span class=\"token function\">getOuterHTML</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> staticRenderFns <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">compileToFunctions</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        outputSourceRange<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n        shouldDecodeNewlines<span class=\"token punctuation\">,</span>\n        shouldDecodeNewlinesForHref<span class=\"token punctuation\">,</span>\n        delimiters<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">.</span>delimiters<span class=\"token punctuation\">,</span>\n        comments<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">.</span>comments\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      options<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> render\n      options<span class=\"token punctuation\">.</span>staticRenderFns <span class=\"token operator\">=</span> staticRenderFns\n\n      <span class=\"token comment\" spellcheck=\"true\">// ..</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> mount<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面代码逻辑很清晰，将执行以下过程</p>\n<ul>\n<li>首先在原型上定义了 $mount 这个方法</li>\n<li>对传入的 el 做限制不能将节点挂载在 body 和 html 这种根节点上</li>\n<li>如果没有定义 render 方法，则会把 el 或者 template 字符串转换成 render 方法</li>\n<li>模版或字符串转换 render 方法（调用 compileToFunctions 进行编译转换）</li>\n</ul>\n<h3 id=\"runtime-版本-mount\"><a href=\"#runtime-版本-mount\" class=\"headerlink\" title=\"runtime 版本 $mount\"></a>runtime 版本 $mount<hr></h3><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// public mount method</span>\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$mount <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n  el<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Component <span class=\"token punctuation\">{</span>\n  el <span class=\"token operator\">=</span> el <span class=\"token operator\">&amp;&amp;</span> inBrowser <span class=\"token operator\">?</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> undefined\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行过程</p>\n<ul>\n<li>挂载的元素，可以是字符串，也可以是DOM对象，如果是字符串通过 query 方法转换成DOM</li>\n<li>执行 mountComponent 函数传入三个参数</li>\n</ul>\n<p>通过上面代码可以看出并没有经过 compileToFunctions方法 进行转换编译阶段，而直接是 render –&gt; VNode 过程。</p>\n<p>接下来我们接着查看 mountComponent方法调用，打开文件<code>src/core/instance/lifecycle.js</code></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> mountComponent <span class=\"token punctuation\">(</span>\n  vm<span class=\"token punctuation\">:</span> Component<span class=\"token punctuation\">,</span>\n  el<span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>Element<span class=\"token punctuation\">,</span>\n  hydrating<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Component <span class=\"token punctuation\">{</span>\n  vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> el\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> createEmptyVNode\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeMount'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> updateComponent\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n  updateComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span><span class=\"token function\">_update</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">_render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// we set this to vm._watcher inside the watcher's constructor</span>\n  <span class=\"token comment\" spellcheck=\"true\">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span>\n  <span class=\"token comment\" spellcheck=\"true\">// component's mounted hook), which relies on vm._watcher being already defined</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> updateComponent<span class=\"token punctuation\">,</span> noop<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    before <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vm<span class=\"token punctuation\">.</span>_isDestroyed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeUpdate'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\" spellcheck=\"true\">/* isRenderWatcher */</span><span class=\"token punctuation\">)</span>\n  hydrating <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// manually mounted instance, call mounted on self</span>\n  <span class=\"token comment\" spellcheck=\"true\">// mounted is called for render-created child components in its inserted hook</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>_isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'mounted'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> vm\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面代码很直观的看见 mountComponent 方法主要作用</p>\n<ul>\n<li>判断 render 函数是不是存在如果不存在调用创建 createEmptyVNode 方法创建一个空VNode节点</li>\n<li>检测完 render 开始挂载 beforeMount 钩子</li>\n<li>执行 new Watcher方法()</li>\n<li>_isMounted状态设置true， 开始挂载mounted</li>\n</ul>\n<p>Watcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM</p>\n<p>Watcher 初始化的时候会执行回调函数，当 vm 实例中的监测的数据发生变化的时候也会执行回调函数，这就是我们说的观察者进行依赖收集的过程,当然这也是 vue 核心原理的一部分。new Watcher到底做了什么我们在后面的单独整理，先以主线程为主</p>\n<h2 id=\"vm-render\"><a href=\"#vm-render\" class=\"headerlink\" title=\"vm._render\"></a>vm._render</h2><p>上文中提到 Watcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM，那么就出现私有方法 vm._render 和 vm._update 两个最核心的方法。</p>\n<p>_render 定义在 <code>src/core/instance/render.js</code> 中</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>_render <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> VNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> vm<span class=\"token punctuation\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> _parentVnode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_parentVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span>$scopedSlots <span class=\"token operator\">=</span> <span class=\"token function\">normalizeScopedSlots</span><span class=\"token punctuation\">(</span>\n        _parentVnode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>scopedSlots<span class=\"token punctuation\">,</span>\n        vm<span class=\"token punctuation\">.</span>$slots<span class=\"token punctuation\">,</span>\n        vm<span class=\"token punctuation\">.</span>$scopedSlots\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// set parent vnode. this allows render functions to have access</span>\n    <span class=\"token comment\" spellcheck=\"true\">// to the data on the placeholder node.</span>\n    vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">=</span> _parentVnode\n    <span class=\"token comment\" spellcheck=\"true\">// render self</span>\n    <span class=\"token keyword\">let</span> vnode\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// There's no need to maintain a stack because all render fns are called</span>\n      <span class=\"token comment\" spellcheck=\"true\">// separately from one another. Nested component's render fns are called</span>\n      <span class=\"token comment\" spellcheck=\"true\">// when parent component is patched.</span>\n      currentRenderingInstance <span class=\"token operator\">=</span> vm\n      vnode <span class=\"token operator\">=</span> render<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_renderProxy<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">.</span>$createElement<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`render`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\" spellcheck=\"true\">// return error render result,</span>\n      <span class=\"token comment\" spellcheck=\"true\">// or previous vnode to prevent render error causing blank component</span>\n      <span class=\"token comment\" spellcheck=\"true\">/* istanbul ignore else */</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>renderError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          vnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>renderError<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_renderProxy<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">.</span>$createElement<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`renderError`</span></span><span class=\"token punctuation\">)</span>\n          vnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_vnode\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        vnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_vnode\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      currentRenderingInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// if the returned array contains only a single node, allow it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> vnode<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vnode <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// return empty vnode in case the render function errored out</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>vnode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'Multiple root nodes returned from render function. Render function '</span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">'should return a single root node.'</span><span class=\"token punctuation\">,</span>\n          vm\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      vnode <span class=\"token operator\">=</span> <span class=\"token function\">createEmptyVNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// set parent</span>\n    vnode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> _parentVnode\n    <span class=\"token keyword\">return</span> vnode\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面这段代码最关键的地方就是调用 render 方法 <code>render.call(vm._renderProxy, vm.$createElement)</code>，在上面说过在 mounted 方法中会把 template 和 string 经过 compileToFunctions 编译最后形成 render 方法进行渲染，但这是用字符串模版的形式，如果用字符串模板的代替方案 render 方法呢</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>createElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n     attrs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token string\">'app'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  renderError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>createElement<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看出render 方法的参数 createElement 实际上就是 vm.$createElement,然而 vm.$createElement 在初始化中就已经执行过了</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> initRender <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">:</span> Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n  vm<span class=\"token punctuation\">.</span>_c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// normalization is always applied for the public version, used in</span>\n  <span class=\"token comment\" spellcheck=\"true\">// user-written render functions.</span>\n  vm<span class=\"token punctuation\">.</span>$createElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// $attrs &amp; $listeners are exposed for easier HOC creation.</span>\n  <span class=\"token comment\" spellcheck=\"true\">// they need to be reactive so that HOCs using them are always updated</span>\n  <span class=\"token keyword\">const</span> parentData <span class=\"token operator\">=</span> parentVnode <span class=\"token operator\">&amp;&amp;</span> parentVnode<span class=\"token punctuation\">.</span>data\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所以在 initRender 方法的时候，除了 vm.$createElement 方法，还有一个 vm._c 方法，它是被模板编译成的 render 函数使用，但 vm.$createElement 是我们用原生写的 render 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 createElement 方法。</p>\n<p>官网中一句话说的很清楚 <strong>Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。</strong></p>\n<p>通过上述总结到 render 函数最终是执行 createElement 方法 返回 vnode 节点，这是一个虚拟 node 而 vue2.0 的 另一个核心就是利用了Virtual DOM，实际上 Vue.js 中 Virtual DOM 是借鉴了开源库 <a href=\"https://github.com/snabbdom/snabbdom\" target=\"_blank\" rel=\"noopener\">snabbdom</a> 的实现，然后加入了一些 Vue.js 特色的东西, 这部分源码就在 <code>src/core/vdom/vnode.js</code> 中我们暂时不去查看，待后续文章写到 Virtual DOM 的时候我们在做分析。 </p>\n<p>那么在面试中我们经常被问到是 操作 Virtual DOM 快还是真实 DOM 快</p>\n<p>答案是相对的在数据量大的情况下，肯定是 Virtual DOM 快，因为通过对比 node 减少频繁的去更新DOM， 如果数据量相对较小的情况还是直接操作 DOM 较快，因为少了编译、遍历、对比的过程</p>\n<h2 id=\"vm-createElement\"><a href=\"#vm-createElement\" class=\"headerlink\" title=\"vm.$createElement\"></a>vm.$createElement</h2><p>上面文章提到 render 的时候内部调用了 createElement 方法，创建了vnode，该方法定义在 src/core/vdom/create-elemenet.js 中</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> _createElement <span class=\"token punctuation\">(</span>\n  context<span class=\"token punctuation\">:</span> Component<span class=\"token punctuation\">,</span>\n  tag<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">|</span> Class<span class=\"token operator\">&lt;</span>Component<span class=\"token operator\">></span> <span class=\"token operator\">|</span> Function <span class=\"token operator\">|</span> Object<span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> VNodeData<span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n  normalizationType<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> VNode <span class=\"token operator\">|</span> Array<span class=\"token operator\">&lt;</span>VNode<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token comment\" spellcheck=\"true\">/**\n   * 如果存在data.__ob__，说明data是被Observer观察的数据\n   * 不能用作虚拟节点的data\n   * 需要抛出警告，并返回一个空节点\n   *\n   * 被监控的data不能被用作vnode渲染的数据的原因是：\n   * data在vnode渲染过程中可能会被改变，这样会触发监控，导致不符合预期的操作\n   */</span>   \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__ob__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token string\">`Avoid using observed data object as vnode data: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n`</span></span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">'Always create fresh vnode data objects in each render!'</span><span class=\"token punctuation\">,</span>\n      context\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createEmptyVNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 当通过 :is 动态设置组件时</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tag <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>is\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// in case of component :is set to falsy value</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createEmptyVNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 作用域插槽</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token keyword\">typeof</span> children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token operator\">=</span> data <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    data<span class=\"token punctuation\">.</span>scopedSlots <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>normalizationType <span class=\"token operator\">===</span> ALWAYS_NORMALIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    children <span class=\"token operator\">=</span> <span class=\"token function\">normalizeChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>normalizationType <span class=\"token operator\">===</span> SIMPLE_NORMALIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    children <span class=\"token operator\">=</span> <span class=\"token function\">simpleNormalizeChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> vnode<span class=\"token punctuation\">,</span> ns\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> tag <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> Ctor\n    ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">&amp;&amp;</span> context<span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">.</span>ns<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> config<span class=\"token punctuation\">.</span><span class=\"token function\">getTagNamespace</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">isReservedTag</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// platform built-in elements</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>NODE_ENV <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>nativeOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n          <span class=\"token template-string\"><span class=\"token string\">`The .native modifier for v-on is only valid on components but it was used on &lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>.`</span></span><span class=\"token punctuation\">,</span>\n          context\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">parsePlatformTagName</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span>\n        undefined<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">,</span> context\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>data<span class=\"token punctuation\">.</span>pre<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>Ctor <span class=\"token operator\">=</span> <span class=\"token function\">resolveAsset</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">,</span> <span class=\"token string\">'components'</span><span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// component</span>\n      vnode <span class=\"token operator\">=</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// unknown or unlisted namespaced elements</span>\n      <span class=\"token comment\" spellcheck=\"true\">// check at runtime because it may get assigned a namespace when its</span>\n      <span class=\"token comment\" spellcheck=\"true\">// parent normalizes children</span>\n      vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span>\n        tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span>\n        undefined<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">,</span> context\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// direct component options / constructor</span>\n    vnode <span class=\"token operator\">=</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> vnode\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">applyNS</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> ns<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">registerDeepBindings</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> vnode\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createEmptyVNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面代码我们看到 主要调用了几个方法 createEmptyVNode 和 createComponent、normalizeChildren、simpleNormalizeChildren</p>\n<p>我们简单的看一下执行步骤</p>\n<p>首先判断了 tag 是否存在，如果不存在则调用 <code>src/core/vdom/vnode.js</code>目录下的 createEmptyVNode 方法创建空的 vnode 节点</p>\n<p>如果传递了children，由于其是任意类型，所以根据 normalizationType 去调用<code>src/core/vdom/helpers/normalzie-children.js</code> 目录下的 normalizeChildren(children) 和 simpleNormalizeChildren(children) 方法进行递归遍历，把整个 children 打平，让它变成深度只有一层的 vnode 数组</p>\n<p>最后通过 对参数 tag 的判断，如果是一个普通的 html 标签，则实例化一个普通 vnode 节点，否则通过 <code>src/core/vdom/create-component.js</code>目录下的 createComponent 方法创建一个组件的 vnode</p>\n<p>因为除了组件的 vnode 没有 children，其他通过 createElement 创建的每个 vnode 都有 children，children 每个元素也是一个 vnode，这样就形成了一个 vnode tree，这样我们就知道 vm._render 阶段是如何创建的 vnode，那么接下来我们就通过 vm._update，将 vnode 渲染成真实的 dom。</p>\n<h2 id=\"vm-update\"><a href=\"#vm-update\" class=\"headerlink\" title=\"vm._update\"></a>vm._update</h2><p>vm._update 也是一个私有方法，作用是把 vnode 渲染成真实的 dom 在 <code>src/core/instance/lifecycle.js</code> 文件中定义</p>\n<h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"_update \"></a>_update <hr></h3><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n\n  Vue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>_update <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">:</span> VNode<span class=\"token punctuation\">,</span> hydrating<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> vm<span class=\"token punctuation\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">const</span> prevEl <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$el\n    <span class=\"token keyword\">const</span> prevVnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_vnode\n    <span class=\"token keyword\">const</span> restoreActiveInstance <span class=\"token operator\">=</span> <span class=\"token function\">setActiveInstance</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span>\n    vm<span class=\"token punctuation\">.</span>_vnode <span class=\"token operator\">=</span> vnode\n    <span class=\"token comment\" spellcheck=\"true\">// Vue.prototype.__patch__ is injected in entry points</span>\n    <span class=\"token comment\" spellcheck=\"true\">// based on the rendering backend used.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevVnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// initial render</span>\n      vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token comment\" spellcheck=\"true\">/* removeOnly */</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// updates</span>\n      vm<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>prevVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">restoreActiveInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// update __vue__ reference</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevEl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      prevEl<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> vm\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// if parent is an HOC, update its $el as well</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$parent <span class=\"token operator\">&amp;&amp;</span> vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">===</span> vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>_vnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$el\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// updated hook is called by the scheduler to ensure that children are</span>\n    <span class=\"token comment\" spellcheck=\"true\">// updated in a parent's updated hook.</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面代码我们知道 vm.<em>update 的核心就是通过 vm.<strong>patch</strong>函数来实现将 vnode 转换成真实的 node 节点，而 vm.<em>_patch</em></em> 的实现是多平台的有weex、ssr、inBrowser，我们只查看在浏览器环境内的实现</p>\n<p>在 <code>src/platforms/web/runtime/index.js</code> 通过判断如果是浏览器环境调用 patch，否则创建一个空对象</p>\n<h3 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch \"></a><strong>patch</strong> <hr></h3><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// install platform patch function</span>\nVue<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__patch__ <span class=\"token operator\">=</span> inBrowser <span class=\"token operator\">?</span> patch <span class=\"token punctuation\">:</span> noop\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过引用我们到 <code>src/platforms/web/runtime/patch.js</code> 目录下调用了 createPatchFunction 方法的返回值</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> patch<span class=\"token punctuation\">:</span> Function <span class=\"token operator\">=</span> <span class=\"token function\">createPatchFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> nodeOps<span class=\"token punctuation\">,</span> modules <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"createPatchFunction\"><a href=\"#createPatchFunction\" class=\"headerlink\" title=\"createPatchFunction \"></a>createPatchFunction <hr></h3><p>在通过查找文件 <code>src/core/vdom/patch.js</code> 中定义的 createPatchFunction 方法</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> createPatchFunction <span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> patch <span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> hydrating<span class=\"token punctuation\">,</span> removeOnly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果 vnode 不存在但 oldVnode 存在，调用 invokeDestroyHook(oldVnode) 来进行销毁旧节点</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">invokeDestroyHook</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> isInitialPatch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">const</span> insertedVnodeQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 如果oldVnode不存在，vnode存在，则创建新节点  </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// empty mount (likely as component), create new root element</span>\n      isInitialPatch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">const</span> isRealElement <span class=\"token operator\">=</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 如果 oldVnode 与 vnode 都存在判断是同一节点调用 patchVnode 处理去比较两个节点的差异</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isRealElement <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// patch existing root node</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> removeOnly<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRealElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 如果存在真实的节点，存在data-server-rendered属性，将 hydrating 变为true</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> oldVnode<span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span>SSR_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            oldVnode<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>SSR_ATTR<span class=\"token punctuation\">)</span>\n            hydrating <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 用hydrate函数将虚拟DOM和真实DOM进行映射</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>hydrating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">invokeInsertHook</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">return</span> oldVnode\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 如果不是server-rendered 或者hydration失败</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 创建一个空VNode，代替oldVnode</span>\n          oldVnode <span class=\"token operator\">=</span> <span class=\"token function\">emptyNodeAt</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 将oldVnode设置为对应的虚拟dom，找到oldVnode.elm的父节点</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 根据vnode创建一个真实dom节点并插入到该父节点中oldVnode.elm的位置</span>\n        <span class=\"token keyword\">const</span> oldElm <span class=\"token operator\">=</span> oldVnode<span class=\"token punctuation\">.</span>elm\n        <span class=\"token keyword\">const</span> parentElm <span class=\"token operator\">=</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span>oldElm<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>\n          vnode<span class=\"token punctuation\">,</span>\n          insertedVnodeQueue<span class=\"token punctuation\">,</span>\n          oldElm<span class=\"token punctuation\">.</span>_leaveCb <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> parentElm<span class=\"token punctuation\">,</span>\n          nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oldElm<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 递归更新父级占位节点元素，</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> ancestor <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>parent\n          <span class=\"token keyword\">const</span> patchable <span class=\"token operator\">=</span> <span class=\"token function\">isPatchable</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ancestor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cbs<span class=\"token punctuation\">.</span>destroy<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              cbs<span class=\"token punctuation\">.</span>destroy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ancestor<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            ancestor<span class=\"token punctuation\">.</span>elm <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>elm\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>patchable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cbs<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cbs<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>emptyNode<span class=\"token punctuation\">,</span> ancestor<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token comment\" spellcheck=\"true\">// #6513</span>\n              <span class=\"token comment\" spellcheck=\"true\">// invoke insert hooks that may have been merged by create hooks.</span>\n              <span class=\"token comment\" spellcheck=\"true\">// e.g. for directives that uses the \"inserted\" hook.</span>\n              <span class=\"token keyword\">const</span> insert <span class=\"token operator\">=</span> ancestor<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>hook<span class=\"token punctuation\">.</span>insert\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>insert<span class=\"token punctuation\">.</span>merged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// start at index 1 to avoid re-invoking component mounted hook</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> insert<span class=\"token punctuation\">.</span>fns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  insert<span class=\"token punctuation\">.</span>fns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">registerRef</span><span class=\"token punctuation\">(</span>ancestor<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            ancestor <span class=\"token operator\">=</span> ancestor<span class=\"token punctuation\">.</span>parent\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 销毁旧节点</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">removeVnodes</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>oldVnode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">invokeDestroyHook</span><span class=\"token punctuation\">(</span>oldVnode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">invokeInsertHook</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> isInitialPatch<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 返回节点</span>\n    <span class=\"token keyword\">return</span> vnode<span class=\"token punctuation\">.</span>elm\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面看到 patch 方法本身</p>\n<p>接收 4个参数</p>\n<ul>\n<li>oldVnode 表示旧的 VNode 节点或者或者是一个 DOM 对象</li>\n<li>vnode 表示执行 _render 后返回的 VNode 的节点</li>\n<li>hydrating 表示是否是服务端渲染</li>\n<li>removeOnly 是给 transition-group 用的，防止在 updateChildren 阶段，移动 vnode 节点</li>\n</ul>\n<p>关键调用三个方法</p>\n<ul>\n<li>createElm 以当前旧节点为参考节点，创建新的节点，执行相关的 insert 钩子函数，并插入到 DOM 中，</li>\n<li>sameVnode 通过对比 key 是否相同、tag、注释、data是否存在等判断2个节点，是否是同一个节点</li>\n<li>patchVnode vdom 核心更新 node</li>\n</ul>\n<p>patchVode 中的几个核心方法 addVnodes、 removeVnodes，updateChildren，具体是怎么增加、删除，更新 vnode 和 dom 节点的，dom-diff 比较复杂，我们会在分析响应式原理的时候具体查看细节</p>\n<h3 id=\"主流程总结\"><a href=\"#主流程总结\" class=\"headerlink\" title=\"主流程总结\"></a>主流程总结<hr></h3><p>下面我们通过一张图来总结 vue 主线流程</p>\n<img src=\"/images/vue-process.png\">\n\n<p>上面的图中能够直观的看到 vue 主干的执行流程，但是缺少核心部分，也就是 vue 的响应式原理，下篇文章我们也是通过文件的执行过程来分析 vue 响应式原理的实现</p>\n","site":{"data":{"musics":[{"name":"画","artist":"赵雷","url":"/medias/music/hua.mp3","cover":"/medias/music/avatars/zhaolei.jpg"},{"name":"多想在平庸的生活拥抱你","artist":"隔壁老樊","url":"/medias/music/yongbaoni.mp3","cover":"/medias/music/avatars/laofan.jpg"},{"name":"往后余生","artist":"马良","url":"/medias/music/wanghouyusheng.mp3","cover":"/medias/music/avatars/maliang.jpg"},{"name":"理想三寻","artist":"陈鸿宇","url":"/medias/music/lixiangsanxun.mp3","cover":"/medias/music/avatars/chenhouyu.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=436394160&auto=1&height=66\">\n  </iframe>\n</div>\n\n\n<h2 id=\"源码架构\"><a href=\"#源码架构\" class=\"headerlink\" title=\"源码架构\"></a>源码架构</h2><p>vue 一直以简单，快速著称，也自称为渐进式框架今天我们来分析一下vue的源码，这样我们也能了解其中的思想，帮助我们在工作中很好的应用和解决问题。当然我们并不可能把源码很细致的分析个遍，那样没什么意义。随着版本不断的更新会根据版本分析每个版本的核心原理。<br>附上 git 仓库<a href=\"https://github.com/vuejs/vue\" target=\"_blank\" rel=\"noopener\">vue源码</a>地址。</p>\n<p>我们看一下 vue 源码的核心目录方便大家去对应查找</p>\n<pre><code class=\"md\">src\n├── compiler/        # 模版编译目录 \n├── core/            # 核心代码 \n├── platforms/       # 跨平台的支持\n├── server/          # 处理服务端渲染\n├── sfc/             # .vue 文件的解析\n├── shared/          # 全局用到的工具函数</code></pre>\n<h3 id=\"compiler\"><a href=\"#compiler\" class=\"headerlink\" title=\"compiler\"></a>compiler<hr></h3><p>vue 所有编译相关的代码。包括把模版解析成抽象语法树（AST）,编译、生成等功能</p>\n<h3 id=\"core\"><a href=\"#core\" class=\"headerlink\" title=\"core\"></a>core<hr></h3><p>vue 核心代码，包括内置组件，指令、全局API、Observer、虚拟DOM、全局工具函数等，这个目录也是vue的灵魂，也是我们重点关注分析的地方，compiler 会在后续文章中分析</p>\n<h3 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform<hr></h3><p>最初 vue 是跑在 web 上的mvvm架构, 后期增加了 阿里团队的 weex 入口，配合 weex 也可以运行在 native 客户端上</p>\n<h3 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server \"></a>server <hr></h3><p>服务端渲染入口，这是是vue2.0 之后更新的功能，所谓的服务端渲染是把相对应的组件渲染为服务端的 html 字符串，然后发送给客户端，客户端进行处理。这样做能提高客户体验</p>\n<h3 id=\"sfc\"><a href=\"#sfc\" class=\"headerlink\" title=\"sfc\"></a>sfc<hr></h3><p>将 .vue 文件内容解析成JavaScript的对象</p>\n<h2 id=\"源码构建\"><a href=\"#源码构建\" class=\"headerlink\" title=\"源码构建\"></a>源码构建</h2><p>vue 源码是基于 <a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener\">Rollup </a>构建的，构建的配置在 scripts 目录下</p>\n<pre><code class=\"md\">scripts\n├── git-hook/           # git-hook配置文件\n├── alias               # 混入文件目录别名配置\n├── build               # 构建的入口文件\n├── config              # 构建全局配置文件\n├── feature-flags       # weex 环境 flag\n├── gen-release-note    # 生成 Change log\n├── get-weex-version    # 生成 weexBaseVersion\n├── release-weex        # weex发布的脚本\n├── release             # 发布脚本\n├── verify-commit-msg   # 检查 Commit message 是否符合格式</code></pre>\n<h3 id=\"构建脚本\"><a href=\"#构建脚本\" class=\"headerlink\" title=\"构建脚本\"></a>构建脚本<hr></h3><p>基于 npm 托管的项目都会有一个 package.json 文件，这个文件当中的 script 描述符中一般配置的基本都是启动项目、打包、测试等相关命令, 看一下 vue 项目根目录的 package.json,由于只做 build 环境中的分析，所以我们去掉 dev、test等执行命令</p>\n<pre><code class=\"json\">{\n  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;node scripts/build.js&quot;,\n    &quot;build:ssr&quot;: &quot;npm run build -- web-runtime-cjs,web-server-renderer&quot;,\n    &quot;build:weex&quot;: &quot;npm run build -- weex&quot;,\n  } \n}</code></pre>\n<p>上面三个命令在执行的时候通过环境参数来区分不同的平台，当执行 <code>npm run build</code> 命令的时候就会执行 <code>node scripts/build.js</code> 这个文件</p>\n<h3 id=\"构建过程\"><a href=\"#构建过程\" class=\"headerlink\" title=\"构建过程\"></a>构建过程<hr></h3><p>接下来来查看一下 <code>node scripts/build.js</code> 这个文件看看执行过程</p>\n<pre><code class=\"js\">let builds = require(&#39;./config&#39;).getAllBuilds()\n// filter builds via command line arg\nif (process.argv[2]) {\n  const filters = process.argv[2].split(&#39;,&#39;)\n  builds = builds.filter(b =&gt; {\n    return filters.some(f =&gt; b.output.file.indexOf(f) &gt; -1 || b._name.indexOf(f) &gt; -1)\n  })\n} else {\n  // filter out weex builds by default\n  builds = builds.filter(b =&gt; {\n    return b.output.file.indexOf(&#39;weex&#39;) === -1\n  })\n}\n\nbuild(builds)\n// ...\n\n</code></pre>\n<p>通过上面的代码片段了解到主要引用了 <code>./config</code> getAllBuilds 文件下面的方法，进入这个文件</p>\n<pre><code class=\"js\">const builds = {\n  // ...\n\n  const aliases = require(&#39;./alias&#39;)\n  const resolve = p =&gt; {\n    const base = p.split(&#39;/&#39;)[0]\n    if (aliases[base]) {\n      return path.resolve(aliases[base], p.slice(base.length + 1))\n    } else {\n      return path.resolve(__dirname, &#39;../&#39;, p)\n    }\n  }\n\n\n  // Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify\n  &#39;web-runtime-cjs-prod&#39;: {\n    entry: resolve(&#39;web/entry-runtime.js&#39;),\n    dest: resolve(&#39;dist/vue.runtime.common.prod.js&#39;),\n    format: &#39;cjs&#39;,\n    env: &#39;production&#39;,\n    banner\n  },\n  // runtime-only production build (Browser)\n  &#39;web-runtime-prod&#39;: {\n    entry: resolve(&#39;web/entry-runtime.js&#39;),\n    dest: resolve(&#39;dist/vue.runtime.min.js&#39;),\n    format: &#39;umd&#39;,\n    env: &#39;production&#39;,\n    banner\n  },\n  // Runtime+compiler CommonJS build (CommonJS)\n  &#39;web-full-prod&#39;: {\n    entry: resolve(&#39;web/entry-runtime-with-compiler.js&#39;),\n    dest: resolve(&#39;dist/vue.min.js&#39;),\n    format: &#39;umd&#39;,\n    env: &#39;production&#39;,\n    alias: { he: &#39;./entity-decoder&#39; },\n    banner\n  },\n\n  // ...\n}\n\nfunction genConfig (name) {\n  const opts = builds[name]\n  const config = {\n    input: opts.entry,\n    external: opts.external,\n    plugins: [\n      flow(),\n      alias(Object.assign({}, aliases, opts.alias))\n    ].concat(opts.plugins || []),\n    output: {\n      file: opts.dest,\n      format: opts.format,\n      banner: opts.banner,\n      name: opts.moduleName || &#39;Vue&#39;\n    }\n    // ...\n  }\n  // ...\n  Object.defineProperty(config, &#39;_name&#39;, {\n    enumerable: false,\n    value: name\n  })\n  return config\n\n}\n</code></pre>\n<p>通过这里的代码片面大概了解到 vue 通过当前web、服务端渲染、webpack插件、weex等配置来进行打包，每一个配置都遵循 rollup 的构建规则</p>\n<pre><code class=\"json\">{\n  &quot;entry&quot;: &quot;构建的入口文件&quot;,\n  &quot;dest&quot;: &quot;构建后的文件地址&quot;,\n  &quot;format&quot;: &quot;构建规范&quot;,\n  &quot;alias&quot;: &quot;别名设置&quot; \n  // ...\n}\n</code></pre>\n<p>那么在打包的过程中进行了路径别名设置，通过别名设置能够简化代码使之更清晰整洁。</p>\n<pre><code class=\"js\">const path = require(&#39;path&#39;)\n\nconst resolve = p =&gt; path.resolve(__dirname, &#39;../&#39;, p)\n\nmodule.exports = {\n  vue: resolve(&#39;src/platforms/web/entry-runtime-with-compiler&#39;),\n  compiler: resolve(&#39;src/compiler&#39;),\n  core: resolve(&#39;src/core&#39;),\n  shared: resolve(&#39;src/shared&#39;),\n  web: resolve(&#39;src/platforms/web&#39;),\n  weex: resolve(&#39;src/platforms/weex&#39;),\n  server: resolve(&#39;src/server&#39;),\n  sfc: resolve(&#39;src/sfc&#39;)\n}</code></pre>\n<p>看到这个别名设置，我们就应该很清楚 vue 的核心构建文件都在 src 目录，具体作用在文章开头就已经介绍过了。那么我们主要看 web 别名下的目录，其它的目录有兴趣的同学可以了解一下实现规则</p>\n<pre><code class=\"js\">import Vue from &#39;core/index&#39;\nimport config from &#39;core/config&#39;\nimport { extend, noop } from &#39;shared/util&#39;\nimport { mountComponent } from &#39;core/instance/lifecycle&#39;\nimport { devtools, inBrowser } from &#39;core/util/index&#39;\n\n// ...\n\nimport { patch } from &#39;./patch&#39;\nimport platformDirectives from &#39;./directives/index&#39;\nimport platformComponents from &#39;./components/index&#39;\n\n// install platform runtime directives &amp; components\nextend(Vue.options.directives, platformDirectives)\nextend(Vue.options.components, platformComponents)\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// ...\n</code></pre>\n<p>终于看到了 Vue 构造函数和核心代码的入口<code>core/index</code>，并在构造函数和原型上面挂载了一些方法，通过执行的上述构建过程我们总结到</p>\n<p>Vue.js 的组成是由 core + 对应的 ‘平台’ 补充代码构成(独立构建和运行时构建 只是 platforms 下 web 平台的两种选择)</p>\n<img src=\"/images/vue-init.png\" width=\"50%\">\n\n\n<h2 id=\"new-Vue\"><a href=\"#new-Vue\" class=\"headerlink\" title=\"new Vue\"></a>new Vue</h2><p>通过 vue 的核心目录，我们知道 Vue 实际上是一个构造函数，上面挂满了大大小小的各种方法我们在用的时候传一定的参数即可</p>\n<pre><code class=\"js\">new Vue({\n  el: &#39;xxxx&#39;,\n  data: xxxx,\n  ...\n})</code></pre>\n<h3 id=\"initGlobalAPI\"><a href=\"#initGlobalAPI\" class=\"headerlink\" title=\"initGlobalAPI\"></a>initGlobalAPI<hr></h3><p>那么在 vue 实例化的过程中到底发生了什么，打开核心代码 <code>src/core</code> 目录下面的 index</p>\n<pre><code class=\"js\">src/core/index.js\n\n// vue初始化的核心文件--创建Vue构造函数，将构造函数传入五个方法中\nimport Vue from &#39;./instance/index&#39;\n// 初始化全局API\nimport { initGlobalAPI } from &#39;./global-api/index&#39;\n// 获得一些环境判断，和是否是服务端渲染\nimport { isServerRendering } from &#39;core/util/env&#39;\n// ssr 环境加载此方法\nimport { FunctionalRenderContext } from &#39;core/vdom/create-functional-component&#39;\n\n//初始化全局API变量\ninitGlobalAPI(Vue)\n\n//为vue的原型定义$isServer属性\nObject.defineProperty(Vue.prototype, &#39;$isServer&#39;, {\n  get: isServerRendering\n})\n\n//为vue的原型定义$ssrContext\nObject.defineProperty(Vue.prototype, &#39;$ssrContext&#39;, {\n  get () {\n    /* istanbul ignore next */\n    return this.$vnode &amp;&amp; this.$vnode.ssrContext\n  }\n})\n\n//为vue原型定义当为ssr环境时加载FunctionalRenderContext方法\nObject.defineProperty(Vue, &#39;FunctionalRenderContext&#39;, {\n  value: FunctionalRenderContext\n})\n\n//添加版本号\nVue.version = &#39;__VERSION__&#39;\n\nexport default Vue</code></pre>\n<p>总结一下这个文件加载的方法</p>\n<pre><code class=\"md\">\ncore/index\n├── Vue            # 初始化构造函数\n├── initGlobalAPI  # 初始化全局API\n├── $isServer      # 判断环境的工具函数\n├── $ssrContext    # ssr 环境加载此方法也可用于操作状态\n├── FunctionalRenderContext  # ssr 环境加载此方法\n├── 添加版本号</code></pre>\n<h3 id=\"new-Vue-1\"><a href=\"#new-Vue-1\" class=\"headerlink\" title=\"new Vue \"></a>new Vue <hr></h3><p>初始化文件后，进入导出 Vue 构造函数的文件 <code>src/core/instance/index.js</code></p>\n<pre><code class=\"js\">function Vue (options) {\n  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;\n    !(this instanceof Vue)\n  ) {\n    warn(&#39;Vue is a constructor and should be called with the `new` keyword&#39;)\n  }\n  this._init(options)\n}</code></pre>\n<p>上面我们看到了 Vue 实际上就是一个用 Function 实现的类，通过 new 关键字初始化，然后会调用 this._init 方法。</p>\n<pre><code class=\"js\">// ...\n Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n\n    let startTag, endTag\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; config.performance &amp;&amp; mark) {\n      startTag = `vue-perf-start:${vm._uid}`\n      endTag = `vue-perf-end:${vm._uid}`\n      mark(startTag)\n    }\n\n    // 如果是Vue的实例，则不需要被observe\n    vm._isVue = true\n\n    // 对参数进行 merge 操作  \n    if (options &amp;&amp; options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n\n    // 通过判断 Proxy 为 vue的实例属性赋值\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    vm._self = vm\n\n    // 初始化生命周期相关\n    initLifecycle(vm)\n\n    // 输初始化事件监听相关\n    initEvents(vm)\n\n    // 初始化编译render\n    initRender(vm)\n\n    // 调用beforeCreate钩子函数并且触发beforeCreate钩子事件\n    callHook(vm, &#39;beforeCreate&#39;)\n\n    initInjections(vm)\n\n    // 初始化props、methods、data、computed与watch\n    initState(vm)\n\n    initProvide(vm)\n\n    // 调用created钩子函数并且触发created钩子事件\n    callHook(vm, &#39;created&#39;)\n\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; config.performance &amp;&amp; mark) {\n      // 格式化组件名\n      vm._name = formatComponentName(vm, false)\n      mark(endTag)\n      measure(`vue ${vm._name} init`, startTag, endTag)\n    }\n\n\n    // 挂载组件方法触发组件的DOM渲染\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el)\n    }\n  }\n\n// ...</code></pre>\n<p>通过上面代码的注释，了解到 Vue 初始化主要就干了几件事情，合并配置操作，初始化生命周期，初始化事件监听，初始化render，初始化 data、props、computed、watcher 等，在最后调用vm.$mount 方法挂载 vm ，把模版渲染成DOM。当然这里面还有很多细节需要知道例如上面初始化合并配置，生命周期初始化等，会在后面清楚的梳理 vue 整理流程之后，进入细节</p>\n<h2 id=\"vm-mount\"><a href=\"#vm-mount\" class=\"headerlink\" title=\"vm.$mount\"></a>vm.$mount</h2><p>通过 $mount 实例方法去挂载 vm ，但 $mount 方法是由于多平台编译处理不太一样，所以在多个文件中定义。我们进入 <code>src/platform</code> 这个目录可以观察到有 web 和 weex 目录，我们直接抛掉 weex，只分析 web 目录，在 vue 官网教程中介绍了vue的完整版<code>web/entry-runtime-with-compiler.js</code>和runtime版本<code>web/runtime/index.js</code></p>\n<p>完整版</p>\n<ul>\n<li>包含编译和运行是的版本</li>\n<li>html字符串 → render函数 → vnode → 真实dom节点</li>\n</ul>\n<p>runtime版本</p>\n<ul>\n<li>创建 Vue 实例、render、更新 DOM 等的操作的代码，没有编译器编译模版字符串代码</li>\n<li>render函数 → vnode → 真实dom节点</li>\n</ul>\n<h3 id=\"完整版-mount\"><a href=\"#完整版-mount\" class=\"headerlink\" title=\"完整版 $mount\"></a>完整版 $mount<hr></h3><pre><code class=\"js\">// ...\n\nconst mount = Vue.prototype.$mount\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; query(el)\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n      `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === &#39;string&#39;) {\n        if (template.charAt(0) === &#39;#&#39;) {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== &#39;production&#39;) {\n          warn(&#39;invalid template option:&#39; + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n\n      // ...\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== &#39;production&#39;,\n        shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n\n      // ..\n    }\n  }\n  return mount.call(this, el, hydrating)\n}\n\n// ...</code></pre>\n<p>上面代码逻辑很清晰，将执行以下过程</p>\n<ul>\n<li>首先在原型上定义了 $mount 这个方法</li>\n<li>对传入的 el 做限制不能将节点挂载在 body 和 html 这种根节点上</li>\n<li>如果没有定义 render 方法，则会把 el 或者 template 字符串转换成 render 方法</li>\n<li>模版或字符串转换 render 方法（调用 compileToFunctions 进行编译转换）</li>\n</ul>\n<h3 id=\"runtime-版本-mount\"><a href=\"#runtime-版本-mount\" class=\"headerlink\" title=\"runtime 版本 $mount\"></a>runtime 版本 $mount<hr></h3><pre><code class=\"js\">// ...\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// ...\n</code></pre>\n<p>执行过程</p>\n<ul>\n<li>挂载的元素，可以是字符串，也可以是DOM对象，如果是字符串通过 query 方法转换成DOM</li>\n<li>执行 mountComponent 函数传入三个参数</li>\n</ul>\n<p>通过上面代码可以看出并没有经过 compileToFunctions方法 进行转换编译阶段，而直接是 render –&gt; VNode 过程。</p>\n<p>接下来我们接着查看 mountComponent方法调用，打开文件<code>src/core/instance/lifecycle.js</code></p>\n<pre><code class=\"js\">export function mountComponent (\n  vm: Component,\n  el: ?Element,\n  hydrating?: boolean\n): Component {\n  vm.$el = el\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode\n    // ...\n  }\n  callHook(vm, &#39;beforeMount&#39;)\n\n  let updateComponent\n\n  // ...\n\n  updateComponent = () =&gt; {\n    vm._update(vm._render(), hydrating)\n  }\n\n  // ...\n\n  // we set this to vm._watcher inside the watcher&#39;s constructor\n  // since the watcher&#39;s initial patch may call $forceUpdate (e.g. inside child\n  // component&#39;s mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before () {\n      if (vm._isMounted &amp;&amp; !vm._isDestroyed) {\n        callHook(vm, &#39;beforeUpdate&#39;)\n      }\n    }\n  }, true /* isRenderWatcher */)\n  hydrating = false\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true\n    callHook(vm, &#39;mounted&#39;)\n  }\n  return vm\n}</code></pre>\n<p>通过上面代码很直观的看见 mountComponent 方法主要作用</p>\n<ul>\n<li>判断 render 函数是不是存在如果不存在调用创建 createEmptyVNode 方法创建一个空VNode节点</li>\n<li>检测完 render 开始挂载 beforeMount 钩子</li>\n<li>执行 new Watcher方法()</li>\n<li>_isMounted状态设置true， 开始挂载mounted</li>\n</ul>\n<p>Watcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM</p>\n<p>Watcher 初始化的时候会执行回调函数，当 vm 实例中的监测的数据发生变化的时候也会执行回调函数，这就是我们说的观察者进行依赖收集的过程,当然这也是 vue 核心原理的一部分。new Watcher到底做了什么我们在后面的单独整理，先以主线程为主</p>\n<h2 id=\"vm-render\"><a href=\"#vm-render\" class=\"headerlink\" title=\"vm._render\"></a>vm._render</h2><p>上文中提到 Watcher 在它的回调函数中会调用 updateComponent 方法，在此方法中调用 vm._render 方法生成虚拟 Node节点，最后调用 vm._update 更新 DOM，那么就出现私有方法 vm._render 和 vm._update 两个最核心的方法。</p>\n<p>_render 定义在 <code>src/core/instance/render.js</code> 中</p>\n<pre><code class=\"js\">\n  // ...\n  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    const { render, _parentVnode } = vm.$options\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      )\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode\n    // render self\n    let vnode\n    try {\n      // There&#39;s no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component&#39;s render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      handleError(e, vm, `render`)\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n        } catch (e) {\n          handleError(e, vm, `renderError`)\n          vnode = vm._vnode\n        }\n      } else {\n        vnode = vm._vnode\n      }\n    } finally {\n      currentRenderingInstance = null\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) &amp;&amp; vnode.length === 1) {\n      vnode = vnode[0]\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; Array.isArray(vnode)) {\n        warn(\n          &#39;Multiple root nodes returned from render function. Render function &#39; +\n          &#39;should return a single root node.&#39;,\n          vm\n        )\n      }\n      vnode = createEmptyVNode()\n    }\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }</code></pre>\n<p>上面这段代码最关键的地方就是调用 render 方法 <code>render.call(vm._renderProxy, vm.$createElement)</code>，在上面说过在 mounted 方法中会把 template 和 string 经过 compileToFunctions 编译最后形成 render 方法进行渲染，但这是用字符串模版的形式，如果用字符串模板的代替方案 render 方法呢</p>\n<pre><code class=\"js\">new Vue({\n  render: function (createElement) {\n   return createElement(&#39;div&#39;, {\n     attrs: {\n        id: &#39;app&#39;\n      },\n  }, this.message)\n  },\n  renderError: function(createElement, err) {\n    return createElement(&#39;pre&#39;, { style: { color: &#39;red&#39; }}, err.stack)\n  }\n}).$mount(&#39;#app&#39;)</code></pre>\n<p>我们可以看出render 方法的参数 createElement 实际上就是 vm.$createElement,然而 vm.$createElement 在初始化中就已经执行过了</p>\n<pre><code class=\"js\">export function initRender (vm: Component) {\n\n  // ...\n\n  vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false)\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)\n\n  // $attrs &amp; $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  const parentData = parentVnode &amp;&amp; parentVnode.data\n\n  // ...\n\n}</code></pre>\n<p>所以在 initRender 方法的时候，除了 vm.$createElement 方法，还有一个 vm._c 方法，它是被模板编译成的 render 函数使用，但 vm.$createElement 是我们用原生写的 render 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 createElement 方法。</p>\n<p>官网中一句话说的很清楚 <strong>Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。</strong></p>\n<p>通过上述总结到 render 函数最终是执行 createElement 方法 返回 vnode 节点，这是一个虚拟 node 而 vue2.0 的 另一个核心就是利用了Virtual DOM，实际上 Vue.js 中 Virtual DOM 是借鉴了开源库 <a href=\"https://github.com/snabbdom/snabbdom\" target=\"_blank\" rel=\"noopener\">snabbdom</a> 的实现，然后加入了一些 Vue.js 特色的东西, 这部分源码就在 <code>src/core/vdom/vnode.js</code> 中我们暂时不去查看，待后续文章写到 Virtual DOM 的时候我们在做分析。 </p>\n<p>那么在面试中我们经常被问到是 操作 Virtual DOM 快还是真实 DOM 快</p>\n<p>答案是相对的在数据量大的情况下，肯定是 Virtual DOM 快，因为通过对比 node 减少频繁的去更新DOM， 如果数据量相对较小的情况还是直接操作 DOM 较快，因为少了编译、遍历、对比的过程</p>\n<h2 id=\"vm-createElement\"><a href=\"#vm-createElement\" class=\"headerlink\" title=\"vm.$createElement\"></a>vm.$createElement</h2><p>上面文章提到 render 的时候内部调用了 createElement 方法，创建了vnode，该方法定义在 src/core/vdom/create-elemenet.js 中</p>\n<pre><code class=\"js\">// ...\n\nexport function _createElement (\n  context: Component,\n  tag?: string | Class&lt;Component&gt; | Function | Object,\n  data?: VNodeData,\n  children?: any,\n  normalizationType?: number\n): VNode | Array&lt;VNode&gt; {\n\n   /**\n   * 如果存在data.__ob__，说明data是被Observer观察的数据\n   * 不能用作虚拟节点的data\n   * 需要抛出警告，并返回一个空节点\n   *\n   * 被监控的data不能被用作vnode渲染的数据的原因是：\n   * data在vnode渲染过程中可能会被改变，这样会触发监控，导致不符合预期的操作\n   */   \n  if (isDef(data) &amp;&amp; isDef((data: any).__ob__)) {\n    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n      `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\\n` +\n      &#39;Always create fresh vnode data objects in each render!&#39;,\n      context\n    )\n    return createEmptyVNode()\n  }\n\n  // 当通过 :is 动态设置组件时\n  if (isDef(data) &amp;&amp; isDef(data.is)) {\n    tag = data.is\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n\n\n  // ...\n\n  // 作用域插槽\n  if (Array.isArray(children) &amp;&amp;\n    typeof children[0] === &#39;function&#39;\n  ) {\n    data = data || {}\n    data.scopedSlots = { default: children[0] }\n    children.length = 0\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children)\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children)\n  }\n  let vnode, ns\n  if (typeof tag === &#39;string&#39;) {\n    let Ctor\n    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; isDef(data) &amp;&amp; isDef(data.nativeOn)) {\n        warn(\n          `The .native modifier for v-on is only valid on components but it was used on &lt;${tag}&gt;.`,\n          context\n        )\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      )\n    } else if ((!data || !data.pre) &amp;&amp; isDef(Ctor = resolveAsset(context.$options, &#39;components&#39;, tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag)\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      )\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children)\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) applyNS(vnode, ns)\n    if (isDef(data)) registerDeepBindings(data)\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\n// ...\n</code></pre>\n<p>通过上面代码我们看到 主要调用了几个方法 createEmptyVNode 和 createComponent、normalizeChildren、simpleNormalizeChildren</p>\n<p>我们简单的看一下执行步骤</p>\n<p>首先判断了 tag 是否存在，如果不存在则调用 <code>src/core/vdom/vnode.js</code>目录下的 createEmptyVNode 方法创建空的 vnode 节点</p>\n<p>如果传递了children，由于其是任意类型，所以根据 normalizationType 去调用<code>src/core/vdom/helpers/normalzie-children.js</code> 目录下的 normalizeChildren(children) 和 simpleNormalizeChildren(children) 方法进行递归遍历，把整个 children 打平，让它变成深度只有一层的 vnode 数组</p>\n<p>最后通过 对参数 tag 的判断，如果是一个普通的 html 标签，则实例化一个普通 vnode 节点，否则通过 <code>src/core/vdom/create-component.js</code>目录下的 createComponent 方法创建一个组件的 vnode</p>\n<p>因为除了组件的 vnode 没有 children，其他通过 createElement 创建的每个 vnode 都有 children，children 每个元素也是一个 vnode，这样就形成了一个 vnode tree，这样我们就知道 vm._render 阶段是如何创建的 vnode，那么接下来我们就通过 vm._update，将 vnode 渲染成真实的 dom。</p>\n<h2 id=\"vm-update\"><a href=\"#vm-update\" class=\"headerlink\" title=\"vm._update\"></a>vm._update</h2><p>vm._update 也是一个私有方法，作用是把 vnode 渲染成真实的 dom 在 <code>src/core/instance/lifecycle.js</code> 文件中定义</p>\n<h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"_update \"></a>_update <hr></h3><pre><code class=\"js\">\n  // ...\n\n\n  Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n    const vm: Component = this\n    const prevEl = vm.$el\n    const prevVnode = vm._vnode\n    const restoreActiveInstance = setActiveInstance(vm)\n    vm._vnode = vnode\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n    restoreActiveInstance()\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent&#39;s updated hook.\n  }\n\n  // ...</code></pre>\n<p>通过上面代码我们知道 vm.<em>update 的核心就是通过 vm.<strong>patch</strong>函数来实现将 vnode 转换成真实的 node 节点，而 vm.<em>_patch</em></em> 的实现是多平台的有weex、ssr、inBrowser，我们只查看在浏览器环境内的实现</p>\n<p>在 <code>src/platforms/web/runtime/index.js</code> 通过判断如果是浏览器环境调用 patch，否则创建一个空对象</p>\n<h3 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch \"></a><strong>patch</strong> <hr></h3><pre><code class=\"js\">// ...\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// ...</code></pre>\n<p>通过引用我们到 <code>src/platforms/web/runtime/patch.js</code> 目录下调用了 createPatchFunction 方法的返回值</p>\n<pre><code class=\"js\">export const patch: Function = createPatchFunction({ nodeOps, modules })</code></pre>\n<h3 id=\"createPatchFunction\"><a href=\"#createPatchFunction\" class=\"headerlink\" title=\"createPatchFunction \"></a>createPatchFunction <hr></h3><p>在通过查找文件 <code>src/core/vdom/patch.js</code> 中定义的 createPatchFunction 方法</p>\n<pre><code class=\"js\">\n// ...\n\nexport function createPatchFunction (backend) {\n\n  // ...\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    // 如果 vnode 不存在但 oldVnode 存在，调用 invokeDestroyHook(oldVnode) 来进行销毁旧节点\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n      return\n    }\n\n    let isInitialPatch = false\n    const insertedVnodeQueue = []\n\n    // 如果oldVnode不存在，vnode存在，则创建新节点  \n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true\n      createElm(vnode, insertedVnodeQueue)\n    } else {\n\n      const isRealElement = isDef(oldVnode.nodeType)\n      // 如果 oldVnode 与 vnode 都存在判断是同一节点调用 patchVnode 处理去比较两个节点的差异\n      if (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)\n      } else {\n\n        if (isRealElement) {\n\n          // 如果存在真实的节点，存在data-server-rendered属性，将 hydrating 变为true\n          if (oldVnode.nodeType === 1 &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR)\n            hydrating = true\n          }\n\n          // 用hydrate函数将虚拟DOM和真实DOM进行映射\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true)\n              return oldVnode\n            }\n            // ...\n          }\n\n          // 如果不是server-rendered 或者hydration失败\n          // 创建一个空VNode，代替oldVnode\n          oldVnode = emptyNodeAt(oldVnode)\n        }\n\n        // 将oldVnode设置为对应的虚拟dom，找到oldVnode.elm的父节点\n        // 根据vnode创建一个真实dom节点并插入到该父节点中oldVnode.elm的位置\n        const oldElm = oldVnode.elm\n        const parentElm = nodeOps.parentNode(oldElm)\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        )\n\n        // 递归更新父级占位节点元素，\n        if (isDef(vnode.parent)) {\n          let ancestor = vnode.parent\n          const patchable = isPatchable(vnode)\n          while (ancestor) {\n            for (let i = 0; i &lt; cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor)\n            }\n            ancestor.elm = vnode.elm\n            if (patchable) {\n              for (let i = 0; i &lt; cbs.create.length; ++i) {\n                cbs.create[i](emptyNode, ancestor)\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the &quot;inserted&quot; hook.\n              const insert = ancestor.data.hook.insert\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (let i = 1; i &lt; insert.fns.length; i++) {\n                  insert.fns[i]()\n                }\n              }\n            } else {\n              registerRef(ancestor)\n            }\n            ancestor = ancestor.parent\n          }\n        }\n\n        // 销毁旧节点\n        if (isDef(parentElm)) {\n          removeVnodes(parentElm, [oldVnode], 0, 0)\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode)\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)\n\n    // 返回节点\n    return vnode.elm\n  }\n}\n</code></pre>\n<p>通过上面看到 patch 方法本身</p>\n<p>接收 4个参数</p>\n<ul>\n<li>oldVnode 表示旧的 VNode 节点或者或者是一个 DOM 对象</li>\n<li>vnode 表示执行 _render 后返回的 VNode 的节点</li>\n<li>hydrating 表示是否是服务端渲染</li>\n<li>removeOnly 是给 transition-group 用的，防止在 updateChildren 阶段，移动 vnode 节点</li>\n</ul>\n<p>关键调用三个方法</p>\n<ul>\n<li>createElm 以当前旧节点为参考节点，创建新的节点，执行相关的 insert 钩子函数，并插入到 DOM 中，</li>\n<li>sameVnode 通过对比 key 是否相同、tag、注释、data是否存在等判断2个节点，是否是同一个节点</li>\n<li>patchVnode vdom 核心更新 node</li>\n</ul>\n<p>patchVode 中的几个核心方法 addVnodes、 removeVnodes，updateChildren，具体是怎么增加、删除，更新 vnode 和 dom 节点的，dom-diff 比较复杂，我们会在分析响应式原理的时候具体查看细节</p>\n<h3 id=\"主流程总结\"><a href=\"#主流程总结\" class=\"headerlink\" title=\"主流程总结\"></a>主流程总结<hr></h3><p>下面我们通过一张图来总结 vue 主线流程</p>\n<img src=\"/images/vue-process.png\">\n\n<p>上面的图中能够直观的看到 vue 主干的执行流程，但是缺少核心部分，也就是 vue 的响应式原理，下篇文章我们也是通过文件的执行过程来分析 vue 响应式原理的实现</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0546n6p0006kuu6769lju18","category_id":"ck0546n6v0008kuu6raxcalha","_id":"ck0546n74000ikuu6d0yjzhdp"},{"post_id":"ck0546n72000gkuu6iuh3kt2o","category_id":"ck0546n71000dkuu6gfkua8y8","_id":"ck0546n78000pkuu63tgzq3lv"},{"post_id":"ck0546n6t0007kuu6jmyuzdtq","category_id":"ck0546n71000dkuu6gfkua8y8","_id":"ck0546n7b000tkuu6sqd94afz"},{"post_id":"ck0546n6x000akuu6jicslpeu","category_id":"ck0546n71000dkuu6gfkua8y8","_id":"ck0546n7d000xkuu6ckkovsj9"},{"post_id":"ck0546n6y000bkuu6ia867ky4","category_id":"ck0546n71000dkuu6gfkua8y8","_id":"ck0546n7g0013kuu6g157y72h"},{"post_id":"ck0546n6z000ckuu66aaxtqna","category_id":"ck0546n71000dkuu6gfkua8y8","_id":"ck0546n7j0018kuu67e8ewowo"},{"post_id":"ck0546n73000hkuu60gciwyw0","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n7n001fkuu62nqjkg2m"},{"post_id":"ck0546n76000mkuu6mmmt6hb6","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n7r001mkuu6bfmrpngh"},{"post_id":"ck0546n7m001dkuu6dlbihjd3","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n7t001qkuu65t4k688h"},{"post_id":"ck0546n78000okuu6bdosih4n","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n7v001ukuu6r1sd9y8s"},{"post_id":"ck0546n7q001jkuu6npltf2c1","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n7x001ykuu69bsmlevg"},{"post_id":"ck0546n7s001okuu6mixobtlu","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n7z0022kuu66u5of0eg"},{"post_id":"ck0546n7a000skuu6hp38zhi6","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n840026kuu6xxwdjlcq"},{"post_id":"ck0546n7t001rkuu653ufar2q","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n85002akuu6o30hugnq"},{"post_id":"ck0546n7w001wkuu6c70ge0df","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n86002ekuu6hge0c7ci"},{"post_id":"ck0546n7c000vkuu6bq4sckjx","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n87002hkuu6neubh8dw"},{"post_id":"ck0546n7y001zkuu6kia655m1","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n8a002mkuu6did920dl"},{"post_id":"ck0546n800024kuu6k8efhcaw","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n8b002pkuu6mkqon10g"},{"post_id":"ck0546n7e000zkuu6wa4jz3si","category_id":"ck0546n7g0012kuu6i9wbj9o5","_id":"ck0546n8d002ukuu6uxpy2wqu"},{"post_id":"ck0546n7f0011kuu60j8cpgtu","category_id":"ck0546n850029kuu6zs9rt8ji","_id":"ck0546n8e002xkuu6984yzrq4"},{"post_id":"ck0546n7g0015kuu6iiq6dxwb","category_id":"ck0546n850029kuu6zs9rt8ji","_id":"ck0546n8f0031kuu69q2dhulh"},{"post_id":"ck0546n7i0017kuu6pn2j7ccq","category_id":"ck0546n850029kuu6zs9rt8ji","_id":"ck0546n8h0035kuu6d9i40ayu"},{"post_id":"ck0546n7k001bkuu6g1v3kcfy","category_id":"ck0546n850029kuu6zs9rt8ji","_id":"ck0546n8k003bkuu6o5uzwdhc"},{"post_id":"ck0546n7o001hkuu6asjnu4ee","category_id":"ck0546n850029kuu6zs9rt8ji","_id":"ck0546n8n003gkuu6fw3kgd5m"},{"post_id":"ck0546n840027kuu6yw9kooyt","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n8s003okuu69gpjs7uc"},{"post_id":"ck0546n85002ckuu686ui742x","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n8v003ukuu6sffykkqc"},{"post_id":"ck0546n86002fkuu6l1cmzpbs","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n8z0040kuu6qu7upadd"},{"post_id":"ck0546n88002kkuu6pul4r4qq","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n920046kuu67ljw4r56"},{"post_id":"ck0546n8a002nkuu6kwlqc3kz","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n97004ckuu6c04o3d3s"},{"post_id":"ck0546n8b002skuu61excidfa","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n9a004ikuu6gwiv4x9u"},{"post_id":"ck0546n8d002vkuu6bd44892s","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n9d004okuu66dwlfkuq"},{"post_id":"ck0546n8e0030kuu6a3501240","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n9f004ukuu6drpwhbck"},{"post_id":"ck0546n8g0033kuu6stcipna6","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n9h004zkuu6engtebba"},{"post_id":"ck0546n8h0037kuu6xe75cq10","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9l0056kuu68fcak6o4"},{"post_id":"ck0546n8j0039kuu6ob0iaop1","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9o005ckuu6dcm5zs7k"},{"post_id":"ck0546n8k003dkuu6vsvw35ur","category_id":"ck0546n8k003akuu6lftjz68q","_id":"ck0546n9r005ikuu6zfi9ecis"},{"post_id":"ck0546n8m003fkuu6jlw9l8ph","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9u005okuu6j87srouq"},{"post_id":"ck0546n8n003hkuu6052nu0sk","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9w005skuu67z5jn083"},{"post_id":"ck0546n8p003lkuu67mslrye1","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9x005wkuu6xvbed0m9"},{"post_id":"ck0546n8r003mkuu67hh2rsx3","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9y0060kuu6n0k5iga6"},{"post_id":"ck0546n8t003rkuu6gysj9yle","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546n9z0064kuu6wvd4qlj7"},{"post_id":"ck0546n8u003skuu6xo8xi7p8","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546na00068kuu6bs24siqh"},{"post_id":"ck0546n8w003xkuu6abfc7yll","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546na0006ckuu6t01tm2iq"},{"post_id":"ck0546n8y003ykuu6kfzwrjtm","category_id":"ck0546n9f004tkuu6239p7k8h","_id":"ck0546na1006fkuu6rhv6s85f"},{"post_id":"ck0546n900043kuu68af4qqeu","category_id":"ck0546na0006bkuu6qcpkgj5e","_id":"ck0546na3006kkuu6kr5py7rk"},{"post_id":"ck0546n910044kuu6pd6zf7hm","category_id":"ck0546na0006bkuu6qcpkgj5e","_id":"ck0546na5006okuu6rruwu7l7"},{"post_id":"ck0546n930049kuu6anzouidw","category_id":"ck0546na0006bkuu6qcpkgj5e","_id":"ck0546na6006rkuu6v4fs4fx0"},{"post_id":"ck0546n94004akuu6qftis9hc","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546na7006wkuu6kztqzinn"},{"post_id":"ck0546n97004fkuu6rxkdxvys","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546na80070kuu6miuw4dbl"},{"post_id":"ck0546n98004gkuu69pwbujru","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546na90074kuu68tyd4gyn"},{"post_id":"ck0546n9b004lkuu6qwdg9ekc","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546naa0078kuu6ydli811t"},{"post_id":"ck0546n9c004mkuu6zg3vbsvv","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nac007ckuu651o9hj1l"},{"post_id":"ck0546n9d004rkuu610wql5lv","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nad007gkuu6sjbtr72o"},{"post_id":"ck0546n9e004skuu6qq1uk5f3","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nae007kkuu60rtwk73i"},{"post_id":"ck0546n9g004xkuu6je3x3boy","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546naf007okuu68c8098gy"},{"post_id":"ck0546n9h004ykuu65c6m9dpp","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nag007skuu6o4j0pe1o"},{"post_id":"ck0546n9i0052kuu6encwjqah","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nah007wkuu6wk6714rz"},{"post_id":"ck0546n9k0054kuu6yv7y2x5h","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nai0080kuu6t3yvndni"},{"post_id":"ck0546n9m0058kuu6mb13xes4","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nai0084kuu6h0ytfi6l"},{"post_id":"ck0546n9n005akuu6y2mxzl06","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546naj0088kuu6dpf5wh55"},{"post_id":"ck0546n9p005ekuu6homvekhy","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nak008ckuu6z2syd11z"},{"post_id":"ck0546n9q005gkuu6hodhfzgn","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nal008gkuu698pixohv"},{"post_id":"ck0546n9s005kkuu6qygremna","category_id":"ck0546na5006nkuu6vosx55mm","_id":"ck0546nam008jkuu68mdeyvqf"},{"post_id":"ck0546n9t005mkuu6epby0tqa","category_id":"ck0546nal008fkuu6rv206ofr","_id":"ck0546nan008lkuu6ol1rv2el"}],"PostTag":[{"post_id":"ck0546n6p0006kuu6769lju18","tag_id":"ck0546n6x0009kuu6y62kb4c3","_id":"ck0546n71000fkuu6usda5u78"},{"post_id":"ck0546n72000gkuu6iuh3kt2o","tag_id":"ck0546n71000ekuu6phagxrrg","_id":"ck0546n76000lkuu6153xb3rc"},{"post_id":"ck0546n6t0007kuu6jmyuzdtq","tag_id":"ck0546n71000ekuu6phagxrrg","_id":"ck0546n78000nkuu67zptz3mx"},{"post_id":"ck0546n6x000akuu6jicslpeu","tag_id":"ck0546n71000ekuu6phagxrrg","_id":"ck0546n7b000ukuu60zxvb1j1"},{"post_id":"ck0546n6y000bkuu6ia867ky4","tag_id":"ck0546n71000ekuu6phagxrrg","_id":"ck0546n7e0010kuu6byju68aa"},{"post_id":"ck0546n6z000ckuu66aaxtqna","tag_id":"ck0546n71000ekuu6phagxrrg","_id":"ck0546n7h0016kuu6d7bz9gge"},{"post_id":"ck0546n73000hkuu60gciwyw0","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7l001ckuu6fmkpcs1w"},{"post_id":"ck0546n76000mkuu6mmmt6hb6","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7p001ikuu63rfj6fcp"},{"post_id":"ck0546n7m001dkuu6dlbihjd3","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7r001kkuu6ikpchsrs"},{"post_id":"ck0546n78000okuu6bdosih4n","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7t001pkuu6b5wkv6is"},{"post_id":"ck0546n7q001jkuu6npltf2c1","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7u001skuu6vwrgp1sk"},{"post_id":"ck0546n7s001okuu6mixobtlu","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7x001xkuu6ludya5v2"},{"post_id":"ck0546n7a000skuu6hp38zhi6","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n7z0020kuu6unly3lo6"},{"post_id":"ck0546n7t001rkuu653ufar2q","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n830025kuu6otmebwb0"},{"post_id":"ck0546n7w001wkuu6c70ge0df","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n850028kuu69v3ny4hr"},{"post_id":"ck0546n7c000vkuu6bq4sckjx","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n86002dkuu6i8f52440"},{"post_id":"ck0546n7y001zkuu6kia655m1","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n87002gkuu6lnhw0z9w"},{"post_id":"ck0546n800024kuu6k8efhcaw","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n89002lkuu6rpunwsb7"},{"post_id":"ck0546n7e000zkuu6wa4jz3si","tag_id":"ck0546n7g0014kuu6przzbdw7","_id":"ck0546n8b002okuu6kq44oacv"},{"post_id":"ck0546n7f0011kuu60j8cpgtu","tag_id":"ck0546n85002bkuu6b8r04cbl","_id":"ck0546n8d002tkuu6z9c9x20x"},{"post_id":"ck0546n7g0015kuu6iiq6dxwb","tag_id":"ck0546n85002bkuu6b8r04cbl","_id":"ck0546n8e002wkuu64rj6elly"},{"post_id":"ck0546n7i0017kuu6pn2j7ccq","tag_id":"ck0546n85002bkuu6b8r04cbl","_id":"ck0546n8g0032kuu6dbum6fc0"},{"post_id":"ck0546n7k001bkuu6g1v3kcfy","tag_id":"ck0546n85002bkuu6b8r04cbl","_id":"ck0546n8j0038kuu6xk3ytx5f"},{"post_id":"ck0546n7o001hkuu6asjnu4ee","tag_id":"ck0546n85002bkuu6b8r04cbl","_id":"ck0546n8m003ekuu6bbfx5z5y"},{"post_id":"ck0546n840027kuu6yw9kooyt","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n8p003kkuu643lj7102"},{"post_id":"ck0546n85002ckuu686ui742x","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n8t003qkuu63kgrloyf"},{"post_id":"ck0546n86002fkuu6l1cmzpbs","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n8w003wkuu6k6ejlt83"},{"post_id":"ck0546n88002kkuu6pul4r4qq","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n900042kuu6gyns8eg2"},{"post_id":"ck0546n8a002nkuu6kwlqc3kz","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n930048kuu6rb1vofnl"},{"post_id":"ck0546n8b002skuu61excidfa","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n97004ekuu6x8duiyqp"},{"post_id":"ck0546n8d002vkuu6bd44892s","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n9a004kkuu60iymvqcb"},{"post_id":"ck0546n8e0030kuu6a3501240","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n9d004qkuu62hdzhh3z"},{"post_id":"ck0546n8g0033kuu6stcipna6","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n9g004wkuu6vr7uuaoa"},{"post_id":"ck0546n8h0037kuu6xe75cq10","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9j0053kuu6ztnql2kx"},{"post_id":"ck0546n8j0039kuu6ob0iaop1","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9n0059kuu6ltx4ym0o"},{"post_id":"ck0546n8k003dkuu6vsvw35ur","tag_id":"ck0546n8k003ckuu6y44yxgei","_id":"ck0546n9q005fkuu61npn7q8i"},{"post_id":"ck0546n8m003fkuu6jlw9l8ph","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9t005lkuu6jvoucxx1"},{"post_id":"ck0546n8n003hkuu6052nu0sk","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9v005qkuu6dsanoqwj"},{"post_id":"ck0546n8p003lkuu67mslrye1","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9w005ukuu6yxw2j1sc"},{"post_id":"ck0546n8r003mkuu67hh2rsx3","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9x005ykuu6e79r0uxg"},{"post_id":"ck0546n8t003rkuu6gysj9yle","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9y0062kuu6l4kbb1oo"},{"post_id":"ck0546n8u003skuu6xo8xi7p8","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546n9z0066kuu6zhww88ra"},{"post_id":"ck0546n8w003xkuu6abfc7yll","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546na0006akuu61voql3sk"},{"post_id":"ck0546n8y003ykuu6kfzwrjtm","tag_id":"ck0546n9f004vkuu6ius86elk","_id":"ck0546na1006ekuu6wlgpf298"},{"post_id":"ck0546n900043kuu68af4qqeu","tag_id":"ck0546na0006dkuu6tjvmkbyw","_id":"ck0546na2006ikuu67sv2xpkr"},{"post_id":"ck0546n910044kuu6pd6zf7hm","tag_id":"ck0546na0006dkuu6tjvmkbyw","_id":"ck0546na5006mkuu61risihdk"},{"post_id":"ck0546n930049kuu6anzouidw","tag_id":"ck0546na0006dkuu6tjvmkbyw","_id":"ck0546na5006qkuu6a4u11jm5"},{"post_id":"ck0546n94004akuu6qftis9hc","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546na7006ukuu6j6z396zu"},{"post_id":"ck0546n97004fkuu6rxkdxvys","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546na8006ykuu61sd00m3r"},{"post_id":"ck0546n98004gkuu69pwbujru","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546na90072kuu6follqung"},{"post_id":"ck0546n9b004lkuu6qwdg9ekc","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546naa0076kuu6jewag933"},{"post_id":"ck0546n9c004mkuu6zg3vbsvv","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nab007akuu6agtqb58x"},{"post_id":"ck0546n9d004rkuu610wql5lv","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nad007ekuu6jfa5ljwm"},{"post_id":"ck0546n9e004skuu6qq1uk5f3","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nae007ikuu6xwtxtyey"},{"post_id":"ck0546n9g004xkuu6je3x3boy","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546naf007mkuu6l1yv7x1d"},{"post_id":"ck0546n9h004ykuu65c6m9dpp","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546naf007qkuu6ibcaav53"},{"post_id":"ck0546n9i0052kuu6encwjqah","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nag007ukuu66ebdqjor"},{"post_id":"ck0546n9k0054kuu6yv7y2x5h","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nah007ykuu6gdod8hph"},{"post_id":"ck0546n9m0058kuu6mb13xes4","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nai0082kuu6l76i0sh2"},{"post_id":"ck0546n9n005akuu6y2mxzl06","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546naj0086kuu6ns109tk6"},{"post_id":"ck0546n9p005ekuu6homvekhy","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nak008akuu6rmbafrz7"},{"post_id":"ck0546n9q005gkuu6hodhfzgn","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nal008ekuu6rqhucju6"},{"post_id":"ck0546n9s005kkuu6qygremna","tag_id":"ck0546na5006pkuu67m6j88th","_id":"ck0546nal008ikuu65slfgbif"},{"post_id":"ck0546n9t005mkuu6epby0tqa","tag_id":"ck0546nal008hkuu6l49ygh76","_id":"ck0546nan008kkuu6unzj2ol4"}],"Tag":[{"name":"HTML","_id":"ck0546n6x0009kuu6y62kb4c3"},{"name":"CSS","_id":"ck0546n71000ekuu6phagxrrg"},{"name":"JavaScript","_id":"ck0546n7g0014kuu6przzbdw7"},{"name":"函数式编程","_id":"ck0546n85002bkuu6b8r04cbl"},{"name":"Linux","_id":"ck0546n8k003ckuu6y44yxgei"},{"name":"Node","_id":"ck0546n9f004vkuu6ius86elk"},{"name":"PHP","_id":"ck0546na0006dkuu6tjvmkbyw"},{"name":"TypeScript","_id":"ck0546na5006pkuu67m6j88th"},{"name":"vue","_id":"ck0546nal008hkuu6l49ygh76"}]}}